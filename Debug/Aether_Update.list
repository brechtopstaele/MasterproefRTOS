
Aether_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006914  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006ab4  08006ab4  00007ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c64  08006c64  000080a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006c64  08006c64  00007c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c6c  08006c6c  000080a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c6c  08006c6c  00007c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c70  08006c70  00007c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006c74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042c8  200000a4  08006d18  000080a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000436c  08006d18  0000836c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001643d  00000000  00000000  000080d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038ba  00000000  00000000  0001e511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00021dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebf  00000000  00000000  000230f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a065  00000000  00000000  00023faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001707c  00000000  00000000  0003e014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099078  00000000  00000000  00055090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee108  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000575c  00000000  00000000  000ee14c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f38a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a9c 	.word	0x08006a9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08006a9c 	.word	0x08006a9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000586:	2306      	movs	r3, #6
 8000588:	847b      	strh	r3, [r7, #34]	@ 0x22
 800058a:	2306      	movs	r3, #6
 800058c:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	83fb      	strh	r3, [r7, #30]
 8000596:	2300      	movs	r3, #0
 8000598:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800059a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800059e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80005a4:	4ba1      	ldr	r3, [pc, #644]	@ (800082c <EE_Init+0x2ac>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80005aa:	4ba1      	ldr	r3, [pc, #644]	@ (8000830 <EE_Init+0x2b0>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80005c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80005c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d00b      	beq.n	80005e2 <EE_Init+0x62>
 80005ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80005ce:	f280 8196 	bge.w	80008fe <EE_Init+0x37e>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f000 80f8 	beq.w	80007c8 <EE_Init+0x248>
 80005d8:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 80005dc:	4293      	cmp	r3, r2
 80005de:	d050      	beq.n	8000682 <EE_Init+0x102>
 80005e0:	e18d      	b.n	80008fe <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80005e2:	8c3b      	ldrh	r3, [r7, #32]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d116      	bne.n	8000616 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80005e8:	4890      	ldr	r0, [pc, #576]	@ (800082c <EE_Init+0x2ac>)
 80005ea:	f000 f9a9 	bl	8000940 <EE_VerifyPageFullyErased>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f040 818e 	bne.w	8000912 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80005f6:	f107 0214 	add.w	r2, r7, #20
 80005fa:	463b      	mov	r3, r7
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fd7e 	bl	8002100 <HAL_FLASHEx_Erase>
 8000604:	4603      	mov	r3, r0
 8000606:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000608:	7efb      	ldrb	r3, [r7, #27]
 800060a:	2b00      	cmp	r3, #0
 800060c:	f000 8181 	beq.w	8000912 <EE_Init+0x392>
          {
            return FlashStatus;
 8000610:	7efb      	ldrb	r3, [r7, #27]
 8000612:	b29b      	uxth	r3, r3
 8000614:	e185      	b.n	8000922 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000616:	8c3b      	ldrh	r3, [r7, #32]
 8000618:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800061c:	4293      	cmp	r3, r2
 800061e:	d125      	bne.n	800066c <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000620:	4882      	ldr	r0, [pc, #520]	@ (800082c <EE_Init+0x2ac>)
 8000622:	f000 f98d 	bl	8000940 <EE_VerifyPageFullyErased>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d10e      	bne.n	800064a <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800062c:	f107 0214 	add.w	r2, r7, #20
 8000630:	463b      	mov	r3, r7
 8000632:	4611      	mov	r1, r2
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fd63 	bl	8002100 <HAL_FLASHEx_Erase>
 800063a:	4603      	mov	r3, r0
 800063c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800063e:	7efb      	ldrb	r3, [r7, #27]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <EE_Init+0xca>
          {
            return FlashStatus;
 8000644:	7efb      	ldrb	r3, [r7, #27]
 8000646:	b29b      	uxth	r3, r3
 8000648:	e16b      	b.n	8000922 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800064a:	f04f 0200 	mov.w	r2, #0
 800064e:	f04f 0300 	mov.w	r3, #0
 8000652:	4977      	ldr	r1, [pc, #476]	@ (8000830 <EE_Init+0x2b0>)
 8000654:	2001      	movs	r0, #1
 8000656:	f001 fb9d 	bl	8001d94 <HAL_FLASH_Program>
 800065a:	4603      	mov	r3, r0
 800065c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800065e:	7efb      	ldrb	r3, [r7, #27]
 8000660:	2b00      	cmp	r3, #0
 8000662:	f000 8156 	beq.w	8000912 <EE_Init+0x392>
        {
          return FlashStatus;
 8000666:	7efb      	ldrb	r3, [r7, #27]
 8000668:	b29b      	uxth	r3, r3
 800066a:	e15a      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800066c:	f000 f9fe 	bl	8000a6c <EE_Format>
 8000670:	4603      	mov	r3, r0
 8000672:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000674:	7efb      	ldrb	r3, [r7, #27]
 8000676:	2b00      	cmp	r3, #0
 8000678:	f000 814b 	beq.w	8000912 <EE_Init+0x392>
        {
          return FlashStatus;
 800067c:	7efb      	ldrb	r3, [r7, #27]
 800067e:	b29b      	uxth	r3, r3
 8000680:	e14f      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8000682:	8c3b      	ldrh	r3, [r7, #32]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d163      	bne.n	8000750 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000688:	2300      	movs	r3, #0
 800068a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800068c:	e030      	b.n	80006f0 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800068e:	4b69      	ldr	r3, [pc, #420]	@ (8000834 <EE_Init+0x2b4>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b29a      	uxth	r2, r3
 8000694:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000696:	4968      	ldr	r1, [pc, #416]	@ (8000838 <EE_Init+0x2b8>)
 8000698:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800069c:	429a      	cmp	r2, r3
 800069e:	d101      	bne.n	80006a4 <EE_Init+0x124>
          {
            x = VarIdx;
 80006a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 80006a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80006a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d01d      	beq.n	80006ea <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80006ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006b0:	4a61      	ldr	r2, [pc, #388]	@ (8000838 <EE_Init+0x2b8>)
 80006b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b6:	4961      	ldr	r1, [pc, #388]	@ (800083c <EE_Init+0x2bc>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f96b 	bl	8000994 <EE_ReadVariable>
 80006be:	4603      	mov	r3, r0
 80006c0:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d010      	beq.n	80006ea <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80006c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006ca:	4a5b      	ldr	r2, [pc, #364]	@ (8000838 <EE_Init+0x2b8>)
 80006cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d0:	4a5a      	ldr	r2, [pc, #360]	@ (800083c <EE_Init+0x2bc>)
 80006d2:	8812      	ldrh	r2, [r2, #0]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fa60 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 80006dc:	4603      	mov	r3, r0
 80006de:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80006e0:	8bfb      	ldrh	r3, [r7, #30]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <EE_Init+0x16a>
              {
                return EepromStatus;
 80006e6:	8bfb      	ldrh	r3, [r7, #30]
 80006e8:	e11b      	b.n	8000922 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80006ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006ec:	3301      	adds	r3, #1
 80006ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80006f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006f2:	2b1a      	cmp	r3, #26
 80006f4:	d9cb      	bls.n	800068e <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80006f6:	f04f 0200 	mov.w	r2, #0
 80006fa:	f04f 0300 	mov.w	r3, #0
 80006fe:	494b      	ldr	r1, [pc, #300]	@ (800082c <EE_Init+0x2ac>)
 8000700:	2001      	movs	r0, #1
 8000702:	f001 fb47 	bl	8001d94 <HAL_FLASH_Program>
 8000706:	4603      	mov	r3, r0
 8000708:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800070a:	7efb      	ldrb	r3, [r7, #27]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <EE_Init+0x196>
        {
          return FlashStatus;
 8000710:	7efb      	ldrb	r3, [r7, #27]
 8000712:	b29b      	uxth	r3, r3
 8000714:	e105      	b.n	8000922 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8000716:	2303      	movs	r3, #3
 8000718:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800071e:	2302      	movs	r3, #2
 8000720:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000722:	4843      	ldr	r0, [pc, #268]	@ (8000830 <EE_Init+0x2b0>)
 8000724:	f000 f90c 	bl	8000940 <EE_VerifyPageFullyErased>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	f040 80f3 	bne.w	8000916 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000730:	f107 0214 	add.w	r2, r7, #20
 8000734:	463b      	mov	r3, r7
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fce1 	bl	8002100 <HAL_FLASHEx_Erase>
 800073e:	4603      	mov	r3, r0
 8000740:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000742:	7efb      	ldrb	r3, [r7, #27]
 8000744:	2b00      	cmp	r3, #0
 8000746:	f000 80e6 	beq.w	8000916 <EE_Init+0x396>
          {
            return FlashStatus;
 800074a:	7efb      	ldrb	r3, [r7, #27]
 800074c:	b29b      	uxth	r3, r3
 800074e:	e0e8      	b.n	8000922 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000750:	8c3b      	ldrh	r3, [r7, #32]
 8000752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000756:	4293      	cmp	r3, r2
 8000758:	d12b      	bne.n	80007b2 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 800075a:	2303      	movs	r3, #3
 800075c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000766:	4832      	ldr	r0, [pc, #200]	@ (8000830 <EE_Init+0x2b0>)
 8000768:	f000 f8ea 	bl	8000940 <EE_VerifyPageFullyErased>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10e      	bne.n	8000790 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000772:	f107 0214 	add.w	r2, r7, #20
 8000776:	463b      	mov	r3, r7
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fcc0 	bl	8002100 <HAL_FLASHEx_Erase>
 8000780:	4603      	mov	r3, r0
 8000782:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000784:	7efb      	ldrb	r3, [r7, #27]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <EE_Init+0x210>
          {
            return FlashStatus;
 800078a:	7efb      	ldrb	r3, [r7, #27]
 800078c:	b29b      	uxth	r3, r3
 800078e:	e0c8      	b.n	8000922 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000790:	f04f 0200 	mov.w	r2, #0
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	4924      	ldr	r1, [pc, #144]	@ (800082c <EE_Init+0x2ac>)
 800079a:	2001      	movs	r0, #1
 800079c:	f001 fafa 	bl	8001d94 <HAL_FLASH_Program>
 80007a0:	4603      	mov	r3, r0
 80007a2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007a4:	7efb      	ldrb	r3, [r7, #27]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f000 80b5 	beq.w	8000916 <EE_Init+0x396>
        {
          return FlashStatus;
 80007ac:	7efb      	ldrb	r3, [r7, #27]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	e0b7      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80007b2:	f000 f95b 	bl	8000a6c <EE_Format>
 80007b6:	4603      	mov	r3, r0
 80007b8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007ba:	7efb      	ldrb	r3, [r7, #27]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	f000 80aa 	beq.w	8000916 <EE_Init+0x396>
        {
          return FlashStatus;
 80007c2:	7efb      	ldrb	r3, [r7, #27]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	e0ac      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80007c8:	8c3b      	ldrh	r3, [r7, #32]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10a      	bne.n	80007e4 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80007ce:	f000 f94d 	bl	8000a6c <EE_Format>
 80007d2:	4603      	mov	r3, r0
 80007d4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007d6:	7efb      	ldrb	r3, [r7, #27]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 809e 	beq.w	800091a <EE_Init+0x39a>
        {
          return FlashStatus;
 80007de:	7efb      	ldrb	r3, [r7, #27]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	e09e      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80007e4:	8c3b      	ldrh	r3, [r7, #32]
 80007e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d11b      	bne.n	8000826 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 80007ee:	2303      	movs	r3, #3
 80007f0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80007fa:	480d      	ldr	r0, [pc, #52]	@ (8000830 <EE_Init+0x2b0>)
 80007fc:	f000 f8a0 	bl	8000940 <EE_VerifyPageFullyErased>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	f040 8089 	bne.w	800091a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000808:	f107 0214 	add.w	r2, r7, #20
 800080c:	463b      	mov	r3, r7
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fc75 	bl	8002100 <HAL_FLASHEx_Erase>
 8000816:	4603      	mov	r3, r0
 8000818:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800081a:	7efb      	ldrb	r3, [r7, #27]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d07c      	beq.n	800091a <EE_Init+0x39a>
          {
            return FlashStatus;
 8000820:	7efb      	ldrb	r3, [r7, #27]
 8000822:	b29b      	uxth	r3, r3
 8000824:	e07d      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000826:	2300      	movs	r3, #0
 8000828:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800082a:	e03a      	b.n	80008a2 <EE_Init+0x322>
 800082c:	08060000 	.word	0x08060000
 8000830:	08064000 	.word	0x08064000
 8000834:	08060006 	.word	0x08060006
 8000838:	20000404 	.word	0x20000404
 800083c:	200000c0 	.word	0x200000c0
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000840:	4b3a      	ldr	r3, [pc, #232]	@ (800092c <EE_Init+0x3ac>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000848:	4939      	ldr	r1, [pc, #228]	@ (8000930 <EE_Init+0x3b0>)
 800084a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800084e:	429a      	cmp	r2, r3
 8000850:	d101      	bne.n	8000856 <EE_Init+0x2d6>
          {
            x = VarIdx;
 8000852:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000854:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 8000856:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000858:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800085c:	429a      	cmp	r2, r3
 800085e:	d01d      	beq.n	800089c <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000860:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000862:	4a33      	ldr	r2, [pc, #204]	@ (8000930 <EE_Init+0x3b0>)
 8000864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000868:	4932      	ldr	r1, [pc, #200]	@ (8000934 <EE_Init+0x3b4>)
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f892 	bl	8000994 <EE_ReadVariable>
 8000870:	4603      	mov	r3, r0
 8000872:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000874:	8bbb      	ldrh	r3, [r7, #28]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d010      	beq.n	800089c <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800087a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800087c:	4a2c      	ldr	r2, [pc, #176]	@ (8000930 <EE_Init+0x3b0>)
 800087e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000882:	4a2c      	ldr	r2, [pc, #176]	@ (8000934 <EE_Init+0x3b4>)
 8000884:	8812      	ldrh	r2, [r2, #0]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f987 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 800088e:	4603      	mov	r3, r0
 8000890:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8000892:	8bfb      	ldrh	r3, [r7, #30]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <EE_Init+0x31c>
              {
                return EepromStatus;
 8000898:	8bfb      	ldrh	r3, [r7, #30]
 800089a:	e042      	b.n	8000922 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800089c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800089e:	3301      	adds	r3, #1
 80008a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80008a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008a4:	2b1a      	cmp	r3, #26
 80008a6:	d9cb      	bls.n	8000840 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	4921      	ldr	r1, [pc, #132]	@ (8000938 <EE_Init+0x3b8>)
 80008b2:	2001      	movs	r0, #1
 80008b4:	f001 fa6e 	bl	8001d94 <HAL_FLASH_Program>
 80008b8:	4603      	mov	r3, r0
 80008ba:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80008bc:	7efb      	ldrb	r3, [r7, #27]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <EE_Init+0x348>
        {
          return FlashStatus;
 80008c2:	7efb      	ldrb	r3, [r7, #27]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	e02c      	b.n	8000922 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 80008c8:	2302      	movs	r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80008d4:	4819      	ldr	r0, [pc, #100]	@ (800093c <EE_Init+0x3bc>)
 80008d6:	f000 f833 	bl	8000940 <EE_VerifyPageFullyErased>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d11c      	bne.n	800091a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80008e0:	f107 0214 	add.w	r2, r7, #20
 80008e4:	463b      	mov	r3, r7
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fc09 	bl	8002100 <HAL_FLASHEx_Erase>
 80008ee:	4603      	mov	r3, r0
 80008f0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80008f2:	7efb      	ldrb	r3, [r7, #27]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d010      	beq.n	800091a <EE_Init+0x39a>
          {
            return FlashStatus;
 80008f8:	7efb      	ldrb	r3, [r7, #27]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	e011      	b.n	8000922 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80008fe:	f000 f8b5 	bl	8000a6c <EE_Format>
 8000902:	4603      	mov	r3, r0
 8000904:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000906:	7efb      	ldrb	r3, [r7, #27]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <EE_Init+0x39e>
      {
        return FlashStatus;
 800090c:	7efb      	ldrb	r3, [r7, #27]
 800090e:	b29b      	uxth	r3, r3
 8000910:	e007      	b.n	8000922 <EE_Init+0x3a2>
      break;
 8000912:	bf00      	nop
 8000914:	e004      	b.n	8000920 <EE_Init+0x3a0>
      break;
 8000916:	bf00      	nop
 8000918:	e002      	b.n	8000920 <EE_Init+0x3a0>
      break;
 800091a:	bf00      	nop
 800091c:	e000      	b.n	8000920 <EE_Init+0x3a0>
      }
      break;
 800091e:	bf00      	nop
  }

  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08064006 	.word	0x08064006
 8000930:	20000404 	.word	0x20000404
 8000934:	200000c0 	.word	0x200000c0
 8000938:	08064000 	.word	0x08064000
 800093c:	08060000 	.word	0x08060000

08000940 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 8000950:	f245 5355 	movw	r3, #21845	@ 0x5555
 8000954:	81fb      	strh	r3, [r7, #14]
    
  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 8000956:	e00d      	b.n	8000974 <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000964:	4293      	cmp	r3, r2
 8000966:	d002      	beq.n	800096e <EE_VerifyPageFullyErased+0x2e>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

      break;
 800096c:	e009      	b.n	8000982 <EE_VerifyPageFullyErased+0x42>
    }
    /* Next address location */
    Address = Address + 4;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3304      	adds	r3, #4
 8000972:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800097a:	333f      	adds	r3, #63	@ 0x3f
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	429a      	cmp	r2, r3
 8000980:	d9ea      	bls.n	8000958 <EE_VerifyPageFullyErased+0x18>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	b29b      	uxth	r3, r3
}
 8000986:	4618      	mov	r0, r3
 8000988:	371c      	adds	r7, #28
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80009a4:	f245 5355 	movw	r3, #21845	@ 0x5555
 80009a8:	81bb      	strh	r3, [r7, #12]
 80009aa:	2301      	movs	r3, #1
 80009ac:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <EE_ReadVariable+0x8c>)
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <EE_ReadVariable+0x8c>)
 80009b4:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f8aa 	bl	8000b10 <EE_FindValidPage>
 80009bc:	4603      	mov	r3, r0
 80009be:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	2bab      	cmp	r3, #171	@ 0xab
 80009c4:	d101      	bne.n	80009ca <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80009c6:	23ab      	movs	r3, #171	@ 0xab
 80009c8:	e025      	b.n	8000a16 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80009d0:	3318      	adds	r3, #24
 80009d2:	039b      	lsls	r3, r3, #14
 80009d4:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	3301      	adds	r3, #1
 80009da:	039a      	lsls	r2, r3, #14
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <EE_ReadVariable+0x90>)
 80009de:	4413      	add	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80009e2:	e012      	b.n	8000a0a <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80009ea:	89ba      	ldrh	r2, [r7, #12]
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d108      	bne.n	8000a04 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	3b02      	subs	r3, #2
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	82fb      	strh	r3, [r7, #22]

      break;
 8000a02:	e007      	b.n	8000a14 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	3b04      	subs	r3, #4
 8000a08:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8e7      	bhi.n	80009e4 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000a14:	8afb      	ldrh	r3, [r7, #22]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08060000 	.word	0x08060000
 8000a24:	0805fffe 	.word	0x0805fffe

08000a28 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	80fb      	strh	r3, [r7, #6]
 8000a34:	4613      	mov	r3, r2
 8000a36:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000a3c:	88ba      	ldrh	r2, [r7, #4]
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f8aa 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000a4c:	89fb      	ldrh	r3, [r7, #14]
 8000a4e:	2b80      	cmp	r3, #128	@ 0x80
 8000a50:	d107      	bne.n	8000a62 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000a52:	88ba      	ldrh	r2, [r7, #4]
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f901 	bl	8000c60 <EE_PageTransfer>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000a62:	89fb      	ldrh	r3, [r7, #14]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000a86:	2302      	movs	r3, #2
 8000a88:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000a8a:	481f      	ldr	r0, [pc, #124]	@ (8000b08 <EE_Format+0x9c>)
 8000a8c:	f7ff ff58 	bl	8000940 <EE_VerifyPageFullyErased>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10d      	bne.n	8000ab2 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000a96:	f107 0218 	add.w	r2, r7, #24
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fb2e 	bl	8002100 <HAL_FLASHEx_Erase>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000aa8:	7ffb      	ldrb	r3, [r7, #31]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <EE_Format+0x46>
    {
      return FlashStatus;
 8000aae:	7ffb      	ldrb	r3, [r7, #31]
 8000ab0:	e025      	b.n	8000afe <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	4913      	ldr	r1, [pc, #76]	@ (8000b08 <EE_Format+0x9c>)
 8000abc:	2001      	movs	r0, #1
 8000abe:	f001 f969 	bl	8001d94 <HAL_FLASH_Program>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <EE_Format+0x64>
  {
    return FlashStatus;
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	e016      	b.n	8000afe <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000ad4:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <EE_Format+0xa0>)
 8000ad6:	f7ff ff33 	bl	8000940 <EE_VerifyPageFullyErased>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10d      	bne.n	8000afc <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000ae0:	f107 0218 	add.w	r2, r7, #24
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fb09 	bl	8002100 <HAL_FLASHEx_Erase>
 8000aee:	4603      	mov	r3, r0
 8000af0:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000af2:	7ffb      	ldrb	r3, [r7, #31]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <EE_Format+0x90>
    {
      return FlashStatus;
 8000af8:	7ffb      	ldrb	r3, [r7, #31]
 8000afa:	e000      	b.n	8000afe <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08060000 	.word	0x08060000
 8000b0c:	08064000 	.word	0x08064000

08000b10 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	81fb      	strh	r3, [r7, #14]
 8000b1e:	2306      	movs	r3, #6
 8000b20:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <EE_FindValidPage+0x84>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <EE_FindValidPage+0x88>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01b      	beq.n	8000b6c <EE_FindValidPage+0x5c>
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d125      	bne.n	8000b84 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000b38:	89bb      	ldrh	r3, [r7, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d108      	bne.n	8000b50 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e01c      	b.n	8000b86 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e01a      	b.n	8000b86 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000b50:	89fb      	ldrh	r3, [r7, #14]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d108      	bne.n	8000b68 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000b56:	89bb      	ldrh	r3, [r7, #12]
 8000b58:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d101      	bne.n	8000b64 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000b60:	2301      	movs	r3, #1
 8000b62:	e010      	b.n	8000b86 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000b64:	2300      	movs	r3, #0
 8000b66:	e00e      	b.n	8000b86 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000b68:	23ab      	movs	r3, #171	@ 0xab
 8000b6a:	e00c      	b.n	8000b86 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000b72:	2300      	movs	r3, #0
 8000b74:	e007      	b.n	8000b86 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000b76:	89bb      	ldrh	r3, [r7, #12]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e002      	b.n	8000b86 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000b80:	23ab      	movs	r3, #171	@ 0xab
 8000b82:	e000      	b.n	8000b86 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000b84:	2300      	movs	r3, #0
  }
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	08060000 	.word	0x08060000
 8000b98:	08064000 	.word	0x08064000

08000b9c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000b9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	460a      	mov	r2, r1
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	4613      	mov	r3, r2
 8000bac:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000bb6:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <EE_VerifyPageFullWriteVariable+0xb8>)
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <EE_VerifyPageFullWriteVariable+0xbc>)
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff ffa6 	bl	8000b10 <EE_FindValidPage>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000bc8:	8a3b      	ldrh	r3, [r7, #16]
 8000bca:	2bab      	cmp	r3, #171	@ 0xab
 8000bcc:	d101      	bne.n	8000bd2 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000bce:	23ab      	movs	r3, #171	@ 0xab
 8000bd0:	e03b      	b.n	8000c4a <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000bd2:	8a3b      	ldrh	r3, [r7, #16]
 8000bd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000bd8:	3318      	adds	r3, #24
 8000bda:	039b      	lsls	r3, r3, #14
 8000bdc:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000bde:	8a3b      	ldrh	r3, [r7, #16]
 8000be0:	3301      	adds	r3, #1
 8000be2:	039a      	lsls	r2, r3, #14
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <EE_VerifyPageFullWriteVariable+0xc0>)
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000bea:	e029      	b.n	8000c40 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d121      	bne.n	8000c3a <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	4622      	mov	r2, r4
 8000c00:	462b      	mov	r3, r5
 8000c02:	6979      	ldr	r1, [r7, #20]
 8000c04:	2001      	movs	r0, #1
 8000c06:	f001 f8c5 	bl	8001d94 <HAL_FLASH_Program>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000c0e:	7cfb      	ldrb	r3, [r7, #19]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 8000c14:	7cfb      	ldrb	r3, [r7, #19]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	e017      	b.n	8000c4a <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	1c99      	adds	r1, r3, #2
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	2200      	movs	r2, #0
 8000c22:	4698      	mov	r8, r3
 8000c24:	4691      	mov	r9, r2
 8000c26:	4642      	mov	r2, r8
 8000c28:	464b      	mov	r3, r9
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f001 f8b2 	bl	8001d94 <HAL_FLASH_Program>
 8000c30:	4603      	mov	r3, r0
 8000c32:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000c34:	7cfb      	ldrb	r3, [r7, #19]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	e007      	b.n	8000c4a <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d3d1      	bcc.n	8000bec <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000c48:	2380      	movs	r3, #128	@ 0x80
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c54:	08060000 	.word	0x08060000
 8000c58:	08064000 	.word	0x08064000
 8000c5c:	0805ffff 	.word	0x0805ffff

08000c60 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	@ 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	460a      	mov	r2, r1
 8000c6a:	80fb      	strh	r3, [r7, #6]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000c76:	4b54      	ldr	r3, [pc, #336]	@ (8000dc8 <EE_PageTransfer+0x168>)
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t OldPageId=0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000c82:	2300      	movs	r3, #0
 8000c84:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ff3c 	bl	8000b10 <EE_FindValidPage>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d104      	bne.n	8000cac <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000ca2:	4b49      	ldr	r3, [pc, #292]	@ (8000dc8 <EE_PageTransfer+0x168>)
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000caa:	e009      	b.n	8000cc0 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000cac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d104      	bne.n	8000cbc <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000cb2:	4b46      	ldr	r3, [pc, #280]	@ (8000dcc <EE_PageTransfer+0x16c>)
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000cba:	e001      	b.n	8000cc0 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000cbc:	23ab      	movs	r3, #171	@ 0xab
 8000cbe:	e07e      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000cc0:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f001 f862 	bl	8001d94 <HAL_FLASH_Program>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8000cde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	e06b      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000ce6:	88ba      	ldrh	r2, [r7, #4]
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff55 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000cf6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8000cfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000cfe:	e05e      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000d04:	e027      	b.n	8000d56 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000d06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d08:	4a31      	ldr	r2, [pc, #196]	@ (8000dd0 <EE_PageTransfer+0x170>)
 8000d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d0e:	88fa      	ldrh	r2, [r7, #6]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d01d      	beq.n	8000d50 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000d14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d16:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd0 <EE_PageTransfer+0x170>)
 8000d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1c:	492d      	ldr	r1, [pc, #180]	@ (8000dd4 <EE_PageTransfer+0x174>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe38 	bl	8000994 <EE_ReadVariable>
 8000d24:	4603      	mov	r3, r0
 8000d26:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000d28:	8c3b      	ldrh	r3, [r7, #32]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d010      	beq.n	8000d50 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000d2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d30:	4a27      	ldr	r2, [pc, #156]	@ (8000dd0 <EE_PageTransfer+0x170>)
 8000d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d36:	4a27      	ldr	r2, [pc, #156]	@ (8000dd4 <EE_PageTransfer+0x174>)
 8000d38:	8812      	ldrh	r2, [r2, #0]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff2d 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 8000d42:	4603      	mov	r3, r0
 8000d44:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000d46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000d4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000d4e:	e036      	b.n	8000dbe <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000d50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d52:	3301      	adds	r3, #1
 8000d54:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000d56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d58:	2b1a      	cmp	r3, #26
 8000d5a:	d9d4      	bls.n	8000d06 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000d60:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d62:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000d6c:	f107 021c 	add.w	r2, r7, #28
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 f9c2 	bl	8002100 <HAL_FLASHEx_Erase>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000d82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8000d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	e015      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f000 fff9 	bl	8001d94 <HAL_FLASH_Program>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8000db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	e002      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dbc:	b29b      	uxth	r3, r3
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3730      	adds	r7, #48	@ 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	08060000 	.word	0x08060000
 8000dcc:	08064000 	.word	0x08064000
 8000dd0:	20000404 	.word	0x20000404
 8000dd4:	200000c0 	.word	0x200000c0

08000dd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <vApplicationGetIdleTaskMemory+0x30>)
 8000dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2280      	movs	r2, #128	@ 0x80
 8000df4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000c4 	.word	0x200000c4
 8000e08:	20000164 	.word	0x20000164

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b08e      	sub	sp, #56	@ 0x38
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 fe4b 	bl	8001aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f843 	bl	8000ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f93d 	bl	8001098 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e1e:	f000 f911 	bl	8001044 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e22:	f000 f8bd 	bl	8000fa0 <MX_TIM1_Init>
  MX_CRC_Init();
 8000e26:	f000 f8a7 	bl	8000f78 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000e2a:	4817      	ldr	r0, [pc, #92]	@ (8000e88 <main+0x7c>)
 8000e2c:	f000 fbac 	bl	8001588 <RetargetInit>
  printf("Starting up.....\n");
 8000e30:	4816      	ldr	r0, [pc, #88]	@ (8000e8c <main+0x80>)
 8000e32:	f004 fe2d 	bl	8005a90 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000e36:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <main+0x84>)
 8000e38:	f107 041c 	add.w	r4, r7, #28
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 f9f4 	bl	800423e <osThreadCreate>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a0e      	ldr	r2, [pc, #56]	@ (8000e94 <main+0x88>)
 8000e5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 128);
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <main+0x8c>)
 8000e5e:	463c      	mov	r4, r7
 8000e60:	461d      	mov	r5, r3
 8000e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 f9e3 	bl	800423e <osThreadCreate>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <main+0x90>)
 8000e7c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e7e:	f003 f9d7 	bl	8004230 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e82:	bf00      	nop
 8000e84:	e7fd      	b.n	8000e82 <main+0x76>
 8000e86:	bf00      	nop
 8000e88:	200003b4 	.word	0x200003b4
 8000e8c:	08006ab4 	.word	0x08006ab4
 8000e90:	08006ad4 	.word	0x08006ad4
 8000e94:	200003fc 	.word	0x200003fc
 8000e98:	08006afc 	.word	0x08006afc
 8000e9c:	20000400 	.word	0x20000400

08000ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b094      	sub	sp, #80	@ 0x50
 8000ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2230      	movs	r2, #48	@ 0x30
 8000eac:	2100      	movs	r1, #0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f005 f804 	bl	8005ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <SystemClock_Config+0xd0>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	4a28      	ldr	r2, [pc, #160]	@ (8000f70 <SystemClock_Config+0xd0>)
 8000ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed4:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <SystemClock_Config+0xd0>)
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	4b23      	ldr	r3, [pc, #140]	@ (8000f74 <SystemClock_Config+0xd4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000eec:	4a21      	ldr	r2, [pc, #132]	@ (8000f74 <SystemClock_Config+0xd4>)
 8000eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f74 <SystemClock_Config+0xd4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f00:	2302      	movs	r3, #2
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f14:	2310      	movs	r3, #16
 8000f16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f1e:	2304      	movs	r3, #4
 8000f20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f22:	2307      	movs	r3, #7
 8000f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fbc2 	bl	80026b4 <HAL_RCC_OscConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f36:	f000 f9b1 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3a:	230f      	movs	r3, #15
 8000f3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2102      	movs	r1, #2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f001 fe24 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f62:	f000 f99b 	bl	800129c <Error_Handler>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3750      	adds	r7, #80	@ 0x50
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40007000 	.word	0x40007000

08000f78 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <MX_CRC_Init+0x20>)
 8000f7e:	4a07      	ldr	r2, [pc, #28]	@ (8000f9c <MX_CRC_Init+0x24>)
 8000f80:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <MX_CRC_Init+0x20>)
 8000f84:	f000 feb6 	bl	8001cf4 <HAL_CRC_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f8e:	f000 f985 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000364 	.word	0x20000364
 8000f9c:	40023000 	.word	0x40023000

08000fa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <MX_TIM1_Init+0x9c>)
 8000fbe:	4a20      	ldr	r2, [pc, #128]	@ (8001040 <MX_TIM1_Init+0xa0>)
 8000fc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <MX_TIM1_Init+0x9c>)
 8000fc4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000fc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	@ (800103c <MX_TIM1_Init+0x9c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <MX_TIM1_Init+0x9c>)
 8000fd2:	f245 2207 	movw	r2, #20999	@ 0x5207
 8000fd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	@ (800103c <MX_TIM1_Init+0x9c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fde:	4b17      	ldr	r3, [pc, #92]	@ (800103c <MX_TIM1_Init+0x9c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	@ (800103c <MX_TIM1_Init+0x9c>)
 8000fe6:	2280      	movs	r2, #128	@ 0x80
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fea:	4814      	ldr	r0, [pc, #80]	@ (800103c <MX_TIM1_Init+0x9c>)
 8000fec:	f002 f82c 	bl	8003048 <HAL_TIM_Base_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ff6:	f000 f951 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <MX_TIM1_Init+0x9c>)
 8001008:	f002 f9c0 	bl	800338c <HAL_TIM_ConfigClockSource>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001012:	f000 f943 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	@ (800103c <MX_TIM1_Init+0x9c>)
 8001024:	f002 fbc8 	bl	80037b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800102e:	f000 f935 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000036c 	.word	0x2000036c
 8001040:	40010000 	.word	0x40010000

08001044 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_USART2_UART_Init+0x4c>)
 800104a:	4a12      	ldr	r2, [pc, #72]	@ (8001094 <MX_USART2_UART_Init+0x50>)
 800104c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104e:	4b10      	ldr	r3, [pc, #64]	@ (8001090 <MX_USART2_UART_Init+0x4c>)
 8001050:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001054:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800105c:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <MX_USART2_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001068:	4b09      	ldr	r3, [pc, #36]	@ (8001090 <MX_USART2_UART_Init+0x4c>)
 800106a:	220c      	movs	r2, #12
 800106c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800107a:	4805      	ldr	r0, [pc, #20]	@ (8001090 <MX_USART2_UART_Init+0x4c>)
 800107c:	f002 fc1e 	bl	80038bc <HAL_UART_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001086:	f000 f909 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200003b4 	.word	0x200003b4
 8001094:	40004400 	.word	0x40004400

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	@ 0x28
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001168 <MX_GPIO_Init+0xd0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001168 <MX_GPIO_Init+0xd0>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b2a      	ldr	r3, [pc, #168]	@ (8001168 <MX_GPIO_Init+0xd0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
 80010c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <MX_GPIO_Init+0xd0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a25      	ldr	r2, [pc, #148]	@ (8001168 <MX_GPIO_Init+0xd0>)
 80010d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <MX_GPIO_Init+0xd0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <MX_GPIO_Init+0xd0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001168 <MX_GPIO_Init+0xd0>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <MX_GPIO_Init+0xd0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <MX_GPIO_Init+0xd0>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	@ 0x30
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <MX_GPIO_Init+0xd0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2120      	movs	r1, #32
 8001122:	4812      	ldr	r0, [pc, #72]	@ (800116c <MX_GPIO_Init+0xd4>)
 8001124:	f001 fa92 	bl	800264c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001128:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	480c      	ldr	r0, [pc, #48]	@ (8001170 <MX_GPIO_Init+0xd8>)
 8001140:	f001 f900 	bl	8002344 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001144:	2320      	movs	r3, #32
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4804      	ldr	r0, [pc, #16]	@ (800116c <MX_GPIO_Init+0xd4>)
 800115c:	f001 f8f2 	bl	8002344 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	@ 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020800 	.word	0x40020800

08001174 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800117c:	2120      	movs	r1, #32
 800117e:	4804      	ldr	r0, [pc, #16]	@ (8001190 <StartDefaultTask+0x1c>)
 8001180:	f001 fa7d 	bl	800267e <HAL_GPIO_TogglePin>
	  osDelay(200);
 8001184:	20c8      	movs	r0, #200	@ 0xc8
 8001186:	f003 f8a6 	bl	80042d6 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800118a:	bf00      	nop
 800118c:	e7f6      	b.n	800117c <StartDefaultTask+0x8>
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000

08001194 <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8001194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001196:	b0af      	sub	sp, #188	@ 0xbc
 8001198:	af10      	add	r7, sp, #64	@ 0x40
 800119a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
	uint16_t has_written = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	char input[100];
	/* Infinite loop */
	for (;;) {

		// Read the user input
		printf("\r\n Code to update: \n");
 80011a2:	482e      	ldr	r0, [pc, #184]	@ (800125c <StartReceiveTask+0xc8>)
 80011a4:	f004 fc74 	bl	8005a90 <puts>
		//if(scanf("%s", input) != -1){
		//TODO: fgets doesn't read newline?
		if (fgets(input, 10, stdin)) {
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <StartReceiveTask+0xcc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	685a      	ldr	r2, [r3, #4]
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	210a      	movs	r1, #10
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 fb37 	bl	8005828 <fgets>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01c      	beq.n	80011fa <StartReceiveTask+0x66>
			size_t len = strlen(input);
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f85b 	bl	8000280 <strlen>
 80011ca:	6738      	str	r0, [r7, #112]	@ 0x70
			if (feof(stdin) || (len != 0 /*&& input[len - 1] == '\n'*/))
 80011cc:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <StartReceiveTask+0xcc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 fa9e 	bl	8005714 <feof>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <StartReceiveTask+0x50>
 80011de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <StartReceiveTask+0x5e>
				printf("\r\n Code received:  %s \r\n", input);
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	4619      	mov	r1, r3
 80011ea:	481e      	ldr	r0, [pc, #120]	@ (8001264 <StartReceiveTask+0xd0>)
 80011ec:	f004 fbe8 	bl	80059c0 <iprintf>
 80011f0:	e006      	b.n	8001200 <StartReceiveTask+0x6c>
			else
				printf("Invalid input, please respect the limit of 100 characters.");
 80011f2:	481d      	ldr	r0, [pc, #116]	@ (8001268 <StartReceiveTask+0xd4>)
 80011f4:	f004 fbe4 	bl	80059c0 <iprintf>
 80011f8:	e002      	b.n	8001200 <StartReceiveTask+0x6c>
		} else {
			printf("Invalid input, please respect the limit of 100 characters.");
 80011fa:	481b      	ldr	r0, [pc, #108]	@ (8001268 <StartReceiveTask+0xd4>)
 80011fc:	f004 fbe0 	bl	80059c0 <iprintf>
		}

		//CRC
		uint32_t crcValue = HAL_CRC_Calculate(&hcrc, input, sizeof(input));
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	2264      	movs	r2, #100	@ 0x64
 8001206:	4619      	mov	r1, r3
 8001208:	4818      	ldr	r0, [pc, #96]	@ (800126c <StartReceiveTask+0xd8>)
 800120a:	f000 fd8f 	bl	8001d2c <HAL_CRC_Calculate>
 800120e:	66f8      	str	r0, [r7, #108]	@ 0x6c
		printf("CRC Value: %u \r\n", crcValue);
 8001210:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001212:	4817      	ldr	r0, [pc, #92]	@ (8001270 <StartReceiveTask+0xdc>)
 8001214:	f004 fbd4 	bl	80059c0 <iprintf>

		//Write to flash
		if(has_written == 0){
 8001218:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800121c:	2b00      	cmp	r3, #0
 800121e:	d117      	bne.n	8001250 <StartReceiveTask+0xbc>

			writeToFlash(huart2, input);
 8001220:	4e14      	ldr	r6, [pc, #80]	@ (8001274 <StartReceiveTask+0xe0>)
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	930e      	str	r3, [sp, #56]	@ 0x38
 8001228:	466d      	mov	r5, sp
 800122a:	f106 0410 	add.w	r4, r6, #16
 800122e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800123a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800123e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001242:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001246:	f000 f82f 	bl	80012a8 <writeToFlash>
			has_written = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		}
		osDelay(1000);
 8001250:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001254:	f003 f83f 	bl	80042d6 <osDelay>
	for (;;) {
 8001258:	e7a3      	b.n	80011a2 <StartReceiveTask+0xe>
 800125a:	bf00      	nop
 800125c:	08006b18 	.word	0x08006b18
 8001260:	20000054 	.word	0x20000054
 8001264:	08006b2c 	.word	0x08006b2c
 8001268:	08006b48 	.word	0x08006b48
 800126c:	20000364 	.word	0x20000364
 8001270:	08006b84 	.word	0x08006b84
 8001274:	200003b4 	.word	0x200003b4

08001278 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a04      	ldr	r2, [pc, #16]	@ (8001298 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d101      	bne.n	800128e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800128a:	f000 fc31 	bl	8001af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40000c00 	.word	0x40000c00

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <Error_Handler+0x8>

080012a8 <writeToFlash>:
		'n', '.', 'p', 'l' };
uint8_t VarDataTabRead[NB_OF_VAR];
uint16_t VarDataTmp = 0;


void writeToFlash(UART_HandleTypeDef huart2, uint16_t data[100]){
 80012a8:	b084      	sub	sp, #16
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b084      	sub	sp, #16
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	f107 0c18 	add.w	ip, r7, #24
 80012b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t dataLength = sizeof(data);
 80012b8:	2304      	movs	r3, #4
 80012ba:	707b      	strb	r3, [r7, #1]

	// Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 80012bc:	f000 fdbe 	bl	8001e3c <HAL_FLASH_Unlock>
	// Turn LED on
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2120      	movs	r1, #32
 80012c4:	48a5      	ldr	r0, [pc, #660]	@ (800155c <writeToFlash+0x2b4>)
 80012c6:	f001 f9c1 	bl	800264c <HAL_GPIO_WritePin>

	/* EEPROM Init */
	if (EE_Init() != EE_OK) {
 80012ca:	f7ff f959 	bl	8000580 <EE_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <writeToFlash+0x30>
		Error_Handler();
 80012d4:	f7ff ffe2 	bl	800129c <Error_Handler>
	}

	// Fill EEPROM variables addresses
	for (uint16_t i = 1; i <= dataLength; i++) {
 80012d8:	2301      	movs	r3, #1
 80012da:	81fb      	strh	r3, [r7, #14]
 80012dc:	e008      	b.n	80012f0 <writeToFlash+0x48>
		VirtAddVarTab[i - 1] = i;
 80012de:	89fb      	ldrh	r3, [r7, #14]
 80012e0:	3b01      	subs	r3, #1
 80012e2:	499f      	ldr	r1, [pc, #636]	@ (8001560 <writeToFlash+0x2b8>)
 80012e4:	89fa      	ldrh	r2, [r7, #14]
 80012e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (uint16_t i = 1; i <= dataLength; i++) {
 80012ea:	89fb      	ldrh	r3, [r7, #14]
 80012ec:	3301      	adds	r3, #1
 80012ee:	81fb      	strh	r3, [r7, #14]
 80012f0:	787b      	ldrb	r3, [r7, #1]
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	89fa      	ldrh	r2, [r7, #14]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d9f1      	bls.n	80012de <writeToFlash+0x36>
	}

	// Store Values in EEPROM emulation
	HAL_UART_Transmit(&huart2, "Store values\n\r", 14, 100);
 80012fa:	2364      	movs	r3, #100	@ 0x64
 80012fc:	220e      	movs	r2, #14
 80012fe:	4999      	ldr	r1, [pc, #612]	@ (8001564 <writeToFlash+0x2bc>)
 8001300:	f107 0018 	add.w	r0, r7, #24
 8001304:	f002 fb2a 	bl	800395c <HAL_UART_Transmit>
	for (uint16_t i = 0; i < dataLength; i++) {
 8001308:	2300      	movs	r3, #0
 800130a:	81bb      	strh	r3, [r7, #12]
 800130c:	e013      	b.n	8001336 <writeToFlash+0x8e>
		/* Sequence 1 */
		if ((EE_WriteVariable(VirtAddVarTab[i], data[i]))
 800130e:	89bb      	ldrh	r3, [r7, #12]
 8001310:	4a93      	ldr	r2, [pc, #588]	@ (8001560 <writeToFlash+0x2b8>)
 8001312:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001316:	89bb      	ldrh	r3, [r7, #12]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800131c:	4413      	add	r3, r2
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fb81 	bl	8000a28 <EE_WriteVariable>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <writeToFlash+0x88>
				!= HAL_OK) {
			Error_Handler();
 800132c:	f7ff ffb6 	bl	800129c <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	81bb      	strh	r3, [r7, #12]
 8001336:	787b      	ldrb	r3, [r7, #1]
 8001338:	b29b      	uxth	r3, r3
 800133a:	89ba      	ldrh	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d3e6      	bcc.n	800130e <writeToFlash+0x66>
		}
	}

	// Read values
	HAL_UART_Transmit(&huart2, "Read values\n\r", 13, 100);
 8001340:	2364      	movs	r3, #100	@ 0x64
 8001342:	220d      	movs	r2, #13
 8001344:	4988      	ldr	r1, [pc, #544]	@ (8001568 <writeToFlash+0x2c0>)
 8001346:	f107 0018 	add.w	r0, r7, #24
 800134a:	f002 fb07 	bl	800395c <HAL_UART_Transmit>
	for (uint16_t i = 0; i < dataLength; i++) {
 800134e:	2300      	movs	r3, #0
 8001350:	817b      	strh	r3, [r7, #10]
 8001352:	e012      	b.n	800137a <writeToFlash+0xd2>
		if ((EE_ReadVariable(VirtAddVarTab[i],
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	4a82      	ldr	r2, [pc, #520]	@ (8001560 <writeToFlash+0x2b8>)
 8001358:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
				&VarDataTabRead[i])) != HAL_OK) {
 800135c:	897b      	ldrh	r3, [r7, #10]
 800135e:	4983      	ldr	r1, [pc, #524]	@ (800156c <writeToFlash+0x2c4>)
 8001360:	440b      	add	r3, r1
		if ((EE_ReadVariable(VirtAddVarTab[i],
 8001362:	4619      	mov	r1, r3
 8001364:	4610      	mov	r0, r2
 8001366:	f7ff fb15 	bl	8000994 <EE_ReadVariable>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <writeToFlash+0xcc>
			Error_Handler();
 8001370:	f7ff ff94 	bl	800129c <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 8001374:	897b      	ldrh	r3, [r7, #10]
 8001376:	3301      	adds	r3, #1
 8001378:	817b      	strh	r3, [r7, #10]
 800137a:	787b      	ldrb	r3, [r7, #1]
 800137c:	b29b      	uxth	r3, r3
 800137e:	897a      	ldrh	r2, [r7, #10]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3e7      	bcc.n	8001354 <writeToFlash+0xac>
		}
	}

	HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 8001384:	2364      	movs	r3, #100	@ 0x64
 8001386:	220c      	movs	r2, #12
 8001388:	4979      	ldr	r1, [pc, #484]	@ (8001570 <writeToFlash+0x2c8>)
 800138a:	f107 0018 	add.w	r0, r7, #24
 800138e:	f002 fae5 	bl	800395c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, VarDataTabRead, dataLength, 1000);
 8001392:	787b      	ldrb	r3, [r7, #1]
 8001394:	b29a      	uxth	r2, r3
 8001396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139a:	4974      	ldr	r1, [pc, #464]	@ (800156c <writeToFlash+0x2c4>)
 800139c:	f107 0018 	add.w	r0, r7, #24
 80013a0:	f002 fadc 	bl	800395c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 80013a4:	2364      	movs	r3, #100	@ 0x64
 80013a6:	2202      	movs	r2, #2
 80013a8:	4972      	ldr	r1, [pc, #456]	@ (8001574 <writeToFlash+0x2cc>)
 80013aa:	f107 0018 	add.w	r0, r7, #24
 80013ae:	f002 fad5 	bl	800395c <HAL_UART_Transmit>

	// Store revert Values in EEPROM emulation
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 80013b2:	2364      	movs	r3, #100	@ 0x64
 80013b4:	2202      	movs	r2, #2
 80013b6:	496f      	ldr	r1, [pc, #444]	@ (8001574 <writeToFlash+0x2cc>)
 80013b8:	f107 0018 	add.w	r0, r7, #24
 80013bc:	f002 face 	bl	800395c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "Store revert values\n\r", 21, 100);
 80013c0:	2364      	movs	r3, #100	@ 0x64
 80013c2:	2215      	movs	r2, #21
 80013c4:	496c      	ldr	r1, [pc, #432]	@ (8001578 <writeToFlash+0x2d0>)
 80013c6:	f107 0018 	add.w	r0, r7, #24
 80013ca:	f002 fac7 	bl	800395c <HAL_UART_Transmit>

	for (uint16_t i = 0; i < dataLength; i++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	813b      	strh	r3, [r7, #8]
 80013d2:	e015      	b.n	8001400 <writeToFlash+0x158>
		/* Sequence 1 */
		if ((EE_WriteVariable(VirtAddVarTab[i],
 80013d4:	893b      	ldrh	r3, [r7, #8]
 80013d6:	4a62      	ldr	r2, [pc, #392]	@ (8001560 <writeToFlash+0x2b8>)
 80013d8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
				VarDataTab[dataLength - i - 1])) != HAL_OK) {
 80013dc:	787a      	ldrb	r2, [r7, #1]
 80013de:	893b      	ldrh	r3, [r7, #8]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	3b01      	subs	r3, #1
		if ((EE_WriteVariable(VirtAddVarTab[i],
 80013e4:	4a65      	ldr	r2, [pc, #404]	@ (800157c <writeToFlash+0x2d4>)
 80013e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ea:	4619      	mov	r1, r3
 80013ec:	f7ff fb1c 	bl	8000a28 <EE_WriteVariable>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <writeToFlash+0x152>
			Error_Handler();
 80013f6:	f7ff ff51 	bl	800129c <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 80013fa:	893b      	ldrh	r3, [r7, #8]
 80013fc:	3301      	adds	r3, #1
 80013fe:	813b      	strh	r3, [r7, #8]
 8001400:	787b      	ldrb	r3, [r7, #1]
 8001402:	b29b      	uxth	r3, r3
 8001404:	893a      	ldrh	r2, [r7, #8]
 8001406:	429a      	cmp	r2, r3
 8001408:	d3e4      	bcc.n	80013d4 <writeToFlash+0x12c>
		}
	}

	// Read values
	HAL_UART_Transmit(&huart2, "Read revert values\n\r", 20, 100);
 800140a:	2364      	movs	r3, #100	@ 0x64
 800140c:	2214      	movs	r2, #20
 800140e:	495c      	ldr	r1, [pc, #368]	@ (8001580 <writeToFlash+0x2d8>)
 8001410:	f107 0018 	add.w	r0, r7, #24
 8001414:	f002 faa2 	bl	800395c <HAL_UART_Transmit>
	for (uint16_t i = 0; i < dataLength; i++) {
 8001418:	2300      	movs	r3, #0
 800141a:	80fb      	strh	r3, [r7, #6]
 800141c:	e012      	b.n	8001444 <writeToFlash+0x19c>
		if ((EE_ReadVariable(VirtAddVarTab[i],
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4a4f      	ldr	r2, [pc, #316]	@ (8001560 <writeToFlash+0x2b8>)
 8001422:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
				&VarDataTabRead[i])) != HAL_OK) {
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	4950      	ldr	r1, [pc, #320]	@ (800156c <writeToFlash+0x2c4>)
 800142a:	440b      	add	r3, r1
		if ((EE_ReadVariable(VirtAddVarTab[i],
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f7ff fab0 	bl	8000994 <EE_ReadVariable>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <writeToFlash+0x196>
			Error_Handler();
 800143a:	f7ff ff2f 	bl	800129c <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	3301      	adds	r3, #1
 8001442:	80fb      	strh	r3, [r7, #6]
 8001444:	787b      	ldrb	r3, [r7, #1]
 8001446:	b29b      	uxth	r3, r3
 8001448:	88fa      	ldrh	r2, [r7, #6]
 800144a:	429a      	cmp	r2, r3
 800144c:	d3e7      	bcc.n	800141e <writeToFlash+0x176>
		}
	}

	HAL_UART_Transmit(&huart2, "Read revert table: ", 19, 100);
 800144e:	2364      	movs	r3, #100	@ 0x64
 8001450:	2213      	movs	r2, #19
 8001452:	494c      	ldr	r1, [pc, #304]	@ (8001584 <writeToFlash+0x2dc>)
 8001454:	f107 0018 	add.w	r0, r7, #24
 8001458:	f002 fa80 	bl	800395c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, VarDataTabRead, dataLength, 1000);
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	b29a      	uxth	r2, r3
 8001460:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001464:	4941      	ldr	r1, [pc, #260]	@ (800156c <writeToFlash+0x2c4>)
 8001466:	f107 0018 	add.w	r0, r7, #24
 800146a:	f002 fa77 	bl	800395c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800146e:	2364      	movs	r3, #100	@ 0x64
 8001470:	2202      	movs	r2, #2
 8001472:	4940      	ldr	r1, [pc, #256]	@ (8001574 <writeToFlash+0x2cc>)
 8001474:	f107 0018 	add.w	r0, r7, #24
 8001478:	f002 fa70 	bl	800395c <HAL_UART_Transmit>

	// Store Values in EEPROM emulation
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800147c:	2364      	movs	r3, #100	@ 0x64
 800147e:	2202      	movs	r2, #2
 8001480:	493c      	ldr	r1, [pc, #240]	@ (8001574 <writeToFlash+0x2cc>)
 8001482:	f107 0018 	add.w	r0, r7, #24
 8001486:	f002 fa69 	bl	800395c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "Store values\n\r", 14, 100);
 800148a:	2364      	movs	r3, #100	@ 0x64
 800148c:	220e      	movs	r2, #14
 800148e:	4935      	ldr	r1, [pc, #212]	@ (8001564 <writeToFlash+0x2bc>)
 8001490:	f107 0018 	add.w	r0, r7, #24
 8001494:	f002 fa62 	bl	800395c <HAL_UART_Transmit>

	for (uint16_t i = 0; i < dataLength; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	80bb      	strh	r3, [r7, #4]
 800149c:	e013      	b.n	80014c6 <writeToFlash+0x21e>
		/* Sequence 1 */
		if ((EE_WriteVariable(VirtAddVarTab[i], VarDataTab[i]))
 800149e:	88bb      	ldrh	r3, [r7, #4]
 80014a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001560 <writeToFlash+0x2b8>)
 80014a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80014a6:	88bb      	ldrh	r3, [r7, #4]
 80014a8:	4934      	ldr	r1, [pc, #208]	@ (800157c <writeToFlash+0x2d4>)
 80014aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4610      	mov	r0, r2
 80014b2:	f7ff fab9 	bl	8000a28 <EE_WriteVariable>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <writeToFlash+0x218>
				!= HAL_OK) {
			Error_Handler();
 80014bc:	f7ff feee 	bl	800129c <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	3301      	adds	r3, #1
 80014c4:	80bb      	strh	r3, [r7, #4]
 80014c6:	787b      	ldrb	r3, [r7, #1]
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	88ba      	ldrh	r2, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3e6      	bcc.n	800149e <writeToFlash+0x1f6>
		}
	}

	// Read values
	HAL_UART_Transmit(&huart2, "Read values\n\r", 13, 100);
 80014d0:	2364      	movs	r3, #100	@ 0x64
 80014d2:	220d      	movs	r2, #13
 80014d4:	4924      	ldr	r1, [pc, #144]	@ (8001568 <writeToFlash+0x2c0>)
 80014d6:	f107 0018 	add.w	r0, r7, #24
 80014da:	f002 fa3f 	bl	800395c <HAL_UART_Transmit>
	for (uint16_t i = 0; i < dataLength; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	807b      	strh	r3, [r7, #2]
 80014e2:	e012      	b.n	800150a <writeToFlash+0x262>
		if ((EE_ReadVariable(VirtAddVarTab[i],
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001560 <writeToFlash+0x2b8>)
 80014e8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
				&VarDataTabRead[i])) != HAL_OK) {
 80014ec:	887b      	ldrh	r3, [r7, #2]
 80014ee:	491f      	ldr	r1, [pc, #124]	@ (800156c <writeToFlash+0x2c4>)
 80014f0:	440b      	add	r3, r1
		if ((EE_ReadVariable(VirtAddVarTab[i],
 80014f2:	4619      	mov	r1, r3
 80014f4:	4610      	mov	r0, r2
 80014f6:	f7ff fa4d 	bl	8000994 <EE_ReadVariable>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <writeToFlash+0x25c>
			Error_Handler();
 8001500:	f7ff fecc 	bl	800129c <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	3301      	adds	r3, #1
 8001508:	807b      	strh	r3, [r7, #2]
 800150a:	787b      	ldrb	r3, [r7, #1]
 800150c:	b29b      	uxth	r3, r3
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	429a      	cmp	r2, r3
 8001512:	d3e7      	bcc.n	80014e4 <writeToFlash+0x23c>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2120      	movs	r1, #32
 8001518:	4810      	ldr	r0, [pc, #64]	@ (800155c <writeToFlash+0x2b4>)
 800151a:	f001 f897 	bl	800264c <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 800151e:	2364      	movs	r3, #100	@ 0x64
 8001520:	220c      	movs	r2, #12
 8001522:	4913      	ldr	r1, [pc, #76]	@ (8001570 <writeToFlash+0x2c8>)
 8001524:	f107 0018 	add.w	r0, r7, #24
 8001528:	f002 fa18 	bl	800395c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, VarDataTabRead, dataLength, 1000);
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	b29a      	uxth	r2, r3
 8001530:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001534:	490d      	ldr	r1, [pc, #52]	@ (800156c <writeToFlash+0x2c4>)
 8001536:	f107 0018 	add.w	r0, r7, #24
 800153a:	f002 fa0f 	bl	800395c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800153e:	2364      	movs	r3, #100	@ 0x64
 8001540:	2202      	movs	r2, #2
 8001542:	490c      	ldr	r1, [pc, #48]	@ (8001574 <writeToFlash+0x2cc>)
 8001544:	f107 0018 	add.w	r0, r7, #24
 8001548:	f002 fa08 	bl	800395c <HAL_UART_Transmit>
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001556:	b004      	add	sp, #16
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40020000 	.word	0x40020000
 8001560:	20000404 	.word	0x20000404
 8001564:	08006b98 	.word	0x08006b98
 8001568:	08006ba8 	.word	0x08006ba8
 800156c:	2000043c 	.word	0x2000043c
 8001570:	08006bb8 	.word	0x08006bb8
 8001574:	08006bc8 	.word	0x08006bc8
 8001578:	08006bcc 	.word	0x08006bcc
 800157c:	20000000 	.word	0x20000000
 8001580:	08006be4 	.word	0x08006be4
 8001584:	08006bfc 	.word	0x08006bfc

08001588 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001590:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <RetargetInit+0x28>)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <RetargetInit+0x2c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6898      	ldr	r0, [r3, #8]
 800159c:	2300      	movs	r3, #0
 800159e:	2202      	movs	r2, #2
 80015a0:	2100      	movs	r1, #0
 80015a2:	f004 faff 	bl	8005ba4 <setvbuf>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000458 	.word	0x20000458
 80015b4:	20000054 	.word	0x20000054

080015b8 <_isatty>:

int _isatty(int fd) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db04      	blt.n	80015d0 <_isatty+0x18>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	dc01      	bgt.n	80015d0 <_isatty+0x18>
    return 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e005      	b.n	80015dc <_isatty+0x24>

  errno = EBADF;
 80015d0:	f004 fd18 	bl	8006004 <__errno>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2209      	movs	r2, #9
 80015d8:	601a      	str	r2, [r3, #0]
  return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <_write>:

int _write(int fd, char* ptr, int len) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d002      	beq.n	80015fc <_write+0x18>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d111      	bne.n	8001620 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80015fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <_write+0x54>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	b29a      	uxth	r2, r3
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	f002 f9a7 	bl	800395c <HAL_UART_Transmit>
 800160e:	4603      	mov	r3, r0
 8001610:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <_write+0x38>
      return len;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	e008      	b.n	800162e <_write+0x4a>
    else
      return EIO;
 800161c:	2305      	movs	r3, #5
 800161e:	e006      	b.n	800162e <_write+0x4a>
  }
  errno = EBADF;
 8001620:	f004 fcf0 	bl	8006004 <__errno>
 8001624:	4603      	mov	r3, r0
 8001626:	2209      	movs	r2, #9
 8001628:	601a      	str	r2, [r3, #0]
  return -1;
 800162a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162e:	4618      	mov	r0, r3
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000458 	.word	0x20000458

0800163c <_close>:

int _close(int fd) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db04      	blt.n	8001654 <_close+0x18>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b02      	cmp	r3, #2
 800164e:	dc01      	bgt.n	8001654 <_close+0x18>
    return 0;
 8001650:	2300      	movs	r3, #0
 8001652:	e006      	b.n	8001662 <_close+0x26>

  errno = EBADF;
 8001654:	f004 fcd6 	bl	8006004 <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	2209      	movs	r2, #9
 800165c:	601a      	str	r2, [r3, #0]
  return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800166a:	b580      	push	{r7, lr}
 800166c:	b084      	sub	sp, #16
 800166e:	af00      	add	r7, sp, #0
 8001670:	60f8      	str	r0, [r7, #12]
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001676:	f004 fcc5 	bl	8006004 <__errno>
 800167a:	4603      	mov	r3, r0
 800167c:	2209      	movs	r2, #9
 800167e:	601a      	str	r2, [r3, #0]
  return -1;
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <_read>:

int _read(int fd, char* ptr, int len) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d110      	bne.n	80016c0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <_read+0x4c>)
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
 80016a6:	2201      	movs	r2, #1
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	f002 f9e2 	bl	8003a72 <HAL_UART_Receive>
 80016ae:	4603      	mov	r3, r0
 80016b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80016b2:	7dfb      	ldrb	r3, [r7, #23]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <_read+0x30>
      return 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e008      	b.n	80016ce <_read+0x42>
    else
      return EIO;
 80016bc:	2305      	movs	r3, #5
 80016be:	e006      	b.n	80016ce <_read+0x42>
  }
  errno = EBADF;
 80016c0:	f004 fca0 	bl	8006004 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2209      	movs	r2, #9
 80016c8:	601a      	str	r2, [r3, #0]
  return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000458 	.word	0x20000458

080016dc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	db08      	blt.n	80016fe <_fstat+0x22>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	dc05      	bgt.n	80016fe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f8:	605a      	str	r2, [r3, #4]
    return 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e005      	b.n	800170a <_fstat+0x2e>
  }

  errno = EBADF;
 80016fe:	f004 fc81 	bl	8006004 <__errno>
 8001702:	4603      	mov	r3, r0
 8001704:	2209      	movs	r2, #9
 8001706:	601a      	str	r2, [r3, #0]
  return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <HAL_MspInit+0x54>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	4a11      	ldr	r2, [pc, #68]	@ (8001768 <HAL_MspInit+0x54>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001728:	6453      	str	r3, [r2, #68]	@ 0x44
 800172a:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_MspInit+0x54>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_MspInit+0x54>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <HAL_MspInit+0x54>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001744:	6413      	str	r3, [r2, #64]	@ 0x40
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_MspInit+0x54>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	210f      	movs	r1, #15
 8001756:	f06f 0001 	mvn.w	r0, #1
 800175a:	f000 faa1 	bl	8001ca0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0b      	ldr	r2, [pc, #44]	@ (80017a8 <HAL_CRC_MspInit+0x3c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d10d      	bne.n	800179a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b0a      	ldr	r3, [pc, #40]	@ (80017ac <HAL_CRC_MspInit+0x40>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a09      	ldr	r2, [pc, #36]	@ (80017ac <HAL_CRC_MspInit+0x40>)
 8001788:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b07      	ldr	r3, [pc, #28]	@ (80017ac <HAL_CRC_MspInit+0x40>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023000 	.word	0x40023000
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0b      	ldr	r2, [pc, #44]	@ (80017ec <HAL_TIM_Base_MspInit+0x3c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d10d      	bne.n	80017de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b0a      	ldr	r3, [pc, #40]	@ (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	4a09      	ldr	r2, [pc, #36]	@ (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_TIM_Base_MspInit+0x40>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	@ 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a19      	ldr	r2, [pc, #100]	@ (8001878 <HAL_UART_MspInit+0x84>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d12b      	bne.n	800186e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <HAL_UART_MspInit+0x88>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	4a17      	ldr	r2, [pc, #92]	@ (800187c <HAL_UART_MspInit+0x88>)
 8001820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001824:	6413      	str	r3, [r2, #64]	@ 0x40
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <HAL_UART_MspInit+0x88>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_UART_MspInit+0x88>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a10      	ldr	r2, [pc, #64]	@ (800187c <HAL_UART_MspInit+0x88>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_UART_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800184e:	230c      	movs	r3, #12
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800185e:	2307      	movs	r3, #7
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	@ (8001880 <HAL_UART_MspInit+0x8c>)
 800186a:	f000 fd6b 	bl	8002344 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3728      	adds	r7, #40	@ 0x28
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40004400 	.word	0x40004400
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000

08001884 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08e      	sub	sp, #56	@ 0x38
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <HAL_InitTick+0xe4>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	4a32      	ldr	r2, [pc, #200]	@ (8001968 <HAL_InitTick+0xe4>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a4:	4b30      	ldr	r3, [pc, #192]	@ (8001968 <HAL_InitTick+0xe4>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018b0:	f107 0210 	add.w	r2, r7, #16
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4611      	mov	r1, r2
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 fb92 	bl	8002fe4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018c0:	6a3b      	ldr	r3, [r7, #32]
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d103      	bne.n	80018d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ca:	f001 fb63 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80018ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80018d0:	e004      	b.n	80018dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80018d2:	f001 fb5f 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80018d6:	4603      	mov	r3, r0
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018de:	4a23      	ldr	r2, [pc, #140]	@ (800196c <HAL_InitTick+0xe8>)
 80018e0:	fba2 2303 	umull	r2, r3, r2, r3
 80018e4:	0c9b      	lsrs	r3, r3, #18
 80018e6:	3b01      	subs	r3, #1
 80018e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <HAL_InitTick+0xec>)
 80018ec:	4a21      	ldr	r2, [pc, #132]	@ (8001974 <HAL_InitTick+0xf0>)
 80018ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80018f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <HAL_InitTick+0xec>)
 80018f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018f6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80018f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001970 <HAL_InitTick+0xec>)
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80018fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001970 <HAL_InitTick+0xec>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <HAL_InitTick+0xec>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <HAL_InitTick+0xec>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001910:	4817      	ldr	r0, [pc, #92]	@ (8001970 <HAL_InitTick+0xec>)
 8001912:	f001 fb99 	bl	8003048 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800191c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001920:	2b00      	cmp	r3, #0
 8001922:	d11b      	bne.n	800195c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001924:	4812      	ldr	r0, [pc, #72]	@ (8001970 <HAL_InitTick+0xec>)
 8001926:	f001 fbdf 	bl	80030e8 <HAL_TIM_Base_Start_IT>
 800192a:	4603      	mov	r3, r0
 800192c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001930:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001934:	2b00      	cmp	r3, #0
 8001936:	d111      	bne.n	800195c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001938:	2032      	movs	r0, #50	@ 0x32
 800193a:	f000 f9cd 	bl	8001cd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d808      	bhi.n	8001956 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	2032      	movs	r0, #50	@ 0x32
 800194a:	f000 f9a9 	bl	8001ca0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <HAL_InitTick+0xf4>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e002      	b.n	800195c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800195c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001960:	4618      	mov	r0, r3
 8001962:	3738      	adds	r7, #56	@ 0x38
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40023800 	.word	0x40023800
 800196c:	431bde83 	.word	0x431bde83
 8001970:	2000045c 	.word	0x2000045c
 8001974:	40000c00 	.word	0x40000c00
 8001978:	2000003c 	.word	0x2000003c

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001980:	bf00      	nop
 8001982:	e7fd      	b.n	8001980 <NMI_Handler+0x4>

08001984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <MemManage_Handler+0x4>

08001994 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <BusFault_Handler+0x4>

0800199c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <UsageFault_Handler+0x4>

080019a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
	...

080019b4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <TIM5_IRQHandler+0x10>)
 80019ba:	f001 fbf7 	bl	80031ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000045c 	.word	0x2000045c

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	@ (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f004 fb04 	bl	8006004 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20018000 	.word	0x20018000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	200004a4 	.word	0x200004a4
 8001a30:	20004370 	.word	0x20004370

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a5c:	f7ff ffea 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480c      	ldr	r0, [pc, #48]	@ (8001a94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a62:	490d      	ldr	r1, [pc, #52]	@ (8001a98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a78:	4c0a      	ldr	r4, [pc, #40]	@ (8001aa4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a86:	f004 fac3 	bl	8006010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8a:	f7ff f9bf 	bl	8000e0c <main>
  bx  lr    
 8001a8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a98:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001a9c:	08006c74 	.word	0x08006c74
  ldr r2, =_sbss
 8001aa0:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001aa4:	2000436c 	.word	0x2000436c

08001aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa8:	e7fe      	b.n	8001aa8 <ADC_IRQHandler>
	...

08001aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <HAL_Init+0x40>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8001aec <HAL_Init+0x40>)
 8001ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <HAL_Init+0x40>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <HAL_Init+0x40>)
 8001ac2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <HAL_Init+0x40>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a07      	ldr	r2, [pc, #28]	@ (8001aec <HAL_Init+0x40>)
 8001ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f000 f8d8 	bl	8001c8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ada:	200f      	movs	r0, #15
 8001adc:	f7ff fed2 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae0:	f7ff fe18 	bl	8001714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_IncTick+0x20>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <HAL_IncTick+0x24>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a04      	ldr	r2, [pc, #16]	@ (8001b14 <HAL_IncTick+0x24>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000040 	.word	0x20000040
 8001b14:	200004a8 	.word	0x200004a8

08001b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_GetTick+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	200004a8 	.word	0x200004a8

08001b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b40:	4b0c      	ldr	r3, [pc, #48]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b62:	4a04      	ldr	r2, [pc, #16]	@ (8001b74 <__NVIC_SetPriorityGrouping+0x44>)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	60d3      	str	r3, [r2, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b7c:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <__NVIC_GetPriorityGrouping+0x18>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	0a1b      	lsrs	r3, r3, #8
 8001b82:	f003 0307 	and.w	r3, r3, #7
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	db0b      	blt.n	8001bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	f003 021f 	and.w	r2, r3, #31
 8001bac:	4907      	ldr	r1, [pc, #28]	@ (8001bcc <__NVIC_EnableIRQ+0x38>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000e100 	.word	0xe000e100

08001bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	db0a      	blt.n	8001bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	490c      	ldr	r1, [pc, #48]	@ (8001c1c <__NVIC_SetPriority+0x4c>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf8:	e00a      	b.n	8001c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4908      	ldr	r1, [pc, #32]	@ (8001c20 <__NVIC_SetPriority+0x50>)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	3b04      	subs	r3, #4
 8001c08:	0112      	lsls	r2, r2, #4
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	761a      	strb	r2, [r3, #24]
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100
 8001c20:	e000ed00 	.word	0xe000ed00

08001c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b089      	sub	sp, #36	@ 0x24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f1c3 0307 	rsb	r3, r3, #7
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	bf28      	it	cs
 8001c42:	2304      	movcs	r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	2b06      	cmp	r3, #6
 8001c4c:	d902      	bls.n	8001c54 <NVIC_EncodePriority+0x30>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b03      	subs	r3, #3
 8001c52:	e000      	b.n	8001c56 <NVIC_EncodePriority+0x32>
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c58:	f04f 32ff 	mov.w	r2, #4294967295
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	401a      	ands	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa01 f303 	lsl.w	r3, r1, r3
 8001c76:	43d9      	mvns	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c7c:	4313      	orrs	r3, r2
         );
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7ff ff4c 	bl	8001b30 <__NVIC_SetPriorityGrouping>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb2:	f7ff ff61 	bl	8001b78 <__NVIC_GetPriorityGrouping>
 8001cb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	68b9      	ldr	r1, [r7, #8]
 8001cbc:	6978      	ldr	r0, [r7, #20]
 8001cbe:	f7ff ffb1 	bl	8001c24 <NVIC_EncodePriority>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff ff80 	bl	8001bd0 <__NVIC_SetPriority>
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff ff54 	bl	8001b94 <__NVIC_EnableIRQ>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00e      	b.n	8001d24 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	795b      	ldrb	r3, [r3, #5]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fd28 	bl	800176c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f042 0201 	orr.w	r2, r2, #1
 8001d50:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e00a      	b.n	8001d6e <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	441a      	add	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d3f0      	bcc.n	8001d58 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001d84:	693b      	ldr	r3, [r7, #16]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	371c      	adds	r7, #28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001da6:	4b23      	ldr	r3, [pc, #140]	@ (8001e34 <HAL_FLASH_Program+0xa0>)
 8001da8:	7e1b      	ldrb	r3, [r3, #24]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_FLASH_Program+0x1e>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e03b      	b.n	8001e2a <HAL_FLASH_Program+0x96>
 8001db2:	4b20      	ldr	r3, [pc, #128]	@ (8001e34 <HAL_FLASH_Program+0xa0>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001db8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001dbc:	f000 f860 	bl	8001e80 <FLASH_WaitForLastOperation>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001dc4:	7dfb      	ldrb	r3, [r7, #23]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d12b      	bne.n	8001e22 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d105      	bne.n	8001ddc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001dd0:	783b      	ldrb	r3, [r7, #0]
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	68b8      	ldr	r0, [r7, #8]
 8001dd6:	f000 f90b 	bl	8001ff0 <FLASH_Program_Byte>
 8001dda:	e016      	b.n	8001e0a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d105      	bne.n	8001dee <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001de2:	883b      	ldrh	r3, [r7, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	68b8      	ldr	r0, [r7, #8]
 8001de8:	f000 f8de 	bl	8001fa8 <FLASH_Program_HalfWord>
 8001dec:	e00d      	b.n	8001e0a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d105      	bne.n	8001e00 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4619      	mov	r1, r3
 8001df8:	68b8      	ldr	r0, [r7, #8]
 8001dfa:	f000 f8b3 	bl	8001f64 <FLASH_Program_Word>
 8001dfe:	e004      	b.n	8001e0a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	f000 f87b 	bl	8001f00 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e0a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e0e:	f000 f837 	bl	8001e80 <FLASH_WaitForLastOperation>
 8001e12:	4603      	mov	r3, r0
 8001e14:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001e16:	4b08      	ldr	r3, [pc, #32]	@ (8001e38 <HAL_FLASH_Program+0xa4>)
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	4a07      	ldr	r2, [pc, #28]	@ (8001e38 <HAL_FLASH_Program+0xa4>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e22:	4b04      	ldr	r3, [pc, #16]	@ (8001e34 <HAL_FLASH_Program+0xa0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200004ac 	.word	0x200004ac
 8001e38:	40023c00 	.word	0x40023c00

08001e3c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e46:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <HAL_FLASH_Unlock+0x38>)
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da0b      	bge.n	8001e66 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_FLASH_Unlock+0x38>)
 8001e50:	4a09      	ldr	r2, [pc, #36]	@ (8001e78 <HAL_FLASH_Unlock+0x3c>)
 8001e52:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e54:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <HAL_FLASH_Unlock+0x38>)
 8001e56:	4a09      	ldr	r2, [pc, #36]	@ (8001e7c <HAL_FLASH_Unlock+0x40>)
 8001e58:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_FLASH_Unlock+0x38>)
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da01      	bge.n	8001e66 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e66:	79fb      	ldrb	r3, [r7, #7]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	40023c00 	.word	0x40023c00
 8001e78:	45670123 	.word	0x45670123
 8001e7c:	cdef89ab 	.word	0xcdef89ab

08001e80 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <FLASH_WaitForLastOperation+0x78>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e92:	f7ff fe41 	bl	8001b18 <HAL_GetTick>
 8001e96:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e98:	e010      	b.n	8001ebc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d00c      	beq.n	8001ebc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <FLASH_WaitForLastOperation+0x38>
 8001ea8:	f7ff fe36 	bl	8001b18 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d201      	bcs.n	8001ebc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e019      	b.n	8001ef0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <FLASH_WaitForLastOperation+0x7c>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1e8      	bne.n	8001e9a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <FLASH_WaitForLastOperation+0x7c>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ed4:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <FLASH_WaitForLastOperation+0x7c>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <FLASH_WaitForLastOperation+0x7c>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ee6:	f000 f8a5 	bl	8002034 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
  
}  
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200004ac 	.word	0x200004ac
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f0c:	4b14      	ldr	r3, [pc, #80]	@ (8001f60 <FLASH_Program_DoubleWord+0x60>)
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	4a13      	ldr	r2, [pc, #76]	@ (8001f60 <FLASH_Program_DoubleWord+0x60>)
 8001f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <FLASH_Program_DoubleWord+0x60>)
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	4a10      	ldr	r2, [pc, #64]	@ (8001f60 <FLASH_Program_DoubleWord+0x60>)
 8001f1e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001f22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f24:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <FLASH_Program_DoubleWord+0x60>)
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	@ (8001f60 <FLASH_Program_DoubleWord+0x60>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001f36:	f3bf 8f6f 	isb	sy
}
 8001f3a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	000a      	movs	r2, r1
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	68f9      	ldr	r1, [r7, #12]
 8001f4e:	3104      	adds	r1, #4
 8001f50:	4613      	mov	r3, r2
 8001f52:	600b      	str	r3, [r1, #0]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <FLASH_Program_Word+0x40>)
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <FLASH_Program_Word+0x40>)
 8001f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <FLASH_Program_Word+0x40>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	4a09      	ldr	r2, [pc, #36]	@ (8001fa4 <FLASH_Program_Word+0x40>)
 8001f80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f86:	4b07      	ldr	r3, [pc, #28]	@ (8001fa4 <FLASH_Program_Word+0x40>)
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	4a06      	ldr	r2, [pc, #24]	@ (8001fa4 <FLASH_Program_Word+0x40>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	601a      	str	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40023c00 	.word	0x40023c00

08001fa8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <FLASH_Program_HalfWord+0x44>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8001fec <FLASH_Program_HalfWord+0x44>)
 8001fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <FLASH_Program_HalfWord+0x44>)
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	4a09      	ldr	r2, [pc, #36]	@ (8001fec <FLASH_Program_HalfWord+0x44>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fcc:	4b07      	ldr	r3, [pc, #28]	@ (8001fec <FLASH_Program_HalfWord+0x44>)
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	4a06      	ldr	r2, [pc, #24]	@ (8001fec <FLASH_Program_HalfWord+0x44>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	801a      	strh	r2, [r3, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40023c00 	.word	0x40023c00

08001ff0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <FLASH_Program_Byte+0x40>)
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4a0b      	ldr	r2, [pc, #44]	@ (8002030 <FLASH_Program_Byte+0x40>)
 8002002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002008:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <FLASH_Program_Byte+0x40>)
 800200a:	4a09      	ldr	r2, [pc, #36]	@ (8002030 <FLASH_Program_Byte+0x40>)
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <FLASH_Program_Byte+0x40>)
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	4a06      	ldr	r2, [pc, #24]	@ (8002030 <FLASH_Program_Byte+0x40>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	701a      	strb	r2, [r3, #0]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023c00 	.word	0x40023c00

08002034 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002038:	4b2f      	ldr	r3, [pc, #188]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d008      	beq.n	8002056 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002044:	4b2d      	ldr	r3, [pc, #180]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f043 0310 	orr.w	r3, r3, #16
 800204c:	4a2b      	ldr	r2, [pc, #172]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 800204e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002050:	4b29      	ldr	r3, [pc, #164]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 8002052:	2210      	movs	r2, #16
 8002054:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002056:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0320 	and.w	r3, r3, #32
 800205e:	2b00      	cmp	r3, #0
 8002060:	d008      	beq.n	8002074 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002062:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f043 0308 	orr.w	r3, r3, #8
 800206a:	4a24      	ldr	r2, [pc, #144]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 800206c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800206e:	4b22      	ldr	r3, [pc, #136]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 8002070:	2220      	movs	r2, #32
 8002072:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002074:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002080:	4b1e      	ldr	r3, [pc, #120]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 800208a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800208c:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 800208e:	2240      	movs	r2, #64	@ 0x40
 8002090:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002092:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f043 0302 	orr.w	r3, r3, #2
 80020a6:	4a15      	ldr	r2, [pc, #84]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 80020a8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80020aa:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 80020ac:	2280      	movs	r2, #128	@ 0x80
 80020ae:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d009      	beq.n	80020d0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	4a0d      	ldr	r2, [pc, #52]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 80020c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 80020ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ce:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f043 0320 	orr.w	r3, r3, #32
 80020e4:	4a05      	ldr	r2, [pc, #20]	@ (80020fc <FLASH_SetErrorCode+0xc8>)
 80020e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80020e8:	4b03      	ldr	r3, [pc, #12]	@ (80020f8 <FLASH_SetErrorCode+0xc4>)
 80020ea:	2202      	movs	r2, #2
 80020ec:	60da      	str	r2, [r3, #12]
  }
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40023c00 	.word	0x40023c00
 80020fc:	200004ac 	.word	0x200004ac

08002100 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002112:	4b31      	ldr	r3, [pc, #196]	@ (80021d8 <HAL_FLASHEx_Erase+0xd8>)
 8002114:	7e1b      	ldrb	r3, [r3, #24]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_FLASHEx_Erase+0x1e>
 800211a:	2302      	movs	r3, #2
 800211c:	e058      	b.n	80021d0 <HAL_FLASHEx_Erase+0xd0>
 800211e:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <HAL_FLASHEx_Erase+0xd8>)
 8002120:	2201      	movs	r2, #1
 8002122:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002124:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002128:	f7ff feaa 	bl	8001e80 <FLASH_WaitForLastOperation>
 800212c:	4603      	mov	r3, r0
 800212e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002130:	7bfb      	ldrb	r3, [r7, #15]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d148      	bne.n	80021c8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d115      	bne.n	8002172 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4619      	mov	r1, r3
 8002152:	4610      	mov	r0, r2
 8002154:	f000 f844 	bl	80021e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002158:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800215c:	f7ff fe90 	bl	8001e80 <FLASH_WaitForLastOperation>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002164:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <HAL_FLASHEx_Erase+0xdc>)
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4a1c      	ldr	r2, [pc, #112]	@ (80021dc <HAL_FLASHEx_Erase+0xdc>)
 800216a:	f023 0304 	bic.w	r3, r3, #4
 800216e:	6113      	str	r3, [r2, #16]
 8002170:	e028      	b.n	80021c4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	e01c      	b.n	80021b4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	4619      	mov	r1, r3
 8002182:	68b8      	ldr	r0, [r7, #8]
 8002184:	f000 f850 	bl	8002228 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002188:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800218c:	f7ff fe78 	bl	8001e80 <FLASH_WaitForLastOperation>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <HAL_FLASHEx_Erase+0xdc>)
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	4a10      	ldr	r2, [pc, #64]	@ (80021dc <HAL_FLASHEx_Erase+0xdc>)
 800219a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800219e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	601a      	str	r2, [r3, #0]
          break;
 80021ac:	e00a      	b.n	80021c4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4413      	add	r3, r2
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d3da      	bcc.n	800217a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80021c4:	f000 f878 	bl	80022b8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021c8:	4b03      	ldr	r3, [pc, #12]	@ (80021d8 <HAL_FLASHEx_Erase+0xd8>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	761a      	strb	r2, [r3, #24]

  return status;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	200004ac 	.word	0x200004ac
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	6039      	str	r1, [r7, #0]
 80021ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002224 <FLASH_MassErase+0x44>)
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002224 <FLASH_MassErase+0x44>)
 80021f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <FLASH_MassErase+0x44>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	4a09      	ldr	r2, [pc, #36]	@ (8002224 <FLASH_MassErase+0x44>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002204:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <FLASH_MassErase+0x44>)
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	4313      	orrs	r3, r2
 800220e:	4a05      	ldr	r2, [pc, #20]	@ (8002224 <FLASH_MassErase+0x44>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6113      	str	r3, [r2, #16]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023c00 	.word	0x40023c00

08002228 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002238:	78fb      	ldrb	r3, [r7, #3]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e010      	b.n	8002266 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d103      	bne.n	8002252 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800224a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e009      	b.n	8002266 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d103      	bne.n	8002260 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002258:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	e002      	b.n	8002266 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002260:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002264:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002266:	4b13      	ldr	r3, [pc, #76]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	4a12      	ldr	r2, [pc, #72]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 800226c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002270:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002272:	4b10      	ldr	r3, [pc, #64]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	490f      	ldr	r1, [pc, #60]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4313      	orrs	r3, r2
 800227c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	4a0c      	ldr	r2, [pc, #48]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 8002284:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002288:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800228a:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4313      	orrs	r3, r2
 8002294:	4a07      	ldr	r2, [pc, #28]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 8002296:	f043 0302 	orr.w	r3, r3, #2
 800229a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800229c:	4b05      	ldr	r3, [pc, #20]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	4a04      	ldr	r2, [pc, #16]	@ (80022b4 <FLASH_Erase_Sector+0x8c>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a6:	6113      	str	r3, [r2, #16]
}
 80022a8:	bf00      	nop
 80022aa:	3714      	adds	r7, #20
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80022bc:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d017      	beq.n	80022f8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80022c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022ce:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022d2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80022d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a19      	ldr	r2, [pc, #100]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022da:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a16      	ldr	r2, [pc, #88]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022ea:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ec:	4b14      	ldr	r3, [pc, #80]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a13      	ldr	r2, [pc, #76]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022f6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <FLASH_FlushCaches+0x88>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d017      	beq.n	8002334 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002304:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <FLASH_FlushCaches+0x88>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a0d      	ldr	r2, [pc, #52]	@ (8002340 <FLASH_FlushCaches+0x88>)
 800230a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800230e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <FLASH_FlushCaches+0x88>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0a      	ldr	r2, [pc, #40]	@ (8002340 <FLASH_FlushCaches+0x88>)
 8002316:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <FLASH_FlushCaches+0x88>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a07      	ldr	r2, [pc, #28]	@ (8002340 <FLASH_FlushCaches+0x88>)
 8002322:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002326:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <FLASH_FlushCaches+0x88>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <FLASH_FlushCaches+0x88>)
 800232e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002332:	6013      	str	r3, [r2, #0]
  }
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023c00 	.word	0x40023c00

08002344 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	@ 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e159      	b.n	8002614 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002360:	2201      	movs	r2, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	429a      	cmp	r2, r3
 800237a:	f040 8148 	bne.w	800260e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d005      	beq.n	8002396 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002392:	2b02      	cmp	r3, #2
 8002394:	d130      	bne.n	80023f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	091b      	lsrs	r3, r3, #4
 80023e2:	f003 0201 	and.w	r2, r3, #1
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b03      	cmp	r3, #3
 8002402:	d017      	beq.n	8002434 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d123      	bne.n	8002488 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	220f      	movs	r2, #15
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	08da      	lsrs	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3208      	adds	r2, #8
 8002482:	69b9      	ldr	r1, [r7, #24]
 8002484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0203 	and.w	r2, r3, #3
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80a2 	beq.w	800260e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	4b57      	ldr	r3, [pc, #348]	@ (800262c <HAL_GPIO_Init+0x2e8>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	4a56      	ldr	r2, [pc, #344]	@ (800262c <HAL_GPIO_Init+0x2e8>)
 80024d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024da:	4b54      	ldr	r3, [pc, #336]	@ (800262c <HAL_GPIO_Init+0x2e8>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e6:	4a52      	ldr	r2, [pc, #328]	@ (8002630 <HAL_GPIO_Init+0x2ec>)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	089b      	lsrs	r3, r3, #2
 80024ec:	3302      	adds	r3, #2
 80024ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	220f      	movs	r2, #15
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4013      	ands	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a49      	ldr	r2, [pc, #292]	@ (8002634 <HAL_GPIO_Init+0x2f0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d019      	beq.n	8002546 <HAL_GPIO_Init+0x202>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a48      	ldr	r2, [pc, #288]	@ (8002638 <HAL_GPIO_Init+0x2f4>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d013      	beq.n	8002542 <HAL_GPIO_Init+0x1fe>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a47      	ldr	r2, [pc, #284]	@ (800263c <HAL_GPIO_Init+0x2f8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d00d      	beq.n	800253e <HAL_GPIO_Init+0x1fa>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a46      	ldr	r2, [pc, #280]	@ (8002640 <HAL_GPIO_Init+0x2fc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d007      	beq.n	800253a <HAL_GPIO_Init+0x1f6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a45      	ldr	r2, [pc, #276]	@ (8002644 <HAL_GPIO_Init+0x300>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d101      	bne.n	8002536 <HAL_GPIO_Init+0x1f2>
 8002532:	2304      	movs	r3, #4
 8002534:	e008      	b.n	8002548 <HAL_GPIO_Init+0x204>
 8002536:	2307      	movs	r3, #7
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x204>
 800253a:	2303      	movs	r3, #3
 800253c:	e004      	b.n	8002548 <HAL_GPIO_Init+0x204>
 800253e:	2302      	movs	r3, #2
 8002540:	e002      	b.n	8002548 <HAL_GPIO_Init+0x204>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_GPIO_Init+0x204>
 8002546:	2300      	movs	r3, #0
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	f002 0203 	and.w	r2, r2, #3
 800254e:	0092      	lsls	r2, r2, #2
 8002550:	4093      	lsls	r3, r2
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002558:	4935      	ldr	r1, [pc, #212]	@ (8002630 <HAL_GPIO_Init+0x2ec>)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3302      	adds	r3, #2
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <HAL_GPIO_Init+0x304>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800258a:	4a2f      	ldr	r2, [pc, #188]	@ (8002648 <HAL_GPIO_Init+0x304>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002590:	4b2d      	ldr	r3, [pc, #180]	@ (8002648 <HAL_GPIO_Init+0x304>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b4:	4a24      	ldr	r2, [pc, #144]	@ (8002648 <HAL_GPIO_Init+0x304>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ba:	4b23      	ldr	r3, [pc, #140]	@ (8002648 <HAL_GPIO_Init+0x304>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025de:	4a1a      	ldr	r2, [pc, #104]	@ (8002648 <HAL_GPIO_Init+0x304>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e4:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <HAL_GPIO_Init+0x304>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002608:	4a0f      	ldr	r2, [pc, #60]	@ (8002648 <HAL_GPIO_Init+0x304>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3301      	adds	r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2b0f      	cmp	r3, #15
 8002618:	f67f aea2 	bls.w	8002360 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3724      	adds	r7, #36	@ 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40013800 	.word	0x40013800
 8002634:	40020000 	.word	0x40020000
 8002638:	40020400 	.word	0x40020400
 800263c:	40020800 	.word	0x40020800
 8002640:	40020c00 	.word	0x40020c00
 8002644:	40021000 	.word	0x40021000
 8002648:	40013c00 	.word	0x40013c00

0800264c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	807b      	strh	r3, [r7, #2]
 8002658:	4613      	mov	r3, r2
 800265a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800265c:	787b      	ldrb	r3, [r7, #1]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002662:	887a      	ldrh	r2, [r7, #2]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002668:	e003      	b.n	8002672 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266a:	887b      	ldrh	r3, [r7, #2]
 800266c:	041a      	lsls	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	619a      	str	r2, [r3, #24]
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800267e:	b480      	push	{r7}
 8002680:	b085      	sub	sp, #20
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002690:	887a      	ldrh	r2, [r7, #2]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4013      	ands	r3, r2
 8002696:	041a      	lsls	r2, r3, #16
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	43d9      	mvns	r1, r3
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	400b      	ands	r3, r1
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	619a      	str	r2, [r3, #24]
}
 80026a6:	bf00      	nop
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e267      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d075      	beq.n	80027be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026d2:	4b88      	ldr	r3, [pc, #544]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d00c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026de:	4b85      	ldr	r3, [pc, #532]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d112      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ea:	4b82      	ldr	r3, [pc, #520]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026f6:	d10b      	bne.n	8002710 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	4b7e      	ldr	r3, [pc, #504]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d05b      	beq.n	80027bc <HAL_RCC_OscConfig+0x108>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d157      	bne.n	80027bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e242      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002718:	d106      	bne.n	8002728 <HAL_RCC_OscConfig+0x74>
 800271a:	4b76      	ldr	r3, [pc, #472]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a75      	ldr	r2, [pc, #468]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	e01d      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002730:	d10c      	bne.n	800274c <HAL_RCC_OscConfig+0x98>
 8002732:	4b70      	ldr	r3, [pc, #448]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6f      	ldr	r2, [pc, #444]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b6d      	ldr	r3, [pc, #436]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6c      	ldr	r2, [pc, #432]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	e00b      	b.n	8002764 <HAL_RCC_OscConfig+0xb0>
 800274c:	4b69      	ldr	r3, [pc, #420]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a68      	ldr	r2, [pc, #416]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b66      	ldr	r3, [pc, #408]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a65      	ldr	r2, [pc, #404]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff f9d4 	bl	8001b18 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f9d0 	bl	8001b18 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e207      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002786:	4b5b      	ldr	r3, [pc, #364]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0xc0>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff f9c0 	bl	8001b18 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff f9bc 	bl	8001b18 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e1f3      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ae:	4b51      	ldr	r3, [pc, #324]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0xe8>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d063      	beq.n	8002892 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ca:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00b      	beq.n	80027ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027d6:	4b47      	ldr	r3, [pc, #284]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d11c      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e2:	4b44      	ldr	r3, [pc, #272]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d116      	bne.n	800281c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ee:	4b41      	ldr	r3, [pc, #260]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e1c7      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002806:	4b3b      	ldr	r3, [pc, #236]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4937      	ldr	r1, [pc, #220]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281a:	e03a      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002824:	4b34      	ldr	r3, [pc, #208]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282a:	f7ff f975 	bl	8001b18 <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002830:	e008      	b.n	8002844 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002832:	f7ff f971 	bl	8001b18 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e1a8      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002844:	4b2b      	ldr	r3, [pc, #172]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0f0      	beq.n	8002832 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002850:	4b28      	ldr	r3, [pc, #160]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	4925      	ldr	r1, [pc, #148]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002860:	4313      	orrs	r3, r2
 8002862:	600b      	str	r3, [r1, #0]
 8002864:	e015      	b.n	8002892 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002866:	4b24      	ldr	r3, [pc, #144]	@ (80028f8 <HAL_RCC_OscConfig+0x244>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286c:	f7ff f954 	bl	8001b18 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002874:	f7ff f950 	bl	8001b18 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e187      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002886:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0308 	and.w	r3, r3, #8
 800289a:	2b00      	cmp	r3, #0
 800289c:	d036      	beq.n	800290c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a6:	4b15      	ldr	r3, [pc, #84]	@ (80028fc <HAL_RCC_OscConfig+0x248>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7ff f934 	bl	8001b18 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b4:	f7ff f930 	bl	8001b18 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e167      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <HAL_RCC_OscConfig+0x240>)
 80028c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x200>
 80028d2:	e01b      	b.n	800290c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <HAL_RCC_OscConfig+0x248>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028da:	f7ff f91d 	bl	8001b18 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028e0:	e00e      	b.n	8002900 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e2:	f7ff f919 	bl	8001b18 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d907      	bls.n	8002900 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e150      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
 80028f4:	40023800 	.word	0x40023800
 80028f8:	42470000 	.word	0x42470000
 80028fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002900:	4b88      	ldr	r3, [pc, #544]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002902:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1ea      	bne.n	80028e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 8097 	beq.w	8002a48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800291e:	4b81      	ldr	r3, [pc, #516]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10f      	bne.n	800294a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	4a7c      	ldr	r2, [pc, #496]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002938:	6413      	str	r3, [r2, #64]	@ 0x40
 800293a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002946:	2301      	movs	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294a:	4b77      	ldr	r3, [pc, #476]	@ (8002b28 <HAL_RCC_OscConfig+0x474>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d118      	bne.n	8002988 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002956:	4b74      	ldr	r3, [pc, #464]	@ (8002b28 <HAL_RCC_OscConfig+0x474>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a73      	ldr	r2, [pc, #460]	@ (8002b28 <HAL_RCC_OscConfig+0x474>)
 800295c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002960:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002962:	f7ff f8d9 	bl	8001b18 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296a:	f7ff f8d5 	bl	8001b18 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e10c      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b28 <HAL_RCC_OscConfig+0x474>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d106      	bne.n	800299e <HAL_RCC_OscConfig+0x2ea>
 8002990:	4b64      	ldr	r3, [pc, #400]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002994:	4a63      	ldr	r2, [pc, #396]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	@ 0x70
 800299c:	e01c      	b.n	80029d8 <HAL_RCC_OscConfig+0x324>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b05      	cmp	r3, #5
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCC_OscConfig+0x30c>
 80029a6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029aa:	4a5e      	ldr	r2, [pc, #376]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029be:	e00b      	b.n	80029d8 <HAL_RCC_OscConfig+0x324>
 80029c0:	4b58      	ldr	r3, [pc, #352]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	4a57      	ldr	r2, [pc, #348]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80029cc:	4b55      	ldr	r3, [pc, #340]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d0:	4a54      	ldr	r2, [pc, #336]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 80029d2:	f023 0304 	bic.w	r3, r3, #4
 80029d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d015      	beq.n	8002a0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7ff f89a 	bl	8001b18 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e6:	e00a      	b.n	80029fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e8:	f7ff f896 	bl	8001b18 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e0cb      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fe:	4b49      	ldr	r3, [pc, #292]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0ee      	beq.n	80029e8 <HAL_RCC_OscConfig+0x334>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0c:	f7ff f884 	bl	8001b18 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a12:	e00a      	b.n	8002a2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a14:	f7ff f880 	bl	8001b18 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e0b5      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ee      	bne.n	8002a14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a36:	7dfb      	ldrb	r3, [r7, #23]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3c:	4b39      	ldr	r3, [pc, #228]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	4a38      	ldr	r2, [pc, #224]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80a1 	beq.w	8002b94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a52:	4b34      	ldr	r3, [pc, #208]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d05c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d141      	bne.n	8002aea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	4b31      	ldr	r3, [pc, #196]	@ (8002b2c <HAL_RCC_OscConfig+0x478>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f854 	bl	8001b18 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a74:	f7ff f850 	bl	8001b18 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e087      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b27      	ldr	r3, [pc, #156]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	431a      	orrs	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	019b      	lsls	r3, r3, #6
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa8:	085b      	lsrs	r3, r3, #1
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	041b      	lsls	r3, r3, #16
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	061b      	lsls	r3, r3, #24
 8002ab6:	491b      	ldr	r1, [pc, #108]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b2c <HAL_RCC_OscConfig+0x478>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7ff f829 	bl	8001b18 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aca:	f7ff f825 	bl	8001b18 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e05c      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x416>
 8002ae8:	e054      	b.n	8002b94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aea:	4b10      	ldr	r3, [pc, #64]	@ (8002b2c <HAL_RCC_OscConfig+0x478>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7ff f812 	bl	8001b18 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af8:	f7ff f80e 	bl	8001b18 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e045      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0a:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x444>
 8002b16:	e03d      	b.n	8002b94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e038      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x4ec>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d028      	beq.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d121      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d11a      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b60:	4013      	ands	r3, r2
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d107      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0cc      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b68      	ldr	r3, [pc, #416]	@ (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d90c      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b65      	ldr	r3, [pc, #404]	@ (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bce:	4b63      	ldr	r3, [pc, #396]	@ (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0b8      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d020      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf8:	4b59      	ldr	r3, [pc, #356]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d005      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c10:	4b53      	ldr	r3, [pc, #332]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	4a52      	ldr	r2, [pc, #328]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b50      	ldr	r3, [pc, #320]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	494d      	ldr	r1, [pc, #308]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d044      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c42:	4b47      	ldr	r3, [pc, #284]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d119      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e07f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d003      	beq.n	8002c62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c62:	4b3f      	ldr	r3, [pc, #252]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e06f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c72:	4b3b      	ldr	r3, [pc, #236]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e067      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c82:	4b37      	ldr	r3, [pc, #220]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f023 0203 	bic.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	4934      	ldr	r1, [pc, #208]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c94:	f7fe ff40 	bl	8001b18 <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c9a:	e00a      	b.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9c:	f7fe ff3c 	bl	8001b18 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e04f      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 020c 	and.w	r2, r3, #12
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d1eb      	bne.n	8002c9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b25      	ldr	r3, [pc, #148]	@ (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d20c      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b22      	ldr	r3, [pc, #136]	@ (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e032      	b.n	8002d52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b19      	ldr	r3, [pc, #100]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4916      	ldr	r1, [pc, #88]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490e      	ldr	r1, [pc, #56]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d2a:	f000 f821 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490a      	ldr	r1, [pc, #40]	@ (8002d64 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d42:	4a09      	ldr	r2, [pc, #36]	@ (8002d68 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d46:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <HAL_RCC_ClockConfig+0x1c8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fd9a 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023c00 	.word	0x40023c00
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08006c18 	.word	0x08006c18
 8002d68:	20000038 	.word	0x20000038
 8002d6c:	2000003c 	.word	0x2000003c

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d74:	b094      	sub	sp, #80	@ 0x50
 8002d76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d80:	2300      	movs	r3, #0
 8002d82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d88:	4b79      	ldr	r3, [pc, #484]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d00d      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x40>
 8002d94:	2b08      	cmp	r3, #8
 8002d96:	f200 80e1 	bhi.w	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_RCC_GetSysClockFreq+0x34>
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d003      	beq.n	8002daa <HAL_RCC_GetSysClockFreq+0x3a>
 8002da2:	e0db      	b.n	8002f5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b73      	ldr	r3, [pc, #460]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002da6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002da8:	e0db      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002daa:	4b73      	ldr	r3, [pc, #460]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dae:	e0d8      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db0:	4b6f      	ldr	r3, [pc, #444]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002db8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dba:	4b6d      	ldr	r3, [pc, #436]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d063      	beq.n	8002e8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	2200      	movs	r2, #0
 8002dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002de2:	4622      	mov	r2, r4
 8002de4:	462b      	mov	r3, r5
 8002de6:	f04f 0000 	mov.w	r0, #0
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	0159      	lsls	r1, r3, #5
 8002df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df4:	0150      	lsls	r0, r2, #5
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	1a51      	subs	r1, r2, r1
 8002dfe:	6139      	str	r1, [r7, #16]
 8002e00:	4629      	mov	r1, r5
 8002e02:	eb63 0301 	sbc.w	r3, r3, r1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e14:	4659      	mov	r1, fp
 8002e16:	018b      	lsls	r3, r1, #6
 8002e18:	4651      	mov	r1, sl
 8002e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e1e:	4651      	mov	r1, sl
 8002e20:	018a      	lsls	r2, r1, #6
 8002e22:	4651      	mov	r1, sl
 8002e24:	ebb2 0801 	subs.w	r8, r2, r1
 8002e28:	4659      	mov	r1, fp
 8002e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e42:	4690      	mov	r8, r2
 8002e44:	4699      	mov	r9, r3
 8002e46:	4623      	mov	r3, r4
 8002e48:	eb18 0303 	adds.w	r3, r8, r3
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	462b      	mov	r3, r5
 8002e50:	eb49 0303 	adc.w	r3, r9, r3
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e62:	4629      	mov	r1, r5
 8002e64:	024b      	lsls	r3, r1, #9
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	024a      	lsls	r2, r1, #9
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e80:	f7fd fa06 	bl	8000290 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e8c:	e058      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e8e:	4b38      	ldr	r3, [pc, #224]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	099b      	lsrs	r3, r3, #6
 8002e94:	2200      	movs	r2, #0
 8002e96:	4618      	mov	r0, r3
 8002e98:	4611      	mov	r1, r2
 8002e9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ea8:	4642      	mov	r2, r8
 8002eaa:	464b      	mov	r3, r9
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	0159      	lsls	r1, r3, #5
 8002eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eba:	0150      	lsls	r0, r2, #5
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4641      	mov	r1, r8
 8002ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	00eb      	lsls	r3, r5, #3
 8002ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ef6:	00e2      	lsls	r2, r4, #3
 8002ef8:	4614      	mov	r4, r2
 8002efa:	461d      	mov	r5, r3
 8002efc:	4643      	mov	r3, r8
 8002efe:	18e3      	adds	r3, r4, r3
 8002f00:	603b      	str	r3, [r7, #0]
 8002f02:	464b      	mov	r3, r9
 8002f04:	eb45 0303 	adc.w	r3, r5, r3
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f16:	4629      	mov	r1, r5
 8002f18:	028b      	lsls	r3, r1, #10
 8002f1a:	4621      	mov	r1, r4
 8002f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f20:	4621      	mov	r1, r4
 8002f22:	028a      	lsls	r2, r1, #10
 8002f24:	4610      	mov	r0, r2
 8002f26:	4619      	mov	r1, r3
 8002f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61bb      	str	r3, [r7, #24]
 8002f2e:	61fa      	str	r2, [r7, #28]
 8002f30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f34:	f7fd f9ac 	bl	8000290 <__aeabi_uldivmod>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002f50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f5a:	e002      	b.n	8002f62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3750      	adds	r7, #80	@ 0x50
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000038 	.word	0x20000038

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	@ (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08006c28 	.word	0x08006c28

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	@ (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4903      	ldr	r1, [pc, #12]	@ (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5ccb      	ldrb	r3, [r1, r3]
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	08006c28 	.word	0x08006c28

08002fe4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ff4:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0203 	and.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003000:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800300c:	4b0c      	ldr	r3, [pc, #48]	@ (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_RCC_GetClockConfig+0x5c>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	08db      	lsrs	r3, r3, #3
 800301e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003026:	4b07      	ldr	r3, [pc, #28]	@ (8003044 <HAL_RCC_GetClockConfig+0x60>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0207 	and.w	r2, r3, #7
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	601a      	str	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
 8003044:	40023c00 	.word	0x40023c00

08003048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e041      	b.n	80030de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f7fe fb9e 	bl	80017b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	4619      	mov	r1, r3
 8003086:	4610      	mov	r0, r2
 8003088:	f000 fa70 	bl	800356c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d001      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e044      	b.n	800318a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1e      	ldr	r2, [pc, #120]	@ (8003198 <HAL_TIM_Base_Start_IT+0xb0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d018      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x6c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312a:	d013      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x6c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1a      	ldr	r2, [pc, #104]	@ (800319c <HAL_TIM_Base_Start_IT+0xb4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00e      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x6c>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a19      	ldr	r2, [pc, #100]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x6c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a17      	ldr	r2, [pc, #92]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x6c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a16      	ldr	r2, [pc, #88]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d010      	beq.n	8003188 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	e007      	b.n	8003188 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40010000 	.word	0x40010000
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00
 80031a8:	40014000 	.word	0x40014000

080031ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d020      	beq.n	8003210 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01b      	beq.n	8003210 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0202 	mvn.w	r2, #2
 80031e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f999 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 80031fc:	e005      	b.n	800320a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f98b 	bl	800351a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 f99c 	bl	8003542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d020      	beq.n	800325c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d01b      	beq.n	800325c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0204 	mvn.w	r2, #4
 800322c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2202      	movs	r2, #2
 8003232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f973 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 8003248:	e005      	b.n	8003256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f965 	bl	800351a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f976 	bl	8003542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d020      	beq.n	80032a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d01b      	beq.n	80032a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0208 	mvn.w	r2, #8
 8003278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2204      	movs	r2, #4
 800327e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f003 0303 	and.w	r3, r3, #3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f94d 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f93f 	bl	800351a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f950 	bl	8003542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d020      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01b      	beq.n	80032f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f06f 0210 	mvn.w	r2, #16
 80032c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2208      	movs	r2, #8
 80032ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f927 	bl	800352e <HAL_TIM_IC_CaptureCallback>
 80032e0:	e005      	b.n	80032ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f919 	bl	800351a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f92a 	bl	8003542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00c      	beq.n	8003318 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d007      	beq.n	8003318 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0201 	mvn.w	r2, #1
 8003310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd ffb0 	bl	8001278 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00c      	beq.n	800333c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fab6 	bl	80038a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00c      	beq.n	8003360 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f8fb 	bl	8003556 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0220 	mvn.w	r2, #32
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fa88 	bl	8003894 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003384:	bf00      	nop
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_TIM_ConfigClockSource+0x1c>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e0b4      	b.n	8003512 <HAL_TIM_ConfigClockSource+0x186>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68ba      	ldr	r2, [r7, #8]
 80033d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e0:	d03e      	beq.n	8003460 <HAL_TIM_ConfigClockSource+0xd4>
 80033e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033e6:	f200 8087 	bhi.w	80034f8 <HAL_TIM_ConfigClockSource+0x16c>
 80033ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033ee:	f000 8086 	beq.w	80034fe <HAL_TIM_ConfigClockSource+0x172>
 80033f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033f6:	d87f      	bhi.n	80034f8 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b70      	cmp	r3, #112	@ 0x70
 80033fa:	d01a      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0xa6>
 80033fc:	2b70      	cmp	r3, #112	@ 0x70
 80033fe:	d87b      	bhi.n	80034f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003400:	2b60      	cmp	r3, #96	@ 0x60
 8003402:	d050      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003404:	2b60      	cmp	r3, #96	@ 0x60
 8003406:	d877      	bhi.n	80034f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	2b50      	cmp	r3, #80	@ 0x50
 800340a:	d03c      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0xfa>
 800340c:	2b50      	cmp	r3, #80	@ 0x50
 800340e:	d873      	bhi.n	80034f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003410:	2b40      	cmp	r3, #64	@ 0x40
 8003412:	d058      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003414:	2b40      	cmp	r3, #64	@ 0x40
 8003416:	d86f      	bhi.n	80034f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003418:	2b30      	cmp	r3, #48	@ 0x30
 800341a:	d064      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x15a>
 800341c:	2b30      	cmp	r3, #48	@ 0x30
 800341e:	d86b      	bhi.n	80034f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003420:	2b20      	cmp	r3, #32
 8003422:	d060      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003424:	2b20      	cmp	r3, #32
 8003426:	d867      	bhi.n	80034f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003428:	2b00      	cmp	r3, #0
 800342a:	d05c      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x15a>
 800342c:	2b10      	cmp	r3, #16
 800342e:	d05a      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003430:	e062      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003442:	f000 f999 	bl	8003778 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	609a      	str	r2, [r3, #8]
      break;
 800345e:	e04f      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003470:	f000 f982 	bl	8003778 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003482:	609a      	str	r2, [r3, #8]
      break;
 8003484:	e03c      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	461a      	mov	r2, r3
 8003494:	f000 f8f6 	bl	8003684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2150      	movs	r1, #80	@ 0x50
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f94f 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 80034a4:	e02c      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b2:	461a      	mov	r2, r3
 80034b4:	f000 f915 	bl	80036e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2160      	movs	r1, #96	@ 0x60
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f93f 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 80034c4:	e01c      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d2:	461a      	mov	r2, r3
 80034d4:	f000 f8d6 	bl	8003684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2140      	movs	r1, #64	@ 0x40
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f92f 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 80034e4:	e00c      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f000 f926 	bl	8003742 <TIM_ITRx_SetConfig>
      break;
 80034f6:	e003      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      break;
 80034fc:	e000      	b.n	8003500 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3a      	ldr	r2, [pc, #232]	@ (8003668 <TIM_Base_SetConfig+0xfc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d00f      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358a:	d00b      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a37      	ldr	r2, [pc, #220]	@ (800366c <TIM_Base_SetConfig+0x100>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d007      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a36      	ldr	r2, [pc, #216]	@ (8003670 <TIM_Base_SetConfig+0x104>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0x38>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a35      	ldr	r2, [pc, #212]	@ (8003674 <TIM_Base_SetConfig+0x108>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003668 <TIM_Base_SetConfig+0xfc>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01b      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c4:	d017      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a28      	ldr	r2, [pc, #160]	@ (800366c <TIM_Base_SetConfig+0x100>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a27      	ldr	r2, [pc, #156]	@ (8003670 <TIM_Base_SetConfig+0x104>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00f      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a26      	ldr	r2, [pc, #152]	@ (8003674 <TIM_Base_SetConfig+0x108>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00b      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a25      	ldr	r2, [pc, #148]	@ (8003678 <TIM_Base_SetConfig+0x10c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a24      	ldr	r2, [pc, #144]	@ (800367c <TIM_Base_SetConfig+0x110>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d003      	beq.n	80035f6 <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a23      	ldr	r2, [pc, #140]	@ (8003680 <TIM_Base_SetConfig+0x114>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d108      	bne.n	8003608 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0e      	ldr	r2, [pc, #56]	@ (8003668 <TIM_Base_SetConfig+0xfc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d103      	bne.n	800363c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	691a      	ldr	r2, [r3, #16]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f023 0201 	bic.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]
  }
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800

08003684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 030a 	bic.w	r3, r3, #10
 80036c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b087      	sub	sp, #28
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	f023 0210 	bic.w	r2, r3, #16
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800370c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	031b      	lsls	r3, r3, #12
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800371e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
 800374a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003758:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4313      	orrs	r3, r2
 8003760:	f043 0307 	orr.w	r3, r3, #7
 8003764:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	609a      	str	r2, [r3, #8]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003792:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	021a      	lsls	r2, r3, #8
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	431a      	orrs	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4313      	orrs	r3, r2
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	609a      	str	r2, [r3, #8]
}
 80037ac:	bf00      	nop
 80037ae:	371c      	adds	r7, #28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e050      	b.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1c      	ldr	r2, [pc, #112]	@ (8003880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d018      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381c:	d013      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a18      	ldr	r2, [pc, #96]	@ (8003884 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00e      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a16      	ldr	r2, [pc, #88]	@ (8003888 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a15      	ldr	r2, [pc, #84]	@ (800388c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a13      	ldr	r2, [pc, #76]	@ (8003890 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d10c      	bne.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800384c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	68ba      	ldr	r2, [r7, #8]
 8003854:	4313      	orrs	r3, r2
 8003856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40010000 	.word	0x40010000
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800
 800388c:	40000c00 	.word	0x40000c00
 8003890:	40014000 	.word	0x40014000

08003894 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e042      	b.n	8003954 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d106      	bne.n	80038e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7fd ff86 	bl	80017f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2224      	movs	r2, #36	@ 0x24
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fa09 	bl	8003d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003914:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003924:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68da      	ldr	r2, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003934:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08a      	sub	sp, #40	@ 0x28
 8003960:	af02      	add	r7, sp, #8
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	4613      	mov	r3, r2
 800396a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b20      	cmp	r3, #32
 800397a:	d175      	bne.n	8003a68 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_UART_Transmit+0x2c>
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e06e      	b.n	8003a6a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2221      	movs	r2, #33	@ 0x21
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800399a:	f7fe f8bd 	bl	8001b18 <HAL_GetTick>
 800399e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	88fa      	ldrh	r2, [r7, #6]
 80039aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b4:	d108      	bne.n	80039c8 <HAL_UART_Transmit+0x6c>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d104      	bne.n	80039c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	e003      	b.n	80039d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d0:	e02e      	b.n	8003a30 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 f8df 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e03a      	b.n	8003a6a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10b      	bne.n	8003a12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	3302      	adds	r3, #2
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	e007      	b.n	8003a22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1cb      	bne.n	80039d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2200      	movs	r2, #0
 8003a42:	2140      	movs	r1, #64	@ 0x40
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f8ab 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e006      	b.n	8003a6a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b08a      	sub	sp, #40	@ 0x28
 8003a76:	af02      	add	r7, sp, #8
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	f040 8081 	bne.w	8003b96 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_UART_Receive+0x2e>
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e079      	b.n	8003b98 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2222      	movs	r2, #34	@ 0x22
 8003aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab8:	f7fe f82e 	bl	8001b18 <HAL_GetTick>
 8003abc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad2:	d108      	bne.n	8003ae6 <HAL_UART_Receive+0x74>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d104      	bne.n	8003ae6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	e003      	b.n	8003aee <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003aee:	e047      	b.n	8003b80 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2200      	movs	r2, #0
 8003af8:	2120      	movs	r1, #32
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f850 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d005      	beq.n	8003b12 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e042      	b.n	8003b98 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10c      	bne.n	8003b32 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	e01f      	b.n	8003b72 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3a:	d007      	beq.n	8003b4c <HAL_UART_Receive+0xda>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <HAL_UART_Receive+0xe8>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e008      	b.n	8003b6c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1b2      	bne.n	8003af0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	e000      	b.n	8003b98 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b96:	2302      	movs	r3, #2
  }
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb0:	e03b      	b.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d037      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7fd ffad 	bl	8001b18 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	6a3a      	ldr	r2, [r7, #32]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e03a      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d023      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b80      	cmp	r3, #128	@ 0x80
 8003be6:	d020      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b40      	cmp	r3, #64	@ 0x40
 8003bec:	d01d      	beq.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d116      	bne.n	8003c2a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f81d 	bl	8003c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e00f      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	4013      	ands	r3, r2
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	bf0c      	ite	eq
 8003c3a:	2301      	moveq	r3, #1
 8003c3c:	2300      	movne	r3, #0
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	461a      	mov	r2, r3
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d0b4      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b095      	sub	sp, #84	@ 0x54
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e5      	bne.n	8003c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e5      	bne.n	8003c8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d119      	bne.n	8003cfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	330c      	adds	r3, #12
 8003cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	e853 3f00 	ldrex	r3, [r3]
 8003cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f023 0310 	bic.w	r3, r3, #16
 8003ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	330c      	adds	r3, #12
 8003ce8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cea:	61ba      	str	r2, [r7, #24]
 8003cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6979      	ldr	r1, [r7, #20]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e5      	bne.n	8003cca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2220      	movs	r2, #32
 8003d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d0c:	bf00      	nop
 8003d0e:	3754      	adds	r7, #84	@ 0x54
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d1c:	b0c0      	sub	sp, #256	@ 0x100
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	68d9      	ldr	r1, [r3, #12]
 8003d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	ea40 0301 	orr.w	r3, r0, r1
 8003d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d70:	f021 010c 	bic.w	r1, r1, #12
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d92:	6999      	ldr	r1, [r3, #24]
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	ea40 0301 	orr.w	r3, r0, r1
 8003d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	4b8f      	ldr	r3, [pc, #572]	@ (8003fe4 <UART_SetConfig+0x2cc>)
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d005      	beq.n	8003db8 <UART_SetConfig+0xa0>
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b8d      	ldr	r3, [pc, #564]	@ (8003fe8 <UART_SetConfig+0x2d0>)
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d104      	bne.n	8003dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003db8:	f7ff f900 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8003dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003dc0:	e003      	b.n	8003dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dc2:	f7ff f8e7 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8003dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dd4:	f040 810c 	bne.w	8003ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003de2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dea:	4622      	mov	r2, r4
 8003dec:	462b      	mov	r3, r5
 8003dee:	1891      	adds	r1, r2, r2
 8003df0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003df2:	415b      	adcs	r3, r3
 8003df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	eb12 0801 	adds.w	r8, r2, r1
 8003e00:	4629      	mov	r1, r5
 8003e02:	eb43 0901 	adc.w	r9, r3, r1
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e1a:	4690      	mov	r8, r2
 8003e1c:	4699      	mov	r9, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	eb18 0303 	adds.w	r3, r8, r3
 8003e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e28:	462b      	mov	r3, r5
 8003e2a:	eb49 0303 	adc.w	r3, r9, r3
 8003e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e46:	460b      	mov	r3, r1
 8003e48:	18db      	adds	r3, r3, r3
 8003e4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	eb42 0303 	adc.w	r3, r2, r3
 8003e52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e5c:	f7fc fa18 	bl	8000290 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4b61      	ldr	r3, [pc, #388]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003e66:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	011c      	lsls	r4, r3, #4
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e90:	4641      	mov	r1, r8
 8003e92:	eb12 0a01 	adds.w	sl, r2, r1
 8003e96:	4649      	mov	r1, r9
 8003e98:	eb43 0b01 	adc.w	fp, r3, r1
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb0:	4692      	mov	sl, r2
 8003eb2:	469b      	mov	fp, r3
 8003eb4:	4643      	mov	r3, r8
 8003eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003edc:	460b      	mov	r3, r1
 8003ede:	18db      	adds	r3, r3, r3
 8003ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	eb42 0303 	adc.w	r3, r2, r3
 8003ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ef2:	f7fc f9cd 	bl	8000290 <__aeabi_uldivmod>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	4b3b      	ldr	r3, [pc, #236]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003efe:	fba3 2301 	umull	r2, r3, r3, r1
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2264      	movs	r2, #100	@ 0x64
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	1acb      	subs	r3, r1, r3
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f12:	4b36      	ldr	r3, [pc, #216]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003f14:	fba3 2302 	umull	r2, r3, r3, r2
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f20:	441c      	add	r4, r3
 8003f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f78:	464b      	mov	r3, r9
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	eb42 0303 	adc.w	r3, r2, r3
 8003f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f98:	460b      	mov	r3, r1
 8003f9a:	18db      	adds	r3, r3, r3
 8003f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	eb42 0303 	adc.w	r3, r2, r3
 8003fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fae:	f7fc f96f 	bl	8000290 <__aeabi_uldivmod>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbc:	095b      	lsrs	r3, r3, #5
 8003fbe:	2164      	movs	r1, #100	@ 0x64
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3332      	adds	r3, #50	@ 0x32
 8003fca:	4a08      	ldr	r2, [pc, #32]	@ (8003fec <UART_SetConfig+0x2d4>)
 8003fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	f003 0207 	and.w	r2, r3, #7
 8003fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4422      	add	r2, r4
 8003fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe0:	e106      	b.n	80041f0 <UART_SetConfig+0x4d8>
 8003fe2:	bf00      	nop
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40011400 	.word	0x40011400
 8003fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004002:	4642      	mov	r2, r8
 8004004:	464b      	mov	r3, r9
 8004006:	1891      	adds	r1, r2, r2
 8004008:	6239      	str	r1, [r7, #32]
 800400a:	415b      	adcs	r3, r3
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
 800400e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004012:	4641      	mov	r1, r8
 8004014:	1854      	adds	r4, r2, r1
 8004016:	4649      	mov	r1, r9
 8004018:	eb43 0501 	adc.w	r5, r3, r1
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	f04f 0300 	mov.w	r3, #0
 8004024:	00eb      	lsls	r3, r5, #3
 8004026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402a:	00e2      	lsls	r2, r4, #3
 800402c:	4614      	mov	r4, r2
 800402e:	461d      	mov	r5, r3
 8004030:	4643      	mov	r3, r8
 8004032:	18e3      	adds	r3, r4, r3
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004038:	464b      	mov	r3, r9
 800403a:	eb45 0303 	adc.w	r3, r5, r3
 800403e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800404e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800405e:	4629      	mov	r1, r5
 8004060:	008b      	lsls	r3, r1, #2
 8004062:	4621      	mov	r1, r4
 8004064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004068:	4621      	mov	r1, r4
 800406a:	008a      	lsls	r2, r1, #2
 800406c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004070:	f7fc f90e 	bl	8000290 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b60      	ldr	r3, [pc, #384]	@ (80041fc <UART_SetConfig+0x4e4>)
 800407a:	fba3 2302 	umull	r2, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	011c      	lsls	r4, r3, #4
 8004082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004086:	2200      	movs	r2, #0
 8004088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800408c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004094:	4642      	mov	r2, r8
 8004096:	464b      	mov	r3, r9
 8004098:	1891      	adds	r1, r2, r2
 800409a:	61b9      	str	r1, [r7, #24]
 800409c:	415b      	adcs	r3, r3
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a4:	4641      	mov	r1, r8
 80040a6:	1851      	adds	r1, r2, r1
 80040a8:	6139      	str	r1, [r7, #16]
 80040aa:	4649      	mov	r1, r9
 80040ac:	414b      	adcs	r3, r1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040bc:	4659      	mov	r1, fp
 80040be:	00cb      	lsls	r3, r1, #3
 80040c0:	4651      	mov	r1, sl
 80040c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040c6:	4651      	mov	r1, sl
 80040c8:	00ca      	lsls	r2, r1, #3
 80040ca:	4610      	mov	r0, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	4642      	mov	r2, r8
 80040d2:	189b      	adds	r3, r3, r2
 80040d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040d8:	464b      	mov	r3, r9
 80040da:	460a      	mov	r2, r1
 80040dc:	eb42 0303 	adc.w	r3, r2, r3
 80040e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	f04f 0300 	mov.w	r3, #0
 80040f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040fc:	4649      	mov	r1, r9
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	4641      	mov	r1, r8
 8004102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004106:	4641      	mov	r1, r8
 8004108:	008a      	lsls	r2, r1, #2
 800410a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800410e:	f7fc f8bf 	bl	8000290 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4611      	mov	r1, r2
 8004118:	4b38      	ldr	r3, [pc, #224]	@ (80041fc <UART_SetConfig+0x4e4>)
 800411a:	fba3 2301 	umull	r2, r3, r3, r1
 800411e:	095b      	lsrs	r3, r3, #5
 8004120:	2264      	movs	r2, #100	@ 0x64
 8004122:	fb02 f303 	mul.w	r3, r2, r3
 8004126:	1acb      	subs	r3, r1, r3
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	3332      	adds	r3, #50	@ 0x32
 800412c:	4a33      	ldr	r2, [pc, #204]	@ (80041fc <UART_SetConfig+0x4e4>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004138:	441c      	add	r4, r3
 800413a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800413e:	2200      	movs	r2, #0
 8004140:	673b      	str	r3, [r7, #112]	@ 0x70
 8004142:	677a      	str	r2, [r7, #116]	@ 0x74
 8004144:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004148:	4642      	mov	r2, r8
 800414a:	464b      	mov	r3, r9
 800414c:	1891      	adds	r1, r2, r2
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	415b      	adcs	r3, r3
 8004152:	60fb      	str	r3, [r7, #12]
 8004154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004158:	4641      	mov	r1, r8
 800415a:	1851      	adds	r1, r2, r1
 800415c:	6039      	str	r1, [r7, #0]
 800415e:	4649      	mov	r1, r9
 8004160:	414b      	adcs	r3, r1
 8004162:	607b      	str	r3, [r7, #4]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	f04f 0300 	mov.w	r3, #0
 800416c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004170:	4659      	mov	r1, fp
 8004172:	00cb      	lsls	r3, r1, #3
 8004174:	4651      	mov	r1, sl
 8004176:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417a:	4651      	mov	r1, sl
 800417c:	00ca      	lsls	r2, r1, #3
 800417e:	4610      	mov	r0, r2
 8004180:	4619      	mov	r1, r3
 8004182:	4603      	mov	r3, r0
 8004184:	4642      	mov	r2, r8
 8004186:	189b      	adds	r3, r3, r2
 8004188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800418a:	464b      	mov	r3, r9
 800418c:	460a      	mov	r2, r1
 800418e:	eb42 0303 	adc.w	r3, r2, r3
 8004192:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	663b      	str	r3, [r7, #96]	@ 0x60
 800419e:	667a      	str	r2, [r7, #100]	@ 0x64
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041ac:	4649      	mov	r1, r9
 80041ae:	008b      	lsls	r3, r1, #2
 80041b0:	4641      	mov	r1, r8
 80041b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041b6:	4641      	mov	r1, r8
 80041b8:	008a      	lsls	r2, r1, #2
 80041ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041be:	f7fc f867 	bl	8000290 <__aeabi_uldivmod>
 80041c2:	4602      	mov	r2, r0
 80041c4:	460b      	mov	r3, r1
 80041c6:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <UART_SetConfig+0x4e4>)
 80041c8:	fba3 1302 	umull	r1, r3, r3, r2
 80041cc:	095b      	lsrs	r3, r3, #5
 80041ce:	2164      	movs	r1, #100	@ 0x64
 80041d0:	fb01 f303 	mul.w	r3, r1, r3
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	3332      	adds	r3, #50	@ 0x32
 80041da:	4a08      	ldr	r2, [pc, #32]	@ (80041fc <UART_SetConfig+0x4e4>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4422      	add	r2, r4
 80041ee:	609a      	str	r2, [r3, #8]
}
 80041f0:	bf00      	nop
 80041f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041f6:	46bd      	mov	sp, r7
 80041f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041fc:	51eb851f 	.word	0x51eb851f

08004200 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800420a:	2300      	movs	r3, #0
 800420c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800420e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004212:	2b84      	cmp	r3, #132	@ 0x84
 8004214:	d005      	beq.n	8004222 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004216:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	3303      	adds	r3, #3
 8004220:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004234:	f000 fafc 	bl	8004830 <vTaskStartScheduler>
  
  return osOK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}

0800423e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800423e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004240:	b089      	sub	sp, #36	@ 0x24
 8004242:	af04      	add	r7, sp, #16
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d020      	beq.n	8004292 <osThreadCreate+0x54>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01c      	beq.n	8004292 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685c      	ldr	r4, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	691e      	ldr	r6, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff ffc8 	bl	8004200 <makeFreeRtosPriority>
 8004270:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800427a:	9202      	str	r2, [sp, #8]
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	9100      	str	r1, [sp, #0]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4632      	mov	r2, r6
 8004284:	4629      	mov	r1, r5
 8004286:	4620      	mov	r0, r4
 8004288:	f000 f8ed 	bl	8004466 <xTaskCreateStatic>
 800428c:	4603      	mov	r3, r0
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	e01c      	b.n	80042cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685c      	ldr	r4, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800429e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff ffaa 	bl	8004200 <makeFreeRtosPriority>
 80042ac:	4602      	mov	r2, r0
 80042ae:	f107 030c 	add.w	r3, r7, #12
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	9200      	str	r2, [sp, #0]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4632      	mov	r2, r6
 80042ba:	4629      	mov	r1, r5
 80042bc:	4620      	mov	r0, r4
 80042be:	f000 f932 	bl	8004526 <xTaskCreate>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d001      	beq.n	80042cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e000      	b.n	80042ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042cc:	68fb      	ldr	r3, [r7, #12]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <osDelay+0x16>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	e000      	b.n	80042ee <osDelay+0x18>
 80042ec:	2301      	movs	r3, #1
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa68 	bl	80047c4 <vTaskDelay>
  
  return osOK;
 80042f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f103 0208 	add.w	r2, r3, #8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f04f 32ff 	mov.w	r2, #4294967295
 8004316:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f103 0208 	add.w	r2, r3, #8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f103 0208 	add.w	r2, r3, #8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689a      	ldr	r2, [r3, #8]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr

080043a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d103      	bne.n	80043c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	e00c      	b.n	80043da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3308      	adds	r3, #8
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	e002      	b.n	80043ce <vListInsert+0x2e>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d2f6      	bcs.n	80043c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004412:	b480      	push	{r7}
 8004414:	b085      	sub	sp, #20
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	6892      	ldr	r2, [r2, #8]
 8004428:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6852      	ldr	r2, [r2, #4]
 8004432:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	d103      	bne.n	8004446 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	1e5a      	subs	r2, r3, #1
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004466:	b580      	push	{r7, lr}
 8004468:	b08e      	sub	sp, #56	@ 0x38
 800446a:	af04      	add	r7, sp, #16
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800448c:	bf00      	nop
 800448e:	bf00      	nop
 8004490:	e7fd      	b.n	800448e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10b      	bne.n	80044b0 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	61fb      	str	r3, [r7, #28]
}
 80044aa:	bf00      	nop
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044b0:	23a0      	movs	r3, #160	@ 0xa0
 80044b2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2ba0      	cmp	r3, #160	@ 0xa0
 80044b8:	d00b      	beq.n	80044d2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	61bb      	str	r3, [r7, #24]
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	e7fd      	b.n	80044ce <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d01e      	beq.n	8004518 <xTaskCreateStatic+0xb2>
 80044da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d01b      	beq.n	8004518 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044e8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	2202      	movs	r2, #2
 80044ee:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044f2:	2300      	movs	r3, #0
 80044f4:	9303      	str	r3, [sp, #12]
 80044f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f8:	9302      	str	r3, [sp, #8]
 80044fa:	f107 0314 	add.w	r3, r7, #20
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f850 	bl	80045b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004510:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004512:	f000 f8ed 	bl	80046f0 <prvAddNewTaskToReadyList>
 8004516:	e001      	b.n	800451c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800451c:	697b      	ldr	r3, [r7, #20]
	}
 800451e:	4618      	mov	r0, r3
 8004520:	3728      	adds	r7, #40	@ 0x28
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004526:	b580      	push	{r7, lr}
 8004528:	b08c      	sub	sp, #48	@ 0x30
 800452a:	af04      	add	r7, sp, #16
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fefc 	bl	8005338 <pvPortMalloc>
 8004540:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004548:	20a0      	movs	r0, #160	@ 0xa0
 800454a:	f000 fef5 	bl	8005338 <pvPortMalloc>
 800454e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
 800455c:	e005      	b.n	800456a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f000 ffb8 	bl	80054d4 <vPortFree>
 8004564:	e001      	b.n	800456a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d017      	beq.n	80045a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	2300      	movs	r3, #0
 800457c:	9303      	str	r3, [sp, #12]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	9302      	str	r3, [sp, #8]
 8004582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004584:	9301      	str	r3, [sp, #4]
 8004586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f80e 	bl	80045b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004594:	69f8      	ldr	r0, [r7, #28]
 8004596:	f000 f8ab 	bl	80046f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e002      	b.n	80045a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045a0:	f04f 33ff 	mov.w	r3, #4294967295
 80045a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045a6:	69bb      	ldr	r3, [r7, #24]
	}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3720      	adds	r7, #32
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045c8:	3b01      	subs	r3, #1
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	f023 0307 	bic.w	r3, r3, #7
 80045d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <prvInitialiseNewTask+0x4a>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	617b      	str	r3, [r7, #20]
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	e7fd      	b.n	80045f6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01f      	beq.n	8004640 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	e012      	b.n	800462c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	4413      	add	r3, r2
 800460c:	7819      	ldrb	r1, [r3, #0]
 800460e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	3334      	adds	r3, #52	@ 0x34
 8004616:	460a      	mov	r2, r1
 8004618:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d006      	beq.n	8004634 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3301      	adds	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b0f      	cmp	r3, #15
 8004630:	d9e9      	bls.n	8004606 <prvInitialiseNewTask+0x56>
 8004632:	e000      	b.n	8004636 <prvInitialiseNewTask+0x86>
			{
				break;
 8004634:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800463e:	e003      	b.n	8004648 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	2b06      	cmp	r3, #6
 800464c:	d901      	bls.n	8004652 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800464e:	2306      	movs	r3, #6
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004656:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	3304      	adds	r3, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff fe68 	bl	800433e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	3318      	adds	r3, #24
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fe63 	bl	800433e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800467c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800467e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004680:	f1c3 0207 	rsb	r2, r3, #7
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	2200      	movs	r2, #0
 8004692:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	2200      	movs	r2, #0
 800469a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a0:	334c      	adds	r3, #76	@ 0x4c
 80046a2:	224c      	movs	r2, #76	@ 0x4c
 80046a4:	2100      	movs	r1, #0
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fc08 	bl	8005ebc <memset>
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	4a0d      	ldr	r2, [pc, #52]	@ (80046e4 <prvInitialiseNewTask+0x134>)
 80046b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80046b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b4:	4a0c      	ldr	r2, [pc, #48]	@ (80046e8 <prvInitialiseNewTask+0x138>)
 80046b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80046b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ba:	4a0c      	ldr	r2, [pc, #48]	@ (80046ec <prvInitialiseNewTask+0x13c>)
 80046bc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	68f9      	ldr	r1, [r7, #12]
 80046c2:	69b8      	ldr	r0, [r7, #24]
 80046c4:	f000 fc2a 	bl	8004f1c <pxPortInitialiseStack>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046da:	bf00      	nop
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20004220 	.word	0x20004220
 80046e8:	20004288 	.word	0x20004288
 80046ec:	200042f0 	.word	0x200042f0

080046f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046f8:	f000 fd3e 	bl	8005178 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046fc:	4b2a      	ldr	r3, [pc, #168]	@ (80047a8 <prvAddNewTaskToReadyList+0xb8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	4a29      	ldr	r2, [pc, #164]	@ (80047a8 <prvAddNewTaskToReadyList+0xb8>)
 8004704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004706:	4b29      	ldr	r3, [pc, #164]	@ (80047ac <prvAddNewTaskToReadyList+0xbc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800470e:	4a27      	ldr	r2, [pc, #156]	@ (80047ac <prvAddNewTaskToReadyList+0xbc>)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004714:	4b24      	ldr	r3, [pc, #144]	@ (80047a8 <prvAddNewTaskToReadyList+0xb8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d110      	bne.n	800473e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800471c:	f000 fad4 	bl	8004cc8 <prvInitialiseTaskLists>
 8004720:	e00d      	b.n	800473e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004722:	4b23      	ldr	r3, [pc, #140]	@ (80047b0 <prvAddNewTaskToReadyList+0xc0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800472a:	4b20      	ldr	r3, [pc, #128]	@ (80047ac <prvAddNewTaskToReadyList+0xbc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	429a      	cmp	r2, r3
 8004736:	d802      	bhi.n	800473e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004738:	4a1c      	ldr	r2, [pc, #112]	@ (80047ac <prvAddNewTaskToReadyList+0xbc>)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800473e:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <prvAddNewTaskToReadyList+0xc4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3301      	adds	r3, #1
 8004744:	4a1b      	ldr	r2, [pc, #108]	@ (80047b4 <prvAddNewTaskToReadyList+0xc4>)
 8004746:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474c:	2201      	movs	r2, #1
 800474e:	409a      	lsls	r2, r3
 8004750:	4b19      	ldr	r3, [pc, #100]	@ (80047b8 <prvAddNewTaskToReadyList+0xc8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4313      	orrs	r3, r2
 8004756:	4a18      	ldr	r2, [pc, #96]	@ (80047b8 <prvAddNewTaskToReadyList+0xc8>)
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4a15      	ldr	r2, [pc, #84]	@ (80047bc <prvAddNewTaskToReadyList+0xcc>)
 8004768:	441a      	add	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7ff fdf1 	bl	8004358 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004776:	f000 fd31 	bl	80051dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800477a:	4b0d      	ldr	r3, [pc, #52]	@ (80047b0 <prvAddNewTaskToReadyList+0xc0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00e      	beq.n	80047a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004782:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <prvAddNewTaskToReadyList+0xbc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478c:	429a      	cmp	r2, r3
 800478e:	d207      	bcs.n	80047a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004790:	4b0b      	ldr	r3, [pc, #44]	@ (80047c0 <prvAddNewTaskToReadyList+0xd0>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	200005cc 	.word	0x200005cc
 80047ac:	200004cc 	.word	0x200004cc
 80047b0:	200005d8 	.word	0x200005d8
 80047b4:	200005e8 	.word	0x200005e8
 80047b8:	200005d4 	.word	0x200005d4
 80047bc:	200004d0 	.word	0x200004d0
 80047c0:	e000ed04 	.word	0xe000ed04

080047c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d018      	beq.n	8004808 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047d6:	4b14      	ldr	r3, [pc, #80]	@ (8004828 <vTaskDelay+0x64>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <vTaskDelay+0x32>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	60bb      	str	r3, [r7, #8]
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	e7fd      	b.n	80047f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047f6:	f000 f885 	bl	8004904 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047fa:	2100      	movs	r1, #0
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fb27 	bl	8004e50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004802:	f000 f88d 	bl	8004920 <xTaskResumeAll>
 8004806:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800480e:	4b07      	ldr	r3, [pc, #28]	@ (800482c <vTaskDelay+0x68>)
 8004810:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800481e:	bf00      	nop
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200005f4 	.word	0x200005f4
 800482c:	e000ed04 	.word	0xe000ed04

08004830 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08a      	sub	sp, #40	@ 0x28
 8004834:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800483e:	463a      	mov	r2, r7
 8004840:	1d39      	adds	r1, r7, #4
 8004842:	f107 0308 	add.w	r3, r7, #8
 8004846:	4618      	mov	r0, r3
 8004848:	f7fc fac6 	bl	8000dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800484c:	6839      	ldr	r1, [r7, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	9202      	str	r2, [sp, #8]
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	2300      	movs	r3, #0
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	2300      	movs	r3, #0
 800485c:	460a      	mov	r2, r1
 800485e:	4921      	ldr	r1, [pc, #132]	@ (80048e4 <vTaskStartScheduler+0xb4>)
 8004860:	4821      	ldr	r0, [pc, #132]	@ (80048e8 <vTaskStartScheduler+0xb8>)
 8004862:	f7ff fe00 	bl	8004466 <xTaskCreateStatic>
 8004866:	4603      	mov	r3, r0
 8004868:	4a20      	ldr	r2, [pc, #128]	@ (80048ec <vTaskStartScheduler+0xbc>)
 800486a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800486c:	4b1f      	ldr	r3, [pc, #124]	@ (80048ec <vTaskStartScheduler+0xbc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004874:	2301      	movs	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e001      	b.n	800487e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800487a:	2300      	movs	r3, #0
 800487c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d11b      	bne.n	80048bc <vTaskStartScheduler+0x8c>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	613b      	str	r3, [r7, #16]
}
 8004896:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004898:	4b15      	ldr	r3, [pc, #84]	@ (80048f0 <vTaskStartScheduler+0xc0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	334c      	adds	r3, #76	@ 0x4c
 800489e:	4a15      	ldr	r2, [pc, #84]	@ (80048f4 <vTaskStartScheduler+0xc4>)
 80048a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048a2:	4b15      	ldr	r3, [pc, #84]	@ (80048f8 <vTaskStartScheduler+0xc8>)
 80048a4:	f04f 32ff 	mov.w	r2, #4294967295
 80048a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048aa:	4b14      	ldr	r3, [pc, #80]	@ (80048fc <vTaskStartScheduler+0xcc>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048b0:	4b13      	ldr	r3, [pc, #76]	@ (8004900 <vTaskStartScheduler+0xd0>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048b6:	f000 fbbb 	bl	8005030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048ba:	e00f      	b.n	80048dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d10b      	bne.n	80048dc <vTaskStartScheduler+0xac>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	60fb      	str	r3, [r7, #12]
}
 80048d6:	bf00      	nop
 80048d8:	bf00      	nop
 80048da:	e7fd      	b.n	80048d8 <vTaskStartScheduler+0xa8>
}
 80048dc:	bf00      	nop
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	08006c10 	.word	0x08006c10
 80048e8:	08004c99 	.word	0x08004c99
 80048ec:	200005f0 	.word	0x200005f0
 80048f0:	200004cc 	.word	0x200004cc
 80048f4:	20000054 	.word	0x20000054
 80048f8:	200005ec 	.word	0x200005ec
 80048fc:	200005d8 	.word	0x200005d8
 8004900:	200005d0 	.word	0x200005d0

08004904 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004908:	4b04      	ldr	r3, [pc, #16]	@ (800491c <vTaskSuspendAll+0x18>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a03      	ldr	r2, [pc, #12]	@ (800491c <vTaskSuspendAll+0x18>)
 8004910:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004912:	bf00      	nop
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	200005f4 	.word	0x200005f4

08004920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800492e:	4b42      	ldr	r3, [pc, #264]	@ (8004a38 <xTaskResumeAll+0x118>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <xTaskResumeAll+0x2e>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	603b      	str	r3, [r7, #0]
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	e7fd      	b.n	800494a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800494e:	f000 fc13 	bl	8005178 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004952:	4b39      	ldr	r3, [pc, #228]	@ (8004a38 <xTaskResumeAll+0x118>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3b01      	subs	r3, #1
 8004958:	4a37      	ldr	r2, [pc, #220]	@ (8004a38 <xTaskResumeAll+0x118>)
 800495a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800495c:	4b36      	ldr	r3, [pc, #216]	@ (8004a38 <xTaskResumeAll+0x118>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d161      	bne.n	8004a28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004964:	4b35      	ldr	r3, [pc, #212]	@ (8004a3c <xTaskResumeAll+0x11c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d05d      	beq.n	8004a28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800496c:	e02e      	b.n	80049cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800496e:	4b34      	ldr	r3, [pc, #208]	@ (8004a40 <xTaskResumeAll+0x120>)
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	3318      	adds	r3, #24
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fd49 	bl	8004412 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7ff fd44 	bl	8004412 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	2201      	movs	r2, #1
 8004990:	409a      	lsls	r2, r3
 8004992:	4b2c      	ldr	r3, [pc, #176]	@ (8004a44 <xTaskResumeAll+0x124>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4313      	orrs	r3, r2
 8004998:	4a2a      	ldr	r2, [pc, #168]	@ (8004a44 <xTaskResumeAll+0x124>)
 800499a:	6013      	str	r3, [r2, #0]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a0:	4613      	mov	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4a27      	ldr	r2, [pc, #156]	@ (8004a48 <xTaskResumeAll+0x128>)
 80049aa:	441a      	add	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3304      	adds	r3, #4
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7ff fcd0 	bl	8004358 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049bc:	4b23      	ldr	r3, [pc, #140]	@ (8004a4c <xTaskResumeAll+0x12c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d302      	bcc.n	80049cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049c6:	4b22      	ldr	r3, [pc, #136]	@ (8004a50 <xTaskResumeAll+0x130>)
 80049c8:	2201      	movs	r2, #1
 80049ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004a40 <xTaskResumeAll+0x120>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1cc      	bne.n	800496e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049da:	f000 fa19 	bl	8004e10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80049de:	4b1d      	ldr	r3, [pc, #116]	@ (8004a54 <xTaskResumeAll+0x134>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d010      	beq.n	8004a0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049ea:	f000 f837 	bl	8004a5c <xTaskIncrementTick>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80049f4:	4b16      	ldr	r3, [pc, #88]	@ (8004a50 <xTaskResumeAll+0x130>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f1      	bne.n	80049ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a06:	4b13      	ldr	r3, [pc, #76]	@ (8004a54 <xTaskResumeAll+0x134>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a0c:	4b10      	ldr	r3, [pc, #64]	@ (8004a50 <xTaskResumeAll+0x130>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d009      	beq.n	8004a28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a14:	2301      	movs	r3, #1
 8004a16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a18:	4b0f      	ldr	r3, [pc, #60]	@ (8004a58 <xTaskResumeAll+0x138>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a28:	f000 fbd8 	bl	80051dc <vPortExitCritical>

	return xAlreadyYielded;
 8004a2c:	68bb      	ldr	r3, [r7, #8]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	200005f4 	.word	0x200005f4
 8004a3c:	200005cc 	.word	0x200005cc
 8004a40:	2000058c 	.word	0x2000058c
 8004a44:	200005d4 	.word	0x200005d4
 8004a48:	200004d0 	.word	0x200004d0
 8004a4c:	200004cc 	.word	0x200004cc
 8004a50:	200005e0 	.word	0x200005e0
 8004a54:	200005dc 	.word	0x200005dc
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a62:	2300      	movs	r3, #0
 8004a64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a66:	4b4f      	ldr	r3, [pc, #316]	@ (8004ba4 <xTaskIncrementTick+0x148>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 808f 	bne.w	8004b8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a70:	4b4d      	ldr	r3, [pc, #308]	@ (8004ba8 <xTaskIncrementTick+0x14c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3301      	adds	r3, #1
 8004a76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a78:	4a4b      	ldr	r2, [pc, #300]	@ (8004ba8 <xTaskIncrementTick+0x14c>)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d121      	bne.n	8004ac8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a84:	4b49      	ldr	r3, [pc, #292]	@ (8004bac <xTaskIncrementTick+0x150>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00b      	beq.n	8004aa6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	603b      	str	r3, [r7, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	bf00      	nop
 8004aa4:	e7fd      	b.n	8004aa2 <xTaskIncrementTick+0x46>
 8004aa6:	4b41      	ldr	r3, [pc, #260]	@ (8004bac <xTaskIncrementTick+0x150>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	4b40      	ldr	r3, [pc, #256]	@ (8004bb0 <xTaskIncrementTick+0x154>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3e      	ldr	r2, [pc, #248]	@ (8004bac <xTaskIncrementTick+0x150>)
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4a3e      	ldr	r2, [pc, #248]	@ (8004bb0 <xTaskIncrementTick+0x154>)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	4b3e      	ldr	r3, [pc, #248]	@ (8004bb4 <xTaskIncrementTick+0x158>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8004bb4 <xTaskIncrementTick+0x158>)
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	f000 f9a4 	bl	8004e10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bb8 <xTaskIncrementTick+0x15c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d348      	bcc.n	8004b64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ad2:	4b36      	ldr	r3, [pc, #216]	@ (8004bac <xTaskIncrementTick+0x150>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d104      	bne.n	8004ae6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004adc:	4b36      	ldr	r3, [pc, #216]	@ (8004bb8 <xTaskIncrementTick+0x15c>)
 8004ade:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae2:	601a      	str	r2, [r3, #0]
					break;
 8004ae4:	e03e      	b.n	8004b64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae6:	4b31      	ldr	r3, [pc, #196]	@ (8004bac <xTaskIncrementTick+0x150>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d203      	bcs.n	8004b06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004afe:	4a2e      	ldr	r2, [pc, #184]	@ (8004bb8 <xTaskIncrementTick+0x15c>)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b04:	e02e      	b.n	8004b64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fc81 	bl	8004412 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	3318      	adds	r3, #24
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff fc78 	bl	8004412 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	2201      	movs	r2, #1
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	4b24      	ldr	r3, [pc, #144]	@ (8004bbc <xTaskIncrementTick+0x160>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	4a22      	ldr	r2, [pc, #136]	@ (8004bbc <xTaskIncrementTick+0x160>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4a1f      	ldr	r2, [pc, #124]	@ (8004bc0 <xTaskIncrementTick+0x164>)
 8004b42:	441a      	add	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7ff fc04 	bl	8004358 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b54:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <xTaskIncrementTick+0x168>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3b9      	bcc.n	8004ad2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b62:	e7b6      	b.n	8004ad2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b64:	4b17      	ldr	r3, [pc, #92]	@ (8004bc4 <xTaskIncrementTick+0x168>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6a:	4915      	ldr	r1, [pc, #84]	@ (8004bc0 <xTaskIncrementTick+0x164>)
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d901      	bls.n	8004b80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b80:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <xTaskIncrementTick+0x16c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e004      	b.n	8004b98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004bcc <xTaskIncrementTick+0x170>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a0d      	ldr	r2, [pc, #52]	@ (8004bcc <xTaskIncrementTick+0x170>)
 8004b96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b98:	697b      	ldr	r3, [r7, #20]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200005f4 	.word	0x200005f4
 8004ba8:	200005d0 	.word	0x200005d0
 8004bac:	20000584 	.word	0x20000584
 8004bb0:	20000588 	.word	0x20000588
 8004bb4:	200005e4 	.word	0x200005e4
 8004bb8:	200005ec 	.word	0x200005ec
 8004bbc:	200005d4 	.word	0x200005d4
 8004bc0:	200004d0 	.word	0x200004d0
 8004bc4:	200004cc 	.word	0x200004cc
 8004bc8:	200005e0 	.word	0x200005e0
 8004bcc:	200005dc 	.word	0x200005dc

08004bd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8004c80 <vTaskSwitchContext+0xb0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bde:	4b29      	ldr	r3, [pc, #164]	@ (8004c84 <vTaskSwitchContext+0xb4>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004be4:	e045      	b.n	8004c72 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004be6:	4b27      	ldr	r3, [pc, #156]	@ (8004c84 <vTaskSwitchContext+0xb4>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bec:	4b26      	ldr	r3, [pc, #152]	@ (8004c88 <vTaskSwitchContext+0xb8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	fab3 f383 	clz	r3, r3
 8004bf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	f1c3 031f 	rsb	r3, r3, #31
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	4922      	ldr	r1, [pc, #136]	@ (8004c8c <vTaskSwitchContext+0xbc>)
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4613      	mov	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	607b      	str	r3, [r7, #4]
}
 8004c28:	bf00      	nop
 8004c2a:	bf00      	nop
 8004c2c:	e7fd      	b.n	8004c2a <vTaskSwitchContext+0x5a>
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <vTaskSwitchContext+0xbc>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	3308      	adds	r3, #8
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d104      	bne.n	8004c5e <vTaskSwitchContext+0x8e>
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	605a      	str	r2, [r3, #4]
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	4a0a      	ldr	r2, [pc, #40]	@ (8004c90 <vTaskSwitchContext+0xc0>)
 8004c66:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c68:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <vTaskSwitchContext+0xc0>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	334c      	adds	r3, #76	@ 0x4c
 8004c6e:	4a09      	ldr	r2, [pc, #36]	@ (8004c94 <vTaskSwitchContext+0xc4>)
 8004c70:	6013      	str	r3, [r2, #0]
}
 8004c72:	bf00      	nop
 8004c74:	371c      	adds	r7, #28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	200005f4 	.word	0x200005f4
 8004c84:	200005e0 	.word	0x200005e0
 8004c88:	200005d4 	.word	0x200005d4
 8004c8c:	200004d0 	.word	0x200004d0
 8004c90:	200004cc 	.word	0x200004cc
 8004c94:	20000054 	.word	0x20000054

08004c98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ca0:	f000 f852 	bl	8004d48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ca4:	4b06      	ldr	r3, [pc, #24]	@ (8004cc0 <prvIdleTask+0x28>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d9f9      	bls.n	8004ca0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cac:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <prvIdleTask+0x2c>)
 8004cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cbc:	e7f0      	b.n	8004ca0 <prvIdleTask+0x8>
 8004cbe:	bf00      	nop
 8004cc0:	200004d0 	.word	0x200004d0
 8004cc4:	e000ed04 	.word	0xe000ed04

08004cc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cce:	2300      	movs	r3, #0
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	e00c      	b.n	8004cee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4a12      	ldr	r2, [pc, #72]	@ (8004d28 <prvInitialiseTaskLists+0x60>)
 8004ce0:	4413      	add	r3, r2
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fb0b 	bl	80042fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3301      	adds	r3, #1
 8004cec:	607b      	str	r3, [r7, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b06      	cmp	r3, #6
 8004cf2:	d9ef      	bls.n	8004cd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cf4:	480d      	ldr	r0, [pc, #52]	@ (8004d2c <prvInitialiseTaskLists+0x64>)
 8004cf6:	f7ff fb02 	bl	80042fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cfa:	480d      	ldr	r0, [pc, #52]	@ (8004d30 <prvInitialiseTaskLists+0x68>)
 8004cfc:	f7ff faff 	bl	80042fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d00:	480c      	ldr	r0, [pc, #48]	@ (8004d34 <prvInitialiseTaskLists+0x6c>)
 8004d02:	f7ff fafc 	bl	80042fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d06:	480c      	ldr	r0, [pc, #48]	@ (8004d38 <prvInitialiseTaskLists+0x70>)
 8004d08:	f7ff faf9 	bl	80042fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d0c:	480b      	ldr	r0, [pc, #44]	@ (8004d3c <prvInitialiseTaskLists+0x74>)
 8004d0e:	f7ff faf6 	bl	80042fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	@ (8004d40 <prvInitialiseTaskLists+0x78>)
 8004d14:	4a05      	ldr	r2, [pc, #20]	@ (8004d2c <prvInitialiseTaskLists+0x64>)
 8004d16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d18:	4b0a      	ldr	r3, [pc, #40]	@ (8004d44 <prvInitialiseTaskLists+0x7c>)
 8004d1a:	4a05      	ldr	r2, [pc, #20]	@ (8004d30 <prvInitialiseTaskLists+0x68>)
 8004d1c:	601a      	str	r2, [r3, #0]
}
 8004d1e:	bf00      	nop
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	200004d0 	.word	0x200004d0
 8004d2c:	2000055c 	.word	0x2000055c
 8004d30:	20000570 	.word	0x20000570
 8004d34:	2000058c 	.word	0x2000058c
 8004d38:	200005a0 	.word	0x200005a0
 8004d3c:	200005b8 	.word	0x200005b8
 8004d40:	20000584 	.word	0x20000584
 8004d44:	20000588 	.word	0x20000588

08004d48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d4e:	e019      	b.n	8004d84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d50:	f000 fa12 	bl	8005178 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d54:	4b10      	ldr	r3, [pc, #64]	@ (8004d98 <prvCheckTasksWaitingTermination+0x50>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7ff fb56 	bl	8004412 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <prvCheckTasksWaitingTermination+0x54>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d9c <prvCheckTasksWaitingTermination+0x54>)
 8004d6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d70:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <prvCheckTasksWaitingTermination+0x58>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3b01      	subs	r3, #1
 8004d76:	4a0a      	ldr	r2, [pc, #40]	@ (8004da0 <prvCheckTasksWaitingTermination+0x58>)
 8004d78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d7a:	f000 fa2f 	bl	80051dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f810 	bl	8004da4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d84:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <prvCheckTasksWaitingTermination+0x58>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e1      	bne.n	8004d50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	200005a0 	.word	0x200005a0
 8004d9c:	200005cc 	.word	0x200005cc
 8004da0:	200005b4 	.word	0x200005b4

08004da4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	334c      	adds	r3, #76	@ 0x4c
 8004db0:	4618      	mov	r0, r3
 8004db2:	f001 f89b 	bl	8005eec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d108      	bne.n	8004dd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 fb85 	bl	80054d4 <vPortFree>
				vPortFree( pxTCB );
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fb82 	bl	80054d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004dd0:	e019      	b.n	8004e06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d103      	bne.n	8004de4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fb79 	bl	80054d4 <vPortFree>
	}
 8004de2:	e010      	b.n	8004e06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d00b      	beq.n	8004e06 <prvDeleteTCB+0x62>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	60fb      	str	r3, [r7, #12]
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	e7fd      	b.n	8004e02 <prvDeleteTCB+0x5e>
	}
 8004e06:	bf00      	nop
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e16:	4b0c      	ldr	r3, [pc, #48]	@ (8004e48 <prvResetNextTaskUnblockTime+0x38>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d104      	bne.n	8004e2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e20:	4b0a      	ldr	r3, [pc, #40]	@ (8004e4c <prvResetNextTaskUnblockTime+0x3c>)
 8004e22:	f04f 32ff 	mov.w	r2, #4294967295
 8004e26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e28:	e008      	b.n	8004e3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e2a:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <prvResetNextTaskUnblockTime+0x38>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a04      	ldr	r2, [pc, #16]	@ (8004e4c <prvResetNextTaskUnblockTime+0x3c>)
 8004e3a:	6013      	str	r3, [r2, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	20000584 	.word	0x20000584
 8004e4c:	200005ec 	.word	0x200005ec

08004e50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e5a:	4b29      	ldr	r3, [pc, #164]	@ (8004f00 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e60:	4b28      	ldr	r3, [pc, #160]	@ (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7ff fad3 	bl	8004412 <uxListRemove>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10b      	bne.n	8004e8a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e72:	4b24      	ldr	r3, [pc, #144]	@ (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	2201      	movs	r2, #1
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43da      	mvns	r2, r3
 8004e80:	4b21      	ldr	r3, [pc, #132]	@ (8004f08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4013      	ands	r3, r2
 8004e86:	4a20      	ldr	r2, [pc, #128]	@ (8004f08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e88:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d10a      	bne.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x58>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e98:	4b1a      	ldr	r3, [pc, #104]	@ (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	481a      	ldr	r0, [pc, #104]	@ (8004f0c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ea2:	f7ff fa59 	bl	8004358 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ea6:	e026      	b.n	8004ef6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004eb0:	4b14      	ldr	r3, [pc, #80]	@ (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d209      	bcs.n	8004ed4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ec0:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3304      	adds	r3, #4
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4610      	mov	r0, r2
 8004ece:	f7ff fa67 	bl	80043a0 <vListInsert>
}
 8004ed2:	e010      	b.n	8004ef6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3304      	adds	r3, #4
 8004ede:	4619      	mov	r1, r3
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	f7ff fa5d 	bl	80043a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d202      	bcs.n	8004ef6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ef0:	4a09      	ldr	r2, [pc, #36]	@ (8004f18 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6013      	str	r3, [r2, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200005d0 	.word	0x200005d0
 8004f04:	200004cc 	.word	0x200004cc
 8004f08:	200005d4 	.word	0x200005d4
 8004f0c:	200005b8 	.word	0x200005b8
 8004f10:	20000588 	.word	0x20000588
 8004f14:	20000584 	.word	0x20000584
 8004f18:	200005ec 	.word	0x200005ec

08004f1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3b04      	subs	r3, #4
 8004f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f023 0201 	bic.w	r2, r3, #1
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f80 <pxPortInitialiseStack+0x64>)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3b14      	subs	r3, #20
 8004f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b04      	subs	r3, #4
 8004f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f06f 0202 	mvn.w	r2, #2
 8004f6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	3b20      	subs	r3, #32
 8004f70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f72:	68fb      	ldr	r3, [r7, #12]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	08004f85 	.word	0x08004f85

08004f84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f8e:	4b13      	ldr	r3, [pc, #76]	@ (8004fdc <prvTaskExitError+0x58>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d00b      	beq.n	8004fb0 <prvTaskExitError+0x2c>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	60fb      	str	r3, [r7, #12]
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <prvTaskExitError+0x28>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	60bb      	str	r3, [r7, #8]
}
 8004fc2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fc4:	bf00      	nop
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d0fc      	beq.n	8004fc6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	20000044 	.word	0x20000044

08004fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fe0:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <pxCurrentTCBConst2>)
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	6808      	ldr	r0, [r1, #0]
 8004fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	f380 8809 	msr	PSP, r0
 8004fee:	f3bf 8f6f 	isb	sy
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8811 	msr	BASEPRI, r0
 8004ffa:	4770      	bx	lr
 8004ffc:	f3af 8000 	nop.w

08005000 <pxCurrentTCBConst2>:
 8005000:	200004cc 	.word	0x200004cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop

08005008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005008:	4808      	ldr	r0, [pc, #32]	@ (800502c <prvPortStartFirstTask+0x24>)
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	6800      	ldr	r0, [r0, #0]
 800500e:	f380 8808 	msr	MSP, r0
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8814 	msr	CONTROL, r0
 800501a:	b662      	cpsie	i
 800501c:	b661      	cpsie	f
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	df00      	svc	0
 8005028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800502a:	bf00      	nop
 800502c:	e000ed08 	.word	0xe000ed08

08005030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005036:	4b47      	ldr	r3, [pc, #284]	@ (8005154 <xPortStartScheduler+0x124>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a47      	ldr	r2, [pc, #284]	@ (8005158 <xPortStartScheduler+0x128>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d10b      	bne.n	8005058 <xPortStartScheduler+0x28>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	613b      	str	r3, [r7, #16]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005058:	4b3e      	ldr	r3, [pc, #248]	@ (8005154 <xPortStartScheduler+0x124>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a3f      	ldr	r2, [pc, #252]	@ (800515c <xPortStartScheduler+0x12c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10b      	bne.n	800507a <xPortStartScheduler+0x4a>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60fb      	str	r3, [r7, #12]
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	e7fd      	b.n	8005076 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800507a:	4b39      	ldr	r3, [pc, #228]	@ (8005160 <xPortStartScheduler+0x130>)
 800507c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	22ff      	movs	r2, #255	@ 0xff
 800508a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005094:	78fb      	ldrb	r3, [r7, #3]
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800509c:	b2da      	uxtb	r2, r3
 800509e:	4b31      	ldr	r3, [pc, #196]	@ (8005164 <xPortStartScheduler+0x134>)
 80050a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050a2:	4b31      	ldr	r3, [pc, #196]	@ (8005168 <xPortStartScheduler+0x138>)
 80050a4:	2207      	movs	r2, #7
 80050a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050a8:	e009      	b.n	80050be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80050aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005168 <xPortStartScheduler+0x138>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3b01      	subs	r3, #1
 80050b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005168 <xPortStartScheduler+0x138>)
 80050b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c6:	2b80      	cmp	r3, #128	@ 0x80
 80050c8:	d0ef      	beq.n	80050aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ca:	4b27      	ldr	r3, [pc, #156]	@ (8005168 <xPortStartScheduler+0x138>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1c3 0307 	rsb	r3, r3, #7
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d00b      	beq.n	80050ee <xPortStartScheduler+0xbe>
	__asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	60bb      	str	r3, [r7, #8]
}
 80050e8:	bf00      	nop
 80050ea:	bf00      	nop
 80050ec:	e7fd      	b.n	80050ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005168 <xPortStartScheduler+0x138>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005168 <xPortStartScheduler+0x138>)
 80050f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005168 <xPortStartScheduler+0x138>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005100:	4a19      	ldr	r2, [pc, #100]	@ (8005168 <xPortStartScheduler+0x138>)
 8005102:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	b2da      	uxtb	r2, r3
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800510c:	4b17      	ldr	r3, [pc, #92]	@ (800516c <xPortStartScheduler+0x13c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a16      	ldr	r2, [pc, #88]	@ (800516c <xPortStartScheduler+0x13c>)
 8005112:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005116:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005118:	4b14      	ldr	r3, [pc, #80]	@ (800516c <xPortStartScheduler+0x13c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a13      	ldr	r2, [pc, #76]	@ (800516c <xPortStartScheduler+0x13c>)
 800511e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005122:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005124:	f000 f8da 	bl	80052dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005128:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <xPortStartScheduler+0x140>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800512e:	f000 f8f9 	bl	8005324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005132:	4b10      	ldr	r3, [pc, #64]	@ (8005174 <xPortStartScheduler+0x144>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a0f      	ldr	r2, [pc, #60]	@ (8005174 <xPortStartScheduler+0x144>)
 8005138:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800513c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800513e:	f7ff ff63 	bl	8005008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005142:	f7ff fd45 	bl	8004bd0 <vTaskSwitchContext>
	prvTaskExitError();
 8005146:	f7ff ff1d 	bl	8004f84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3718      	adds	r7, #24
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	e000ed00 	.word	0xe000ed00
 8005158:	410fc271 	.word	0x410fc271
 800515c:	410fc270 	.word	0x410fc270
 8005160:	e000e400 	.word	0xe000e400
 8005164:	200005f8 	.word	0x200005f8
 8005168:	200005fc 	.word	0x200005fc
 800516c:	e000ed20 	.word	0xe000ed20
 8005170:	20000044 	.word	0x20000044
 8005174:	e000ef34 	.word	0xe000ef34

08005178 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
	__asm volatile
 800517e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	607b      	str	r3, [r7, #4]
}
 8005190:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005192:	4b10      	ldr	r3, [pc, #64]	@ (80051d4 <vPortEnterCritical+0x5c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3301      	adds	r3, #1
 8005198:	4a0e      	ldr	r2, [pc, #56]	@ (80051d4 <vPortEnterCritical+0x5c>)
 800519a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800519c:	4b0d      	ldr	r3, [pc, #52]	@ (80051d4 <vPortEnterCritical+0x5c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d110      	bne.n	80051c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051a4:	4b0c      	ldr	r3, [pc, #48]	@ (80051d8 <vPortEnterCritical+0x60>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	603b      	str	r3, [r7, #0]
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <vPortEnterCritical+0x4a>
	}
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000044 	.word	0x20000044
 80051d8:	e000ed04 	.word	0xe000ed04

080051dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051e2:	4b12      	ldr	r3, [pc, #72]	@ (800522c <vPortExitCritical+0x50>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <vPortExitCritical+0x26>
	__asm volatile
 80051ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	607b      	str	r3, [r7, #4]
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	e7fd      	b.n	80051fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005202:	4b0a      	ldr	r3, [pc, #40]	@ (800522c <vPortExitCritical+0x50>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	3b01      	subs	r3, #1
 8005208:	4a08      	ldr	r2, [pc, #32]	@ (800522c <vPortExitCritical+0x50>)
 800520a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800520c:	4b07      	ldr	r3, [pc, #28]	@ (800522c <vPortExitCritical+0x50>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d105      	bne.n	8005220 <vPortExitCritical+0x44>
 8005214:	2300      	movs	r3, #0
 8005216:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800521e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	20000044 	.word	0x20000044

08005230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005230:	f3ef 8009 	mrs	r0, PSP
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4b15      	ldr	r3, [pc, #84]	@ (8005290 <pxCurrentTCBConst>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	f01e 0f10 	tst.w	lr, #16
 8005240:	bf08      	it	eq
 8005242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800524a:	6010      	str	r0, [r2, #0]
 800524c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005250:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005254:	f380 8811 	msr	BASEPRI, r0
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f7ff fcb6 	bl	8004bd0 <vTaskSwitchContext>
 8005264:	f04f 0000 	mov.w	r0, #0
 8005268:	f380 8811 	msr	BASEPRI, r0
 800526c:	bc09      	pop	{r0, r3}
 800526e:	6819      	ldr	r1, [r3, #0]
 8005270:	6808      	ldr	r0, [r1, #0]
 8005272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005276:	f01e 0f10 	tst.w	lr, #16
 800527a:	bf08      	it	eq
 800527c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005280:	f380 8809 	msr	PSP, r0
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	f3af 8000 	nop.w

08005290 <pxCurrentTCBConst>:
 8005290:	200004cc 	.word	0x200004cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop

08005298 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	607b      	str	r3, [r7, #4]
}
 80052b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052b2:	f7ff fbd3 	bl	8004a5c <xTaskIncrementTick>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d003      	beq.n	80052c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052bc:	4b06      	ldr	r3, [pc, #24]	@ (80052d8 <SysTick_Handler+0x40>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	2300      	movs	r3, #0
 80052c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	f383 8811 	msr	BASEPRI, r3
}
 80052ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052d0:	bf00      	nop
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <vPortSetupTimerInterrupt+0x34>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <vPortSetupTimerInterrupt+0x38>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005318 <vPortSetupTimerInterrupt+0x3c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a0a      	ldr	r2, [pc, #40]	@ (800531c <vPortSetupTimerInterrupt+0x40>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	099b      	lsrs	r3, r3, #6
 80052f8:	4a09      	ldr	r2, [pc, #36]	@ (8005320 <vPortSetupTimerInterrupt+0x44>)
 80052fa:	3b01      	subs	r3, #1
 80052fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052fe:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <vPortSetupTimerInterrupt+0x34>)
 8005300:	2207      	movs	r2, #7
 8005302:	601a      	str	r2, [r3, #0]
}
 8005304:	bf00      	nop
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	e000e010 	.word	0xe000e010
 8005314:	e000e018 	.word	0xe000e018
 8005318:	20000038 	.word	0x20000038
 800531c:	10624dd3 	.word	0x10624dd3
 8005320:	e000e014 	.word	0xe000e014

08005324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005324:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005334 <vPortEnableVFP+0x10>
 8005328:	6801      	ldr	r1, [r0, #0]
 800532a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800532e:	6001      	str	r1, [r0, #0]
 8005330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005332:	bf00      	nop
 8005334:	e000ed88 	.word	0xe000ed88

08005338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b08a      	sub	sp, #40	@ 0x28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005340:	2300      	movs	r3, #0
 8005342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005344:	f7ff fade 	bl	8004904 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005348:	4b5c      	ldr	r3, [pc, #368]	@ (80054bc <pvPortMalloc+0x184>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005350:	f000 f924 	bl	800559c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005354:	4b5a      	ldr	r3, [pc, #360]	@ (80054c0 <pvPortMalloc+0x188>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	f040 8095 	bne.w	800548c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01e      	beq.n	80053a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005368:	2208      	movs	r2, #8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b00      	cmp	r3, #0
 8005378:	d015      	beq.n	80053a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f023 0307 	bic.w	r3, r3, #7
 8005380:	3308      	adds	r3, #8
 8005382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <pvPortMalloc+0x6e>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	617b      	str	r3, [r7, #20]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d06f      	beq.n	800548c <pvPortMalloc+0x154>
 80053ac:	4b45      	ldr	r3, [pc, #276]	@ (80054c4 <pvPortMalloc+0x18c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d86a      	bhi.n	800548c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053b6:	4b44      	ldr	r3, [pc, #272]	@ (80054c8 <pvPortMalloc+0x190>)
 80053b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053ba:	4b43      	ldr	r3, [pc, #268]	@ (80054c8 <pvPortMalloc+0x190>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053c0:	e004      	b.n	80053cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d903      	bls.n	80053de <pvPortMalloc+0xa6>
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f1      	bne.n	80053c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053de:	4b37      	ldr	r3, [pc, #220]	@ (80054bc <pvPortMalloc+0x184>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d051      	beq.n	800548c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2208      	movs	r2, #8
 80053ee:	4413      	add	r3, r2
 80053f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	1ad2      	subs	r2, r2, r3
 8005402:	2308      	movs	r3, #8
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	429a      	cmp	r2, r3
 8005408:	d920      	bls.n	800544c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800540a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4413      	add	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <pvPortMalloc+0xfc>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	613b      	str	r3, [r7, #16]
}
 800542e:	bf00      	nop
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	1ad2      	subs	r2, r2, r3
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005446:	69b8      	ldr	r0, [r7, #24]
 8005448:	f000 f90a 	bl	8005660 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800544c:	4b1d      	ldr	r3, [pc, #116]	@ (80054c4 <pvPortMalloc+0x18c>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	4a1b      	ldr	r2, [pc, #108]	@ (80054c4 <pvPortMalloc+0x18c>)
 8005458:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800545a:	4b1a      	ldr	r3, [pc, #104]	@ (80054c4 <pvPortMalloc+0x18c>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <pvPortMalloc+0x194>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d203      	bcs.n	800546e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005466:	4b17      	ldr	r3, [pc, #92]	@ (80054c4 <pvPortMalloc+0x18c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a18      	ldr	r2, [pc, #96]	@ (80054cc <pvPortMalloc+0x194>)
 800546c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800546e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	4b13      	ldr	r3, [pc, #76]	@ (80054c0 <pvPortMalloc+0x188>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	431a      	orrs	r2, r3
 8005478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800547c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547e:	2200      	movs	r2, #0
 8005480:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005482:	4b13      	ldr	r3, [pc, #76]	@ (80054d0 <pvPortMalloc+0x198>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3301      	adds	r3, #1
 8005488:	4a11      	ldr	r2, [pc, #68]	@ (80054d0 <pvPortMalloc+0x198>)
 800548a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800548c:	f7ff fa48 	bl	8004920 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00b      	beq.n	80054b2 <pvPortMalloc+0x17a>
	__asm volatile
 800549a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800549e:	f383 8811 	msr	BASEPRI, r3
 80054a2:	f3bf 8f6f 	isb	sy
 80054a6:	f3bf 8f4f 	dsb	sy
 80054aa:	60fb      	str	r3, [r7, #12]
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	e7fd      	b.n	80054ae <pvPortMalloc+0x176>
	return pvReturn;
 80054b2:	69fb      	ldr	r3, [r7, #28]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3728      	adds	r7, #40	@ 0x28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	20004208 	.word	0x20004208
 80054c0:	2000421c 	.word	0x2000421c
 80054c4:	2000420c 	.word	0x2000420c
 80054c8:	20004200 	.word	0x20004200
 80054cc:	20004210 	.word	0x20004210
 80054d0:	20004214 	.word	0x20004214

080054d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d04f      	beq.n	8005586 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054e6:	2308      	movs	r3, #8
 80054e8:	425b      	negs	r3, r3
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4413      	add	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	4b25      	ldr	r3, [pc, #148]	@ (8005590 <vPortFree+0xbc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4013      	ands	r3, r2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10b      	bne.n	800551a <vPortFree+0x46>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	60fb      	str	r3, [r7, #12]
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	e7fd      	b.n	8005516 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00b      	beq.n	800553a <vPortFree+0x66>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	60bb      	str	r3, [r7, #8]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	4b14      	ldr	r3, [pc, #80]	@ (8005590 <vPortFree+0xbc>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d01e      	beq.n	8005586 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d11a      	bne.n	8005586 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	4b0e      	ldr	r3, [pc, #56]	@ (8005590 <vPortFree+0xbc>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	43db      	mvns	r3, r3
 800555a:	401a      	ands	r2, r3
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005560:	f7ff f9d0 	bl	8004904 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	4b0a      	ldr	r3, [pc, #40]	@ (8005594 <vPortFree+0xc0>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4413      	add	r3, r2
 800556e:	4a09      	ldr	r2, [pc, #36]	@ (8005594 <vPortFree+0xc0>)
 8005570:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005572:	6938      	ldr	r0, [r7, #16]
 8005574:	f000 f874 	bl	8005660 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005578:	4b07      	ldr	r3, [pc, #28]	@ (8005598 <vPortFree+0xc4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3301      	adds	r3, #1
 800557e:	4a06      	ldr	r2, [pc, #24]	@ (8005598 <vPortFree+0xc4>)
 8005580:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005582:	f7ff f9cd 	bl	8004920 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005586:	bf00      	nop
 8005588:	3718      	adds	r7, #24
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	2000421c 	.word	0x2000421c
 8005594:	2000420c 	.word	0x2000420c
 8005598:	20004218 	.word	0x20004218

0800559c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055a2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80055a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055a8:	4b27      	ldr	r3, [pc, #156]	@ (8005648 <prvHeapInit+0xac>)
 80055aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3307      	adds	r3, #7
 80055ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0307 	bic.w	r3, r3, #7
 80055c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005648 <prvHeapInit+0xac>)
 80055cc:	4413      	add	r3, r2
 80055ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055d4:	4a1d      	ldr	r2, [pc, #116]	@ (800564c <prvHeapInit+0xb0>)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055da:	4b1c      	ldr	r3, [pc, #112]	@ (800564c <prvHeapInit+0xb0>)
 80055dc:	2200      	movs	r2, #0
 80055de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4413      	add	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055e8:	2208      	movs	r2, #8
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	1a9b      	subs	r3, r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0307 	bic.w	r3, r3, #7
 80055f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a15      	ldr	r2, [pc, #84]	@ (8005650 <prvHeapInit+0xb4>)
 80055fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055fe:	4b14      	ldr	r3, [pc, #80]	@ (8005650 <prvHeapInit+0xb4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005606:	4b12      	ldr	r3, [pc, #72]	@ (8005650 <prvHeapInit+0xb4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	1ad2      	subs	r2, r2, r3
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <prvHeapInit+0xb4>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	4a0a      	ldr	r2, [pc, #40]	@ (8005654 <prvHeapInit+0xb8>)
 800562a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4a09      	ldr	r2, [pc, #36]	@ (8005658 <prvHeapInit+0xbc>)
 8005632:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005634:	4b09      	ldr	r3, [pc, #36]	@ (800565c <prvHeapInit+0xc0>)
 8005636:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800563a:	601a      	str	r2, [r3, #0]
}
 800563c:	bf00      	nop
 800563e:	3714      	adds	r7, #20
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr
 8005648:	20000600 	.word	0x20000600
 800564c:	20004200 	.word	0x20004200
 8005650:	20004208 	.word	0x20004208
 8005654:	20004210 	.word	0x20004210
 8005658:	2000420c 	.word	0x2000420c
 800565c:	2000421c 	.word	0x2000421c

08005660 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005668:	4b28      	ldr	r3, [pc, #160]	@ (800570c <prvInsertBlockIntoFreeList+0xac>)
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	e002      	b.n	8005674 <prvInsertBlockIntoFreeList+0x14>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	429a      	cmp	r2, r3
 800567c:	d8f7      	bhi.n	800566e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	4413      	add	r3, r2
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	429a      	cmp	r2, r3
 800568e:	d108      	bne.n	80056a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	441a      	add	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	68ba      	ldr	r2, [r7, #8]
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d118      	bne.n	80056e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b15      	ldr	r3, [pc, #84]	@ (8005710 <prvInsertBlockIntoFreeList+0xb0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d00d      	beq.n	80056de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	441a      	add	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	e008      	b.n	80056f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056de:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <prvInsertBlockIntoFreeList+0xb0>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e003      	b.n	80056f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d002      	beq.n	80056fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056fe:	bf00      	nop
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	20004200 	.word	0x20004200
 8005710:	20004208 	.word	0x20004208

08005714 <feof>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4b10      	ldr	r3, [pc, #64]	@ (8005758 <feof+0x44>)
 8005718:	4604      	mov	r4, r0
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	b118      	cbz	r0, 8005726 <feof+0x12>
 800571e:	6a03      	ldr	r3, [r0, #32]
 8005720:	b90b      	cbnz	r3, 8005726 <feof+0x12>
 8005722:	f000 f917 	bl	8005954 <__sinit>
 8005726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005728:	07d8      	lsls	r0, r3, #31
 800572a:	d405      	bmi.n	8005738 <feof+0x24>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	0599      	lsls	r1, r3, #22
 8005730:	d402      	bmi.n	8005738 <feof+0x24>
 8005732:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005734:	f000 fc91 	bl	800605a <__retarget_lock_acquire_recursive>
 8005738:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800573a:	89a5      	ldrh	r5, [r4, #12]
 800573c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005740:	07d2      	lsls	r2, r2, #31
 8005742:	f3c5 1540 	ubfx	r5, r5, #5, #1
 8005746:	d404      	bmi.n	8005752 <feof+0x3e>
 8005748:	059b      	lsls	r3, r3, #22
 800574a:	d402      	bmi.n	8005752 <feof+0x3e>
 800574c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800574e:	f000 fc85 	bl	800605c <__retarget_lock_release_recursive>
 8005752:	4628      	mov	r0, r5
 8005754:	bd38      	pop	{r3, r4, r5, pc}
 8005756:	bf00      	nop
 8005758:	20000054 	.word	0x20000054

0800575c <_fgets_r>:
 800575c:	2a01      	cmp	r2, #1
 800575e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005762:	4681      	mov	r9, r0
 8005764:	460e      	mov	r6, r1
 8005766:	4615      	mov	r5, r2
 8005768:	461c      	mov	r4, r3
 800576a:	dd21      	ble.n	80057b0 <_fgets_r+0x54>
 800576c:	b118      	cbz	r0, 8005776 <_fgets_r+0x1a>
 800576e:	6a03      	ldr	r3, [r0, #32]
 8005770:	b90b      	cbnz	r3, 8005776 <_fgets_r+0x1a>
 8005772:	f000 f8ef 	bl	8005954 <__sinit>
 8005776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005778:	07db      	lsls	r3, r3, #31
 800577a:	d405      	bmi.n	8005788 <_fgets_r+0x2c>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	059f      	lsls	r7, r3, #22
 8005780:	d402      	bmi.n	8005788 <_fgets_r+0x2c>
 8005782:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005784:	f000 fc69 	bl	800605a <__retarget_lock_acquire_recursive>
 8005788:	3d01      	subs	r5, #1
 800578a:	4637      	mov	r7, r6
 800578c:	6863      	ldr	r3, [r4, #4]
 800578e:	b99b      	cbnz	r3, 80057b8 <_fgets_r+0x5c>
 8005790:	4621      	mov	r1, r4
 8005792:	4648      	mov	r0, r9
 8005794:	f000 f992 	bl	8005abc <__srefill_r>
 8005798:	b168      	cbz	r0, 80057b6 <_fgets_r+0x5a>
 800579a:	42b7      	cmp	r7, r6
 800579c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800579e:	d139      	bne.n	8005814 <_fgets_r+0xb8>
 80057a0:	07d8      	lsls	r0, r3, #31
 80057a2:	d405      	bmi.n	80057b0 <_fgets_r+0x54>
 80057a4:	89a3      	ldrh	r3, [r4, #12]
 80057a6:	0599      	lsls	r1, r3, #22
 80057a8:	d402      	bmi.n	80057b0 <_fgets_r+0x54>
 80057aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057ac:	f000 fc56 	bl	800605c <__retarget_lock_release_recursive>
 80057b0:	2000      	movs	r0, #0
 80057b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	f8d4 a000 	ldr.w	sl, [r4]
 80057bc:	42ab      	cmp	r3, r5
 80057be:	bf28      	it	cs
 80057c0:	462b      	movcs	r3, r5
 80057c2:	461a      	mov	r2, r3
 80057c4:	210a      	movs	r1, #10
 80057c6:	4650      	mov	r0, sl
 80057c8:	4698      	mov	r8, r3
 80057ca:	f7fa fd09 	bl	80001e0 <memchr>
 80057ce:	6863      	ldr	r3, [r4, #4]
 80057d0:	b188      	cbz	r0, 80057f6 <_fgets_r+0x9a>
 80057d2:	3001      	adds	r0, #1
 80057d4:	eba0 050a 	sub.w	r5, r0, sl
 80057d8:	1b5b      	subs	r3, r3, r5
 80057da:	e9c4 0300 	strd	r0, r3, [r4]
 80057de:	462a      	mov	r2, r5
 80057e0:	4651      	mov	r1, sl
 80057e2:	4638      	mov	r0, r7
 80057e4:	f000 fc3b 	bl	800605e <memcpy>
 80057e8:	2300      	movs	r3, #0
 80057ea:	557b      	strb	r3, [r7, r5]
 80057ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057ee:	07da      	lsls	r2, r3, #31
 80057f0:	d513      	bpl.n	800581a <_fgets_r+0xbe>
 80057f2:	4630      	mov	r0, r6
 80057f4:	e7dd      	b.n	80057b2 <_fgets_r+0x56>
 80057f6:	eba3 0308 	sub.w	r3, r3, r8
 80057fa:	6063      	str	r3, [r4, #4]
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	4443      	add	r3, r8
 8005800:	4638      	mov	r0, r7
 8005802:	6023      	str	r3, [r4, #0]
 8005804:	4642      	mov	r2, r8
 8005806:	4651      	mov	r1, sl
 8005808:	f000 fc29 	bl	800605e <memcpy>
 800580c:	ebb5 0508 	subs.w	r5, r5, r8
 8005810:	4447      	add	r7, r8
 8005812:	d1bb      	bne.n	800578c <_fgets_r+0x30>
 8005814:	2300      	movs	r3, #0
 8005816:	703b      	strb	r3, [r7, #0]
 8005818:	e7e8      	b.n	80057ec <_fgets_r+0x90>
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	059b      	lsls	r3, r3, #22
 800581e:	d4e8      	bmi.n	80057f2 <_fgets_r+0x96>
 8005820:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005822:	f000 fc1b 	bl	800605c <__retarget_lock_release_recursive>
 8005826:	e7e4      	b.n	80057f2 <_fgets_r+0x96>

08005828 <fgets>:
 8005828:	4613      	mov	r3, r2
 800582a:	460a      	mov	r2, r1
 800582c:	4601      	mov	r1, r0
 800582e:	4802      	ldr	r0, [pc, #8]	@ (8005838 <fgets+0x10>)
 8005830:	6800      	ldr	r0, [r0, #0]
 8005832:	f7ff bf93 	b.w	800575c <_fgets_r>
 8005836:	bf00      	nop
 8005838:	20000054 	.word	0x20000054

0800583c <std>:
 800583c:	2300      	movs	r3, #0
 800583e:	b510      	push	{r4, lr}
 8005840:	4604      	mov	r4, r0
 8005842:	e9c0 3300 	strd	r3, r3, [r0]
 8005846:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800584a:	6083      	str	r3, [r0, #8]
 800584c:	8181      	strh	r1, [r0, #12]
 800584e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005850:	81c2      	strh	r2, [r0, #14]
 8005852:	6183      	str	r3, [r0, #24]
 8005854:	4619      	mov	r1, r3
 8005856:	2208      	movs	r2, #8
 8005858:	305c      	adds	r0, #92	@ 0x5c
 800585a:	f000 fb2f 	bl	8005ebc <memset>
 800585e:	4b0d      	ldr	r3, [pc, #52]	@ (8005894 <std+0x58>)
 8005860:	6263      	str	r3, [r4, #36]	@ 0x24
 8005862:	4b0d      	ldr	r3, [pc, #52]	@ (8005898 <std+0x5c>)
 8005864:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005866:	4b0d      	ldr	r3, [pc, #52]	@ (800589c <std+0x60>)
 8005868:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800586a:	4b0d      	ldr	r3, [pc, #52]	@ (80058a0 <std+0x64>)
 800586c:	6323      	str	r3, [r4, #48]	@ 0x30
 800586e:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <std+0x68>)
 8005870:	6224      	str	r4, [r4, #32]
 8005872:	429c      	cmp	r4, r3
 8005874:	d006      	beq.n	8005884 <std+0x48>
 8005876:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800587a:	4294      	cmp	r4, r2
 800587c:	d002      	beq.n	8005884 <std+0x48>
 800587e:	33d0      	adds	r3, #208	@ 0xd0
 8005880:	429c      	cmp	r4, r3
 8005882:	d105      	bne.n	8005890 <std+0x54>
 8005884:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800588c:	f000 bbe4 	b.w	8006058 <__retarget_lock_init_recursive>
 8005890:	bd10      	pop	{r4, pc}
 8005892:	bf00      	nop
 8005894:	08005d0d 	.word	0x08005d0d
 8005898:	08005d2f 	.word	0x08005d2f
 800589c:	08005d67 	.word	0x08005d67
 80058a0:	08005d8b 	.word	0x08005d8b
 80058a4:	20004220 	.word	0x20004220

080058a8 <stdio_exit_handler>:
 80058a8:	4a02      	ldr	r2, [pc, #8]	@ (80058b4 <stdio_exit_handler+0xc>)
 80058aa:	4903      	ldr	r1, [pc, #12]	@ (80058b8 <stdio_exit_handler+0x10>)
 80058ac:	4803      	ldr	r0, [pc, #12]	@ (80058bc <stdio_exit_handler+0x14>)
 80058ae:	f000 b869 	b.w	8005984 <_fwalk_sglue>
 80058b2:	bf00      	nop
 80058b4:	20000048 	.word	0x20000048
 80058b8:	08006925 	.word	0x08006925
 80058bc:	20000058 	.word	0x20000058

080058c0 <cleanup_stdio>:
 80058c0:	6841      	ldr	r1, [r0, #4]
 80058c2:	4b0c      	ldr	r3, [pc, #48]	@ (80058f4 <cleanup_stdio+0x34>)
 80058c4:	4299      	cmp	r1, r3
 80058c6:	b510      	push	{r4, lr}
 80058c8:	4604      	mov	r4, r0
 80058ca:	d001      	beq.n	80058d0 <cleanup_stdio+0x10>
 80058cc:	f001 f82a 	bl	8006924 <_fflush_r>
 80058d0:	68a1      	ldr	r1, [r4, #8]
 80058d2:	4b09      	ldr	r3, [pc, #36]	@ (80058f8 <cleanup_stdio+0x38>)
 80058d4:	4299      	cmp	r1, r3
 80058d6:	d002      	beq.n	80058de <cleanup_stdio+0x1e>
 80058d8:	4620      	mov	r0, r4
 80058da:	f001 f823 	bl	8006924 <_fflush_r>
 80058de:	68e1      	ldr	r1, [r4, #12]
 80058e0:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <cleanup_stdio+0x3c>)
 80058e2:	4299      	cmp	r1, r3
 80058e4:	d004      	beq.n	80058f0 <cleanup_stdio+0x30>
 80058e6:	4620      	mov	r0, r4
 80058e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ec:	f001 b81a 	b.w	8006924 <_fflush_r>
 80058f0:	bd10      	pop	{r4, pc}
 80058f2:	bf00      	nop
 80058f4:	20004220 	.word	0x20004220
 80058f8:	20004288 	.word	0x20004288
 80058fc:	200042f0 	.word	0x200042f0

08005900 <global_stdio_init.part.0>:
 8005900:	b510      	push	{r4, lr}
 8005902:	4b0b      	ldr	r3, [pc, #44]	@ (8005930 <global_stdio_init.part.0+0x30>)
 8005904:	4c0b      	ldr	r4, [pc, #44]	@ (8005934 <global_stdio_init.part.0+0x34>)
 8005906:	4a0c      	ldr	r2, [pc, #48]	@ (8005938 <global_stdio_init.part.0+0x38>)
 8005908:	601a      	str	r2, [r3, #0]
 800590a:	4620      	mov	r0, r4
 800590c:	2200      	movs	r2, #0
 800590e:	2104      	movs	r1, #4
 8005910:	f7ff ff94 	bl	800583c <std>
 8005914:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005918:	2201      	movs	r2, #1
 800591a:	2109      	movs	r1, #9
 800591c:	f7ff ff8e 	bl	800583c <std>
 8005920:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005924:	2202      	movs	r2, #2
 8005926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800592a:	2112      	movs	r1, #18
 800592c:	f7ff bf86 	b.w	800583c <std>
 8005930:	20004358 	.word	0x20004358
 8005934:	20004220 	.word	0x20004220
 8005938:	080058a9 	.word	0x080058a9

0800593c <__sfp_lock_acquire>:
 800593c:	4801      	ldr	r0, [pc, #4]	@ (8005944 <__sfp_lock_acquire+0x8>)
 800593e:	f000 bb8c 	b.w	800605a <__retarget_lock_acquire_recursive>
 8005942:	bf00      	nop
 8005944:	20004361 	.word	0x20004361

08005948 <__sfp_lock_release>:
 8005948:	4801      	ldr	r0, [pc, #4]	@ (8005950 <__sfp_lock_release+0x8>)
 800594a:	f000 bb87 	b.w	800605c <__retarget_lock_release_recursive>
 800594e:	bf00      	nop
 8005950:	20004361 	.word	0x20004361

08005954 <__sinit>:
 8005954:	b510      	push	{r4, lr}
 8005956:	4604      	mov	r4, r0
 8005958:	f7ff fff0 	bl	800593c <__sfp_lock_acquire>
 800595c:	6a23      	ldr	r3, [r4, #32]
 800595e:	b11b      	cbz	r3, 8005968 <__sinit+0x14>
 8005960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005964:	f7ff bff0 	b.w	8005948 <__sfp_lock_release>
 8005968:	4b04      	ldr	r3, [pc, #16]	@ (800597c <__sinit+0x28>)
 800596a:	6223      	str	r3, [r4, #32]
 800596c:	4b04      	ldr	r3, [pc, #16]	@ (8005980 <__sinit+0x2c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f5      	bne.n	8005960 <__sinit+0xc>
 8005974:	f7ff ffc4 	bl	8005900 <global_stdio_init.part.0>
 8005978:	e7f2      	b.n	8005960 <__sinit+0xc>
 800597a:	bf00      	nop
 800597c:	080058c1 	.word	0x080058c1
 8005980:	20004358 	.word	0x20004358

08005984 <_fwalk_sglue>:
 8005984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005988:	4607      	mov	r7, r0
 800598a:	4688      	mov	r8, r1
 800598c:	4614      	mov	r4, r2
 800598e:	2600      	movs	r6, #0
 8005990:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005994:	f1b9 0901 	subs.w	r9, r9, #1
 8005998:	d505      	bpl.n	80059a6 <_fwalk_sglue+0x22>
 800599a:	6824      	ldr	r4, [r4, #0]
 800599c:	2c00      	cmp	r4, #0
 800599e:	d1f7      	bne.n	8005990 <_fwalk_sglue+0xc>
 80059a0:	4630      	mov	r0, r6
 80059a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a6:	89ab      	ldrh	r3, [r5, #12]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d907      	bls.n	80059bc <_fwalk_sglue+0x38>
 80059ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059b0:	3301      	adds	r3, #1
 80059b2:	d003      	beq.n	80059bc <_fwalk_sglue+0x38>
 80059b4:	4629      	mov	r1, r5
 80059b6:	4638      	mov	r0, r7
 80059b8:	47c0      	blx	r8
 80059ba:	4306      	orrs	r6, r0
 80059bc:	3568      	adds	r5, #104	@ 0x68
 80059be:	e7e9      	b.n	8005994 <_fwalk_sglue+0x10>

080059c0 <iprintf>:
 80059c0:	b40f      	push	{r0, r1, r2, r3}
 80059c2:	b507      	push	{r0, r1, r2, lr}
 80059c4:	4906      	ldr	r1, [pc, #24]	@ (80059e0 <iprintf+0x20>)
 80059c6:	ab04      	add	r3, sp, #16
 80059c8:	6808      	ldr	r0, [r1, #0]
 80059ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ce:	6881      	ldr	r1, [r0, #8]
 80059d0:	9301      	str	r3, [sp, #4]
 80059d2:	f000 fc7d 	bl	80062d0 <_vfiprintf_r>
 80059d6:	b003      	add	sp, #12
 80059d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059dc:	b004      	add	sp, #16
 80059de:	4770      	bx	lr
 80059e0:	20000054 	.word	0x20000054

080059e4 <_puts_r>:
 80059e4:	6a03      	ldr	r3, [r0, #32]
 80059e6:	b570      	push	{r4, r5, r6, lr}
 80059e8:	6884      	ldr	r4, [r0, #8]
 80059ea:	4605      	mov	r5, r0
 80059ec:	460e      	mov	r6, r1
 80059ee:	b90b      	cbnz	r3, 80059f4 <_puts_r+0x10>
 80059f0:	f7ff ffb0 	bl	8005954 <__sinit>
 80059f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059f6:	07db      	lsls	r3, r3, #31
 80059f8:	d405      	bmi.n	8005a06 <_puts_r+0x22>
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	0598      	lsls	r0, r3, #22
 80059fe:	d402      	bmi.n	8005a06 <_puts_r+0x22>
 8005a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a02:	f000 fb2a 	bl	800605a <__retarget_lock_acquire_recursive>
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	0719      	lsls	r1, r3, #28
 8005a0a:	d502      	bpl.n	8005a12 <_puts_r+0x2e>
 8005a0c:	6923      	ldr	r3, [r4, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d135      	bne.n	8005a7e <_puts_r+0x9a>
 8005a12:	4621      	mov	r1, r4
 8005a14:	4628      	mov	r0, r5
 8005a16:	f000 f9fb 	bl	8005e10 <__swsetup_r>
 8005a1a:	b380      	cbz	r0, 8005a7e <_puts_r+0x9a>
 8005a1c:	f04f 35ff 	mov.w	r5, #4294967295
 8005a20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a22:	07da      	lsls	r2, r3, #31
 8005a24:	d405      	bmi.n	8005a32 <_puts_r+0x4e>
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	059b      	lsls	r3, r3, #22
 8005a2a:	d402      	bmi.n	8005a32 <_puts_r+0x4e>
 8005a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a2e:	f000 fb15 	bl	800605c <__retarget_lock_release_recursive>
 8005a32:	4628      	mov	r0, r5
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	da04      	bge.n	8005a44 <_puts_r+0x60>
 8005a3a:	69a2      	ldr	r2, [r4, #24]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	dc17      	bgt.n	8005a70 <_puts_r+0x8c>
 8005a40:	290a      	cmp	r1, #10
 8005a42:	d015      	beq.n	8005a70 <_puts_r+0x8c>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	6022      	str	r2, [r4, #0]
 8005a4a:	7019      	strb	r1, [r3, #0]
 8005a4c:	68a3      	ldr	r3, [r4, #8]
 8005a4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a52:	3b01      	subs	r3, #1
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	2900      	cmp	r1, #0
 8005a58:	d1ed      	bne.n	8005a36 <_puts_r+0x52>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	da11      	bge.n	8005a82 <_puts_r+0x9e>
 8005a5e:	4622      	mov	r2, r4
 8005a60:	210a      	movs	r1, #10
 8005a62:	4628      	mov	r0, r5
 8005a64:	f000 f995 	bl	8005d92 <__swbuf_r>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	d0d7      	beq.n	8005a1c <_puts_r+0x38>
 8005a6c:	250a      	movs	r5, #10
 8005a6e:	e7d7      	b.n	8005a20 <_puts_r+0x3c>
 8005a70:	4622      	mov	r2, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 f98d 	bl	8005d92 <__swbuf_r>
 8005a78:	3001      	adds	r0, #1
 8005a7a:	d1e7      	bne.n	8005a4c <_puts_r+0x68>
 8005a7c:	e7ce      	b.n	8005a1c <_puts_r+0x38>
 8005a7e:	3e01      	subs	r6, #1
 8005a80:	e7e4      	b.n	8005a4c <_puts_r+0x68>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	6022      	str	r2, [r4, #0]
 8005a88:	220a      	movs	r2, #10
 8005a8a:	701a      	strb	r2, [r3, #0]
 8005a8c:	e7ee      	b.n	8005a6c <_puts_r+0x88>
	...

08005a90 <puts>:
 8005a90:	4b02      	ldr	r3, [pc, #8]	@ (8005a9c <puts+0xc>)
 8005a92:	4601      	mov	r1, r0
 8005a94:	6818      	ldr	r0, [r3, #0]
 8005a96:	f7ff bfa5 	b.w	80059e4 <_puts_r>
 8005a9a:	bf00      	nop
 8005a9c:	20000054 	.word	0x20000054

08005aa0 <lflush>:
 8005aa0:	898b      	ldrh	r3, [r1, #12]
 8005aa2:	f003 0309 	and.w	r3, r3, #9
 8005aa6:	2b09      	cmp	r3, #9
 8005aa8:	d103      	bne.n	8005ab2 <lflush+0x12>
 8005aaa:	4b03      	ldr	r3, [pc, #12]	@ (8005ab8 <lflush+0x18>)
 8005aac:	6818      	ldr	r0, [r3, #0]
 8005aae:	f000 bf39 	b.w	8006924 <_fflush_r>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000054 	.word	0x20000054

08005abc <__srefill_r>:
 8005abc:	b570      	push	{r4, r5, r6, lr}
 8005abe:	460c      	mov	r4, r1
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	b118      	cbz	r0, 8005acc <__srefill_r+0x10>
 8005ac4:	6a03      	ldr	r3, [r0, #32]
 8005ac6:	b90b      	cbnz	r3, 8005acc <__srefill_r+0x10>
 8005ac8:	f7ff ff44 	bl	8005954 <__sinit>
 8005acc:	2300      	movs	r3, #0
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad4:	069e      	lsls	r6, r3, #26
 8005ad6:	d408      	bmi.n	8005aea <__srefill_r+0x2e>
 8005ad8:	0758      	lsls	r0, r3, #29
 8005ada:	d445      	bmi.n	8005b68 <__srefill_r+0xac>
 8005adc:	06d9      	lsls	r1, r3, #27
 8005ade:	d407      	bmi.n	8005af0 <__srefill_r+0x34>
 8005ae0:	2209      	movs	r2, #9
 8005ae2:	602a      	str	r2, [r5, #0]
 8005ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ae8:	81a3      	strh	r3, [r4, #12]
 8005aea:	f04f 30ff 	mov.w	r0, #4294967295
 8005aee:	bd70      	pop	{r4, r5, r6, pc}
 8005af0:	071a      	lsls	r2, r3, #28
 8005af2:	d50b      	bpl.n	8005b0c <__srefill_r+0x50>
 8005af4:	4621      	mov	r1, r4
 8005af6:	4628      	mov	r0, r5
 8005af8:	f000 ff14 	bl	8006924 <_fflush_r>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d1f4      	bne.n	8005aea <__srefill_r+0x2e>
 8005b00:	89a3      	ldrh	r3, [r4, #12]
 8005b02:	60a0      	str	r0, [r4, #8]
 8005b04:	f023 0308 	bic.w	r3, r3, #8
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	61a0      	str	r0, [r4, #24]
 8005b0c:	89a3      	ldrh	r3, [r4, #12]
 8005b0e:	f043 0304 	orr.w	r3, r3, #4
 8005b12:	81a3      	strh	r3, [r4, #12]
 8005b14:	6923      	ldr	r3, [r4, #16]
 8005b16:	b91b      	cbnz	r3, 8005b20 <__srefill_r+0x64>
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f000 ff50 	bl	80069c0 <__smakebuf_r>
 8005b20:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8005b24:	07b3      	lsls	r3, r6, #30
 8005b26:	d00f      	beq.n	8005b48 <__srefill_r+0x8c>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005b98 <__srefill_r+0xdc>)
 8005b2c:	491b      	ldr	r1, [pc, #108]	@ (8005b9c <__srefill_r+0xe0>)
 8005b2e:	481c      	ldr	r0, [pc, #112]	@ (8005ba0 <__srefill_r+0xe4>)
 8005b30:	81a3      	strh	r3, [r4, #12]
 8005b32:	f7ff ff27 	bl	8005984 <_fwalk_sglue>
 8005b36:	81a6      	strh	r6, [r4, #12]
 8005b38:	f006 0609 	and.w	r6, r6, #9
 8005b3c:	2e09      	cmp	r6, #9
 8005b3e:	d103      	bne.n	8005b48 <__srefill_r+0x8c>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4628      	mov	r0, r5
 8005b44:	f000 fe6a 	bl	800681c <__sflush_r>
 8005b48:	6922      	ldr	r2, [r4, #16]
 8005b4a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005b4c:	6963      	ldr	r3, [r4, #20]
 8005b4e:	6a21      	ldr	r1, [r4, #32]
 8005b50:	6022      	str	r2, [r4, #0]
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b0      	blx	r6
 8005b56:	2800      	cmp	r0, #0
 8005b58:	6060      	str	r0, [r4, #4]
 8005b5a:	dc17      	bgt.n	8005b8c <__srefill_r+0xd0>
 8005b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b60:	d116      	bne.n	8005b90 <__srefill_r+0xd4>
 8005b62:	f043 0320 	orr.w	r3, r3, #32
 8005b66:	e7bf      	b.n	8005ae8 <__srefill_r+0x2c>
 8005b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b6a:	2900      	cmp	r1, #0
 8005b6c:	d0d2      	beq.n	8005b14 <__srefill_r+0x58>
 8005b6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b72:	4299      	cmp	r1, r3
 8005b74:	d002      	beq.n	8005b7c <__srefill_r+0xc0>
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 fa80 	bl	800607c <_free_r>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b82:	6063      	str	r3, [r4, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0c5      	beq.n	8005b14 <__srefill_r+0x58>
 8005b88:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005b8a:	6023      	str	r3, [r4, #0]
 8005b8c:	2000      	movs	r0, #0
 8005b8e:	e7ae      	b.n	8005aee <__srefill_r+0x32>
 8005b90:	2200      	movs	r2, #0
 8005b92:	6062      	str	r2, [r4, #4]
 8005b94:	e7a6      	b.n	8005ae4 <__srefill_r+0x28>
 8005b96:	bf00      	nop
 8005b98:	20000048 	.word	0x20000048
 8005b9c:	08005aa1 	.word	0x08005aa1
 8005ba0:	20000058 	.word	0x20000058

08005ba4 <setvbuf>:
 8005ba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ba8:	461d      	mov	r5, r3
 8005baa:	4b57      	ldr	r3, [pc, #348]	@ (8005d08 <setvbuf+0x164>)
 8005bac:	681f      	ldr	r7, [r3, #0]
 8005bae:	4604      	mov	r4, r0
 8005bb0:	460e      	mov	r6, r1
 8005bb2:	4690      	mov	r8, r2
 8005bb4:	b127      	cbz	r7, 8005bc0 <setvbuf+0x1c>
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	b913      	cbnz	r3, 8005bc0 <setvbuf+0x1c>
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f7ff feca 	bl	8005954 <__sinit>
 8005bc0:	f1b8 0f02 	cmp.w	r8, #2
 8005bc4:	d006      	beq.n	8005bd4 <setvbuf+0x30>
 8005bc6:	f1b8 0f01 	cmp.w	r8, #1
 8005bca:	f200 809a 	bhi.w	8005d02 <setvbuf+0x15e>
 8005bce:	2d00      	cmp	r5, #0
 8005bd0:	f2c0 8097 	blt.w	8005d02 <setvbuf+0x15e>
 8005bd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bd6:	07d9      	lsls	r1, r3, #31
 8005bd8:	d405      	bmi.n	8005be6 <setvbuf+0x42>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	059a      	lsls	r2, r3, #22
 8005bde:	d402      	bmi.n	8005be6 <setvbuf+0x42>
 8005be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005be2:	f000 fa3a 	bl	800605a <__retarget_lock_acquire_recursive>
 8005be6:	4621      	mov	r1, r4
 8005be8:	4638      	mov	r0, r7
 8005bea:	f000 fe9b 	bl	8006924 <_fflush_r>
 8005bee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bf0:	b141      	cbz	r1, 8005c04 <setvbuf+0x60>
 8005bf2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bf6:	4299      	cmp	r1, r3
 8005bf8:	d002      	beq.n	8005c00 <setvbuf+0x5c>
 8005bfa:	4638      	mov	r0, r7
 8005bfc:	f000 fa3e 	bl	800607c <_free_r>
 8005c00:	2300      	movs	r3, #0
 8005c02:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c04:	2300      	movs	r3, #0
 8005c06:	61a3      	str	r3, [r4, #24]
 8005c08:	6063      	str	r3, [r4, #4]
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	061b      	lsls	r3, r3, #24
 8005c0e:	d503      	bpl.n	8005c18 <setvbuf+0x74>
 8005c10:	6921      	ldr	r1, [r4, #16]
 8005c12:	4638      	mov	r0, r7
 8005c14:	f000 fa32 	bl	800607c <_free_r>
 8005c18:	89a3      	ldrh	r3, [r4, #12]
 8005c1a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005c1e:	f023 0303 	bic.w	r3, r3, #3
 8005c22:	f1b8 0f02 	cmp.w	r8, #2
 8005c26:	81a3      	strh	r3, [r4, #12]
 8005c28:	d061      	beq.n	8005cee <setvbuf+0x14a>
 8005c2a:	ab01      	add	r3, sp, #4
 8005c2c:	466a      	mov	r2, sp
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4638      	mov	r0, r7
 8005c32:	f000 fe9f 	bl	8006974 <__swhatbuf_r>
 8005c36:	89a3      	ldrh	r3, [r4, #12]
 8005c38:	4318      	orrs	r0, r3
 8005c3a:	81a0      	strh	r0, [r4, #12]
 8005c3c:	bb2d      	cbnz	r5, 8005c8a <setvbuf+0xe6>
 8005c3e:	9d00      	ldr	r5, [sp, #0]
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 fa65 	bl	8006110 <malloc>
 8005c46:	4606      	mov	r6, r0
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d152      	bne.n	8005cf2 <setvbuf+0x14e>
 8005c4c:	f8dd 9000 	ldr.w	r9, [sp]
 8005c50:	45a9      	cmp	r9, r5
 8005c52:	d140      	bne.n	8005cd6 <setvbuf+0x132>
 8005c54:	f04f 35ff 	mov.w	r5, #4294967295
 8005c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5c:	f043 0202 	orr.w	r2, r3, #2
 8005c60:	81a2      	strh	r2, [r4, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	60a2      	str	r2, [r4, #8]
 8005c66:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8005c6a:	6022      	str	r2, [r4, #0]
 8005c6c:	6122      	str	r2, [r4, #16]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	6162      	str	r2, [r4, #20]
 8005c72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c74:	07d6      	lsls	r6, r2, #31
 8005c76:	d404      	bmi.n	8005c82 <setvbuf+0xde>
 8005c78:	0598      	lsls	r0, r3, #22
 8005c7a:	d402      	bmi.n	8005c82 <setvbuf+0xde>
 8005c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c7e:	f000 f9ed 	bl	800605c <__retarget_lock_release_recursive>
 8005c82:	4628      	mov	r0, r5
 8005c84:	b003      	add	sp, #12
 8005c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c8a:	2e00      	cmp	r6, #0
 8005c8c:	d0d8      	beq.n	8005c40 <setvbuf+0x9c>
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	b913      	cbnz	r3, 8005c98 <setvbuf+0xf4>
 8005c92:	4638      	mov	r0, r7
 8005c94:	f7ff fe5e 	bl	8005954 <__sinit>
 8005c98:	f1b8 0f01 	cmp.w	r8, #1
 8005c9c:	bf08      	it	eq
 8005c9e:	89a3      	ldrheq	r3, [r4, #12]
 8005ca0:	6026      	str	r6, [r4, #0]
 8005ca2:	bf04      	itt	eq
 8005ca4:	f043 0301 	orreq.w	r3, r3, #1
 8005ca8:	81a3      	strheq	r3, [r4, #12]
 8005caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cae:	f013 0208 	ands.w	r2, r3, #8
 8005cb2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005cb6:	d01e      	beq.n	8005cf6 <setvbuf+0x152>
 8005cb8:	07d9      	lsls	r1, r3, #31
 8005cba:	bf41      	itttt	mi
 8005cbc:	2200      	movmi	r2, #0
 8005cbe:	426d      	negmi	r5, r5
 8005cc0:	60a2      	strmi	r2, [r4, #8]
 8005cc2:	61a5      	strmi	r5, [r4, #24]
 8005cc4:	bf58      	it	pl
 8005cc6:	60a5      	strpl	r5, [r4, #8]
 8005cc8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005cca:	07d2      	lsls	r2, r2, #31
 8005ccc:	d401      	bmi.n	8005cd2 <setvbuf+0x12e>
 8005cce:	059b      	lsls	r3, r3, #22
 8005cd0:	d513      	bpl.n	8005cfa <setvbuf+0x156>
 8005cd2:	2500      	movs	r5, #0
 8005cd4:	e7d5      	b.n	8005c82 <setvbuf+0xde>
 8005cd6:	4648      	mov	r0, r9
 8005cd8:	f000 fa1a 	bl	8006110 <malloc>
 8005cdc:	4606      	mov	r6, r0
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d0b8      	beq.n	8005c54 <setvbuf+0xb0>
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	464d      	mov	r5, r9
 8005cec:	e7cf      	b.n	8005c8e <setvbuf+0xea>
 8005cee:	2500      	movs	r5, #0
 8005cf0:	e7b2      	b.n	8005c58 <setvbuf+0xb4>
 8005cf2:	46a9      	mov	r9, r5
 8005cf4:	e7f5      	b.n	8005ce2 <setvbuf+0x13e>
 8005cf6:	60a2      	str	r2, [r4, #8]
 8005cf8:	e7e6      	b.n	8005cc8 <setvbuf+0x124>
 8005cfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005cfc:	f000 f9ae 	bl	800605c <__retarget_lock_release_recursive>
 8005d00:	e7e7      	b.n	8005cd2 <setvbuf+0x12e>
 8005d02:	f04f 35ff 	mov.w	r5, #4294967295
 8005d06:	e7bc      	b.n	8005c82 <setvbuf+0xde>
 8005d08:	20000054 	.word	0x20000054

08005d0c <__sread>:
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	460c      	mov	r4, r1
 8005d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d14:	f000 f952 	bl	8005fbc <_read_r>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	bfab      	itete	ge
 8005d1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005d1e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d20:	181b      	addge	r3, r3, r0
 8005d22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005d26:	bfac      	ite	ge
 8005d28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005d2a:	81a3      	strhlt	r3, [r4, #12]
 8005d2c:	bd10      	pop	{r4, pc}

08005d2e <__swrite>:
 8005d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d32:	461f      	mov	r7, r3
 8005d34:	898b      	ldrh	r3, [r1, #12]
 8005d36:	05db      	lsls	r3, r3, #23
 8005d38:	4605      	mov	r5, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	d505      	bpl.n	8005d4c <__swrite+0x1e>
 8005d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d44:	2302      	movs	r3, #2
 8005d46:	2200      	movs	r2, #0
 8005d48:	f000 f926 	bl	8005f98 <_lseek_r>
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	4632      	mov	r2, r6
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d62:	f000 b93d 	b.w	8005fe0 <_write_r>

08005d66 <__sseek>:
 8005d66:	b510      	push	{r4, lr}
 8005d68:	460c      	mov	r4, r1
 8005d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d6e:	f000 f913 	bl	8005f98 <_lseek_r>
 8005d72:	1c43      	adds	r3, r0, #1
 8005d74:	89a3      	ldrh	r3, [r4, #12]
 8005d76:	bf15      	itete	ne
 8005d78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d82:	81a3      	strheq	r3, [r4, #12]
 8005d84:	bf18      	it	ne
 8005d86:	81a3      	strhne	r3, [r4, #12]
 8005d88:	bd10      	pop	{r4, pc}

08005d8a <__sclose>:
 8005d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8e:	f000 b89d 	b.w	8005ecc <_close_r>

08005d92 <__swbuf_r>:
 8005d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d94:	460e      	mov	r6, r1
 8005d96:	4614      	mov	r4, r2
 8005d98:	4605      	mov	r5, r0
 8005d9a:	b118      	cbz	r0, 8005da4 <__swbuf_r+0x12>
 8005d9c:	6a03      	ldr	r3, [r0, #32]
 8005d9e:	b90b      	cbnz	r3, 8005da4 <__swbuf_r+0x12>
 8005da0:	f7ff fdd8 	bl	8005954 <__sinit>
 8005da4:	69a3      	ldr	r3, [r4, #24]
 8005da6:	60a3      	str	r3, [r4, #8]
 8005da8:	89a3      	ldrh	r3, [r4, #12]
 8005daa:	071a      	lsls	r2, r3, #28
 8005dac:	d501      	bpl.n	8005db2 <__swbuf_r+0x20>
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	b943      	cbnz	r3, 8005dc4 <__swbuf_r+0x32>
 8005db2:	4621      	mov	r1, r4
 8005db4:	4628      	mov	r0, r5
 8005db6:	f000 f82b 	bl	8005e10 <__swsetup_r>
 8005dba:	b118      	cbz	r0, 8005dc4 <__swbuf_r+0x32>
 8005dbc:	f04f 37ff 	mov.w	r7, #4294967295
 8005dc0:	4638      	mov	r0, r7
 8005dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc4:	6823      	ldr	r3, [r4, #0]
 8005dc6:	6922      	ldr	r2, [r4, #16]
 8005dc8:	1a98      	subs	r0, r3, r2
 8005dca:	6963      	ldr	r3, [r4, #20]
 8005dcc:	b2f6      	uxtb	r6, r6
 8005dce:	4283      	cmp	r3, r0
 8005dd0:	4637      	mov	r7, r6
 8005dd2:	dc05      	bgt.n	8005de0 <__swbuf_r+0x4e>
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 fda4 	bl	8006924 <_fflush_r>
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d1ed      	bne.n	8005dbc <__swbuf_r+0x2a>
 8005de0:	68a3      	ldr	r3, [r4, #8]
 8005de2:	3b01      	subs	r3, #1
 8005de4:	60a3      	str	r3, [r4, #8]
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	6022      	str	r2, [r4, #0]
 8005dec:	701e      	strb	r6, [r3, #0]
 8005dee:	6962      	ldr	r2, [r4, #20]
 8005df0:	1c43      	adds	r3, r0, #1
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d004      	beq.n	8005e00 <__swbuf_r+0x6e>
 8005df6:	89a3      	ldrh	r3, [r4, #12]
 8005df8:	07db      	lsls	r3, r3, #31
 8005dfa:	d5e1      	bpl.n	8005dc0 <__swbuf_r+0x2e>
 8005dfc:	2e0a      	cmp	r6, #10
 8005dfe:	d1df      	bne.n	8005dc0 <__swbuf_r+0x2e>
 8005e00:	4621      	mov	r1, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	f000 fd8e 	bl	8006924 <_fflush_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d0d9      	beq.n	8005dc0 <__swbuf_r+0x2e>
 8005e0c:	e7d6      	b.n	8005dbc <__swbuf_r+0x2a>
	...

08005e10 <__swsetup_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4b29      	ldr	r3, [pc, #164]	@ (8005eb8 <__swsetup_r+0xa8>)
 8005e14:	4605      	mov	r5, r0
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	460c      	mov	r4, r1
 8005e1a:	b118      	cbz	r0, 8005e24 <__swsetup_r+0x14>
 8005e1c:	6a03      	ldr	r3, [r0, #32]
 8005e1e:	b90b      	cbnz	r3, 8005e24 <__swsetup_r+0x14>
 8005e20:	f7ff fd98 	bl	8005954 <__sinit>
 8005e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e28:	0719      	lsls	r1, r3, #28
 8005e2a:	d422      	bmi.n	8005e72 <__swsetup_r+0x62>
 8005e2c:	06da      	lsls	r2, r3, #27
 8005e2e:	d407      	bmi.n	8005e40 <__swsetup_r+0x30>
 8005e30:	2209      	movs	r2, #9
 8005e32:	602a      	str	r2, [r5, #0]
 8005e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3e:	e033      	b.n	8005ea8 <__swsetup_r+0x98>
 8005e40:	0758      	lsls	r0, r3, #29
 8005e42:	d512      	bpl.n	8005e6a <__swsetup_r+0x5a>
 8005e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e46:	b141      	cbz	r1, 8005e5a <__swsetup_r+0x4a>
 8005e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d002      	beq.n	8005e56 <__swsetup_r+0x46>
 8005e50:	4628      	mov	r0, r5
 8005e52:	f000 f913 	bl	800607c <_free_r>
 8005e56:	2300      	movs	r3, #0
 8005e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	2300      	movs	r3, #0
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	f043 0308 	orr.w	r3, r3, #8
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	b94b      	cbnz	r3, 8005e8a <__swsetup_r+0x7a>
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e80:	d003      	beq.n	8005e8a <__swsetup_r+0x7a>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 fd9b 	bl	80069c0 <__smakebuf_r>
 8005e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8e:	f013 0201 	ands.w	r2, r3, #1
 8005e92:	d00a      	beq.n	8005eaa <__swsetup_r+0x9a>
 8005e94:	2200      	movs	r2, #0
 8005e96:	60a2      	str	r2, [r4, #8]
 8005e98:	6962      	ldr	r2, [r4, #20]
 8005e9a:	4252      	negs	r2, r2
 8005e9c:	61a2      	str	r2, [r4, #24]
 8005e9e:	6922      	ldr	r2, [r4, #16]
 8005ea0:	b942      	cbnz	r2, 8005eb4 <__swsetup_r+0xa4>
 8005ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ea6:	d1c5      	bne.n	8005e34 <__swsetup_r+0x24>
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	0799      	lsls	r1, r3, #30
 8005eac:	bf58      	it	pl
 8005eae:	6962      	ldrpl	r2, [r4, #20]
 8005eb0:	60a2      	str	r2, [r4, #8]
 8005eb2:	e7f4      	b.n	8005e9e <__swsetup_r+0x8e>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e7f7      	b.n	8005ea8 <__swsetup_r+0x98>
 8005eb8:	20000054 	.word	0x20000054

08005ebc <memset>:
 8005ebc:	4402      	add	r2, r0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d100      	bne.n	8005ec6 <memset+0xa>
 8005ec4:	4770      	bx	lr
 8005ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8005eca:	e7f9      	b.n	8005ec0 <memset+0x4>

08005ecc <_close_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4d06      	ldr	r5, [pc, #24]	@ (8005ee8 <_close_r+0x1c>)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	602b      	str	r3, [r5, #0]
 8005ed8:	f7fb fbb0 	bl	800163c <_close>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_close_r+0x1a>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_close_r+0x1a>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	2000435c 	.word	0x2000435c

08005eec <_reclaim_reent>:
 8005eec:	4b29      	ldr	r3, [pc, #164]	@ (8005f94 <_reclaim_reent+0xa8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4283      	cmp	r3, r0
 8005ef2:	b570      	push	{r4, r5, r6, lr}
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	d04b      	beq.n	8005f90 <_reclaim_reent+0xa4>
 8005ef8:	69c3      	ldr	r3, [r0, #28]
 8005efa:	b1ab      	cbz	r3, 8005f28 <_reclaim_reent+0x3c>
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	b16b      	cbz	r3, 8005f1c <_reclaim_reent+0x30>
 8005f00:	2500      	movs	r5, #0
 8005f02:	69e3      	ldr	r3, [r4, #28]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	5959      	ldr	r1, [r3, r5]
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	d13b      	bne.n	8005f84 <_reclaim_reent+0x98>
 8005f0c:	3504      	adds	r5, #4
 8005f0e:	2d80      	cmp	r5, #128	@ 0x80
 8005f10:	d1f7      	bne.n	8005f02 <_reclaim_reent+0x16>
 8005f12:	69e3      	ldr	r3, [r4, #28]
 8005f14:	4620      	mov	r0, r4
 8005f16:	68d9      	ldr	r1, [r3, #12]
 8005f18:	f000 f8b0 	bl	800607c <_free_r>
 8005f1c:	69e3      	ldr	r3, [r4, #28]
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	b111      	cbz	r1, 8005f28 <_reclaim_reent+0x3c>
 8005f22:	4620      	mov	r0, r4
 8005f24:	f000 f8aa 	bl	800607c <_free_r>
 8005f28:	6961      	ldr	r1, [r4, #20]
 8005f2a:	b111      	cbz	r1, 8005f32 <_reclaim_reent+0x46>
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	f000 f8a5 	bl	800607c <_free_r>
 8005f32:	69e1      	ldr	r1, [r4, #28]
 8005f34:	b111      	cbz	r1, 8005f3c <_reclaim_reent+0x50>
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 f8a0 	bl	800607c <_free_r>
 8005f3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005f3e:	b111      	cbz	r1, 8005f46 <_reclaim_reent+0x5a>
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 f89b 	bl	800607c <_free_r>
 8005f46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f48:	b111      	cbz	r1, 8005f50 <_reclaim_reent+0x64>
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 f896 	bl	800607c <_free_r>
 8005f50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005f52:	b111      	cbz	r1, 8005f5a <_reclaim_reent+0x6e>
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 f891 	bl	800607c <_free_r>
 8005f5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005f5c:	b111      	cbz	r1, 8005f64 <_reclaim_reent+0x78>
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f000 f88c 	bl	800607c <_free_r>
 8005f64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005f66:	b111      	cbz	r1, 8005f6e <_reclaim_reent+0x82>
 8005f68:	4620      	mov	r0, r4
 8005f6a:	f000 f887 	bl	800607c <_free_r>
 8005f6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005f70:	b111      	cbz	r1, 8005f78 <_reclaim_reent+0x8c>
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 f882 	bl	800607c <_free_r>
 8005f78:	6a23      	ldr	r3, [r4, #32]
 8005f7a:	b14b      	cbz	r3, 8005f90 <_reclaim_reent+0xa4>
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005f82:	4718      	bx	r3
 8005f84:	680e      	ldr	r6, [r1, #0]
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 f878 	bl	800607c <_free_r>
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	e7bb      	b.n	8005f08 <_reclaim_reent+0x1c>
 8005f90:	bd70      	pop	{r4, r5, r6, pc}
 8005f92:	bf00      	nop
 8005f94:	20000054 	.word	0x20000054

08005f98 <_lseek_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	4d07      	ldr	r5, [pc, #28]	@ (8005fb8 <_lseek_r+0x20>)
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	4608      	mov	r0, r1
 8005fa0:	4611      	mov	r1, r2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	602a      	str	r2, [r5, #0]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f7fb fb5f 	bl	800166a <_lseek>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d102      	bne.n	8005fb6 <_lseek_r+0x1e>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b103      	cbz	r3, 8005fb6 <_lseek_r+0x1e>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	2000435c 	.word	0x2000435c

08005fbc <_read_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4d07      	ldr	r5, [pc, #28]	@ (8005fdc <_read_r+0x20>)
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	4608      	mov	r0, r1
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	602a      	str	r2, [r5, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f7fb fb5e 	bl	800168c <_read>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_read_r+0x1e>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_read_r+0x1e>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	2000435c 	.word	0x2000435c

08005fe0 <_write_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d07      	ldr	r5, [pc, #28]	@ (8006000 <_write_r+0x20>)
 8005fe4:	4604      	mov	r4, r0
 8005fe6:	4608      	mov	r0, r1
 8005fe8:	4611      	mov	r1, r2
 8005fea:	2200      	movs	r2, #0
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f7fb faf8 	bl	80015e4 <_write>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_write_r+0x1e>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_write_r+0x1e>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	2000435c 	.word	0x2000435c

08006004 <__errno>:
 8006004:	4b01      	ldr	r3, [pc, #4]	@ (800600c <__errno+0x8>)
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	20000054 	.word	0x20000054

08006010 <__libc_init_array>:
 8006010:	b570      	push	{r4, r5, r6, lr}
 8006012:	4d0d      	ldr	r5, [pc, #52]	@ (8006048 <__libc_init_array+0x38>)
 8006014:	4c0d      	ldr	r4, [pc, #52]	@ (800604c <__libc_init_array+0x3c>)
 8006016:	1b64      	subs	r4, r4, r5
 8006018:	10a4      	asrs	r4, r4, #2
 800601a:	2600      	movs	r6, #0
 800601c:	42a6      	cmp	r6, r4
 800601e:	d109      	bne.n	8006034 <__libc_init_array+0x24>
 8006020:	4d0b      	ldr	r5, [pc, #44]	@ (8006050 <__libc_init_array+0x40>)
 8006022:	4c0c      	ldr	r4, [pc, #48]	@ (8006054 <__libc_init_array+0x44>)
 8006024:	f000 fd3a 	bl	8006a9c <_init>
 8006028:	1b64      	subs	r4, r4, r5
 800602a:	10a4      	asrs	r4, r4, #2
 800602c:	2600      	movs	r6, #0
 800602e:	42a6      	cmp	r6, r4
 8006030:	d105      	bne.n	800603e <__libc_init_array+0x2e>
 8006032:	bd70      	pop	{r4, r5, r6, pc}
 8006034:	f855 3b04 	ldr.w	r3, [r5], #4
 8006038:	4798      	blx	r3
 800603a:	3601      	adds	r6, #1
 800603c:	e7ee      	b.n	800601c <__libc_init_array+0xc>
 800603e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006042:	4798      	blx	r3
 8006044:	3601      	adds	r6, #1
 8006046:	e7f2      	b.n	800602e <__libc_init_array+0x1e>
 8006048:	08006c6c 	.word	0x08006c6c
 800604c:	08006c6c 	.word	0x08006c6c
 8006050:	08006c6c 	.word	0x08006c6c
 8006054:	08006c70 	.word	0x08006c70

08006058 <__retarget_lock_init_recursive>:
 8006058:	4770      	bx	lr

0800605a <__retarget_lock_acquire_recursive>:
 800605a:	4770      	bx	lr

0800605c <__retarget_lock_release_recursive>:
 800605c:	4770      	bx	lr

0800605e <memcpy>:
 800605e:	440a      	add	r2, r1
 8006060:	4291      	cmp	r1, r2
 8006062:	f100 33ff 	add.w	r3, r0, #4294967295
 8006066:	d100      	bne.n	800606a <memcpy+0xc>
 8006068:	4770      	bx	lr
 800606a:	b510      	push	{r4, lr}
 800606c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006070:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006074:	4291      	cmp	r1, r2
 8006076:	d1f9      	bne.n	800606c <memcpy+0xe>
 8006078:	bd10      	pop	{r4, pc}
	...

0800607c <_free_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4605      	mov	r5, r0
 8006080:	2900      	cmp	r1, #0
 8006082:	d041      	beq.n	8006108 <_free_r+0x8c>
 8006084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006088:	1f0c      	subs	r4, r1, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	bfb8      	it	lt
 800608e:	18e4      	addlt	r4, r4, r3
 8006090:	f000 f8e8 	bl	8006264 <__malloc_lock>
 8006094:	4a1d      	ldr	r2, [pc, #116]	@ (800610c <_free_r+0x90>)
 8006096:	6813      	ldr	r3, [r2, #0]
 8006098:	b933      	cbnz	r3, 80060a8 <_free_r+0x2c>
 800609a:	6063      	str	r3, [r4, #4]
 800609c:	6014      	str	r4, [r2, #0]
 800609e:	4628      	mov	r0, r5
 80060a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060a4:	f000 b8e4 	b.w	8006270 <__malloc_unlock>
 80060a8:	42a3      	cmp	r3, r4
 80060aa:	d908      	bls.n	80060be <_free_r+0x42>
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	1821      	adds	r1, r4, r0
 80060b0:	428b      	cmp	r3, r1
 80060b2:	bf01      	itttt	eq
 80060b4:	6819      	ldreq	r1, [r3, #0]
 80060b6:	685b      	ldreq	r3, [r3, #4]
 80060b8:	1809      	addeq	r1, r1, r0
 80060ba:	6021      	streq	r1, [r4, #0]
 80060bc:	e7ed      	b.n	800609a <_free_r+0x1e>
 80060be:	461a      	mov	r2, r3
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	b10b      	cbz	r3, 80060c8 <_free_r+0x4c>
 80060c4:	42a3      	cmp	r3, r4
 80060c6:	d9fa      	bls.n	80060be <_free_r+0x42>
 80060c8:	6811      	ldr	r1, [r2, #0]
 80060ca:	1850      	adds	r0, r2, r1
 80060cc:	42a0      	cmp	r0, r4
 80060ce:	d10b      	bne.n	80060e8 <_free_r+0x6c>
 80060d0:	6820      	ldr	r0, [r4, #0]
 80060d2:	4401      	add	r1, r0
 80060d4:	1850      	adds	r0, r2, r1
 80060d6:	4283      	cmp	r3, r0
 80060d8:	6011      	str	r1, [r2, #0]
 80060da:	d1e0      	bne.n	800609e <_free_r+0x22>
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	6053      	str	r3, [r2, #4]
 80060e2:	4408      	add	r0, r1
 80060e4:	6010      	str	r0, [r2, #0]
 80060e6:	e7da      	b.n	800609e <_free_r+0x22>
 80060e8:	d902      	bls.n	80060f0 <_free_r+0x74>
 80060ea:	230c      	movs	r3, #12
 80060ec:	602b      	str	r3, [r5, #0]
 80060ee:	e7d6      	b.n	800609e <_free_r+0x22>
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	1821      	adds	r1, r4, r0
 80060f4:	428b      	cmp	r3, r1
 80060f6:	bf04      	itt	eq
 80060f8:	6819      	ldreq	r1, [r3, #0]
 80060fa:	685b      	ldreq	r3, [r3, #4]
 80060fc:	6063      	str	r3, [r4, #4]
 80060fe:	bf04      	itt	eq
 8006100:	1809      	addeq	r1, r1, r0
 8006102:	6021      	streq	r1, [r4, #0]
 8006104:	6054      	str	r4, [r2, #4]
 8006106:	e7ca      	b.n	800609e <_free_r+0x22>
 8006108:	bd38      	pop	{r3, r4, r5, pc}
 800610a:	bf00      	nop
 800610c:	20004368 	.word	0x20004368

08006110 <malloc>:
 8006110:	4b02      	ldr	r3, [pc, #8]	@ (800611c <malloc+0xc>)
 8006112:	4601      	mov	r1, r0
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	f000 b825 	b.w	8006164 <_malloc_r>
 800611a:	bf00      	nop
 800611c:	20000054 	.word	0x20000054

08006120 <sbrk_aligned>:
 8006120:	b570      	push	{r4, r5, r6, lr}
 8006122:	4e0f      	ldr	r6, [pc, #60]	@ (8006160 <sbrk_aligned+0x40>)
 8006124:	460c      	mov	r4, r1
 8006126:	6831      	ldr	r1, [r6, #0]
 8006128:	4605      	mov	r5, r0
 800612a:	b911      	cbnz	r1, 8006132 <sbrk_aligned+0x12>
 800612c:	f000 fca6 	bl	8006a7c <_sbrk_r>
 8006130:	6030      	str	r0, [r6, #0]
 8006132:	4621      	mov	r1, r4
 8006134:	4628      	mov	r0, r5
 8006136:	f000 fca1 	bl	8006a7c <_sbrk_r>
 800613a:	1c43      	adds	r3, r0, #1
 800613c:	d103      	bne.n	8006146 <sbrk_aligned+0x26>
 800613e:	f04f 34ff 	mov.w	r4, #4294967295
 8006142:	4620      	mov	r0, r4
 8006144:	bd70      	pop	{r4, r5, r6, pc}
 8006146:	1cc4      	adds	r4, r0, #3
 8006148:	f024 0403 	bic.w	r4, r4, #3
 800614c:	42a0      	cmp	r0, r4
 800614e:	d0f8      	beq.n	8006142 <sbrk_aligned+0x22>
 8006150:	1a21      	subs	r1, r4, r0
 8006152:	4628      	mov	r0, r5
 8006154:	f000 fc92 	bl	8006a7c <_sbrk_r>
 8006158:	3001      	adds	r0, #1
 800615a:	d1f2      	bne.n	8006142 <sbrk_aligned+0x22>
 800615c:	e7ef      	b.n	800613e <sbrk_aligned+0x1e>
 800615e:	bf00      	nop
 8006160:	20004364 	.word	0x20004364

08006164 <_malloc_r>:
 8006164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006168:	1ccd      	adds	r5, r1, #3
 800616a:	f025 0503 	bic.w	r5, r5, #3
 800616e:	3508      	adds	r5, #8
 8006170:	2d0c      	cmp	r5, #12
 8006172:	bf38      	it	cc
 8006174:	250c      	movcc	r5, #12
 8006176:	2d00      	cmp	r5, #0
 8006178:	4606      	mov	r6, r0
 800617a:	db01      	blt.n	8006180 <_malloc_r+0x1c>
 800617c:	42a9      	cmp	r1, r5
 800617e:	d904      	bls.n	800618a <_malloc_r+0x26>
 8006180:	230c      	movs	r3, #12
 8006182:	6033      	str	r3, [r6, #0]
 8006184:	2000      	movs	r0, #0
 8006186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006260 <_malloc_r+0xfc>
 800618e:	f000 f869 	bl	8006264 <__malloc_lock>
 8006192:	f8d8 3000 	ldr.w	r3, [r8]
 8006196:	461c      	mov	r4, r3
 8006198:	bb44      	cbnz	r4, 80061ec <_malloc_r+0x88>
 800619a:	4629      	mov	r1, r5
 800619c:	4630      	mov	r0, r6
 800619e:	f7ff ffbf 	bl	8006120 <sbrk_aligned>
 80061a2:	1c43      	adds	r3, r0, #1
 80061a4:	4604      	mov	r4, r0
 80061a6:	d158      	bne.n	800625a <_malloc_r+0xf6>
 80061a8:	f8d8 4000 	ldr.w	r4, [r8]
 80061ac:	4627      	mov	r7, r4
 80061ae:	2f00      	cmp	r7, #0
 80061b0:	d143      	bne.n	800623a <_malloc_r+0xd6>
 80061b2:	2c00      	cmp	r4, #0
 80061b4:	d04b      	beq.n	800624e <_malloc_r+0xea>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	4639      	mov	r1, r7
 80061ba:	4630      	mov	r0, r6
 80061bc:	eb04 0903 	add.w	r9, r4, r3
 80061c0:	f000 fc5c 	bl	8006a7c <_sbrk_r>
 80061c4:	4581      	cmp	r9, r0
 80061c6:	d142      	bne.n	800624e <_malloc_r+0xea>
 80061c8:	6821      	ldr	r1, [r4, #0]
 80061ca:	1a6d      	subs	r5, r5, r1
 80061cc:	4629      	mov	r1, r5
 80061ce:	4630      	mov	r0, r6
 80061d0:	f7ff ffa6 	bl	8006120 <sbrk_aligned>
 80061d4:	3001      	adds	r0, #1
 80061d6:	d03a      	beq.n	800624e <_malloc_r+0xea>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	442b      	add	r3, r5
 80061dc:	6023      	str	r3, [r4, #0]
 80061de:	f8d8 3000 	ldr.w	r3, [r8]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	bb62      	cbnz	r2, 8006240 <_malloc_r+0xdc>
 80061e6:	f8c8 7000 	str.w	r7, [r8]
 80061ea:	e00f      	b.n	800620c <_malloc_r+0xa8>
 80061ec:	6822      	ldr	r2, [r4, #0]
 80061ee:	1b52      	subs	r2, r2, r5
 80061f0:	d420      	bmi.n	8006234 <_malloc_r+0xd0>
 80061f2:	2a0b      	cmp	r2, #11
 80061f4:	d917      	bls.n	8006226 <_malloc_r+0xc2>
 80061f6:	1961      	adds	r1, r4, r5
 80061f8:	42a3      	cmp	r3, r4
 80061fa:	6025      	str	r5, [r4, #0]
 80061fc:	bf18      	it	ne
 80061fe:	6059      	strne	r1, [r3, #4]
 8006200:	6863      	ldr	r3, [r4, #4]
 8006202:	bf08      	it	eq
 8006204:	f8c8 1000 	streq.w	r1, [r8]
 8006208:	5162      	str	r2, [r4, r5]
 800620a:	604b      	str	r3, [r1, #4]
 800620c:	4630      	mov	r0, r6
 800620e:	f000 f82f 	bl	8006270 <__malloc_unlock>
 8006212:	f104 000b 	add.w	r0, r4, #11
 8006216:	1d23      	adds	r3, r4, #4
 8006218:	f020 0007 	bic.w	r0, r0, #7
 800621c:	1ac2      	subs	r2, r0, r3
 800621e:	bf1c      	itt	ne
 8006220:	1a1b      	subne	r3, r3, r0
 8006222:	50a3      	strne	r3, [r4, r2]
 8006224:	e7af      	b.n	8006186 <_malloc_r+0x22>
 8006226:	6862      	ldr	r2, [r4, #4]
 8006228:	42a3      	cmp	r3, r4
 800622a:	bf0c      	ite	eq
 800622c:	f8c8 2000 	streq.w	r2, [r8]
 8006230:	605a      	strne	r2, [r3, #4]
 8006232:	e7eb      	b.n	800620c <_malloc_r+0xa8>
 8006234:	4623      	mov	r3, r4
 8006236:	6864      	ldr	r4, [r4, #4]
 8006238:	e7ae      	b.n	8006198 <_malloc_r+0x34>
 800623a:	463c      	mov	r4, r7
 800623c:	687f      	ldr	r7, [r7, #4]
 800623e:	e7b6      	b.n	80061ae <_malloc_r+0x4a>
 8006240:	461a      	mov	r2, r3
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	42a3      	cmp	r3, r4
 8006246:	d1fb      	bne.n	8006240 <_malloc_r+0xdc>
 8006248:	2300      	movs	r3, #0
 800624a:	6053      	str	r3, [r2, #4]
 800624c:	e7de      	b.n	800620c <_malloc_r+0xa8>
 800624e:	230c      	movs	r3, #12
 8006250:	6033      	str	r3, [r6, #0]
 8006252:	4630      	mov	r0, r6
 8006254:	f000 f80c 	bl	8006270 <__malloc_unlock>
 8006258:	e794      	b.n	8006184 <_malloc_r+0x20>
 800625a:	6005      	str	r5, [r0, #0]
 800625c:	e7d6      	b.n	800620c <_malloc_r+0xa8>
 800625e:	bf00      	nop
 8006260:	20004368 	.word	0x20004368

08006264 <__malloc_lock>:
 8006264:	4801      	ldr	r0, [pc, #4]	@ (800626c <__malloc_lock+0x8>)
 8006266:	f7ff bef8 	b.w	800605a <__retarget_lock_acquire_recursive>
 800626a:	bf00      	nop
 800626c:	20004360 	.word	0x20004360

08006270 <__malloc_unlock>:
 8006270:	4801      	ldr	r0, [pc, #4]	@ (8006278 <__malloc_unlock+0x8>)
 8006272:	f7ff bef3 	b.w	800605c <__retarget_lock_release_recursive>
 8006276:	bf00      	nop
 8006278:	20004360 	.word	0x20004360

0800627c <__sfputc_r>:
 800627c:	6893      	ldr	r3, [r2, #8]
 800627e:	3b01      	subs	r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	b410      	push	{r4}
 8006284:	6093      	str	r3, [r2, #8]
 8006286:	da08      	bge.n	800629a <__sfputc_r+0x1e>
 8006288:	6994      	ldr	r4, [r2, #24]
 800628a:	42a3      	cmp	r3, r4
 800628c:	db01      	blt.n	8006292 <__sfputc_r+0x16>
 800628e:	290a      	cmp	r1, #10
 8006290:	d103      	bne.n	800629a <__sfputc_r+0x1e>
 8006292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006296:	f7ff bd7c 	b.w	8005d92 <__swbuf_r>
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	1c58      	adds	r0, r3, #1
 800629e:	6010      	str	r0, [r2, #0]
 80062a0:	7019      	strb	r1, [r3, #0]
 80062a2:	4608      	mov	r0, r1
 80062a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <__sfputs_r>:
 80062aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ac:	4606      	mov	r6, r0
 80062ae:	460f      	mov	r7, r1
 80062b0:	4614      	mov	r4, r2
 80062b2:	18d5      	adds	r5, r2, r3
 80062b4:	42ac      	cmp	r4, r5
 80062b6:	d101      	bne.n	80062bc <__sfputs_r+0x12>
 80062b8:	2000      	movs	r0, #0
 80062ba:	e007      	b.n	80062cc <__sfputs_r+0x22>
 80062bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062c0:	463a      	mov	r2, r7
 80062c2:	4630      	mov	r0, r6
 80062c4:	f7ff ffda 	bl	800627c <__sfputc_r>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d1f3      	bne.n	80062b4 <__sfputs_r+0xa>
 80062cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080062d0 <_vfiprintf_r>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	460d      	mov	r5, r1
 80062d6:	b09d      	sub	sp, #116	@ 0x74
 80062d8:	4614      	mov	r4, r2
 80062da:	4698      	mov	r8, r3
 80062dc:	4606      	mov	r6, r0
 80062de:	b118      	cbz	r0, 80062e8 <_vfiprintf_r+0x18>
 80062e0:	6a03      	ldr	r3, [r0, #32]
 80062e2:	b90b      	cbnz	r3, 80062e8 <_vfiprintf_r+0x18>
 80062e4:	f7ff fb36 	bl	8005954 <__sinit>
 80062e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062ea:	07d9      	lsls	r1, r3, #31
 80062ec:	d405      	bmi.n	80062fa <_vfiprintf_r+0x2a>
 80062ee:	89ab      	ldrh	r3, [r5, #12]
 80062f0:	059a      	lsls	r2, r3, #22
 80062f2:	d402      	bmi.n	80062fa <_vfiprintf_r+0x2a>
 80062f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062f6:	f7ff feb0 	bl	800605a <__retarget_lock_acquire_recursive>
 80062fa:	89ab      	ldrh	r3, [r5, #12]
 80062fc:	071b      	lsls	r3, r3, #28
 80062fe:	d501      	bpl.n	8006304 <_vfiprintf_r+0x34>
 8006300:	692b      	ldr	r3, [r5, #16]
 8006302:	b99b      	cbnz	r3, 800632c <_vfiprintf_r+0x5c>
 8006304:	4629      	mov	r1, r5
 8006306:	4630      	mov	r0, r6
 8006308:	f7ff fd82 	bl	8005e10 <__swsetup_r>
 800630c:	b170      	cbz	r0, 800632c <_vfiprintf_r+0x5c>
 800630e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006310:	07dc      	lsls	r4, r3, #31
 8006312:	d504      	bpl.n	800631e <_vfiprintf_r+0x4e>
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	b01d      	add	sp, #116	@ 0x74
 800631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631e:	89ab      	ldrh	r3, [r5, #12]
 8006320:	0598      	lsls	r0, r3, #22
 8006322:	d4f7      	bmi.n	8006314 <_vfiprintf_r+0x44>
 8006324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006326:	f7ff fe99 	bl	800605c <__retarget_lock_release_recursive>
 800632a:	e7f3      	b.n	8006314 <_vfiprintf_r+0x44>
 800632c:	2300      	movs	r3, #0
 800632e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006330:	2320      	movs	r3, #32
 8006332:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006336:	f8cd 800c 	str.w	r8, [sp, #12]
 800633a:	2330      	movs	r3, #48	@ 0x30
 800633c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80064ec <_vfiprintf_r+0x21c>
 8006340:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006344:	f04f 0901 	mov.w	r9, #1
 8006348:	4623      	mov	r3, r4
 800634a:	469a      	mov	sl, r3
 800634c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006350:	b10a      	cbz	r2, 8006356 <_vfiprintf_r+0x86>
 8006352:	2a25      	cmp	r2, #37	@ 0x25
 8006354:	d1f9      	bne.n	800634a <_vfiprintf_r+0x7a>
 8006356:	ebba 0b04 	subs.w	fp, sl, r4
 800635a:	d00b      	beq.n	8006374 <_vfiprintf_r+0xa4>
 800635c:	465b      	mov	r3, fp
 800635e:	4622      	mov	r2, r4
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff ffa1 	bl	80062aa <__sfputs_r>
 8006368:	3001      	adds	r0, #1
 800636a:	f000 80a7 	beq.w	80064bc <_vfiprintf_r+0x1ec>
 800636e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006370:	445a      	add	r2, fp
 8006372:	9209      	str	r2, [sp, #36]	@ 0x24
 8006374:	f89a 3000 	ldrb.w	r3, [sl]
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 809f 	beq.w	80064bc <_vfiprintf_r+0x1ec>
 800637e:	2300      	movs	r3, #0
 8006380:	f04f 32ff 	mov.w	r2, #4294967295
 8006384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006388:	f10a 0a01 	add.w	sl, sl, #1
 800638c:	9304      	str	r3, [sp, #16]
 800638e:	9307      	str	r3, [sp, #28]
 8006390:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006394:	931a      	str	r3, [sp, #104]	@ 0x68
 8006396:	4654      	mov	r4, sl
 8006398:	2205      	movs	r2, #5
 800639a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639e:	4853      	ldr	r0, [pc, #332]	@ (80064ec <_vfiprintf_r+0x21c>)
 80063a0:	f7f9 ff1e 	bl	80001e0 <memchr>
 80063a4:	9a04      	ldr	r2, [sp, #16]
 80063a6:	b9d8      	cbnz	r0, 80063e0 <_vfiprintf_r+0x110>
 80063a8:	06d1      	lsls	r1, r2, #27
 80063aa:	bf44      	itt	mi
 80063ac:	2320      	movmi	r3, #32
 80063ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063b2:	0713      	lsls	r3, r2, #28
 80063b4:	bf44      	itt	mi
 80063b6:	232b      	movmi	r3, #43	@ 0x2b
 80063b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063bc:	f89a 3000 	ldrb.w	r3, [sl]
 80063c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063c2:	d015      	beq.n	80063f0 <_vfiprintf_r+0x120>
 80063c4:	9a07      	ldr	r2, [sp, #28]
 80063c6:	4654      	mov	r4, sl
 80063c8:	2000      	movs	r0, #0
 80063ca:	f04f 0c0a 	mov.w	ip, #10
 80063ce:	4621      	mov	r1, r4
 80063d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063d4:	3b30      	subs	r3, #48	@ 0x30
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	d94b      	bls.n	8006472 <_vfiprintf_r+0x1a2>
 80063da:	b1b0      	cbz	r0, 800640a <_vfiprintf_r+0x13a>
 80063dc:	9207      	str	r2, [sp, #28]
 80063de:	e014      	b.n	800640a <_vfiprintf_r+0x13a>
 80063e0:	eba0 0308 	sub.w	r3, r0, r8
 80063e4:	fa09 f303 	lsl.w	r3, r9, r3
 80063e8:	4313      	orrs	r3, r2
 80063ea:	9304      	str	r3, [sp, #16]
 80063ec:	46a2      	mov	sl, r4
 80063ee:	e7d2      	b.n	8006396 <_vfiprintf_r+0xc6>
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	1d19      	adds	r1, r3, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	9103      	str	r1, [sp, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	bfbb      	ittet	lt
 80063fc:	425b      	neglt	r3, r3
 80063fe:	f042 0202 	orrlt.w	r2, r2, #2
 8006402:	9307      	strge	r3, [sp, #28]
 8006404:	9307      	strlt	r3, [sp, #28]
 8006406:	bfb8      	it	lt
 8006408:	9204      	strlt	r2, [sp, #16]
 800640a:	7823      	ldrb	r3, [r4, #0]
 800640c:	2b2e      	cmp	r3, #46	@ 0x2e
 800640e:	d10a      	bne.n	8006426 <_vfiprintf_r+0x156>
 8006410:	7863      	ldrb	r3, [r4, #1]
 8006412:	2b2a      	cmp	r3, #42	@ 0x2a
 8006414:	d132      	bne.n	800647c <_vfiprintf_r+0x1ac>
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	1d1a      	adds	r2, r3, #4
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	9203      	str	r2, [sp, #12]
 800641e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006422:	3402      	adds	r4, #2
 8006424:	9305      	str	r3, [sp, #20]
 8006426:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80064fc <_vfiprintf_r+0x22c>
 800642a:	7821      	ldrb	r1, [r4, #0]
 800642c:	2203      	movs	r2, #3
 800642e:	4650      	mov	r0, sl
 8006430:	f7f9 fed6 	bl	80001e0 <memchr>
 8006434:	b138      	cbz	r0, 8006446 <_vfiprintf_r+0x176>
 8006436:	9b04      	ldr	r3, [sp, #16]
 8006438:	eba0 000a 	sub.w	r0, r0, sl
 800643c:	2240      	movs	r2, #64	@ 0x40
 800643e:	4082      	lsls	r2, r0
 8006440:	4313      	orrs	r3, r2
 8006442:	3401      	adds	r4, #1
 8006444:	9304      	str	r3, [sp, #16]
 8006446:	f814 1b01 	ldrb.w	r1, [r4], #1
 800644a:	4829      	ldr	r0, [pc, #164]	@ (80064f0 <_vfiprintf_r+0x220>)
 800644c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006450:	2206      	movs	r2, #6
 8006452:	f7f9 fec5 	bl	80001e0 <memchr>
 8006456:	2800      	cmp	r0, #0
 8006458:	d03f      	beq.n	80064da <_vfiprintf_r+0x20a>
 800645a:	4b26      	ldr	r3, [pc, #152]	@ (80064f4 <_vfiprintf_r+0x224>)
 800645c:	bb1b      	cbnz	r3, 80064a6 <_vfiprintf_r+0x1d6>
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	3307      	adds	r3, #7
 8006462:	f023 0307 	bic.w	r3, r3, #7
 8006466:	3308      	adds	r3, #8
 8006468:	9303      	str	r3, [sp, #12]
 800646a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800646c:	443b      	add	r3, r7
 800646e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006470:	e76a      	b.n	8006348 <_vfiprintf_r+0x78>
 8006472:	fb0c 3202 	mla	r2, ip, r2, r3
 8006476:	460c      	mov	r4, r1
 8006478:	2001      	movs	r0, #1
 800647a:	e7a8      	b.n	80063ce <_vfiprintf_r+0xfe>
 800647c:	2300      	movs	r3, #0
 800647e:	3401      	adds	r4, #1
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	4619      	mov	r1, r3
 8006484:	f04f 0c0a 	mov.w	ip, #10
 8006488:	4620      	mov	r0, r4
 800648a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800648e:	3a30      	subs	r2, #48	@ 0x30
 8006490:	2a09      	cmp	r2, #9
 8006492:	d903      	bls.n	800649c <_vfiprintf_r+0x1cc>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0c6      	beq.n	8006426 <_vfiprintf_r+0x156>
 8006498:	9105      	str	r1, [sp, #20]
 800649a:	e7c4      	b.n	8006426 <_vfiprintf_r+0x156>
 800649c:	fb0c 2101 	mla	r1, ip, r1, r2
 80064a0:	4604      	mov	r4, r0
 80064a2:	2301      	movs	r3, #1
 80064a4:	e7f0      	b.n	8006488 <_vfiprintf_r+0x1b8>
 80064a6:	ab03      	add	r3, sp, #12
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	462a      	mov	r2, r5
 80064ac:	4b12      	ldr	r3, [pc, #72]	@ (80064f8 <_vfiprintf_r+0x228>)
 80064ae:	a904      	add	r1, sp, #16
 80064b0:	4630      	mov	r0, r6
 80064b2:	f3af 8000 	nop.w
 80064b6:	4607      	mov	r7, r0
 80064b8:	1c78      	adds	r0, r7, #1
 80064ba:	d1d6      	bne.n	800646a <_vfiprintf_r+0x19a>
 80064bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80064be:	07d9      	lsls	r1, r3, #31
 80064c0:	d405      	bmi.n	80064ce <_vfiprintf_r+0x1fe>
 80064c2:	89ab      	ldrh	r3, [r5, #12]
 80064c4:	059a      	lsls	r2, r3, #22
 80064c6:	d402      	bmi.n	80064ce <_vfiprintf_r+0x1fe>
 80064c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80064ca:	f7ff fdc7 	bl	800605c <__retarget_lock_release_recursive>
 80064ce:	89ab      	ldrh	r3, [r5, #12]
 80064d0:	065b      	lsls	r3, r3, #25
 80064d2:	f53f af1f 	bmi.w	8006314 <_vfiprintf_r+0x44>
 80064d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064d8:	e71e      	b.n	8006318 <_vfiprintf_r+0x48>
 80064da:	ab03      	add	r3, sp, #12
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	462a      	mov	r2, r5
 80064e0:	4b05      	ldr	r3, [pc, #20]	@ (80064f8 <_vfiprintf_r+0x228>)
 80064e2:	a904      	add	r1, sp, #16
 80064e4:	4630      	mov	r0, r6
 80064e6:	f000 f879 	bl	80065dc <_printf_i>
 80064ea:	e7e4      	b.n	80064b6 <_vfiprintf_r+0x1e6>
 80064ec:	08006c30 	.word	0x08006c30
 80064f0:	08006c3a 	.word	0x08006c3a
 80064f4:	00000000 	.word	0x00000000
 80064f8:	080062ab 	.word	0x080062ab
 80064fc:	08006c36 	.word	0x08006c36

08006500 <_printf_common>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	4616      	mov	r6, r2
 8006506:	4698      	mov	r8, r3
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006510:	4293      	cmp	r3, r2
 8006512:	bfb8      	it	lt
 8006514:	4613      	movlt	r3, r2
 8006516:	6033      	str	r3, [r6, #0]
 8006518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800651c:	4607      	mov	r7, r0
 800651e:	460c      	mov	r4, r1
 8006520:	b10a      	cbz	r2, 8006526 <_printf_common+0x26>
 8006522:	3301      	adds	r3, #1
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	6833      	ldrmi	r3, [r6, #0]
 800652e:	3302      	addmi	r3, #2
 8006530:	6033      	strmi	r3, [r6, #0]
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f015 0506 	ands.w	r5, r5, #6
 8006538:	d106      	bne.n	8006548 <_printf_common+0x48>
 800653a:	f104 0a19 	add.w	sl, r4, #25
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	6832      	ldr	r2, [r6, #0]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dc26      	bgt.n	8006596 <_printf_common+0x96>
 8006548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	3b00      	subs	r3, #0
 8006550:	bf18      	it	ne
 8006552:	2301      	movne	r3, #1
 8006554:	0692      	lsls	r2, r2, #26
 8006556:	d42b      	bmi.n	80065b0 <_printf_common+0xb0>
 8006558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800655c:	4641      	mov	r1, r8
 800655e:	4638      	mov	r0, r7
 8006560:	47c8      	blx	r9
 8006562:	3001      	adds	r0, #1
 8006564:	d01e      	beq.n	80065a4 <_printf_common+0xa4>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	6922      	ldr	r2, [r4, #16]
 800656a:	f003 0306 	and.w	r3, r3, #6
 800656e:	2b04      	cmp	r3, #4
 8006570:	bf02      	ittt	eq
 8006572:	68e5      	ldreq	r5, [r4, #12]
 8006574:	6833      	ldreq	r3, [r6, #0]
 8006576:	1aed      	subeq	r5, r5, r3
 8006578:	68a3      	ldr	r3, [r4, #8]
 800657a:	bf0c      	ite	eq
 800657c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006580:	2500      	movne	r5, #0
 8006582:	4293      	cmp	r3, r2
 8006584:	bfc4      	itt	gt
 8006586:	1a9b      	subgt	r3, r3, r2
 8006588:	18ed      	addgt	r5, r5, r3
 800658a:	2600      	movs	r6, #0
 800658c:	341a      	adds	r4, #26
 800658e:	42b5      	cmp	r5, r6
 8006590:	d11a      	bne.n	80065c8 <_printf_common+0xc8>
 8006592:	2000      	movs	r0, #0
 8006594:	e008      	b.n	80065a8 <_printf_common+0xa8>
 8006596:	2301      	movs	r3, #1
 8006598:	4652      	mov	r2, sl
 800659a:	4641      	mov	r1, r8
 800659c:	4638      	mov	r0, r7
 800659e:	47c8      	blx	r9
 80065a0:	3001      	adds	r0, #1
 80065a2:	d103      	bne.n	80065ac <_printf_common+0xac>
 80065a4:	f04f 30ff 	mov.w	r0, #4294967295
 80065a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ac:	3501      	adds	r5, #1
 80065ae:	e7c6      	b.n	800653e <_printf_common+0x3e>
 80065b0:	18e1      	adds	r1, r4, r3
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	2030      	movs	r0, #48	@ 0x30
 80065b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ba:	4422      	add	r2, r4
 80065bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065c4:	3302      	adds	r3, #2
 80065c6:	e7c7      	b.n	8006558 <_printf_common+0x58>
 80065c8:	2301      	movs	r3, #1
 80065ca:	4622      	mov	r2, r4
 80065cc:	4641      	mov	r1, r8
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c8      	blx	r9
 80065d2:	3001      	adds	r0, #1
 80065d4:	d0e6      	beq.n	80065a4 <_printf_common+0xa4>
 80065d6:	3601      	adds	r6, #1
 80065d8:	e7d9      	b.n	800658e <_printf_common+0x8e>
	...

080065dc <_printf_i>:
 80065dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	7e0f      	ldrb	r7, [r1, #24]
 80065e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065e4:	2f78      	cmp	r7, #120	@ 0x78
 80065e6:	4691      	mov	r9, r2
 80065e8:	4680      	mov	r8, r0
 80065ea:	460c      	mov	r4, r1
 80065ec:	469a      	mov	sl, r3
 80065ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065f2:	d807      	bhi.n	8006604 <_printf_i+0x28>
 80065f4:	2f62      	cmp	r7, #98	@ 0x62
 80065f6:	d80a      	bhi.n	800660e <_printf_i+0x32>
 80065f8:	2f00      	cmp	r7, #0
 80065fa:	f000 80d2 	beq.w	80067a2 <_printf_i+0x1c6>
 80065fe:	2f58      	cmp	r7, #88	@ 0x58
 8006600:	f000 80b9 	beq.w	8006776 <_printf_i+0x19a>
 8006604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800660c:	e03a      	b.n	8006684 <_printf_i+0xa8>
 800660e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006612:	2b15      	cmp	r3, #21
 8006614:	d8f6      	bhi.n	8006604 <_printf_i+0x28>
 8006616:	a101      	add	r1, pc, #4	@ (adr r1, 800661c <_printf_i+0x40>)
 8006618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800661c:	08006675 	.word	0x08006675
 8006620:	08006689 	.word	0x08006689
 8006624:	08006605 	.word	0x08006605
 8006628:	08006605 	.word	0x08006605
 800662c:	08006605 	.word	0x08006605
 8006630:	08006605 	.word	0x08006605
 8006634:	08006689 	.word	0x08006689
 8006638:	08006605 	.word	0x08006605
 800663c:	08006605 	.word	0x08006605
 8006640:	08006605 	.word	0x08006605
 8006644:	08006605 	.word	0x08006605
 8006648:	08006789 	.word	0x08006789
 800664c:	080066b3 	.word	0x080066b3
 8006650:	08006743 	.word	0x08006743
 8006654:	08006605 	.word	0x08006605
 8006658:	08006605 	.word	0x08006605
 800665c:	080067ab 	.word	0x080067ab
 8006660:	08006605 	.word	0x08006605
 8006664:	080066b3 	.word	0x080066b3
 8006668:	08006605 	.word	0x08006605
 800666c:	08006605 	.word	0x08006605
 8006670:	0800674b 	.word	0x0800674b
 8006674:	6833      	ldr	r3, [r6, #0]
 8006676:	1d1a      	adds	r2, r3, #4
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6032      	str	r2, [r6, #0]
 800667c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006684:	2301      	movs	r3, #1
 8006686:	e09d      	b.n	80067c4 <_printf_i+0x1e8>
 8006688:	6833      	ldr	r3, [r6, #0]
 800668a:	6820      	ldr	r0, [r4, #0]
 800668c:	1d19      	adds	r1, r3, #4
 800668e:	6031      	str	r1, [r6, #0]
 8006690:	0606      	lsls	r6, r0, #24
 8006692:	d501      	bpl.n	8006698 <_printf_i+0xbc>
 8006694:	681d      	ldr	r5, [r3, #0]
 8006696:	e003      	b.n	80066a0 <_printf_i+0xc4>
 8006698:	0645      	lsls	r5, r0, #25
 800669a:	d5fb      	bpl.n	8006694 <_printf_i+0xb8>
 800669c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	da03      	bge.n	80066ac <_printf_i+0xd0>
 80066a4:	232d      	movs	r3, #45	@ 0x2d
 80066a6:	426d      	negs	r5, r5
 80066a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066ac:	4859      	ldr	r0, [pc, #356]	@ (8006814 <_printf_i+0x238>)
 80066ae:	230a      	movs	r3, #10
 80066b0:	e011      	b.n	80066d6 <_printf_i+0xfa>
 80066b2:	6821      	ldr	r1, [r4, #0]
 80066b4:	6833      	ldr	r3, [r6, #0]
 80066b6:	0608      	lsls	r0, r1, #24
 80066b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80066bc:	d402      	bmi.n	80066c4 <_printf_i+0xe8>
 80066be:	0649      	lsls	r1, r1, #25
 80066c0:	bf48      	it	mi
 80066c2:	b2ad      	uxthmi	r5, r5
 80066c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066c6:	4853      	ldr	r0, [pc, #332]	@ (8006814 <_printf_i+0x238>)
 80066c8:	6033      	str	r3, [r6, #0]
 80066ca:	bf14      	ite	ne
 80066cc:	230a      	movne	r3, #10
 80066ce:	2308      	moveq	r3, #8
 80066d0:	2100      	movs	r1, #0
 80066d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066d6:	6866      	ldr	r6, [r4, #4]
 80066d8:	60a6      	str	r6, [r4, #8]
 80066da:	2e00      	cmp	r6, #0
 80066dc:	bfa2      	ittt	ge
 80066de:	6821      	ldrge	r1, [r4, #0]
 80066e0:	f021 0104 	bicge.w	r1, r1, #4
 80066e4:	6021      	strge	r1, [r4, #0]
 80066e6:	b90d      	cbnz	r5, 80066ec <_printf_i+0x110>
 80066e8:	2e00      	cmp	r6, #0
 80066ea:	d04b      	beq.n	8006784 <_printf_i+0x1a8>
 80066ec:	4616      	mov	r6, r2
 80066ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80066f2:	fb03 5711 	mls	r7, r3, r1, r5
 80066f6:	5dc7      	ldrb	r7, [r0, r7]
 80066f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066fc:	462f      	mov	r7, r5
 80066fe:	42bb      	cmp	r3, r7
 8006700:	460d      	mov	r5, r1
 8006702:	d9f4      	bls.n	80066ee <_printf_i+0x112>
 8006704:	2b08      	cmp	r3, #8
 8006706:	d10b      	bne.n	8006720 <_printf_i+0x144>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	07df      	lsls	r7, r3, #31
 800670c:	d508      	bpl.n	8006720 <_printf_i+0x144>
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	6861      	ldr	r1, [r4, #4]
 8006712:	4299      	cmp	r1, r3
 8006714:	bfde      	ittt	le
 8006716:	2330      	movle	r3, #48	@ 0x30
 8006718:	f806 3c01 	strble.w	r3, [r6, #-1]
 800671c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006720:	1b92      	subs	r2, r2, r6
 8006722:	6122      	str	r2, [r4, #16]
 8006724:	f8cd a000 	str.w	sl, [sp]
 8006728:	464b      	mov	r3, r9
 800672a:	aa03      	add	r2, sp, #12
 800672c:	4621      	mov	r1, r4
 800672e:	4640      	mov	r0, r8
 8006730:	f7ff fee6 	bl	8006500 <_printf_common>
 8006734:	3001      	adds	r0, #1
 8006736:	d14a      	bne.n	80067ce <_printf_i+0x1f2>
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	b004      	add	sp, #16
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	f043 0320 	orr.w	r3, r3, #32
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	4833      	ldr	r0, [pc, #204]	@ (8006818 <_printf_i+0x23c>)
 800674c:	2778      	movs	r7, #120	@ 0x78
 800674e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	6831      	ldr	r1, [r6, #0]
 8006756:	061f      	lsls	r7, r3, #24
 8006758:	f851 5b04 	ldr.w	r5, [r1], #4
 800675c:	d402      	bmi.n	8006764 <_printf_i+0x188>
 800675e:	065f      	lsls	r7, r3, #25
 8006760:	bf48      	it	mi
 8006762:	b2ad      	uxthmi	r5, r5
 8006764:	6031      	str	r1, [r6, #0]
 8006766:	07d9      	lsls	r1, r3, #31
 8006768:	bf44      	itt	mi
 800676a:	f043 0320 	orrmi.w	r3, r3, #32
 800676e:	6023      	strmi	r3, [r4, #0]
 8006770:	b11d      	cbz	r5, 800677a <_printf_i+0x19e>
 8006772:	2310      	movs	r3, #16
 8006774:	e7ac      	b.n	80066d0 <_printf_i+0xf4>
 8006776:	4827      	ldr	r0, [pc, #156]	@ (8006814 <_printf_i+0x238>)
 8006778:	e7e9      	b.n	800674e <_printf_i+0x172>
 800677a:	6823      	ldr	r3, [r4, #0]
 800677c:	f023 0320 	bic.w	r3, r3, #32
 8006780:	6023      	str	r3, [r4, #0]
 8006782:	e7f6      	b.n	8006772 <_printf_i+0x196>
 8006784:	4616      	mov	r6, r2
 8006786:	e7bd      	b.n	8006704 <_printf_i+0x128>
 8006788:	6833      	ldr	r3, [r6, #0]
 800678a:	6825      	ldr	r5, [r4, #0]
 800678c:	6961      	ldr	r1, [r4, #20]
 800678e:	1d18      	adds	r0, r3, #4
 8006790:	6030      	str	r0, [r6, #0]
 8006792:	062e      	lsls	r6, r5, #24
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	d501      	bpl.n	800679c <_printf_i+0x1c0>
 8006798:	6019      	str	r1, [r3, #0]
 800679a:	e002      	b.n	80067a2 <_printf_i+0x1c6>
 800679c:	0668      	lsls	r0, r5, #25
 800679e:	d5fb      	bpl.n	8006798 <_printf_i+0x1bc>
 80067a0:	8019      	strh	r1, [r3, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	4616      	mov	r6, r2
 80067a8:	e7bc      	b.n	8006724 <_printf_i+0x148>
 80067aa:	6833      	ldr	r3, [r6, #0]
 80067ac:	1d1a      	adds	r2, r3, #4
 80067ae:	6032      	str	r2, [r6, #0]
 80067b0:	681e      	ldr	r6, [r3, #0]
 80067b2:	6862      	ldr	r2, [r4, #4]
 80067b4:	2100      	movs	r1, #0
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7f9 fd12 	bl	80001e0 <memchr>
 80067bc:	b108      	cbz	r0, 80067c2 <_printf_i+0x1e6>
 80067be:	1b80      	subs	r0, r0, r6
 80067c0:	6060      	str	r0, [r4, #4]
 80067c2:	6863      	ldr	r3, [r4, #4]
 80067c4:	6123      	str	r3, [r4, #16]
 80067c6:	2300      	movs	r3, #0
 80067c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067cc:	e7aa      	b.n	8006724 <_printf_i+0x148>
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	4632      	mov	r2, r6
 80067d2:	4649      	mov	r1, r9
 80067d4:	4640      	mov	r0, r8
 80067d6:	47d0      	blx	sl
 80067d8:	3001      	adds	r0, #1
 80067da:	d0ad      	beq.n	8006738 <_printf_i+0x15c>
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	079b      	lsls	r3, r3, #30
 80067e0:	d413      	bmi.n	800680a <_printf_i+0x22e>
 80067e2:	68e0      	ldr	r0, [r4, #12]
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	4298      	cmp	r0, r3
 80067e8:	bfb8      	it	lt
 80067ea:	4618      	movlt	r0, r3
 80067ec:	e7a6      	b.n	800673c <_printf_i+0x160>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4632      	mov	r2, r6
 80067f2:	4649      	mov	r1, r9
 80067f4:	4640      	mov	r0, r8
 80067f6:	47d0      	blx	sl
 80067f8:	3001      	adds	r0, #1
 80067fa:	d09d      	beq.n	8006738 <_printf_i+0x15c>
 80067fc:	3501      	adds	r5, #1
 80067fe:	68e3      	ldr	r3, [r4, #12]
 8006800:	9903      	ldr	r1, [sp, #12]
 8006802:	1a5b      	subs	r3, r3, r1
 8006804:	42ab      	cmp	r3, r5
 8006806:	dcf2      	bgt.n	80067ee <_printf_i+0x212>
 8006808:	e7eb      	b.n	80067e2 <_printf_i+0x206>
 800680a:	2500      	movs	r5, #0
 800680c:	f104 0619 	add.w	r6, r4, #25
 8006810:	e7f5      	b.n	80067fe <_printf_i+0x222>
 8006812:	bf00      	nop
 8006814:	08006c41 	.word	0x08006c41
 8006818:	08006c52 	.word	0x08006c52

0800681c <__sflush_r>:
 800681c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006824:	0716      	lsls	r6, r2, #28
 8006826:	4605      	mov	r5, r0
 8006828:	460c      	mov	r4, r1
 800682a:	d454      	bmi.n	80068d6 <__sflush_r+0xba>
 800682c:	684b      	ldr	r3, [r1, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	dc02      	bgt.n	8006838 <__sflush_r+0x1c>
 8006832:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	dd48      	ble.n	80068ca <__sflush_r+0xae>
 8006838:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800683a:	2e00      	cmp	r6, #0
 800683c:	d045      	beq.n	80068ca <__sflush_r+0xae>
 800683e:	2300      	movs	r3, #0
 8006840:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006844:	682f      	ldr	r7, [r5, #0]
 8006846:	6a21      	ldr	r1, [r4, #32]
 8006848:	602b      	str	r3, [r5, #0]
 800684a:	d030      	beq.n	80068ae <__sflush_r+0x92>
 800684c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800684e:	89a3      	ldrh	r3, [r4, #12]
 8006850:	0759      	lsls	r1, r3, #29
 8006852:	d505      	bpl.n	8006860 <__sflush_r+0x44>
 8006854:	6863      	ldr	r3, [r4, #4]
 8006856:	1ad2      	subs	r2, r2, r3
 8006858:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800685a:	b10b      	cbz	r3, 8006860 <__sflush_r+0x44>
 800685c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800685e:	1ad2      	subs	r2, r2, r3
 8006860:	2300      	movs	r3, #0
 8006862:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006864:	6a21      	ldr	r1, [r4, #32]
 8006866:	4628      	mov	r0, r5
 8006868:	47b0      	blx	r6
 800686a:	1c43      	adds	r3, r0, #1
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	d106      	bne.n	800687e <__sflush_r+0x62>
 8006870:	6829      	ldr	r1, [r5, #0]
 8006872:	291d      	cmp	r1, #29
 8006874:	d82b      	bhi.n	80068ce <__sflush_r+0xb2>
 8006876:	4a2a      	ldr	r2, [pc, #168]	@ (8006920 <__sflush_r+0x104>)
 8006878:	410a      	asrs	r2, r1
 800687a:	07d6      	lsls	r6, r2, #31
 800687c:	d427      	bmi.n	80068ce <__sflush_r+0xb2>
 800687e:	2200      	movs	r2, #0
 8006880:	6062      	str	r2, [r4, #4]
 8006882:	04d9      	lsls	r1, r3, #19
 8006884:	6922      	ldr	r2, [r4, #16]
 8006886:	6022      	str	r2, [r4, #0]
 8006888:	d504      	bpl.n	8006894 <__sflush_r+0x78>
 800688a:	1c42      	adds	r2, r0, #1
 800688c:	d101      	bne.n	8006892 <__sflush_r+0x76>
 800688e:	682b      	ldr	r3, [r5, #0]
 8006890:	b903      	cbnz	r3, 8006894 <__sflush_r+0x78>
 8006892:	6560      	str	r0, [r4, #84]	@ 0x54
 8006894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006896:	602f      	str	r7, [r5, #0]
 8006898:	b1b9      	cbz	r1, 80068ca <__sflush_r+0xae>
 800689a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800689e:	4299      	cmp	r1, r3
 80068a0:	d002      	beq.n	80068a8 <__sflush_r+0x8c>
 80068a2:	4628      	mov	r0, r5
 80068a4:	f7ff fbea 	bl	800607c <_free_r>
 80068a8:	2300      	movs	r3, #0
 80068aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80068ac:	e00d      	b.n	80068ca <__sflush_r+0xae>
 80068ae:	2301      	movs	r3, #1
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b0      	blx	r6
 80068b4:	4602      	mov	r2, r0
 80068b6:	1c50      	adds	r0, r2, #1
 80068b8:	d1c9      	bne.n	800684e <__sflush_r+0x32>
 80068ba:	682b      	ldr	r3, [r5, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0c6      	beq.n	800684e <__sflush_r+0x32>
 80068c0:	2b1d      	cmp	r3, #29
 80068c2:	d001      	beq.n	80068c8 <__sflush_r+0xac>
 80068c4:	2b16      	cmp	r3, #22
 80068c6:	d11e      	bne.n	8006906 <__sflush_r+0xea>
 80068c8:	602f      	str	r7, [r5, #0]
 80068ca:	2000      	movs	r0, #0
 80068cc:	e022      	b.n	8006914 <__sflush_r+0xf8>
 80068ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068d2:	b21b      	sxth	r3, r3
 80068d4:	e01b      	b.n	800690e <__sflush_r+0xf2>
 80068d6:	690f      	ldr	r7, [r1, #16]
 80068d8:	2f00      	cmp	r7, #0
 80068da:	d0f6      	beq.n	80068ca <__sflush_r+0xae>
 80068dc:	0793      	lsls	r3, r2, #30
 80068de:	680e      	ldr	r6, [r1, #0]
 80068e0:	bf08      	it	eq
 80068e2:	694b      	ldreq	r3, [r1, #20]
 80068e4:	600f      	str	r7, [r1, #0]
 80068e6:	bf18      	it	ne
 80068e8:	2300      	movne	r3, #0
 80068ea:	eba6 0807 	sub.w	r8, r6, r7
 80068ee:	608b      	str	r3, [r1, #8]
 80068f0:	f1b8 0f00 	cmp.w	r8, #0
 80068f4:	dde9      	ble.n	80068ca <__sflush_r+0xae>
 80068f6:	6a21      	ldr	r1, [r4, #32]
 80068f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80068fa:	4643      	mov	r3, r8
 80068fc:	463a      	mov	r2, r7
 80068fe:	4628      	mov	r0, r5
 8006900:	47b0      	blx	r6
 8006902:	2800      	cmp	r0, #0
 8006904:	dc08      	bgt.n	8006918 <__sflush_r+0xfc>
 8006906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800690a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006918:	4407      	add	r7, r0
 800691a:	eba8 0800 	sub.w	r8, r8, r0
 800691e:	e7e7      	b.n	80068f0 <__sflush_r+0xd4>
 8006920:	dfbffffe 	.word	0xdfbffffe

08006924 <_fflush_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	690b      	ldr	r3, [r1, #16]
 8006928:	4605      	mov	r5, r0
 800692a:	460c      	mov	r4, r1
 800692c:	b913      	cbnz	r3, 8006934 <_fflush_r+0x10>
 800692e:	2500      	movs	r5, #0
 8006930:	4628      	mov	r0, r5
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	b118      	cbz	r0, 800693e <_fflush_r+0x1a>
 8006936:	6a03      	ldr	r3, [r0, #32]
 8006938:	b90b      	cbnz	r3, 800693e <_fflush_r+0x1a>
 800693a:	f7ff f80b 	bl	8005954 <__sinit>
 800693e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f3      	beq.n	800692e <_fflush_r+0xa>
 8006946:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006948:	07d0      	lsls	r0, r2, #31
 800694a:	d404      	bmi.n	8006956 <_fflush_r+0x32>
 800694c:	0599      	lsls	r1, r3, #22
 800694e:	d402      	bmi.n	8006956 <_fflush_r+0x32>
 8006950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006952:	f7ff fb82 	bl	800605a <__retarget_lock_acquire_recursive>
 8006956:	4628      	mov	r0, r5
 8006958:	4621      	mov	r1, r4
 800695a:	f7ff ff5f 	bl	800681c <__sflush_r>
 800695e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006960:	07da      	lsls	r2, r3, #31
 8006962:	4605      	mov	r5, r0
 8006964:	d4e4      	bmi.n	8006930 <_fflush_r+0xc>
 8006966:	89a3      	ldrh	r3, [r4, #12]
 8006968:	059b      	lsls	r3, r3, #22
 800696a:	d4e1      	bmi.n	8006930 <_fflush_r+0xc>
 800696c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800696e:	f7ff fb75 	bl	800605c <__retarget_lock_release_recursive>
 8006972:	e7dd      	b.n	8006930 <_fflush_r+0xc>

08006974 <__swhatbuf_r>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	460c      	mov	r4, r1
 8006978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697c:	2900      	cmp	r1, #0
 800697e:	b096      	sub	sp, #88	@ 0x58
 8006980:	4615      	mov	r5, r2
 8006982:	461e      	mov	r6, r3
 8006984:	da0d      	bge.n	80069a2 <__swhatbuf_r+0x2e>
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800698c:	f04f 0100 	mov.w	r1, #0
 8006990:	bf14      	ite	ne
 8006992:	2340      	movne	r3, #64	@ 0x40
 8006994:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006998:	2000      	movs	r0, #0
 800699a:	6031      	str	r1, [r6, #0]
 800699c:	602b      	str	r3, [r5, #0]
 800699e:	b016      	add	sp, #88	@ 0x58
 80069a0:	bd70      	pop	{r4, r5, r6, pc}
 80069a2:	466a      	mov	r2, sp
 80069a4:	f000 f848 	bl	8006a38 <_fstat_r>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	dbec      	blt.n	8006986 <__swhatbuf_r+0x12>
 80069ac:	9901      	ldr	r1, [sp, #4]
 80069ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80069b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80069b6:	4259      	negs	r1, r3
 80069b8:	4159      	adcs	r1, r3
 80069ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80069be:	e7eb      	b.n	8006998 <__swhatbuf_r+0x24>

080069c0 <__smakebuf_r>:
 80069c0:	898b      	ldrh	r3, [r1, #12]
 80069c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c4:	079d      	lsls	r5, r3, #30
 80069c6:	4606      	mov	r6, r0
 80069c8:	460c      	mov	r4, r1
 80069ca:	d507      	bpl.n	80069dc <__smakebuf_r+0x1c>
 80069cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	6123      	str	r3, [r4, #16]
 80069d4:	2301      	movs	r3, #1
 80069d6:	6163      	str	r3, [r4, #20]
 80069d8:	b003      	add	sp, #12
 80069da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069dc:	ab01      	add	r3, sp, #4
 80069de:	466a      	mov	r2, sp
 80069e0:	f7ff ffc8 	bl	8006974 <__swhatbuf_r>
 80069e4:	9f00      	ldr	r7, [sp, #0]
 80069e6:	4605      	mov	r5, r0
 80069e8:	4639      	mov	r1, r7
 80069ea:	4630      	mov	r0, r6
 80069ec:	f7ff fbba 	bl	8006164 <_malloc_r>
 80069f0:	b948      	cbnz	r0, 8006a06 <__smakebuf_r+0x46>
 80069f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f6:	059a      	lsls	r2, r3, #22
 80069f8:	d4ee      	bmi.n	80069d8 <__smakebuf_r+0x18>
 80069fa:	f023 0303 	bic.w	r3, r3, #3
 80069fe:	f043 0302 	orr.w	r3, r3, #2
 8006a02:	81a3      	strh	r3, [r4, #12]
 8006a04:	e7e2      	b.n	80069cc <__smakebuf_r+0xc>
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	6020      	str	r0, [r4, #0]
 8006a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a0e:	81a3      	strh	r3, [r4, #12]
 8006a10:	9b01      	ldr	r3, [sp, #4]
 8006a12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006a16:	b15b      	cbz	r3, 8006a30 <__smakebuf_r+0x70>
 8006a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 f81d 	bl	8006a5c <_isatty_r>
 8006a22:	b128      	cbz	r0, 8006a30 <__smakebuf_r+0x70>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	431d      	orrs	r5, r3
 8006a34:	81a5      	strh	r5, [r4, #12]
 8006a36:	e7cf      	b.n	80069d8 <__smakebuf_r+0x18>

08006a38 <_fstat_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	4d07      	ldr	r5, [pc, #28]	@ (8006a58 <_fstat_r+0x20>)
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4604      	mov	r4, r0
 8006a40:	4608      	mov	r0, r1
 8006a42:	4611      	mov	r1, r2
 8006a44:	602b      	str	r3, [r5, #0]
 8006a46:	f7fa fe49 	bl	80016dc <_fstat>
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	d102      	bne.n	8006a54 <_fstat_r+0x1c>
 8006a4e:	682b      	ldr	r3, [r5, #0]
 8006a50:	b103      	cbz	r3, 8006a54 <_fstat_r+0x1c>
 8006a52:	6023      	str	r3, [r4, #0]
 8006a54:	bd38      	pop	{r3, r4, r5, pc}
 8006a56:	bf00      	nop
 8006a58:	2000435c 	.word	0x2000435c

08006a5c <_isatty_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4d06      	ldr	r5, [pc, #24]	@ (8006a78 <_isatty_r+0x1c>)
 8006a60:	2300      	movs	r3, #0
 8006a62:	4604      	mov	r4, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	602b      	str	r3, [r5, #0]
 8006a68:	f7fa fda6 	bl	80015b8 <_isatty>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_isatty_r+0x1a>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_isatty_r+0x1a>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	2000435c 	.word	0x2000435c

08006a7c <_sbrk_r>:
 8006a7c:	b538      	push	{r3, r4, r5, lr}
 8006a7e:	4d06      	ldr	r5, [pc, #24]	@ (8006a98 <_sbrk_r+0x1c>)
 8006a80:	2300      	movs	r3, #0
 8006a82:	4604      	mov	r4, r0
 8006a84:	4608      	mov	r0, r1
 8006a86:	602b      	str	r3, [r5, #0]
 8006a88:	f7fa ff9e 	bl	80019c8 <_sbrk>
 8006a8c:	1c43      	adds	r3, r0, #1
 8006a8e:	d102      	bne.n	8006a96 <_sbrk_r+0x1a>
 8006a90:	682b      	ldr	r3, [r5, #0]
 8006a92:	b103      	cbz	r3, 8006a96 <_sbrk_r+0x1a>
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	2000435c 	.word	0x2000435c

08006a9c <_init>:
 8006a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9e:	bf00      	nop
 8006aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aa2:	bc08      	pop	{r3}
 8006aa4:	469e      	mov	lr, r3
 8006aa6:	4770      	bx	lr

08006aa8 <_fini>:
 8006aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aaa:	bf00      	nop
 8006aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aae:	bc08      	pop	{r3}
 8006ab0:	469e      	mov	lr, r3
 8006ab2:	4770      	bx	lr
