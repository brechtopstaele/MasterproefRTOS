
Aether_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000673c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a7c  08006a7c  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08006a7c  08006a7c  00016a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a84  08006a84  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a84  08006a84  00016a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a88  08006a88  00016a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08006a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042cc  200000a4  08006b30  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000718  20004370  08006b30  00024370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015bae  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003641  00000000  00000000  00035cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001300  00000000  00000000  00039308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eaa  00000000  00000000  0003a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ab5  00000000  00000000  0003b4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001651a  00000000  00000000  00054f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099017  00000000  00000000  0006b481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056b0  00000000  00000000  00104498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00109b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068c4 	.word	0x080068c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	080068c4 	.word	0x080068c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000592:	2306      	movs	r3, #6
 8000594:	847b      	strh	r3, [r7, #34]	; 0x22
 8000596:	2306      	movs	r3, #6
 8000598:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	83fb      	strh	r3, [r7, #30]
 80005a2:	2300      	movs	r3, #0
 80005a4:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80005a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005aa:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80005b0:	4ba1      	ldr	r3, [pc, #644]	; (8000838 <EE_Init+0x2ac>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80005b6:	4ba1      	ldr	r3, [pc, #644]	; (800083c <EE_Init+0x2b0>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80005bc:	2300      	movs	r3, #0
 80005be:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80005c0:	2302      	movs	r3, #2
 80005c2:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80005cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80005ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d00b      	beq.n	80005ee <EE_Init+0x62>
 80005d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005da:	f280 8196 	bge.w	800090a <EE_Init+0x37e>
 80005de:	2b00      	cmp	r3, #0
 80005e0:	f000 80f8 	beq.w	80007d4 <EE_Init+0x248>
 80005e4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d050      	beq.n	800068e <EE_Init+0x102>
 80005ec:	e18d      	b.n	800090a <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80005ee:	8c3b      	ldrh	r3, [r7, #32]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d116      	bne.n	8000622 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80005f4:	4890      	ldr	r0, [pc, #576]	; (8000838 <EE_Init+0x2ac>)
 80005f6:	f000 f9a9 	bl	800094c <EE_VerifyPageFullyErased>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	f040 818e 	bne.w	800091e <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000602:	f107 0214 	add.w	r2, r7, #20
 8000606:	463b      	mov	r3, r7
 8000608:	4611      	mov	r1, r2
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fd58 	bl	80020c0 <HAL_FLASHEx_Erase>
 8000610:	4603      	mov	r3, r0
 8000612:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000614:	7efb      	ldrb	r3, [r7, #27]
 8000616:	2b00      	cmp	r3, #0
 8000618:	f000 8181 	beq.w	800091e <EE_Init+0x392>
          {
            return FlashStatus;
 800061c:	7efb      	ldrb	r3, [r7, #27]
 800061e:	b29b      	uxth	r3, r3
 8000620:	e185      	b.n	800092e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000622:	8c3b      	ldrh	r3, [r7, #32]
 8000624:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000628:	4293      	cmp	r3, r2
 800062a:	d125      	bne.n	8000678 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800062c:	4882      	ldr	r0, [pc, #520]	; (8000838 <EE_Init+0x2ac>)
 800062e:	f000 f98d 	bl	800094c <EE_VerifyPageFullyErased>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10e      	bne.n	8000656 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000638:	f107 0214 	add.w	r2, r7, #20
 800063c:	463b      	mov	r3, r7
 800063e:	4611      	mov	r1, r2
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fd3d 	bl	80020c0 <HAL_FLASHEx_Erase>
 8000646:	4603      	mov	r3, r0
 8000648:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800064a:	7efb      	ldrb	r3, [r7, #27]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <EE_Init+0xca>
          {
            return FlashStatus;
 8000650:	7efb      	ldrb	r3, [r7, #27]
 8000652:	b29b      	uxth	r3, r3
 8000654:	e16b      	b.n	800092e <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000656:	f04f 0200 	mov.w	r2, #0
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	4977      	ldr	r1, [pc, #476]	; (800083c <EE_Init+0x2b0>)
 8000660:	2001      	movs	r0, #1
 8000662:	f001 fb77 	bl	8001d54 <HAL_FLASH_Program>
 8000666:	4603      	mov	r3, r0
 8000668:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800066a:	7efb      	ldrb	r3, [r7, #27]
 800066c:	2b00      	cmp	r3, #0
 800066e:	f000 8156 	beq.w	800091e <EE_Init+0x392>
        {
          return FlashStatus;
 8000672:	7efb      	ldrb	r3, [r7, #27]
 8000674:	b29b      	uxth	r3, r3
 8000676:	e15a      	b.n	800092e <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000678:	f000 f9fe 	bl	8000a78 <EE_Format>
 800067c:	4603      	mov	r3, r0
 800067e:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000680:	7efb      	ldrb	r3, [r7, #27]
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 814b 	beq.w	800091e <EE_Init+0x392>
        {
          return FlashStatus;
 8000688:	7efb      	ldrb	r3, [r7, #27]
 800068a:	b29b      	uxth	r3, r3
 800068c:	e14f      	b.n	800092e <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800068e:	8c3b      	ldrh	r3, [r7, #32]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d163      	bne.n	800075c <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000694:	2300      	movs	r3, #0
 8000696:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000698:	e030      	b.n	80006fc <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800069a:	4b69      	ldr	r3, [pc, #420]	; (8000840 <EE_Init+0x2b4>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006a2:	4968      	ldr	r1, [pc, #416]	; (8000844 <EE_Init+0x2b8>)
 80006a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d101      	bne.n	80006b0 <EE_Init+0x124>
          {
            x = VarIdx;
 80006ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ae:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80006b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80006b2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d01d      	beq.n	80006f6 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80006ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006bc:	4a61      	ldr	r2, [pc, #388]	; (8000844 <EE_Init+0x2b8>)
 80006be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c2:	4961      	ldr	r1, [pc, #388]	; (8000848 <EE_Init+0x2bc>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f96b 	bl	80009a0 <EE_ReadVariable>
 80006ca:	4603      	mov	r3, r0
 80006cc:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80006ce:	8bbb      	ldrh	r3, [r7, #28]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d010      	beq.n	80006f6 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80006d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006d6:	4a5b      	ldr	r2, [pc, #364]	; (8000844 <EE_Init+0x2b8>)
 80006d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006dc:	4a5a      	ldr	r2, [pc, #360]	; (8000848 <EE_Init+0x2bc>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	4611      	mov	r1, r2
 80006e2:	4618      	mov	r0, r3
 80006e4:	f000 fa60 	bl	8000ba8 <EE_VerifyPageFullWriteVariable>
 80006e8:	4603      	mov	r3, r0
 80006ea:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80006ec:	8bfb      	ldrh	r3, [r7, #30]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <EE_Init+0x16a>
              {
                return EepromStatus;
 80006f2:	8bfb      	ldrh	r3, [r7, #30]
 80006f4:	e11b      	b.n	800092e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80006f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006f8:	3301      	adds	r3, #1
 80006fa:	84fb      	strh	r3, [r7, #38]	; 0x26
 80006fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006fe:	2b1a      	cmp	r3, #26
 8000700:	d9cb      	bls.n	800069a <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000702:	f04f 0200 	mov.w	r2, #0
 8000706:	f04f 0300 	mov.w	r3, #0
 800070a:	494b      	ldr	r1, [pc, #300]	; (8000838 <EE_Init+0x2ac>)
 800070c:	2001      	movs	r0, #1
 800070e:	f001 fb21 	bl	8001d54 <HAL_FLASH_Program>
 8000712:	4603      	mov	r3, r0
 8000714:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000716:	7efb      	ldrb	r3, [r7, #27]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <EE_Init+0x196>
        {
          return FlashStatus;
 800071c:	7efb      	ldrb	r3, [r7, #27]
 800071e:	b29b      	uxth	r3, r3
 8000720:	e105      	b.n	800092e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8000722:	2303      	movs	r3, #3
 8000724:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000726:	2301      	movs	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800072a:	2302      	movs	r3, #2
 800072c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800072e:	4843      	ldr	r0, [pc, #268]	; (800083c <EE_Init+0x2b0>)
 8000730:	f000 f90c 	bl	800094c <EE_VerifyPageFullyErased>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	f040 80f3 	bne.w	8000922 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800073c:	f107 0214 	add.w	r2, r7, #20
 8000740:	463b      	mov	r3, r7
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fcbb 	bl	80020c0 <HAL_FLASHEx_Erase>
 800074a:	4603      	mov	r3, r0
 800074c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800074e:	7efb      	ldrb	r3, [r7, #27]
 8000750:	2b00      	cmp	r3, #0
 8000752:	f000 80e6 	beq.w	8000922 <EE_Init+0x396>
          {
            return FlashStatus;
 8000756:	7efb      	ldrb	r3, [r7, #27]
 8000758:	b29b      	uxth	r3, r3
 800075a:	e0e8      	b.n	800092e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800075c:	8c3b      	ldrh	r3, [r7, #32]
 800075e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000762:	4293      	cmp	r3, r2
 8000764:	d12b      	bne.n	80007be <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 8000766:	2303      	movs	r3, #3
 8000768:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000772:	4832      	ldr	r0, [pc, #200]	; (800083c <EE_Init+0x2b0>)
 8000774:	f000 f8ea 	bl	800094c <EE_VerifyPageFullyErased>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d10e      	bne.n	800079c <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800077e:	f107 0214 	add.w	r2, r7, #20
 8000782:	463b      	mov	r3, r7
 8000784:	4611      	mov	r1, r2
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fc9a 	bl	80020c0 <HAL_FLASHEx_Erase>
 800078c:	4603      	mov	r3, r0
 800078e:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000790:	7efb      	ldrb	r3, [r7, #27]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d002      	beq.n	800079c <EE_Init+0x210>
          {
            return FlashStatus;
 8000796:	7efb      	ldrb	r3, [r7, #27]
 8000798:	b29b      	uxth	r3, r3
 800079a:	e0c8      	b.n	800092e <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800079c:	f04f 0200 	mov.w	r2, #0
 80007a0:	f04f 0300 	mov.w	r3, #0
 80007a4:	4924      	ldr	r1, [pc, #144]	; (8000838 <EE_Init+0x2ac>)
 80007a6:	2001      	movs	r0, #1
 80007a8:	f001 fad4 	bl	8001d54 <HAL_FLASH_Program>
 80007ac:	4603      	mov	r3, r0
 80007ae:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007b0:	7efb      	ldrb	r3, [r7, #27]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	f000 80b5 	beq.w	8000922 <EE_Init+0x396>
        {
          return FlashStatus;
 80007b8:	7efb      	ldrb	r3, [r7, #27]
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	e0b7      	b.n	800092e <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80007be:	f000 f95b 	bl	8000a78 <EE_Format>
 80007c2:	4603      	mov	r3, r0
 80007c4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007c6:	7efb      	ldrb	r3, [r7, #27]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	f000 80aa 	beq.w	8000922 <EE_Init+0x396>
        {
          return FlashStatus;
 80007ce:	7efb      	ldrb	r3, [r7, #27]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	e0ac      	b.n	800092e <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80007d4:	8c3b      	ldrh	r3, [r7, #32]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d10a      	bne.n	80007f0 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80007da:	f000 f94d 	bl	8000a78 <EE_Format>
 80007de:	4603      	mov	r3, r0
 80007e0:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007e2:	7efb      	ldrb	r3, [r7, #27]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	f000 809e 	beq.w	8000926 <EE_Init+0x39a>
        {
          return FlashStatus;
 80007ea:	7efb      	ldrb	r3, [r7, #27]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	e09e      	b.n	800092e <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80007f0:	8c3b      	ldrh	r3, [r7, #32]
 80007f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d11b      	bne.n	8000832 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 80007fa:	2303      	movs	r3, #3
 80007fc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000802:	2302      	movs	r3, #2
 8000804:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <EE_Init+0x2b0>)
 8000808:	f000 f8a0 	bl	800094c <EE_VerifyPageFullyErased>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	f040 8089 	bne.w	8000926 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000814:	f107 0214 	add.w	r2, r7, #20
 8000818:	463b      	mov	r3, r7
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fc4f 	bl	80020c0 <HAL_FLASHEx_Erase>
 8000822:	4603      	mov	r3, r0
 8000824:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000826:	7efb      	ldrb	r3, [r7, #27]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d07c      	beq.n	8000926 <EE_Init+0x39a>
          {
            return FlashStatus;
 800082c:	7efb      	ldrb	r3, [r7, #27]
 800082e:	b29b      	uxth	r3, r3
 8000830:	e07d      	b.n	800092e <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000832:	2300      	movs	r3, #0
 8000834:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000836:	e03a      	b.n	80008ae <EE_Init+0x322>
 8000838:	08008000 	.word	0x08008000
 800083c:	0800c000 	.word	0x0800c000
 8000840:	08008006 	.word	0x08008006
 8000844:	20000404 	.word	0x20000404
 8000848:	200000c0 	.word	0x200000c0
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <EE_Init+0x3ac>)
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	b29a      	uxth	r2, r3
 8000852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000854:	4939      	ldr	r1, [pc, #228]	; (800093c <EE_Init+0x3b0>)
 8000856:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800085a:	429a      	cmp	r2, r3
 800085c:	d101      	bne.n	8000862 <EE_Init+0x2d6>
          {
            x = VarIdx;
 800085e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000860:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 8000862:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000864:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000868:	429a      	cmp	r2, r3
 800086a:	d01d      	beq.n	80008a8 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800086c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800086e:	4a33      	ldr	r2, [pc, #204]	; (800093c <EE_Init+0x3b0>)
 8000870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000874:	4932      	ldr	r1, [pc, #200]	; (8000940 <EE_Init+0x3b4>)
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f892 	bl	80009a0 <EE_ReadVariable>
 800087c:	4603      	mov	r3, r0
 800087e:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000880:	8bbb      	ldrh	r3, [r7, #28]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d010      	beq.n	80008a8 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000886:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000888:	4a2c      	ldr	r2, [pc, #176]	; (800093c <EE_Init+0x3b0>)
 800088a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088e:	4a2c      	ldr	r2, [pc, #176]	; (8000940 <EE_Init+0x3b4>)
 8000890:	8812      	ldrh	r2, [r2, #0]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f000 f987 	bl	8000ba8 <EE_VerifyPageFullWriteVariable>
 800089a:	4603      	mov	r3, r0
 800089c:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800089e:	8bfb      	ldrh	r3, [r7, #30]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <EE_Init+0x31c>
              {
                return EepromStatus;
 80008a4:	8bfb      	ldrh	r3, [r7, #30]
 80008a6:	e042      	b.n	800092e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80008a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008aa:	3301      	adds	r3, #1
 80008ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 80008ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80008b0:	2b1a      	cmp	r3, #26
 80008b2:	d9cb      	bls.n	800084c <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80008b4:	f04f 0200 	mov.w	r2, #0
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	4921      	ldr	r1, [pc, #132]	; (8000944 <EE_Init+0x3b8>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f001 fa48 	bl	8001d54 <HAL_FLASH_Program>
 80008c4:	4603      	mov	r3, r0
 80008c6:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80008c8:	7efb      	ldrb	r3, [r7, #27]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <EE_Init+0x348>
        {
          return FlashStatus;
 80008ce:	7efb      	ldrb	r3, [r7, #27]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	e02c      	b.n	800092e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 80008d4:	2302      	movs	r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80008dc:	2302      	movs	r3, #2
 80008de:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80008e0:	4819      	ldr	r0, [pc, #100]	; (8000948 <EE_Init+0x3bc>)
 80008e2:	f000 f833 	bl	800094c <EE_VerifyPageFullyErased>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d11c      	bne.n	8000926 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80008ec:	f107 0214 	add.w	r2, r7, #20
 80008f0:	463b      	mov	r3, r7
 80008f2:	4611      	mov	r1, r2
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fbe3 	bl	80020c0 <HAL_FLASHEx_Erase>
 80008fa:	4603      	mov	r3, r0
 80008fc:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80008fe:	7efb      	ldrb	r3, [r7, #27]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d010      	beq.n	8000926 <EE_Init+0x39a>
          {
            return FlashStatus;
 8000904:	7efb      	ldrb	r3, [r7, #27]
 8000906:	b29b      	uxth	r3, r3
 8000908:	e011      	b.n	800092e <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800090a:	f000 f8b5 	bl	8000a78 <EE_Format>
 800090e:	4603      	mov	r3, r0
 8000910:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000912:	7efb      	ldrb	r3, [r7, #27]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d008      	beq.n	800092a <EE_Init+0x39e>
      {
        return FlashStatus;
 8000918:	7efb      	ldrb	r3, [r7, #27]
 800091a:	b29b      	uxth	r3, r3
 800091c:	e007      	b.n	800092e <EE_Init+0x3a2>
      break;
 800091e:	bf00      	nop
 8000920:	e004      	b.n	800092c <EE_Init+0x3a0>
      break;
 8000922:	bf00      	nop
 8000924:	e002      	b.n	800092c <EE_Init+0x3a0>
      break;
 8000926:	bf00      	nop
 8000928:	e000      	b.n	800092c <EE_Init+0x3a0>
      }
      break;
 800092a:	bf00      	nop
  }

  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	0800c006 	.word	0x0800c006
 800093c:	20000404 	.word	0x20000404
 8000940:	200000c0 	.word	0x200000c0
 8000944:	0800c000 	.word	0x0800c000
 8000948:	08008000 	.word	0x08008000

0800094c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800094c:	b480      	push	{r7}
 800094e:	b087      	sub	sp, #28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 800095c:	f245 5355 	movw	r3, #21845	; 0x5555
 8000960:	81fb      	strh	r3, [r7, #14]
    
  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 8000962:	e00d      	b.n	8000980 <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000970:	4293      	cmp	r3, r2
 8000972:	d002      	beq.n	800097a <EE_VerifyPageFullyErased+0x2e>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

      break;
 8000978:	e009      	b.n	800098e <EE_VerifyPageFullyErased+0x42>
    }
    /* Next address location */
    Address = Address + 4;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3304      	adds	r3, #4
 800097e:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 8000980:	693b      	ldr	r3, [r7, #16]
 8000982:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8000986:	333f      	adds	r3, #63	; 0x3f
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	429a      	cmp	r2, r3
 800098c:	d9ea      	bls.n	8000964 <EE_VerifyPageFullyErased+0x18>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	b29b      	uxth	r3, r3
}
 8000992:	4618      	mov	r0, r3
 8000994:	371c      	adds	r7, #28
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80009b0:	f245 5355 	movw	r3, #21845	; 0x5555
 80009b4:	81bb      	strh	r3, [r7, #12]
 80009b6:	2301      	movs	r3, #1
 80009b8:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <EE_ReadVariable+0x8c>)
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <EE_ReadVariable+0x8c>)
 80009c0:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f8aa 	bl	8000b1c <EE_FindValidPage>
 80009c8:	4603      	mov	r3, r0
 80009ca:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80009cc:	89fb      	ldrh	r3, [r7, #14]
 80009ce:	2bab      	cmp	r3, #171	; 0xab
 80009d0:	d101      	bne.n	80009d6 <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80009d2:	23ab      	movs	r3, #171	; 0xab
 80009d4:	e025      	b.n	8000a22 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80009dc:	3302      	adds	r3, #2
 80009de:	039b      	lsls	r3, r3, #14
 80009e0:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80009e2:	89fb      	ldrh	r3, [r7, #14]
 80009e4:	3301      	adds	r3, #1
 80009e6:	039a      	lsls	r2, r3, #14
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <EE_ReadVariable+0x90>)
 80009ea:	4413      	add	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80009ee:	e012      	b.n	8000a16 <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80009f6:	89ba      	ldrh	r2, [r7, #12]
 80009f8:	88fb      	ldrh	r3, [r7, #6]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d108      	bne.n	8000a10 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	3b02      	subs	r3, #2
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	b29a      	uxth	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	82fb      	strh	r3, [r7, #22]

      break;
 8000a0e:	e007      	b.n	8000a20 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	3b04      	subs	r3, #4
 8000a14:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	3302      	adds	r3, #2
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d8e7      	bhi.n	80009f0 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000a20:	8afb      	ldrh	r3, [r7, #22]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08008000 	.word	0x08008000
 8000a30:	08007ffe 	.word	0x08007ffe

08000a34 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	80fb      	strh	r3, [r7, #6]
 8000a40:	4613      	mov	r3, r2
 8000a42:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000a48:	88ba      	ldrh	r2, [r7, #4]
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f8aa 	bl	8000ba8 <EE_VerifyPageFullWriteVariable>
 8000a54:	4603      	mov	r3, r0
 8000a56:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000a58:	89fb      	ldrh	r3, [r7, #14]
 8000a5a:	2b80      	cmp	r3, #128	; 0x80
 8000a5c:	d107      	bne.n	8000a6e <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000a5e:	88ba      	ldrh	r2, [r7, #4]
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 f901 	bl	8000c6c <EE_PageTransfer>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000a92:	2302      	movs	r3, #2
 8000a94:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000a96:	481f      	ldr	r0, [pc, #124]	; (8000b14 <EE_Format+0x9c>)
 8000a98:	f7ff ff58 	bl	800094c <EE_VerifyPageFullyErased>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10d      	bne.n	8000abe <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000aa2:	f107 0218 	add.w	r2, r7, #24
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fb08 	bl	80020c0 <HAL_FLASHEx_Erase>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000ab4:	7ffb      	ldrb	r3, [r7, #31]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <EE_Format+0x46>
    {
      return FlashStatus;
 8000aba:	7ffb      	ldrb	r3, [r7, #31]
 8000abc:	e025      	b.n	8000b0a <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	f04f 0300 	mov.w	r3, #0
 8000ac6:	4913      	ldr	r1, [pc, #76]	; (8000b14 <EE_Format+0x9c>)
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f001 f943 	bl	8001d54 <HAL_FLASH_Program>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000ad2:	7ffb      	ldrb	r3, [r7, #31]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <EE_Format+0x64>
  {
    return FlashStatus;
 8000ad8:	7ffb      	ldrb	r3, [r7, #31]
 8000ada:	e016      	b.n	8000b0a <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000adc:	2303      	movs	r3, #3
 8000ade:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <EE_Format+0xa0>)
 8000ae2:	f7ff ff33 	bl	800094c <EE_VerifyPageFullyErased>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d10d      	bne.n	8000b08 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000aec:	f107 0218 	add.w	r2, r7, #24
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fae3 	bl	80020c0 <HAL_FLASHEx_Erase>
 8000afa:	4603      	mov	r3, r0
 8000afc:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000afe:	7ffb      	ldrb	r3, [r7, #31]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <EE_Format+0x90>
    {
      return FlashStatus;
 8000b04:	7ffb      	ldrb	r3, [r7, #31]
 8000b06:	e000      	b.n	8000b0a <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	08008000 	.word	0x08008000
 8000b18:	0800c000 	.word	0x0800c000

08000b1c <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000b26:	2306      	movs	r3, #6
 8000b28:	81fb      	strh	r3, [r7, #14]
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <EE_FindValidPage+0x84>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <EE_FindValidPage+0x88>)
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d01b      	beq.n	8000b78 <EE_FindValidPage+0x5c>
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d125      	bne.n	8000b90 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000b44:	89bb      	ldrh	r3, [r7, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d108      	bne.n	8000b5c <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000b4a:	89fb      	ldrh	r3, [r7, #14]
 8000b4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d101      	bne.n	8000b58 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000b54:	2300      	movs	r3, #0
 8000b56:	e01c      	b.n	8000b92 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e01a      	b.n	8000b92 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d108      	bne.n	8000b74 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000b62:	89bb      	ldrh	r3, [r7, #12]
 8000b64:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d101      	bne.n	8000b70 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e010      	b.n	8000b92 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000b70:	2300      	movs	r3, #0
 8000b72:	e00e      	b.n	8000b92 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000b74:	23ab      	movs	r3, #171	; 0xab
 8000b76:	e00c      	b.n	8000b92 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000b78:	89fb      	ldrh	r3, [r7, #14]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e007      	b.n	8000b92 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000b82:	89bb      	ldrh	r3, [r7, #12]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d101      	bne.n	8000b8c <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e002      	b.n	8000b92 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000b8c:	23ab      	movs	r3, #171	; 0xab
 8000b8e:	e000      	b.n	8000b92 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000b90:	2300      	movs	r3, #0
  }
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	08008000 	.word	0x08008000
 8000ba4:	0800c000 	.word	0x0800c000

08000ba8 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000ba8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	460a      	mov	r2, r1
 8000bb4:	80fb      	strh	r3, [r7, #6]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <EE_VerifyPageFullWriteVariable+0xb8>)
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <EE_VerifyPageFullWriteVariable+0xbc>)
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff ffa6 	bl	8000b1c <EE_FindValidPage>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000bd4:	8a3b      	ldrh	r3, [r7, #16]
 8000bd6:	2bab      	cmp	r3, #171	; 0xab
 8000bd8:	d101      	bne.n	8000bde <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000bda:	23ab      	movs	r3, #171	; 0xab
 8000bdc:	e03b      	b.n	8000c56 <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000bde:	8a3b      	ldrh	r3, [r7, #16]
 8000be0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000be4:	3302      	adds	r3, #2
 8000be6:	039b      	lsls	r3, r3, #14
 8000be8:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000bea:	8a3b      	ldrh	r3, [r7, #16]
 8000bec:	3301      	adds	r3, #1
 8000bee:	039a      	lsls	r2, r3, #14
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <EE_VerifyPageFullWriteVariable+0xc0>)
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000bf6:	e029      	b.n	8000c4c <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c00:	d121      	bne.n	8000c46 <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	461c      	mov	r4, r3
 8000c08:	4615      	mov	r5, r2
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	462b      	mov	r3, r5
 8000c0e:	6979      	ldr	r1, [r7, #20]
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 f89f 	bl	8001d54 <HAL_FLASH_Program>
 8000c16:	4603      	mov	r3, r0
 8000c18:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000c1a:	7cfb      	ldrb	r3, [r7, #19]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 8000c20:	7cfb      	ldrb	r3, [r7, #19]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	e017      	b.n	8000c56 <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	1c99      	adds	r1, r3, #2
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4698      	mov	r8, r3
 8000c30:	4691      	mov	r9, r2
 8000c32:	4642      	mov	r2, r8
 8000c34:	464b      	mov	r3, r9
 8000c36:	2001      	movs	r0, #1
 8000c38:	f001 f88c 	bl	8001d54 <HAL_FLASH_Program>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000c40:	7cfb      	ldrb	r3, [r7, #19]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	e007      	b.n	8000c56 <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d3d1      	bcc.n	8000bf8 <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000c54:	2380      	movs	r3, #128	; 0x80
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c60:	08008000 	.word	0x08008000
 8000c64:	0800c000 	.word	0x0800c000
 8000c68:	08007fff 	.word	0x08007fff

08000c6c <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	460a      	mov	r2, r1
 8000c76:	80fb      	strh	r3, [r7, #6]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000c82:	4b54      	ldr	r3, [pc, #336]	; (8000dd4 <EE_PageTransfer+0x168>)
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000c8e:	2300      	movs	r3, #0
 8000c90:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	847b      	strh	r3, [r7, #34]	; 0x22
 8000c96:	2300      	movs	r3, #0
 8000c98:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff ff3c 	bl	8000b1c <EE_FindValidPage>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000ca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d104      	bne.n	8000cb8 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000cae:	4b49      	ldr	r3, [pc, #292]	; (8000dd4 <EE_PageTransfer+0x168>)
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000cb6:	e009      	b.n	8000ccc <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d104      	bne.n	8000cc8 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000cbe:	4b46      	ldr	r3, [pc, #280]	; (8000dd8 <EE_PageTransfer+0x16c>)
 8000cc0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000cc6:	e001      	b.n	8000ccc <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000cc8:	23ab      	movs	r3, #171	; 0xab
 8000cca:	e07e      	b.n	8000dca <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000ccc:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	f001 f83c 	bl	8001d54 <HAL_FLASH_Program>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8000cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	e06b      	b.n	8000dca <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000cf2:	88ba      	ldrh	r2, [r7, #4]
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff55 	bl	8000ba8 <EE_VerifyPageFullWriteVariable>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000d02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8000d08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d0a:	e05e      	b.n	8000dca <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	853b      	strh	r3, [r7, #40]	; 0x28
 8000d10:	e027      	b.n	8000d62 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000d12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d14:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <EE_PageTransfer+0x170>)
 8000d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1a:	88fa      	ldrh	r2, [r7, #6]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d01d      	beq.n	8000d5c <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000d20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d22:	4a2e      	ldr	r2, [pc, #184]	; (8000ddc <EE_PageTransfer+0x170>)
 8000d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d28:	492d      	ldr	r1, [pc, #180]	; (8000de0 <EE_PageTransfer+0x174>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fe38 	bl	80009a0 <EE_ReadVariable>
 8000d30:	4603      	mov	r3, r0
 8000d32:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000d34:	8c3b      	ldrh	r3, [r7, #32]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d010      	beq.n	8000d5c <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000d3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d3c:	4a27      	ldr	r2, [pc, #156]	; (8000ddc <EE_PageTransfer+0x170>)
 8000d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d42:	4a27      	ldr	r2, [pc, #156]	; (8000de0 <EE_PageTransfer+0x174>)
 8000d44:	8812      	ldrh	r2, [r2, #0]
 8000d46:	4611      	mov	r1, r2
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff2d 	bl	8000ba8 <EE_VerifyPageFullWriteVariable>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000d52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000d58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d5a:	e036      	b.n	8000dca <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000d5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d5e:	3301      	adds	r3, #1
 8000d60:	853b      	strh	r3, [r7, #40]	; 0x28
 8000d62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d64:	2b1a      	cmp	r3, #26
 8000d66:	d9d4      	bls.n	8000d12 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000d6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000d6e:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000d78:	f107 021c 	add.w	r2, r7, #28
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 f99c 	bl	80020c0 <HAL_FLASHEx_Erase>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000d8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d003      	beq.n	8000d9e <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8000d96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	e015      	b.n	8000dca <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	f04f 0300 	mov.w	r3, #0
 8000da6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000da8:	2001      	movs	r0, #1
 8000daa:	f000 ffd3 	bl	8001d54 <HAL_FLASH_Program>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8000dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	e002      	b.n	8000dca <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dc8:	b29b      	uxth	r3, r3
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3730      	adds	r7, #48	; 0x30
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	08008000 	.word	0x08008000
 8000dd8:	0800c000 	.word	0x0800c000
 8000ddc:	20000404 	.word	0x20000404
 8000de0:	200000c0 	.word	0x200000c0

08000de4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000df4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <vApplicationGetIdleTaskMemory+0x30>)
 8000dfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2280      	movs	r2, #128	; 0x80
 8000e00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	200000c4 	.word	0x200000c4
 8000e14:	20000164 	.word	0x20000164

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f000 fe59 	bl	8001ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e22:	f000 f837 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e26:	f000 f931 	bl	800108c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e2a:	f000 f905 	bl	8001038 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e2e:	f000 f8b1 	bl	8000f94 <MX_TIM1_Init>
  MX_CRC_Init();
 8000e32:	f000 f89b 	bl	8000f6c <MX_CRC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000e36:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <main+0x6c>)
 8000e38:	f107 041c 	add.w	r4, r7, #28
 8000e3c:	461d      	mov	r5, r3
 8000e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 f9d4 	bl	80041fe <osThreadCreate>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a0b      	ldr	r2, [pc, #44]	; (8000e88 <main+0x70>)
 8000e5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 128);
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <main+0x74>)
 8000e5e:	463c      	mov	r4, r7
 8000e60:	461d      	mov	r5, r3
 8000e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e66:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f003 f9c3 	bl	80041fe <osThreadCreate>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <main+0x78>)
 8000e7c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e7e:	f003 f9b7 	bl	80041f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <main+0x6a>
 8000e84:	080068e8 	.word	0x080068e8
 8000e88:	200003fc 	.word	0x200003fc
 8000e8c:	08006910 	.word	0x08006910
 8000e90:	20000400 	.word	0x20000400

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	; 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	2230      	movs	r2, #48	; 0x30
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f004 ff20 	bl	8005ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <SystemClock_Config+0xd0>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	4a28      	ldr	r2, [pc, #160]	; (8000f64 <SystemClock_Config+0xd0>)
 8000ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec8:	4b26      	ldr	r3, [pc, #152]	; (8000f64 <SystemClock_Config+0xd0>)
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <SystemClock_Config+0xd4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <SystemClock_Config+0xd4>)
 8000ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <SystemClock_Config+0xd4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efc:	2310      	movs	r3, #16
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f00:	2302      	movs	r3, #2
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f0c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f12:	2304      	movs	r3, #4
 8000f14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f16:	2307      	movs	r3, #7
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f001 fba8 	bl	8002674 <HAL_RCC_OscConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f2a:	f000 fb59 	bl	80015e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2e:	230f      	movs	r3, #15
 8000f30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f32:	2302      	movs	r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2102      	movs	r1, #2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 fe0a 	bl	8002b64 <HAL_RCC_ClockConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f56:	f000 fb43 	bl	80015e0 <Error_Handler>
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	3750      	adds	r7, #80	; 0x50
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_CRC_Init+0x20>)
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <MX_CRC_Init+0x24>)
 8000f74:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_CRC_Init+0x20>)
 8000f78:	f000 fed0 	bl	8001d1c <HAL_CRC_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f82:	f000 fb2d 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000364 	.word	0x20000364
 8000f90:	40023000 	.word	0x40023000

08000f94 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_TIM1_Init+0x9c>)
 8000fb2:	4a20      	ldr	r2, [pc, #128]	; (8001034 <MX_TIM1_Init+0xa0>)
 8000fb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_TIM1_Init+0x9c>)
 8000fb8:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000fbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_TIM1_Init+0x9c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_TIM1_Init+0x9c>)
 8000fc6:	f245 2207 	movw	r2, #20999	; 0x5207
 8000fca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_TIM1_Init+0x9c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_TIM1_Init+0x9c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_TIM1_Init+0x9c>)
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fde:	4814      	ldr	r0, [pc, #80]	; (8001030 <MX_TIM1_Init+0x9c>)
 8000fe0:	f002 f812 	bl	8003008 <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fea:	f000 faf9 	bl	80015e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_TIM1_Init+0x9c>)
 8000ffc:	f002 f9a6 	bl	800334c <HAL_TIM_ConfigClockSource>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001006:	f000 faeb 	bl	80015e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001012:	463b      	mov	r3, r7
 8001014:	4619      	mov	r1, r3
 8001016:	4806      	ldr	r0, [pc, #24]	; (8001030 <MX_TIM1_Init+0x9c>)
 8001018:	f002 fbae 	bl	8003778 <HAL_TIMEx_MasterConfigSynchronization>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001022:	f000 fadd 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000036c 	.word	0x2000036c
 8001034:	40010000 	.word	0x40010000

08001038 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <MX_USART2_UART_Init+0x50>)
 8001040:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001044:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001048:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104a:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800105e:	220c      	movs	r2, #12
 8001060:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001062:	4b08      	ldr	r3, [pc, #32]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_USART2_UART_Init+0x4c>)
 8001070:	f002 fc04 	bl	800387c <HAL_UART_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800107a:	f000 fab1 	bl	80015e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200003b4 	.word	0x200003b4
 8001088:	40004400 	.word	0x40004400

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_GPIO_Init+0xd0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a2c      	ldr	r2, [pc, #176]	; (800115c <MX_GPIO_Init+0xd0>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_GPIO_Init+0xd0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_GPIO_Init+0xd0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <MX_GPIO_Init+0xd0>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <MX_GPIO_Init+0xd0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_GPIO_Init+0xd0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <MX_GPIO_Init+0xd0>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_GPIO_Init+0xd0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_GPIO_Init+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_GPIO_Init+0xd0>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_GPIO_Init+0xd0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2120      	movs	r1, #32
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <MX_GPIO_Init+0xd4>)
 8001118:	f001 fa78 	bl	800260c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800111c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001122:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480c      	ldr	r0, [pc, #48]	; (8001164 <MX_GPIO_Init+0xd8>)
 8001134:	f001 f8e6 	bl	8002304 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001138:	2320      	movs	r3, #32
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4804      	ldr	r0, [pc, #16]	; (8001160 <MX_GPIO_Init+0xd4>)
 8001150:	f001 f8d8 	bl	8002304 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020800 	.word	0x40020800

08001168 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001170:	2120      	movs	r1, #32
 8001172:	4803      	ldr	r0, [pc, #12]	; (8001180 <StartDefaultTask+0x18>)
 8001174:	f001 fa63 	bl	800263e <HAL_GPIO_TogglePin>
	  osDelay(200);
 8001178:	20c8      	movs	r0, #200	; 0xc8
 800117a:	f003 f88c 	bl	8004296 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800117e:	e7f7      	b.n	8001170 <StartDefaultTask+0x8>
 8001180:	40020000 	.word	0x40020000

08001184 <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09e      	sub	sp, #120	; 0x78
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartReceiveTask */
	uint16_t has_written = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	char input[100];
	/* Infinite loop */
	for (;;) {

		// Read the user input
		printf("\r\n Code to update: \n");
 8001192:	4890      	ldr	r0, [pc, #576]	; (80013d4 <StartReceiveTask+0x250>)
 8001194:	f004 fc42 	bl	8005a1c <puts>
		//if(scanf("%s", input) != -1){
		//TODO: fgets doesn't read newline?
		if (fgets(input, 10, stdin)) {
 8001198:	4b8f      	ldr	r3, [pc, #572]	; (80013d8 <StartReceiveTask+0x254>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	210a      	movs	r1, #10
 80011a4:	4618      	mov	r0, r3
 80011a6:	f004 fb07 	bl	80057b8 <fgets>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d024      	beq.n	80011fa <StartReceiveTask+0x76>
			size_t len = strlen(input);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f863 	bl	8000280 <strlen>
 80011ba:	6738      	str	r0, [r7, #112]	; 0x70
			if (feof(stdin) || (len != 0 && input[len - 1] == '\n'))
 80011bc:	4b86      	ldr	r3, [pc, #536]	; (80013d8 <StartReceiveTask+0x254>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f004 fa72 	bl	80056ac <feof>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10a      	bne.n	80011e4 <StartReceiveTask+0x60>
 80011ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00e      	beq.n	80011f2 <StartReceiveTask+0x6e>
 80011d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80011d6:	3b01      	subs	r3, #1
 80011d8:	3378      	adds	r3, #120	; 0x78
 80011da:	443b      	add	r3, r7
 80011dc:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 80011e0:	2b0a      	cmp	r3, #10
 80011e2:	d106      	bne.n	80011f2 <StartReceiveTask+0x6e>
				printf("\r\n Code received:  %s \r\n", input);
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	4619      	mov	r1, r3
 80011ea:	487c      	ldr	r0, [pc, #496]	; (80013dc <StartReceiveTask+0x258>)
 80011ec:	f004 fbb0 	bl	8005950 <iprintf>
 80011f0:	e006      	b.n	8001200 <StartReceiveTask+0x7c>
			else
				printf("Invalid input, please respect the limit of 100 characters.");
 80011f2:	487b      	ldr	r0, [pc, #492]	; (80013e0 <StartReceiveTask+0x25c>)
 80011f4:	f004 fbac 	bl	8005950 <iprintf>
 80011f8:	e002      	b.n	8001200 <StartReceiveTask+0x7c>
		} else {
			printf("Invalid input, please respect the limit of 100 characters.");
 80011fa:	4879      	ldr	r0, [pc, #484]	; (80013e0 <StartReceiveTask+0x25c>)
 80011fc:	f004 fba8 	bl	8005950 <iprintf>
		}

		if(has_written == 0){
 8001200:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001204:	2b00      	cmp	r3, #0
 8001206:	f040 81bd 	bne.w	8001584 <StartReceiveTask+0x400>
			/* Unlock the Flash Program Erase controller */
			HAL_FLASH_Unlock();
 800120a:	f000 fdf7 	bl	8001dfc <HAL_FLASH_Unlock>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800120e:	2201      	movs	r2, #1
 8001210:	2120      	movs	r1, #32
 8001212:	4874      	ldr	r0, [pc, #464]	; (80013e4 <StartReceiveTask+0x260>)
 8001214:	f001 f9fa 	bl	800260c <HAL_GPIO_WritePin>

			/* EEPROM Init */
			if (EE_Init() != EE_OK) {
 8001218:	f7ff f9b8 	bl	800058c <EE_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <StartReceiveTask+0xa2>
				Error_Handler();
 8001222:	f000 f9dd 	bl	80015e0 <Error_Handler>
			}

			// Fill EEPROM variables addresses
			for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++) {
 8001226:	4b70      	ldr	r3, [pc, #448]	; (80013e8 <StartReceiveTask+0x264>)
 8001228:	2201      	movs	r2, #1
 800122a:	801a      	strh	r2, [r3, #0]
 800122c:	e00d      	b.n	800124a <StartReceiveTask+0xc6>
				VirtAddVarTab[VarIndex - 1] = VarIndex;
 800122e:	4b6e      	ldr	r3, [pc, #440]	; (80013e8 <StartReceiveTask+0x264>)
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	3b01      	subs	r3, #1
 8001234:	4a6c      	ldr	r2, [pc, #432]	; (80013e8 <StartReceiveTask+0x264>)
 8001236:	8811      	ldrh	r1, [r2, #0]
 8001238:	4a6c      	ldr	r2, [pc, #432]	; (80013ec <StartReceiveTask+0x268>)
 800123a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++) {
 800123e:	4b6a      	ldr	r3, [pc, #424]	; (80013e8 <StartReceiveTask+0x264>)
 8001240:	881b      	ldrh	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b68      	ldr	r3, [pc, #416]	; (80013e8 <StartReceiveTask+0x264>)
 8001248:	801a      	strh	r2, [r3, #0]
 800124a:	4b67      	ldr	r3, [pc, #412]	; (80013e8 <StartReceiveTask+0x264>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	2b1b      	cmp	r3, #27
 8001250:	d9ed      	bls.n	800122e <StartReceiveTask+0xaa>
			}

			// Store Values in EEPROM emulation
			HAL_UART_Transmit(&huart2, "Store values\n\r", 14, 100);
 8001252:	2364      	movs	r3, #100	; 0x64
 8001254:	220e      	movs	r2, #14
 8001256:	4966      	ldr	r1, [pc, #408]	; (80013f0 <StartReceiveTask+0x26c>)
 8001258:	4866      	ldr	r0, [pc, #408]	; (80013f4 <StartReceiveTask+0x270>)
 800125a:	f002 fb5f 	bl	800391c <HAL_UART_Transmit>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	2120      	movs	r1, #32
 8001262:	4860      	ldr	r0, [pc, #384]	; (80013e4 <StartReceiveTask+0x260>)
 8001264:	f001 f9d2 	bl	800260c <HAL_GPIO_WritePin>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001268:	4b5f      	ldr	r3, [pc, #380]	; (80013e8 <StartReceiveTask+0x264>)
 800126a:	2200      	movs	r2, #0
 800126c:	801a      	strh	r2, [r3, #0]
 800126e:	e01a      	b.n	80012a6 <StartReceiveTask+0x122>
				/* Sequence 1 */
				if ((EE_WriteVariable(VirtAddVarTab[VarIndex], VarDataTab[VarIndex]))
 8001270:	4b5d      	ldr	r3, [pc, #372]	; (80013e8 <StartReceiveTask+0x264>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <StartReceiveTask+0x268>)
 8001278:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800127c:	4a5a      	ldr	r2, [pc, #360]	; (80013e8 <StartReceiveTask+0x264>)
 800127e:	8812      	ldrh	r2, [r2, #0]
 8001280:	4611      	mov	r1, r2
 8001282:	4a5d      	ldr	r2, [pc, #372]	; (80013f8 <StartReceiveTask+0x274>)
 8001284:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fbd2 	bl	8000a34 <EE_WriteVariable>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <StartReceiveTask+0x116>
						!= HAL_OK) {
					Error_Handler();
 8001296:	f000 f9a3 	bl	80015e0 <Error_Handler>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 800129a:	4b53      	ldr	r3, [pc, #332]	; (80013e8 <StartReceiveTask+0x264>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	b29a      	uxth	r2, r3
 80012a2:	4b51      	ldr	r3, [pc, #324]	; (80013e8 <StartReceiveTask+0x264>)
 80012a4:	801a      	strh	r2, [r3, #0]
 80012a6:	4b50      	ldr	r3, [pc, #320]	; (80013e8 <StartReceiveTask+0x264>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2b1a      	cmp	r3, #26
 80012ac:	d9e0      	bls.n	8001270 <StartReceiveTask+0xec>
				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2120      	movs	r1, #32
 80012b2:	484c      	ldr	r0, [pc, #304]	; (80013e4 <StartReceiveTask+0x260>)
 80012b4:	f001 f9aa 	bl	800260c <HAL_GPIO_WritePin>

			// Read values
			HAL_UART_Transmit(&huart2, "Read values\n\r", 13, 100);
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	220d      	movs	r2, #13
 80012bc:	494f      	ldr	r1, [pc, #316]	; (80013fc <StartReceiveTask+0x278>)
 80012be:	484d      	ldr	r0, [pc, #308]	; (80013f4 <StartReceiveTask+0x270>)
 80012c0:	f002 fb2c 	bl	800391c <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2120      	movs	r1, #32
 80012c8:	4846      	ldr	r0, [pc, #280]	; (80013e4 <StartReceiveTask+0x260>)
 80012ca:	f001 f99f 	bl	800260c <HAL_GPIO_WritePin>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <StartReceiveTask+0x264>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	801a      	strh	r2, [r3, #0]
 80012d4:	e019      	b.n	800130a <StartReceiveTask+0x186>
				if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 80012d6:	4b44      	ldr	r3, [pc, #272]	; (80013e8 <StartReceiveTask+0x264>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b43      	ldr	r3, [pc, #268]	; (80013ec <StartReceiveTask+0x268>)
 80012de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
						&VarDataTabRead[VarIndex])) != HAL_OK) {
 80012e2:	4a41      	ldr	r2, [pc, #260]	; (80013e8 <StartReceiveTask+0x264>)
 80012e4:	8812      	ldrh	r2, [r2, #0]
 80012e6:	4611      	mov	r1, r2
 80012e8:	4a45      	ldr	r2, [pc, #276]	; (8001400 <StartReceiveTask+0x27c>)
 80012ea:	440a      	add	r2, r1
				if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fb56 	bl	80009a0 <EE_ReadVariable>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <StartReceiveTask+0x17a>
					Error_Handler();
 80012fa:	f000 f971 	bl	80015e0 <Error_Handler>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <StartReceiveTask+0x264>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <StartReceiveTask+0x264>)
 8001308:	801a      	strh	r2, [r3, #0]
 800130a:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <StartReceiveTask+0x264>)
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	2b1a      	cmp	r3, #26
 8001310:	d9e1      	bls.n	80012d6 <StartReceiveTask+0x152>
				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001312:	2201      	movs	r2, #1
 8001314:	2120      	movs	r1, #32
 8001316:	4833      	ldr	r0, [pc, #204]	; (80013e4 <StartReceiveTask+0x260>)
 8001318:	f001 f978 	bl	800260c <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 800131c:	2364      	movs	r3, #100	; 0x64
 800131e:	220c      	movs	r2, #12
 8001320:	4938      	ldr	r1, [pc, #224]	; (8001404 <StartReceiveTask+0x280>)
 8001322:	4834      	ldr	r0, [pc, #208]	; (80013f4 <StartReceiveTask+0x270>)
 8001324:	f002 fafa 	bl	800391c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, VarDataTabRead, NB_OF_VAR, 1000);
 8001328:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132c:	221b      	movs	r2, #27
 800132e:	4934      	ldr	r1, [pc, #208]	; (8001400 <StartReceiveTask+0x27c>)
 8001330:	4830      	ldr	r0, [pc, #192]	; (80013f4 <StartReceiveTask+0x270>)
 8001332:	f002 faf3 	bl	800391c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001336:	2364      	movs	r3, #100	; 0x64
 8001338:	2202      	movs	r2, #2
 800133a:	4933      	ldr	r1, [pc, #204]	; (8001408 <StartReceiveTask+0x284>)
 800133c:	482d      	ldr	r0, [pc, #180]	; (80013f4 <StartReceiveTask+0x270>)
 800133e:	f002 faed 	bl	800391c <HAL_UART_Transmit>

			// Store revert Values in EEPROM emulation
			HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001342:	2364      	movs	r3, #100	; 0x64
 8001344:	2202      	movs	r2, #2
 8001346:	4930      	ldr	r1, [pc, #192]	; (8001408 <StartReceiveTask+0x284>)
 8001348:	482a      	ldr	r0, [pc, #168]	; (80013f4 <StartReceiveTask+0x270>)
 800134a:	f002 fae7 	bl	800391c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "Store revert values\n\r", 21, 100);
 800134e:	2364      	movs	r3, #100	; 0x64
 8001350:	2215      	movs	r2, #21
 8001352:	492e      	ldr	r1, [pc, #184]	; (800140c <StartReceiveTask+0x288>)
 8001354:	4827      	ldr	r0, [pc, #156]	; (80013f4 <StartReceiveTask+0x270>)
 8001356:	f002 fae1 	bl	800391c <HAL_UART_Transmit>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	2120      	movs	r1, #32
 800135e:	4821      	ldr	r0, [pc, #132]	; (80013e4 <StartReceiveTask+0x260>)
 8001360:	f001 f954 	bl	800260c <HAL_GPIO_WritePin>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <StartReceiveTask+0x264>)
 8001366:	2200      	movs	r2, #0
 8001368:	801a      	strh	r2, [r3, #0]
 800136a:	e01b      	b.n	80013a4 <StartReceiveTask+0x220>
				/* Sequence 1 */
				if ((EE_WriteVariable(VirtAddVarTab[VarIndex],
 800136c:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <StartReceiveTask+0x264>)
 800136e:	881b      	ldrh	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <StartReceiveTask+0x268>)
 8001374:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
						VarDataTab[NB_OF_VAR - VarIndex - 1])) != HAL_OK) {
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <StartReceiveTask+0x264>)
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	f1c3 031a 	rsb	r3, r3, #26
				if ((EE_WriteVariable(VirtAddVarTab[VarIndex],
 8001380:	491d      	ldr	r1, [pc, #116]	; (80013f8 <StartReceiveTask+0x274>)
 8001382:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001386:	4619      	mov	r1, r3
 8001388:	4610      	mov	r0, r2
 800138a:	f7ff fb53 	bl	8000a34 <EE_WriteVariable>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <StartReceiveTask+0x214>
					Error_Handler();
 8001394:	f000 f924 	bl	80015e0 <Error_Handler>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <StartReceiveTask+0x264>)
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	b29a      	uxth	r2, r3
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <StartReceiveTask+0x264>)
 80013a2:	801a      	strh	r2, [r3, #0]
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <StartReceiveTask+0x264>)
 80013a6:	881b      	ldrh	r3, [r3, #0]
 80013a8:	2b1a      	cmp	r3, #26
 80013aa:	d9df      	bls.n	800136c <StartReceiveTask+0x1e8>
				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2120      	movs	r1, #32
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <StartReceiveTask+0x260>)
 80013b2:	f001 f92b 	bl	800260c <HAL_GPIO_WritePin>

			// Read values
			HAL_UART_Transmit(&huart2, "Read revert values\n\r", 20, 100);
 80013b6:	2364      	movs	r3, #100	; 0x64
 80013b8:	2214      	movs	r2, #20
 80013ba:	4915      	ldr	r1, [pc, #84]	; (8001410 <StartReceiveTask+0x28c>)
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <StartReceiveTask+0x270>)
 80013be:	f002 faad 	bl	800391c <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2120      	movs	r1, #32
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <StartReceiveTask+0x260>)
 80013c8:	f001 f920 	bl	800260c <HAL_GPIO_WritePin>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <StartReceiveTask+0x264>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	801a      	strh	r2, [r3, #0]
 80013d2:	e039      	b.n	8001448 <StartReceiveTask+0x2c4>
 80013d4:	0800692c 	.word	0x0800692c
 80013d8:	200000a0 	.word	0x200000a0
 80013dc:	08006940 	.word	0x08006940
 80013e0:	0800695c 	.word	0x0800695c
 80013e4:	40020000 	.word	0x40020000
 80013e8:	20000458 	.word	0x20000458
 80013ec:	20000404 	.word	0x20000404
 80013f0:	08006998 	.word	0x08006998
 80013f4:	200003b4 	.word	0x200003b4
 80013f8:	20000000 	.word	0x20000000
 80013fc:	080069a8 	.word	0x080069a8
 8001400:	2000043c 	.word	0x2000043c
 8001404:	080069b8 	.word	0x080069b8
 8001408:	080069c8 	.word	0x080069c8
 800140c:	080069cc 	.word	0x080069cc
 8001410:	080069e4 	.word	0x080069e4
				if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 8001414:	4b5d      	ldr	r3, [pc, #372]	; (800158c <StartReceiveTask+0x408>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <StartReceiveTask+0x40c>)
 800141c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
						&VarDataTabRead[VarIndex])) != HAL_OK) {
 8001420:	4a5a      	ldr	r2, [pc, #360]	; (800158c <StartReceiveTask+0x408>)
 8001422:	8812      	ldrh	r2, [r2, #0]
 8001424:	4611      	mov	r1, r2
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <StartReceiveTask+0x410>)
 8001428:	440a      	add	r2, r1
				if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fab7 	bl	80009a0 <EE_ReadVariable>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <StartReceiveTask+0x2b8>
					Error_Handler();
 8001438:	f000 f8d2 	bl	80015e0 <Error_Handler>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <StartReceiveTask+0x408>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	4b51      	ldr	r3, [pc, #324]	; (800158c <StartReceiveTask+0x408>)
 8001446:	801a      	strh	r2, [r3, #0]
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <StartReceiveTask+0x408>)
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	2b1a      	cmp	r3, #26
 800144e:	d9e1      	bls.n	8001414 <StartReceiveTask+0x290>
				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2120      	movs	r1, #32
 8001454:	4850      	ldr	r0, [pc, #320]	; (8001598 <StartReceiveTask+0x414>)
 8001456:	f001 f8d9 	bl	800260c <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart2, "Read revert table: ", 19, 100);
 800145a:	2364      	movs	r3, #100	; 0x64
 800145c:	2213      	movs	r2, #19
 800145e:	494f      	ldr	r1, [pc, #316]	; (800159c <StartReceiveTask+0x418>)
 8001460:	484f      	ldr	r0, [pc, #316]	; (80015a0 <StartReceiveTask+0x41c>)
 8001462:	f002 fa5b 	bl	800391c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, VarDataTabRead, NB_OF_VAR, 1000);
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	221b      	movs	r2, #27
 800146c:	4949      	ldr	r1, [pc, #292]	; (8001594 <StartReceiveTask+0x410>)
 800146e:	484c      	ldr	r0, [pc, #304]	; (80015a0 <StartReceiveTask+0x41c>)
 8001470:	f002 fa54 	bl	800391c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001474:	2364      	movs	r3, #100	; 0x64
 8001476:	2202      	movs	r2, #2
 8001478:	494a      	ldr	r1, [pc, #296]	; (80015a4 <StartReceiveTask+0x420>)
 800147a:	4849      	ldr	r0, [pc, #292]	; (80015a0 <StartReceiveTask+0x41c>)
 800147c:	f002 fa4e 	bl	800391c <HAL_UART_Transmit>

			// Store Values in EEPROM emulation
			HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001480:	2364      	movs	r3, #100	; 0x64
 8001482:	2202      	movs	r2, #2
 8001484:	4947      	ldr	r1, [pc, #284]	; (80015a4 <StartReceiveTask+0x420>)
 8001486:	4846      	ldr	r0, [pc, #280]	; (80015a0 <StartReceiveTask+0x41c>)
 8001488:	f002 fa48 	bl	800391c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "Store values\n\r", 14, 100);
 800148c:	2364      	movs	r3, #100	; 0x64
 800148e:	220e      	movs	r2, #14
 8001490:	4945      	ldr	r1, [pc, #276]	; (80015a8 <StartReceiveTask+0x424>)
 8001492:	4843      	ldr	r0, [pc, #268]	; (80015a0 <StartReceiveTask+0x41c>)
 8001494:	f002 fa42 	bl	800391c <HAL_UART_Transmit>

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2120      	movs	r1, #32
 800149c:	483e      	ldr	r0, [pc, #248]	; (8001598 <StartReceiveTask+0x414>)
 800149e:	f001 f8b5 	bl	800260c <HAL_GPIO_WritePin>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80014a2:	4b3a      	ldr	r3, [pc, #232]	; (800158c <StartReceiveTask+0x408>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	801a      	strh	r2, [r3, #0]
 80014a8:	e01a      	b.n	80014e0 <StartReceiveTask+0x35c>
				/* Sequence 1 */
				if ((EE_WriteVariable(VirtAddVarTab[VarIndex], VarDataTab[VarIndex]))
 80014aa:	4b38      	ldr	r3, [pc, #224]	; (800158c <StartReceiveTask+0x408>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b37      	ldr	r3, [pc, #220]	; (8001590 <StartReceiveTask+0x40c>)
 80014b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80014b6:	4a35      	ldr	r2, [pc, #212]	; (800158c <StartReceiveTask+0x408>)
 80014b8:	8812      	ldrh	r2, [r2, #0]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4a3b      	ldr	r2, [pc, #236]	; (80015ac <StartReceiveTask+0x428>)
 80014be:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fab5 	bl	8000a34 <EE_WriteVariable>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <StartReceiveTask+0x350>
						!= HAL_OK) {
					Error_Handler();
 80014d0:	f000 f886 	bl	80015e0 <Error_Handler>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <StartReceiveTask+0x408>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <StartReceiveTask+0x408>)
 80014de:	801a      	strh	r2, [r3, #0]
 80014e0:	4b2a      	ldr	r3, [pc, #168]	; (800158c <StartReceiveTask+0x408>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2b1a      	cmp	r3, #26
 80014e6:	d9e0      	bls.n	80014aa <StartReceiveTask+0x326>
				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2120      	movs	r1, #32
 80014ec:	482a      	ldr	r0, [pc, #168]	; (8001598 <StartReceiveTask+0x414>)
 80014ee:	f001 f88d 	bl	800260c <HAL_GPIO_WritePin>

			// Read values
			HAL_UART_Transmit(&huart2, "Read values\n\r", 13, 100);
 80014f2:	2364      	movs	r3, #100	; 0x64
 80014f4:	220d      	movs	r2, #13
 80014f6:	492e      	ldr	r1, [pc, #184]	; (80015b0 <StartReceiveTask+0x42c>)
 80014f8:	4829      	ldr	r0, [pc, #164]	; (80015a0 <StartReceiveTask+0x41c>)
 80014fa:	f002 fa0f 	bl	800391c <HAL_UART_Transmit>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2120      	movs	r1, #32
 8001502:	4825      	ldr	r0, [pc, #148]	; (8001598 <StartReceiveTask+0x414>)
 8001504:	f001 f882 	bl	800260c <HAL_GPIO_WritePin>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <StartReceiveTask+0x408>)
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]
 800150e:	e019      	b.n	8001544 <StartReceiveTask+0x3c0>
				if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <StartReceiveTask+0x408>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b1e      	ldr	r3, [pc, #120]	; (8001590 <StartReceiveTask+0x40c>)
 8001518:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
						&VarDataTabRead[VarIndex])) != HAL_OK) {
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <StartReceiveTask+0x408>)
 800151e:	8812      	ldrh	r2, [r2, #0]
 8001520:	4611      	mov	r1, r2
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <StartReceiveTask+0x410>)
 8001524:	440a      	add	r2, r1
				if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fa39 	bl	80009a0 <EE_ReadVariable>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <StartReceiveTask+0x3b4>
					Error_Handler();
 8001534:	f000 f854 	bl	80015e0 <Error_Handler>
			for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <StartReceiveTask+0x408>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	3301      	adds	r3, #1
 800153e:	b29a      	uxth	r2, r3
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <StartReceiveTask+0x408>)
 8001542:	801a      	strh	r2, [r3, #0]
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <StartReceiveTask+0x408>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	2b1a      	cmp	r3, #26
 800154a:	d9e1      	bls.n	8001510 <StartReceiveTask+0x38c>
				}
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	2120      	movs	r1, #32
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <StartReceiveTask+0x414>)
 8001552:	f001 f85b 	bl	800260c <HAL_GPIO_WritePin>

			HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 8001556:	2364      	movs	r3, #100	; 0x64
 8001558:	220c      	movs	r2, #12
 800155a:	4916      	ldr	r1, [pc, #88]	; (80015b4 <StartReceiveTask+0x430>)
 800155c:	4810      	ldr	r0, [pc, #64]	; (80015a0 <StartReceiveTask+0x41c>)
 800155e:	f002 f9dd 	bl	800391c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, VarDataTabRead, NB_OF_VAR, 1000);
 8001562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001566:	221b      	movs	r2, #27
 8001568:	490a      	ldr	r1, [pc, #40]	; (8001594 <StartReceiveTask+0x410>)
 800156a:	480d      	ldr	r0, [pc, #52]	; (80015a0 <StartReceiveTask+0x41c>)
 800156c:	f002 f9d6 	bl	800391c <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001570:	2364      	movs	r3, #100	; 0x64
 8001572:	2202      	movs	r2, #2
 8001574:	490b      	ldr	r1, [pc, #44]	; (80015a4 <StartReceiveTask+0x420>)
 8001576:	480a      	ldr	r0, [pc, #40]	; (80015a0 <StartReceiveTask+0x41c>)
 8001578:	f002 f9d0 	bl	800391c <HAL_UART_Transmit>
			has_written = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001582:	e606      	b.n	8001192 <StartReceiveTask+0xe>
		} else {
			printf("Code was already saved.");
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <StartReceiveTask+0x434>)
 8001586:	f004 f9e3 	bl	8005950 <iprintf>
		printf("\r\n Code to update: \n");
 800158a:	e602      	b.n	8001192 <StartReceiveTask+0xe>
 800158c:	20000458 	.word	0x20000458
 8001590:	20000404 	.word	0x20000404
 8001594:	2000043c 	.word	0x2000043c
 8001598:	40020000 	.word	0x40020000
 800159c:	080069fc 	.word	0x080069fc
 80015a0:	200003b4 	.word	0x200003b4
 80015a4:	080069c8 	.word	0x080069c8
 80015a8:	08006998 	.word	0x08006998
 80015ac:	20000000 	.word	0x20000000
 80015b0:	080069a8 	.word	0x080069a8
 80015b4:	080069b8 	.word	0x080069b8
 80015b8:	08006a10 	.word	0x08006a10

080015bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d101      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ce:	f000 faa3 	bl	8001b18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40000c00 	.word	0x40000c00

080015e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e4:	b672      	cpsid	i
}
 80015e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <Error_Handler+0x8>

080015ea <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db04      	blt.n	8001602 <_isatty+0x18>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	dc01      	bgt.n	8001602 <_isatty+0x18>
    return 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	e005      	b.n	800160e <_isatty+0x24>

  errno = EBADF;
 8001602:	f004 fc15 	bl	8005e30 <__errno>
 8001606:	4603      	mov	r3, r0
 8001608:	2209      	movs	r2, #9
 800160a:	601a      	str	r2, [r3, #0]
  return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <_write>:

int _write(int fd, char* ptr, int len) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d002      	beq.n	8001630 <_write+0x18>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d111      	bne.n	8001654 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <_write+0x54>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	b29a      	uxth	r2, r3
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	f002 f96d 	bl	800391c <HAL_UART_Transmit>
 8001642:	4603      	mov	r3, r0
 8001644:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <_write+0x38>
      return len;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	e008      	b.n	8001662 <_write+0x4a>
    else
      return EIO;
 8001650:	2305      	movs	r3, #5
 8001652:	e006      	b.n	8001662 <_write+0x4a>
  }
  errno = EBADF;
 8001654:	f004 fbec 	bl	8005e30 <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	2209      	movs	r2, #9
 800165c:	601a      	str	r2, [r3, #0]
  return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000045c 	.word	0x2000045c

08001670 <_close>:

int _close(int fd) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db04      	blt.n	8001688 <_close+0x18>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b02      	cmp	r3, #2
 8001682:	dc01      	bgt.n	8001688 <_close+0x18>
    return 0;
 8001684:	2300      	movs	r3, #0
 8001686:	e006      	b.n	8001696 <_close+0x26>

  errno = EBADF;
 8001688:	f004 fbd2 	bl	8005e30 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	2209      	movs	r2, #9
 8001690:	601a      	str	r2, [r3, #0]
  return -1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800169e:	b580      	push	{r7, lr}
 80016a0:	b084      	sub	sp, #16
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80016aa:	f004 fbc1 	bl	8005e30 <__errno>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2209      	movs	r2, #9
 80016b2:	601a      	str	r2, [r3, #0]
  return -1;
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_read>:

int _read(int fd, char* ptr, int len) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d110      	bne.n	80016f4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <_read+0x4c>)
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	2201      	movs	r2, #1
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	f002 f9a8 	bl	8003a32 <HAL_UART_Receive>
 80016e2:	4603      	mov	r3, r0
 80016e4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80016e6:	7dfb      	ldrb	r3, [r7, #23]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <_read+0x30>
      return 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e008      	b.n	8001702 <_read+0x42>
    else
      return EIO;
 80016f0:	2305      	movs	r3, #5
 80016f2:	e006      	b.n	8001702 <_read+0x42>
  }
  errno = EBADF;
 80016f4:	f004 fb9c 	bl	8005e30 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2209      	movs	r2, #9
 80016fc:	601a      	str	r2, [r3, #0]
  return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000045c 	.word	0x2000045c

08001710 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	db08      	blt.n	8001732 <_fstat+0x22>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	dc05      	bgt.n	8001732 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172c:	605a      	str	r2, [r3, #4]
    return 0;
 800172e:	2300      	movs	r3, #0
 8001730:	e005      	b.n	800173e <_fstat+0x2e>
  }

  errno = EBADF;
 8001732:	f004 fb7d 	bl	8005e30 <__errno>
 8001736:	4603      	mov	r3, r0
 8001738:	2209      	movs	r2, #9
 800173a:	601a      	str	r2, [r3, #0]
  return 0;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_MspInit+0x54>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a11      	ldr	r2, [pc, #68]	; (800179c <HAL_MspInit+0x54>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_MspInit+0x54>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_MspInit+0x54>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a0a      	ldr	r2, [pc, #40]	; (800179c <HAL_MspInit+0x54>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_MspInit+0x54>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	210f      	movs	r1, #15
 800178a:	f06f 0001 	mvn.w	r0, #1
 800178e:	f000 fa9b 	bl	8001cc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <HAL_CRC_MspInit+0x3c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10d      	bne.n	80017ce <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_CRC_MspInit+0x40>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <HAL_CRC_MspInit+0x40>)
 80017bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_CRC_MspInit+0x40>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80017ce:	bf00      	nop
 80017d0:	3714      	adds	r7, #20
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023000 	.word	0x40023000
 80017e0:	40023800 	.word	0x40023800

080017e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <HAL_TIM_Base_MspInit+0x3c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d10d      	bne.n	8001812 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_TIM_Base_MspInit+0x40>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_TIM_Base_MspInit+0x40>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b07      	ldr	r3, [pc, #28]	; (8001824 <HAL_TIM_Base_MspInit+0x40>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40010000 	.word	0x40010000
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a19      	ldr	r2, [pc, #100]	; (80018ac <HAL_UART_MspInit+0x84>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d12b      	bne.n	80018a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_UART_MspInit+0x88>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <HAL_UART_MspInit+0x88>)
 8001854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001858:	6413      	str	r3, [r2, #64]	; 0x40
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <HAL_UART_MspInit+0x88>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_UART_MspInit+0x88>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a10      	ldr	r2, [pc, #64]	; (80018b0 <HAL_UART_MspInit+0x88>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_UART_MspInit+0x88>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001882:	230c      	movs	r3, #12
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001892:	2307      	movs	r3, #7
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <HAL_UART_MspInit+0x8c>)
 800189e:	f000 fd31 	bl	8002304 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	; 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40004400 	.word	0x40004400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000

080018b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08e      	sub	sp, #56	; 0x38
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	4b33      	ldr	r3, [pc, #204]	; (800199c <HAL_InitTick+0xe4>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	4a32      	ldr	r2, [pc, #200]	; (800199c <HAL_InitTick+0xe4>)
 80018d2:	f043 0308 	orr.w	r3, r3, #8
 80018d6:	6413      	str	r3, [r2, #64]	; 0x40
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <HAL_InitTick+0xe4>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018e4:	f107 0210 	add.w	r2, r7, #16
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fb58 	bl	8002fa4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80018f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d103      	bne.n	8001906 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018fe:	f001 fb29 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 8001902:	6378      	str	r0, [r7, #52]	; 0x34
 8001904:	e004      	b.n	8001910 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001906:	f001 fb25 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 800190a:	4603      	mov	r3, r0
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_InitTick+0xe8>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	0c9b      	lsrs	r3, r3, #18
 800191a:	3b01      	subs	r3, #1
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800191e:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <HAL_InitTick+0xec>)
 8001920:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <HAL_InitTick+0xf0>)
 8001922:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <HAL_InitTick+0xec>)
 8001926:	f240 32e7 	movw	r2, #999	; 0x3e7
 800192a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_InitTick+0xec>)
 800192e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001930:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_InitTick+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_InitTick+0xec>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_InitTick+0xec>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001944:	4817      	ldr	r0, [pc, #92]	; (80019a4 <HAL_InitTick+0xec>)
 8001946:	f001 fb5f 	bl	8003008 <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001950:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001954:	2b00      	cmp	r3, #0
 8001956:	d11b      	bne.n	8001990 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001958:	4812      	ldr	r0, [pc, #72]	; (80019a4 <HAL_InitTick+0xec>)
 800195a:	f001 fba5 	bl	80030a8 <HAL_TIM_Base_Start_IT>
 800195e:	4603      	mov	r3, r0
 8001960:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001968:	2b00      	cmp	r3, #0
 800196a:	d111      	bne.n	8001990 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800196c:	2032      	movs	r0, #50	; 0x32
 800196e:	f000 f9c7 	bl	8001d00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d808      	bhi.n	800198a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	2032      	movs	r0, #50	; 0x32
 800197e:	f000 f9a3 	bl	8001cc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_InitTick+0xf4>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	e002      	b.n	8001990 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001994:	4618      	mov	r0, r3
 8001996:	3738      	adds	r7, #56	; 0x38
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	431bde83 	.word	0x431bde83
 80019a4:	20000460 	.word	0x20000460
 80019a8:	40000c00 	.word	0x40000c00
 80019ac:	2000003c 	.word	0x2000003c

080019b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019b4:	e7fe      	b.n	80019b4 <NMI_Handler+0x4>

080019b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ba:	e7fe      	b.n	80019ba <HardFault_Handler+0x4>

080019bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019c0:	e7fe      	b.n	80019c0 <MemManage_Handler+0x4>

080019c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019c6:	e7fe      	b.n	80019c6 <BusFault_Handler+0x4>

080019c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <UsageFault_Handler+0x4>

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <TIM5_IRQHandler+0x10>)
 80019e2:	f001 fbc3 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000460 	.word	0x20000460

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f004 fa06 	bl	8005e30 <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20018000 	.word	0x20018000
 8001a50:	00000512 	.word	0x00000512
 8001a54:	200004a8 	.word	0x200004a8
 8001a58:	20004370 	.word	0x20004370

08001a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <SystemInit+0x20>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <SystemInit+0x20>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a84:	f7ff ffea 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	; (8001acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001aae:	f004 f9c5 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab2:	f7ff f9b1 	bl	8000e18 <main>
  bx  lr    
 8001ab6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ab8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001ac4:	08006a8c 	.word	0x08006a8c
  ldr r2, =_sbss
 8001ac8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001acc:	20004370 	.word	0x20004370

08001ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC_IRQHandler>
	...

08001ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ad8:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <HAL_Init+0x40>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <HAL_Init+0x40>)
 8001ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <HAL_Init+0x40>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_Init+0x40>)
 8001aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <HAL_Init+0x40>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <HAL_Init+0x40>)
 8001af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001afc:	2003      	movs	r0, #3
 8001afe:	f000 f8d8 	bl	8001cb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b02:	200f      	movs	r0, #15
 8001b04:	f7ff fed8 	bl	80018b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b08:	f7ff fe1e 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40023c00 	.word	0x40023c00

08001b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_IncTick+0x20>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_IncTick+0x24>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_IncTick+0x24>)
 8001b2a:	6013      	str	r3, [r2, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000040 	.word	0x20000040
 8001b3c:	200004ac 	.word	0x200004ac

08001b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return uwTick;
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <HAL_GetTick+0x14>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200004ac 	.word	0x200004ac

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	; (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	6039      	str	r1, [r7, #0]
 8001c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	db0a      	blt.n	8001c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	490c      	ldr	r1, [pc, #48]	; (8001c44 <__NVIC_SetPriority+0x4c>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	0112      	lsls	r2, r2, #4
 8001c18:	b2d2      	uxtb	r2, r2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c20:	e00a      	b.n	8001c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	4908      	ldr	r1, [pc, #32]	; (8001c48 <__NVIC_SetPriority+0x50>)
 8001c28:	79fb      	ldrb	r3, [r7, #7]
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3b04      	subs	r3, #4
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	440b      	add	r3, r1
 8001c36:	761a      	strb	r2, [r3, #24]
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000e100 	.word	0xe000e100
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f1c3 0307 	rsb	r3, r3, #7
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	bf28      	it	cs
 8001c6a:	2304      	movcs	r3, #4
 8001c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3304      	adds	r3, #4
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d902      	bls.n	8001c7c <NVIC_EncodePriority+0x30>
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3b03      	subs	r3, #3
 8001c7a:	e000      	b.n	8001c7e <NVIC_EncodePriority+0x32>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	401a      	ands	r2, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c94:	f04f 31ff 	mov.w	r1, #4294967295
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43d9      	mvns	r1, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	4313      	orrs	r3, r2
         );
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3724      	adds	r7, #36	; 0x24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ff4c 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
 8001cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cda:	f7ff ff61 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001cde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	68b9      	ldr	r1, [r7, #8]
 8001ce4:	6978      	ldr	r0, [r7, #20]
 8001ce6:	f7ff ffb1 	bl	8001c4c <NVIC_EncodePriority>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff80 	bl	8001bf8 <__NVIC_SetPriority>
}
 8001cf8:	bf00      	nop
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff54 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00e      	b.n	8001d4c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	795b      	ldrb	r3, [r3, #5]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d105      	bne.n	8001d44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fd2e 	bl	80017a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_FLASH_Program+0xa0>)
 8001d68:	7e1b      	ldrb	r3, [r3, #24]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d101      	bne.n	8001d72 <HAL_FLASH_Program+0x1e>
 8001d6e:	2302      	movs	r3, #2
 8001d70:	e03b      	b.n	8001dea <HAL_FLASH_Program+0x96>
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_FLASH_Program+0xa0>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d7c:	f000 f860 	bl	8001e40 <FLASH_WaitForLastOperation>
 8001d80:	4603      	mov	r3, r0
 8001d82:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001d84:	7dfb      	ldrb	r3, [r7, #23]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d12b      	bne.n	8001de2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001d90:	783b      	ldrb	r3, [r7, #0]
 8001d92:	4619      	mov	r1, r3
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f000 f90b 	bl	8001fb0 <FLASH_Program_Byte>
 8001d9a:	e016      	b.n	8001dca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d105      	bne.n	8001dae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001da2:	883b      	ldrh	r3, [r7, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f000 f8de 	bl	8001f68 <FLASH_Program_HalfWord>
 8001dac:	e00d      	b.n	8001dca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d105      	bne.n	8001dc0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4619      	mov	r1, r3
 8001db8:	68b8      	ldr	r0, [r7, #8]
 8001dba:	f000 f8b3 	bl	8001f24 <FLASH_Program_Word>
 8001dbe:	e004      	b.n	8001dca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dc4:	68b8      	ldr	r0, [r7, #8]
 8001dc6:	f000 f87b 	bl	8001ec0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dce:	f000 f837 	bl	8001e40 <FLASH_WaitForLastOperation>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_FLASH_Program+0xa4>)
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <HAL_FLASH_Program+0xa4>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <HAL_FLASH_Program+0xa0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200004b0 	.word	0x200004b0
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <HAL_FLASH_Unlock+0x38>)
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da0b      	bge.n	8001e26 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_FLASH_Unlock+0x38>)
 8001e10:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <HAL_FLASH_Unlock+0x3c>)
 8001e12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_FLASH_Unlock+0x38>)
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_FLASH_Unlock+0x40>)
 8001e18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_FLASH_Unlock+0x38>)
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	da01      	bge.n	8001e26 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e26:	79fb      	ldrb	r3, [r7, #7]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40023c00 	.word	0x40023c00
 8001e38:	45670123 	.word	0x45670123
 8001e3c:	cdef89ab 	.word	0xcdef89ab

08001e40 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e4c:	4b1a      	ldr	r3, [pc, #104]	; (8001eb8 <FLASH_WaitForLastOperation+0x78>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e52:	f7ff fe75 	bl	8001b40 <HAL_GetTick>
 8001e56:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e58:	e010      	b.n	8001e7c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d00c      	beq.n	8001e7c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <FLASH_WaitForLastOperation+0x38>
 8001e68:	f7ff fe6a 	bl	8001b40 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d201      	bcs.n	8001e7c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e019      	b.n	8001eb0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <FLASH_WaitForLastOperation+0x7c>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1e8      	bne.n	8001e5a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <FLASH_WaitForLastOperation+0x7c>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <FLASH_WaitForLastOperation+0x7c>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <FLASH_WaitForLastOperation+0x7c>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001ea6:	f000 f8a5 	bl	8001ff4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
  
}  
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200004b0 	.word	0x200004b0
 8001ebc:	40023c00 	.word	0x40023c00

08001ec0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <FLASH_Program_DoubleWord+0x60>)
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	4a13      	ldr	r2, [pc, #76]	; (8001f20 <FLASH_Program_DoubleWord+0x60>)
 8001ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <FLASH_Program_DoubleWord+0x60>)
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <FLASH_Program_DoubleWord+0x60>)
 8001ede:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ee2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <FLASH_Program_DoubleWord+0x60>)
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <FLASH_Program_DoubleWord+0x60>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001ef6:	f3bf 8f6f 	isb	sy
}
 8001efa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	000a      	movs	r2, r1
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	68f9      	ldr	r1, [r7, #12]
 8001f0e:	3104      	adds	r1, #4
 8001f10:	4613      	mov	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	40023c00 	.word	0x40023c00

08001f24 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <FLASH_Program_Word+0x40>)
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <FLASH_Program_Word+0x40>)
 8001f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <FLASH_Program_Word+0x40>)
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	4a09      	ldr	r2, [pc, #36]	; (8001f64 <FLASH_Program_Word+0x40>)
 8001f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <FLASH_Program_Word+0x40>)
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <FLASH_Program_Word+0x40>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	601a      	str	r2, [r3, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	460b      	mov	r3, r1
 8001f72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <FLASH_Program_HalfWord+0x44>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <FLASH_Program_HalfWord+0x44>)
 8001f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001f80:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <FLASH_Program_HalfWord+0x44>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	4a09      	ldr	r2, [pc, #36]	; (8001fac <FLASH_Program_HalfWord+0x44>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <FLASH_Program_HalfWord+0x44>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	4a06      	ldr	r2, [pc, #24]	; (8001fac <FLASH_Program_HalfWord+0x44>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	801a      	strh	r2, [r3, #0]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	40023c00 	.word	0x40023c00

08001fb0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <FLASH_Program_Byte+0x40>)
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	; (8001ff0 <FLASH_Program_Byte+0x40>)
 8001fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <FLASH_Program_Byte+0x40>)
 8001fca:	4a09      	ldr	r2, [pc, #36]	; (8001ff0 <FLASH_Program_Byte+0x40>)
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <FLASH_Program_Byte+0x40>)
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	4a06      	ldr	r2, [pc, #24]	; (8001ff0 <FLASH_Program_Byte+0x40>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	78fa      	ldrb	r2, [r7, #3]
 8001fe0:	701a      	strb	r2, [r3, #0]
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40023c00 	.word	0x40023c00

08001ff4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f043 0310 	orr.w	r3, r3, #16
 800200c:	4a2b      	ldr	r2, [pc, #172]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 800200e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 8002012:	2210      	movs	r2, #16
 8002014:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f043 0308 	orr.w	r3, r3, #8
 800202a:	4a24      	ldr	r2, [pc, #144]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 800202c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 8002030:	2220      	movs	r2, #32
 8002032:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 800204a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 800204e:	2240      	movs	r2, #64	; 0x40
 8002050:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002052:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800205e:	4b17      	ldr	r3, [pc, #92]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 8002068:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002078:	2b00      	cmp	r3, #0
 800207a:	d009      	beq.n	8002090 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800207c:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	4a0d      	ldr	r2, [pc, #52]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 8002086:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 800208a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800208e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002090:	4b09      	ldr	r3, [pc, #36]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	f043 0320 	orr.w	r3, r3, #32
 80020a4:	4a05      	ldr	r2, [pc, #20]	; (80020bc <FLASH_SetErrorCode+0xc8>)
 80020a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80020a8:	4b03      	ldr	r3, [pc, #12]	; (80020b8 <FLASH_SetErrorCode+0xc4>)
 80020aa:	2202      	movs	r2, #2
 80020ac:	60da      	str	r2, [r3, #12]
  }
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40023c00 	.word	0x40023c00
 80020bc:	200004b0 	.word	0x200004b0

080020c0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80020d2:	4b31      	ldr	r3, [pc, #196]	; (8002198 <HAL_FLASHEx_Erase+0xd8>)
 80020d4:	7e1b      	ldrb	r3, [r3, #24]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_FLASHEx_Erase+0x1e>
 80020da:	2302      	movs	r3, #2
 80020dc:	e058      	b.n	8002190 <HAL_FLASHEx_Erase+0xd0>
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <HAL_FLASHEx_Erase+0xd8>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020e8:	f7ff feaa 	bl	8001e40 <FLASH_WaitForLastOperation>
 80020ec:	4603      	mov	r3, r0
 80020ee:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d148      	bne.n	8002188 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d115      	bne.n	8002132 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f000 f844 	bl	80021a0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002118:	f24c 3050 	movw	r0, #50000	; 0xc350
 800211c:	f7ff fe90 	bl	8001e40 <FLASH_WaitForLastOperation>
 8002120:	4603      	mov	r3, r0
 8002122:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_FLASHEx_Erase+0xdc>)
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_FLASHEx_Erase+0xdc>)
 800212a:	f023 0304 	bic.w	r3, r3, #4
 800212e:	6113      	str	r3, [r2, #16]
 8002130:	e028      	b.n	8002184 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	e01c      	b.n	8002174 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4619      	mov	r1, r3
 8002142:	68b8      	ldr	r0, [r7, #8]
 8002144:	f000 f850 	bl	80021e8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002148:	f24c 3050 	movw	r0, #50000	; 0xc350
 800214c:	f7ff fe78 	bl	8001e40 <FLASH_WaitForLastOperation>
 8002150:	4603      	mov	r3, r0
 8002152:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_FLASHEx_Erase+0xdc>)
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4a10      	ldr	r2, [pc, #64]	; (800219c <HAL_FLASHEx_Erase+0xdc>)
 800215a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800215e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	601a      	str	r2, [r3, #0]
          break;
 800216c:	e00a      	b.n	8002184 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3301      	adds	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4413      	add	r3, r2
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	429a      	cmp	r2, r3
 8002182:	d3da      	bcc.n	800213a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002184:	f000 f878 	bl	8002278 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_FLASHEx_Erase+0xd8>)
 800218a:	2200      	movs	r2, #0
 800218c:	761a      	strb	r2, [r3, #24]

  return status;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	200004b0 	.word	0x200004b0
 800219c:	40023c00 	.word	0x40023c00

080021a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <FLASH_MassErase+0x44>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	4a0c      	ldr	r2, [pc, #48]	; (80021e4 <FLASH_MassErase+0x44>)
 80021b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <FLASH_MassErase+0x44>)
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <FLASH_MassErase+0x44>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <FLASH_MassErase+0x44>)
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	4313      	orrs	r3, r2
 80021ce:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <FLASH_MassErase+0x44>)
 80021d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d4:	6113      	str	r3, [r2, #16]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	e010      	b.n	8002226 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d103      	bne.n	8002212 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800220a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e009      	b.n	8002226 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002212:	78fb      	ldrb	r3, [r7, #3]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d103      	bne.n	8002220 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e002      	b.n	8002226 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002220:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002224:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	490f      	ldr	r1, [pc, #60]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800223e:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	4a0c      	ldr	r2, [pc, #48]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 8002244:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002248:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4313      	orrs	r3, r2
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 8002256:	f043 0302 	orr.w	r3, r3, #2
 800225a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <FLASH_Erase_Sector+0x8c>)
 8002262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002266:	6113      	str	r3, [r2, #16]
}
 8002268:	bf00      	nop
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40023c00 	.word	0x40023c00

08002278 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <FLASH_FlushCaches+0x88>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002284:	2b00      	cmp	r3, #0
 8002286:	d017      	beq.n	80022b8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <FLASH_FlushCaches+0x88>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1c      	ldr	r2, [pc, #112]	; (8002300 <FLASH_FlushCaches+0x88>)
 800228e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002292:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002294:	4b1a      	ldr	r3, [pc, #104]	; (8002300 <FLASH_FlushCaches+0x88>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <FLASH_FlushCaches+0x88>)
 800229a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a16      	ldr	r2, [pc, #88]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022aa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a13      	ldr	r2, [pc, #76]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d017      	beq.n	80022f4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0d      	ldr	r2, [pc, #52]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022ce:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022da:	6013      	str	r3, [r2, #0]
 80022dc:	4b08      	ldr	r3, [pc, #32]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <FLASH_FlushCaches+0x88>)
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022f2:	6013      	str	r3, [r2, #0]
  }
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023c00 	.word	0x40023c00

08002304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	; 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	e159      	b.n	80025d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002320:	2201      	movs	r2, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	697a      	ldr	r2, [r7, #20]
 8002330:	4013      	ands	r3, r2
 8002332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	429a      	cmp	r2, r3
 800233a:	f040 8148 	bne.w	80025ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d005      	beq.n	8002356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002352:	2b02      	cmp	r3, #2
 8002354:	d130      	bne.n	80023b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	2203      	movs	r2, #3
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238c:	2201      	movs	r2, #1
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	f003 0201 	and.w	r2, r3, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d017      	beq.n	80023f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d123      	bne.n	8002448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	08da      	lsrs	r2, r3, #3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3208      	adds	r2, #8
 8002408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	220f      	movs	r2, #15
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691a      	ldr	r2, [r3, #16]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	08da      	lsrs	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3208      	adds	r2, #8
 8002442:	69b9      	ldr	r1, [r7, #24]
 8002444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a2 	beq.w	80025ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b57      	ldr	r3, [pc, #348]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002492:	4a56      	ldr	r2, [pc, #344]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 8002494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002498:	6453      	str	r3, [r2, #68]	; 0x44
 800249a:	4b54      	ldr	r3, [pc, #336]	; (80025ec <HAL_GPIO_Init+0x2e8>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a6:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	3302      	adds	r3, #2
 80024ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0303 	and.w	r3, r3, #3
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	220f      	movs	r2, #15
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	43db      	mvns	r3, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4013      	ands	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a49      	ldr	r2, [pc, #292]	; (80025f4 <HAL_GPIO_Init+0x2f0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d019      	beq.n	8002506 <HAL_GPIO_Init+0x202>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a48      	ldr	r2, [pc, #288]	; (80025f8 <HAL_GPIO_Init+0x2f4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d013      	beq.n	8002502 <HAL_GPIO_Init+0x1fe>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a47      	ldr	r2, [pc, #284]	; (80025fc <HAL_GPIO_Init+0x2f8>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d00d      	beq.n	80024fe <HAL_GPIO_Init+0x1fa>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a46      	ldr	r2, [pc, #280]	; (8002600 <HAL_GPIO_Init+0x2fc>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d007      	beq.n	80024fa <HAL_GPIO_Init+0x1f6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a45      	ldr	r2, [pc, #276]	; (8002604 <HAL_GPIO_Init+0x300>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_GPIO_Init+0x1f2>
 80024f2:	2304      	movs	r3, #4
 80024f4:	e008      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024f6:	2307      	movs	r3, #7
 80024f8:	e006      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024fa:	2303      	movs	r3, #3
 80024fc:	e004      	b.n	8002508 <HAL_GPIO_Init+0x204>
 80024fe:	2302      	movs	r3, #2
 8002500:	e002      	b.n	8002508 <HAL_GPIO_Init+0x204>
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <HAL_GPIO_Init+0x204>
 8002506:	2300      	movs	r3, #0
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	f002 0203 	and.w	r2, r2, #3
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	4093      	lsls	r3, r2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002518:	4935      	ldr	r1, [pc, #212]	; (80025f0 <HAL_GPIO_Init+0x2ec>)
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002526:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800254a:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_GPIO_Init+0x304>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002550:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002574:	4a24      	ldr	r2, [pc, #144]	; (8002608 <HAL_GPIO_Init+0x304>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800257a:	4b23      	ldr	r3, [pc, #140]	; (8002608 <HAL_GPIO_Init+0x304>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800259e:	4a1a      	ldr	r2, [pc, #104]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a4:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025c8:	4a0f      	ldr	r2, [pc, #60]	; (8002608 <HAL_GPIO_Init+0x304>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3301      	adds	r3, #1
 80025d2:	61fb      	str	r3, [r7, #28]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2b0f      	cmp	r3, #15
 80025d8:	f67f aea2 	bls.w	8002320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025dc:	bf00      	nop
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40013800 	.word	0x40013800
 80025f4:	40020000 	.word	0x40020000
 80025f8:	40020400 	.word	0x40020400
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020c00 	.word	0x40020c00
 8002604:	40021000 	.word	0x40021000
 8002608:	40013c00 	.word	0x40013c00

0800260c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
 8002618:	4613      	mov	r3, r2
 800261a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800261c:	787b      	ldrb	r3, [r7, #1]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002622:	887a      	ldrh	r2, [r7, #2]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002628:	e003      	b.n	8002632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800262a:	887b      	ldrh	r3, [r7, #2]
 800262c:	041a      	lsls	r2, r3, #16
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800263e:	b480      	push	{r7}
 8002640:	b085      	sub	sp, #20
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
 8002646:	460b      	mov	r3, r1
 8002648:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002650:	887a      	ldrh	r2, [r7, #2]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4013      	ands	r3, r2
 8002656:	041a      	lsls	r2, r3, #16
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	43d9      	mvns	r1, r3
 800265c:	887b      	ldrh	r3, [r7, #2]
 800265e:	400b      	ands	r3, r1
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	619a      	str	r2, [r3, #24]
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e267      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d075      	beq.n	800277e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002692:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b04      	cmp	r3, #4
 800269c:	d00c      	beq.n	80026b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269e:	4b85      	ldr	r3, [pc, #532]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d112      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026aa:	4b82      	ldr	r3, [pc, #520]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b6:	d10b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b8:	4b7e      	ldr	r3, [pc, #504]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d05b      	beq.n	800277c <HAL_RCC_OscConfig+0x108>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d157      	bne.n	800277c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e242      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d8:	d106      	bne.n	80026e8 <HAL_RCC_OscConfig+0x74>
 80026da:	4b76      	ldr	r3, [pc, #472]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a75      	ldr	r2, [pc, #468]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e01d      	b.n	8002724 <HAL_RCC_OscConfig+0xb0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x98>
 80026f2:	4b70      	ldr	r3, [pc, #448]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a6f      	ldr	r2, [pc, #444]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80026f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b6d      	ldr	r3, [pc, #436]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6c      	ldr	r2, [pc, #432]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e00b      	b.n	8002724 <HAL_RCC_OscConfig+0xb0>
 800270c:	4b69      	ldr	r3, [pc, #420]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a68      	ldr	r2, [pc, #416]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a65      	ldr	r2, [pc, #404]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800271e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff fa08 	bl	8001b40 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002734:	f7ff fa04 	bl	8001b40 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b64      	cmp	r3, #100	; 0x64
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e207      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0f0      	beq.n	8002734 <HAL_RCC_OscConfig+0xc0>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff f9f4 	bl	8001b40 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800275c:	f7ff f9f0 	bl	8001b40 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b64      	cmp	r3, #100	; 0x64
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e1f3      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276e:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0xe8>
 800277a:	e000      	b.n	800277e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800277c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d063      	beq.n	8002852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800278a:	4b4a      	ldr	r3, [pc, #296]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d11c      	bne.n	80027dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a2:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d116      	bne.n	80027dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_RCC_OscConfig+0x152>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e1c7      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4937      	ldr	r1, [pc, #220]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027da:	e03a      	b.n	8002852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d020      	beq.n	8002826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027e4:	4b34      	ldr	r3, [pc, #208]	; (80028b8 <HAL_RCC_OscConfig+0x244>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7ff f9a9 	bl	8001b40 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f2:	f7ff f9a5 	bl	8001b40 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1a8      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b28      	ldr	r3, [pc, #160]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4925      	ldr	r1, [pc, #148]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]
 8002824:	e015      	b.n	8002852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_OscConfig+0x244>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7ff f988 	bl	8001b40 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002834:	f7ff f984 	bl	8001b40 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e187      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	2b00      	cmp	r3, #0
 800285c:	d036      	beq.n	80028cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002866:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_RCC_OscConfig+0x248>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800286c:	f7ff f968 	bl	8001b40 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002874:	f7ff f964 	bl	8001b40 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e167      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002886:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_OscConfig+0x240>)
 8002888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d0f0      	beq.n	8002874 <HAL_RCC_OscConfig+0x200>
 8002892:	e01b      	b.n	80028cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002894:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_RCC_OscConfig+0x248>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289a:	f7ff f951 	bl	8001b40 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a0:	e00e      	b.n	80028c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028a2:	f7ff f94d 	bl	8001b40 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d907      	bls.n	80028c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e150      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
 80028b4:	40023800 	.word	0x40023800
 80028b8:	42470000 	.word	0x42470000
 80028bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b88      	ldr	r3, [pc, #544]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1ea      	bne.n	80028a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 8097 	beq.w	8002a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028de:	4b81      	ldr	r3, [pc, #516]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	4b7d      	ldr	r3, [pc, #500]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a7c      	ldr	r2, [pc, #496]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b7a      	ldr	r3, [pc, #488]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002902:	60bb      	str	r3, [r7, #8]
 8002904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002906:	2301      	movs	r3, #1
 8002908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b77      	ldr	r3, [pc, #476]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b74      	ldr	r3, [pc, #464]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a73      	ldr	r2, [pc, #460]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7ff f90d 	bl	8001b40 <HAL_GetTick>
 8002926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7ff f909 	bl	8001b40 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e10c      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_OscConfig+0x474>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d106      	bne.n	800295e <HAL_RCC_OscConfig+0x2ea>
 8002950:	4b64      	ldr	r3, [pc, #400]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002954:	4a63      	ldr	r2, [pc, #396]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6713      	str	r3, [r2, #112]	; 0x70
 800295c:	e01c      	b.n	8002998 <HAL_RCC_OscConfig+0x324>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d10c      	bne.n	8002980 <HAL_RCC_OscConfig+0x30c>
 8002966:	4b5f      	ldr	r3, [pc, #380]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	4a5e      	ldr	r2, [pc, #376]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 800296c:	f043 0304 	orr.w	r3, r3, #4
 8002970:	6713      	str	r3, [r2, #112]	; 0x70
 8002972:	4b5c      	ldr	r3, [pc, #368]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002976:	4a5b      	ldr	r2, [pc, #364]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6713      	str	r3, [r2, #112]	; 0x70
 800297e:	e00b      	b.n	8002998 <HAL_RCC_OscConfig+0x324>
 8002980:	4b58      	ldr	r3, [pc, #352]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002984:	4a57      	ldr	r2, [pc, #348]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	6713      	str	r3, [r2, #112]	; 0x70
 800298c:	4b55      	ldr	r3, [pc, #340]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	4a54      	ldr	r2, [pc, #336]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002992:	f023 0304 	bic.w	r3, r3, #4
 8002996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d015      	beq.n	80029cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7ff f8ce 	bl	8001b40 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	e00a      	b.n	80029be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7ff f8ca 	bl	8001b40 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e0cb      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0ee      	beq.n	80029a8 <HAL_RCC_OscConfig+0x334>
 80029ca:	e014      	b.n	80029f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7ff f8b8 	bl	8001b40 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d2:	e00a      	b.n	80029ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d4:	f7ff f8b4 	bl	8001b40 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0b5      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1ee      	bne.n	80029d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f6:	7dfb      	ldrb	r3, [r7, #23]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d105      	bne.n	8002a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fc:	4b39      	ldr	r3, [pc, #228]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	4a38      	ldr	r2, [pc, #224]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a1 	beq.w	8002b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a12:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d05c      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d141      	bne.n	8002aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_OscConfig+0x478>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7ff f888 	bl	8001b40 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7ff f884 	bl	8001b40 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e087      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	4b27      	ldr	r3, [pc, #156]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	041b      	lsls	r3, r3, #16
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	061b      	lsls	r3, r3, #24
 8002a76:	491b      	ldr	r1, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x478>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7ff f85d 	bl	8001b40 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7ff f859 	bl	8001b40 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e05c      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9c:	4b11      	ldr	r3, [pc, #68]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f0      	beq.n	8002a8a <HAL_RCC_OscConfig+0x416>
 8002aa8:	e054      	b.n	8002b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCC_OscConfig+0x478>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f846 	bl	8001b40 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab8:	f7ff f842 	bl	8001b40 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e045      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	4b06      	ldr	r3, [pc, #24]	; (8002ae4 <HAL_RCC_OscConfig+0x470>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x444>
 8002ad6:	e03d      	b.n	8002b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d107      	bne.n	8002af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e038      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_RCC_OscConfig+0x4ec>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d028      	beq.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d121      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d11a      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b20:	4013      	ands	r3, r2
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d111      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d001      	beq.n	8002b54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40023800 	.word	0x40023800

08002b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0cc      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b78:	4b68      	ldr	r3, [pc, #416]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d90c      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b65      	ldr	r3, [pc, #404]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0b8      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d020      	beq.n	8002bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0308 	and.w	r3, r3, #8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bd0:	4b53      	ldr	r3, [pc, #332]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bdc:	4b50      	ldr	r3, [pc, #320]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	494d      	ldr	r1, [pc, #308]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d044      	beq.n	8002c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b47      	ldr	r3, [pc, #284]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d119      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e07f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e06f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c32:	4b3b      	ldr	r3, [pc, #236]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e067      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c42:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4934      	ldr	r1, [pc, #208]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c54:	f7fe ff74 	bl	8001b40 <HAL_GetTick>
 8002c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	e00a      	b.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5c:	f7fe ff70 	bl	8001b40 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e04f      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 020c 	and.w	r2, r3, #12
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d1eb      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c84:	4b25      	ldr	r3, [pc, #148]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20c      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	4b20      	ldr	r3, [pc, #128]	; (8002d1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d001      	beq.n	8002cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d008      	beq.n	8002cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4916      	ldr	r1, [pc, #88]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	490e      	ldr	r1, [pc, #56]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cea:	f000 f821 	bl	8002d30 <HAL_RCC_GetSysClockFreq>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	091b      	lsrs	r3, r3, #4
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	490a      	ldr	r1, [pc, #40]	; (8002d24 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	5ccb      	ldrb	r3, [r1, r3]
 8002cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1c8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fdd4 	bl	80018b8 <HAL_InitTick>

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023c00 	.word	0x40023c00
 8002d20:	40023800 	.word	0x40023800
 8002d24:	08006a30 	.word	0x08006a30
 8002d28:	20000038 	.word	0x20000038
 8002d2c:	2000003c 	.word	0x2000003c

08002d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d34:	b094      	sub	sp, #80	; 0x50
 8002d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d40:	2300      	movs	r3, #0
 8002d42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d48:	4b79      	ldr	r3, [pc, #484]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d00d      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0x40>
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	f200 80e1 	bhi.w	8002f1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d002      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d003      	beq.n	8002d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d62:	e0db      	b.n	8002f1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4b73      	ldr	r3, [pc, #460]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d68:	e0db      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6a:	4b73      	ldr	r3, [pc, #460]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d6e:	e0d8      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d70:	4b6f      	ldr	r3, [pc, #444]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d063      	beq.n	8002e4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d86:	4b6a      	ldr	r3, [pc, #424]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	099b      	lsrs	r3, r3, #6
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d98:	633b      	str	r3, [r7, #48]	; 0x30
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002d9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002da2:	4622      	mov	r2, r4
 8002da4:	462b      	mov	r3, r5
 8002da6:	f04f 0000 	mov.w	r0, #0
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	0159      	lsls	r1, r3, #5
 8002db0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002db4:	0150      	lsls	r0, r2, #5
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4621      	mov	r1, r4
 8002dbc:	1a51      	subs	r1, r2, r1
 8002dbe:	6139      	str	r1, [r7, #16]
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	018b      	lsls	r3, r1, #6
 8002dd8:	4651      	mov	r1, sl
 8002dda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dde:	4651      	mov	r1, sl
 8002de0:	018a      	lsls	r2, r1, #6
 8002de2:	4651      	mov	r1, sl
 8002de4:	ebb2 0801 	subs.w	r8, r2, r1
 8002de8:	4659      	mov	r1, fp
 8002dea:	eb63 0901 	sbc.w	r9, r3, r1
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e02:	4690      	mov	r8, r2
 8002e04:	4699      	mov	r9, r3
 8002e06:	4623      	mov	r3, r4
 8002e08:	eb18 0303 	adds.w	r3, r8, r3
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	462b      	mov	r3, r5
 8002e10:	eb49 0303 	adc.w	r3, r9, r3
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	f04f 0200 	mov.w	r2, #0
 8002e1a:	f04f 0300 	mov.w	r3, #0
 8002e1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e22:	4629      	mov	r1, r5
 8002e24:	024b      	lsls	r3, r1, #9
 8002e26:	4621      	mov	r1, r4
 8002e28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e2c:	4621      	mov	r1, r4
 8002e2e:	024a      	lsls	r2, r1, #9
 8002e30:	4610      	mov	r0, r2
 8002e32:	4619      	mov	r1, r3
 8002e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e36:	2200      	movs	r2, #0
 8002e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e40:	f7fd fa26 	bl	8000290 <__aeabi_uldivmod>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4613      	mov	r3, r2
 8002e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e4c:	e058      	b.n	8002f00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4e:	4b38      	ldr	r3, [pc, #224]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	099b      	lsrs	r3, r3, #6
 8002e54:	2200      	movs	r2, #0
 8002e56:	4618      	mov	r0, r3
 8002e58:	4611      	mov	r1, r2
 8002e5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e5e:	623b      	str	r3, [r7, #32]
 8002e60:	2300      	movs	r3, #0
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
 8002e64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e68:	4642      	mov	r2, r8
 8002e6a:	464b      	mov	r3, r9
 8002e6c:	f04f 0000 	mov.w	r0, #0
 8002e70:	f04f 0100 	mov.w	r1, #0
 8002e74:	0159      	lsls	r1, r3, #5
 8002e76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e7a:	0150      	lsls	r0, r2, #5
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4641      	mov	r1, r8
 8002e82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e86:	4649      	mov	r1, r9
 8002e88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ea0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ea4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	00eb      	lsls	r3, r5, #3
 8002eb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eb6:	00e2      	lsls	r2, r4, #3
 8002eb8:	4614      	mov	r4, r2
 8002eba:	461d      	mov	r5, r3
 8002ebc:	4643      	mov	r3, r8
 8002ebe:	18e3      	adds	r3, r4, r3
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	464b      	mov	r3, r9
 8002ec4:	eb45 0303 	adc.w	r3, r5, r3
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	028b      	lsls	r3, r1, #10
 8002eda:	4621      	mov	r1, r4
 8002edc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	028a      	lsls	r2, r1, #10
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eea:	2200      	movs	r2, #0
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	61fa      	str	r2, [r7, #28]
 8002ef0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ef4:	f7fd f9cc 	bl	8000290 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4613      	mov	r3, r2
 8002efe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f1a:	e002      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3750      	adds	r7, #80	; 0x50
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	00f42400 	.word	0x00f42400
 8002f38:	007a1200 	.word	0x007a1200

08002f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000038 	.word	0x20000038

08002f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f58:	f7ff fff0 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	0a9b      	lsrs	r3, r3, #10
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	4903      	ldr	r1, [pc, #12]	; (8002f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f6a:	5ccb      	ldrb	r3, [r1, r3]
 8002f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40023800 	.word	0x40023800
 8002f78:	08006a40 	.word	0x08006a40

08002f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f80:	f7ff ffdc 	bl	8002f3c <HAL_RCC_GetHCLKFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	0b5b      	lsrs	r3, r3, #13
 8002f8c:	f003 0307 	and.w	r3, r3, #7
 8002f90:	4903      	ldr	r1, [pc, #12]	; (8002fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f92:	5ccb      	ldrb	r3, [r1, r3]
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	08006a40 	.word	0x08006a40

08002fa4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	220f      	movs	r2, #15
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 0203 	and.w	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_GetClockConfig+0x5c>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	08db      	lsrs	r3, r3, #3
 8002fde:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RCC_GetClockConfig+0x60>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0207 	and.w	r2, r3, #7
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	40023c00 	.word	0x40023c00

08003008 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e041      	b.n	800309e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fe fbd8 	bl	80017e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3304      	adds	r3, #4
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f000 fa70 	bl	800352c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d001      	beq.n	80030c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e044      	b.n	800314a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_TIM_Base_Start_IT+0xb0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d018      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d013      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a1a      	ldr	r2, [pc, #104]	; (800315c <HAL_TIM_Base_Start_IT+0xb4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00e      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_TIM_Base_Start_IT+0xb8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d009      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <HAL_TIM_Base_Start_IT+0xbc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_TIM_Base_Start_IT+0x6c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a16      	ldr	r2, [pc, #88]	; (8003168 <HAL_TIM_Base_Start_IT+0xc0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d111      	bne.n	8003138 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b06      	cmp	r3, #6
 8003124:	d010      	beq.n	8003148 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0201 	orr.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003136:	e007      	b.n	8003148 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40010000 	.word	0x40010000
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800
 8003164:	40000c00 	.word	0x40000c00
 8003168:	40014000 	.word	0x40014000

0800316c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d020      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f06f 0202 	mvn.w	r2, #2
 80031a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f999 	bl	80034ee <HAL_TIM_IC_CaptureCallback>
 80031bc:	e005      	b.n	80031ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f98b 	bl	80034da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 f99c 	bl	8003502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d020      	beq.n	800321c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01b      	beq.n	800321c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0204 	mvn.w	r2, #4
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f973 	bl	80034ee <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f965 	bl	80034da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f976 	bl	8003502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d020      	beq.n	8003268 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d01b      	beq.n	8003268 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0208 	mvn.w	r2, #8
 8003238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2204      	movs	r2, #4
 800323e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f94d 	bl	80034ee <HAL_TIM_IC_CaptureCallback>
 8003254:	e005      	b.n	8003262 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f93f 	bl	80034da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f950 	bl	8003502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d020      	beq.n	80032b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0310 	and.w	r3, r3, #16
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01b      	beq.n	80032b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f06f 0210 	mvn.w	r2, #16
 8003284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2208      	movs	r2, #8
 800328a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f927 	bl	80034ee <HAL_TIM_IC_CaptureCallback>
 80032a0:	e005      	b.n	80032ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f919 	bl	80034da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f92a 	bl	8003502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00c      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d007      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0201 	mvn.w	r2, #1
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe f972 	bl	80015bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fab6 	bl	8003868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f8fb 	bl	8003516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0320 	and.w	r3, r3, #32
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0220 	mvn.w	r2, #32
 800333c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fa88 	bl	8003854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIM_ConfigClockSource+0x1c>
 8003364:	2302      	movs	r3, #2
 8003366:	e0b4      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x186>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800338e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a0:	d03e      	beq.n	8003420 <HAL_TIM_ConfigClockSource+0xd4>
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a6:	f200 8087 	bhi.w	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ae:	f000 8086 	beq.w	80034be <HAL_TIM_ConfigClockSource+0x172>
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b6:	d87f      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b70      	cmp	r3, #112	; 0x70
 80033ba:	d01a      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0xa6>
 80033bc:	2b70      	cmp	r3, #112	; 0x70
 80033be:	d87b      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b60      	cmp	r3, #96	; 0x60
 80033c2:	d050      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x11a>
 80033c4:	2b60      	cmp	r3, #96	; 0x60
 80033c6:	d877      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b50      	cmp	r3, #80	; 0x50
 80033ca:	d03c      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0xfa>
 80033cc:	2b50      	cmp	r3, #80	; 0x50
 80033ce:	d873      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d058      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x13a>
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d86f      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b30      	cmp	r3, #48	; 0x30
 80033da:	d064      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x15a>
 80033dc:	2b30      	cmp	r3, #48	; 0x30
 80033de:	d86b      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d060      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x15a>
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d867      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d05c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x15a>
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d05a      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x15a>
 80033f0:	e062      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003402:	f000 f999 	bl	8003738 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	609a      	str	r2, [r3, #8]
      break;
 800341e:	e04f      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003430:	f000 f982 	bl	8003738 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003442:	609a      	str	r2, [r3, #8]
      break;
 8003444:	e03c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003452:	461a      	mov	r2, r3
 8003454:	f000 f8f6 	bl	8003644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2150      	movs	r1, #80	; 0x50
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f94f 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 8003464:	e02c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003472:	461a      	mov	r2, r3
 8003474:	f000 f915 	bl	80036a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2160      	movs	r1, #96	; 0x60
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f93f 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 8003484:	e01c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003492:	461a      	mov	r2, r3
 8003494:	f000 f8d6 	bl	8003644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f92f 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 80034a4:	e00c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f000 f926 	bl	8003702 <TIM_ITRx_SetConfig>
      break;
 80034b6:	e003      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e000      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a3a      	ldr	r2, [pc, #232]	; (8003628 <TIM_Base_SetConfig+0xfc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00f      	beq.n	8003564 <TIM_Base_SetConfig+0x38>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354a:	d00b      	beq.n	8003564 <TIM_Base_SetConfig+0x38>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a37      	ldr	r2, [pc, #220]	; (800362c <TIM_Base_SetConfig+0x100>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <TIM_Base_SetConfig+0x38>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a36      	ldr	r2, [pc, #216]	; (8003630 <TIM_Base_SetConfig+0x104>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_Base_SetConfig+0x38>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a35      	ldr	r2, [pc, #212]	; (8003634 <TIM_Base_SetConfig+0x108>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d108      	bne.n	8003576 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <TIM_Base_SetConfig+0xfc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01b      	beq.n	80035b6 <TIM_Base_SetConfig+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d017      	beq.n	80035b6 <TIM_Base_SetConfig+0x8a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a28      	ldr	r2, [pc, #160]	; (800362c <TIM_Base_SetConfig+0x100>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <TIM_Base_SetConfig+0x8a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <TIM_Base_SetConfig+0x104>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00f      	beq.n	80035b6 <TIM_Base_SetConfig+0x8a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a26      	ldr	r2, [pc, #152]	; (8003634 <TIM_Base_SetConfig+0x108>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00b      	beq.n	80035b6 <TIM_Base_SetConfig+0x8a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a25      	ldr	r2, [pc, #148]	; (8003638 <TIM_Base_SetConfig+0x10c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <TIM_Base_SetConfig+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a24      	ldr	r2, [pc, #144]	; (800363c <TIM_Base_SetConfig+0x110>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d003      	beq.n	80035b6 <TIM_Base_SetConfig+0x8a>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a23      	ldr	r2, [pc, #140]	; (8003640 <TIM_Base_SetConfig+0x114>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d108      	bne.n	80035c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a0e      	ldr	r2, [pc, #56]	; (8003628 <TIM_Base_SetConfig+0xfc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d103      	bne.n	80035fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d105      	bne.n	800361a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f023 0201 	bic.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	611a      	str	r2, [r3, #16]
  }
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	40010000 	.word	0x40010000
 800362c:	40000400 	.word	0x40000400
 8003630:	40000800 	.word	0x40000800
 8003634:	40000c00 	.word	0x40000c00
 8003638:	40014000 	.word	0x40014000
 800363c:	40014400 	.word	0x40014400
 8003640:	40014800 	.word	0x40014800

08003644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f023 0201 	bic.w	r2, r3, #1
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800366e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f023 030a 	bic.w	r3, r3, #10
 8003680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	bf00      	nop
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b087      	sub	sp, #28
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f023 0210 	bic.w	r2, r3, #16
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	031b      	lsls	r3, r3, #12
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	f043 0307 	orr.w	r3, r3, #7
 8003724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	021a      	lsls	r2, r3, #8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	431a      	orrs	r2, r3
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	4313      	orrs	r3, r2
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	609a      	str	r2, [r3, #8]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800378c:	2302      	movs	r3, #2
 800378e:	e050      	b.n	8003832 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d018      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037dc:	d013      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a18      	ldr	r2, [pc, #96]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a15      	ldr	r2, [pc, #84]	; (800384c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a13      	ldr	r2, [pc, #76]	; (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d10c      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800380c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	4313      	orrs	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68ba      	ldr	r2, [r7, #8]
 800381e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40014000 	.word	0x40014000

08003854 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e042      	b.n	8003914 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd ffc0 	bl	8001828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2224      	movs	r2, #36	; 0x24
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fa09 	bl	8003cd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b08a      	sub	sp, #40	; 0x28
 8003920:	af02      	add	r7, sp, #8
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b20      	cmp	r3, #32
 800393a:	d175      	bne.n	8003a28 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_UART_Transmit+0x2c>
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e06e      	b.n	8003a2a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2221      	movs	r2, #33	; 0x21
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800395a:	f7fe f8f1 	bl	8001b40 <HAL_GetTick>
 800395e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003974:	d108      	bne.n	8003988 <HAL_UART_Transmit+0x6c>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d104      	bne.n	8003988 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e003      	b.n	8003990 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003990:	e02e      	b.n	80039f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	2180      	movs	r1, #128	; 0x80
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f8df 	bl	8003b60 <UART_WaitOnFlagUntilTimeout>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e03a      	b.n	8003a2a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	3302      	adds	r3, #2
 80039ce:	61bb      	str	r3, [r7, #24]
 80039d0:	e007      	b.n	80039e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	781a      	ldrb	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	3301      	adds	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1cb      	bne.n	8003992 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2140      	movs	r1, #64	; 0x40
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f8ab 	bl	8003b60 <UART_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e006      	b.n	8003a2a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b08a      	sub	sp, #40	; 0x28
 8003a36:	af02      	add	r7, sp, #8
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	f040 8081 	bne.w	8003b56 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_UART_Receive+0x2e>
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e079      	b.n	8003b58 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2222      	movs	r2, #34	; 0x22
 8003a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a78:	f7fe f862 	bl	8001b40 <HAL_GetTick>
 8003a7c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	88fa      	ldrh	r2, [r7, #6]
 8003a82:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a92:	d108      	bne.n	8003aa6 <HAL_UART_Receive+0x74>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d104      	bne.n	8003aa6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e003      	b.n	8003aae <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003aae:	e047      	b.n	8003b40 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2120      	movs	r1, #32
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f850 	bl	8003b60 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e042      	b.n	8003b58 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10c      	bne.n	8003af2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	3302      	adds	r3, #2
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	e01f      	b.n	8003b32 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d007      	beq.n	8003b0c <HAL_UART_Receive+0xda>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <HAL_UART_Receive+0xe8>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	701a      	strb	r2, [r3, #0]
 8003b18:	e008      	b.n	8003b2c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1b2      	bne.n	8003ab0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e000      	b.n	8003b58 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
  }
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3720      	adds	r7, #32
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b086      	sub	sp, #24
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b70:	e03b      	b.n	8003bea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d037      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7a:	f7fd ffe1 	bl	8001b40 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	6a3a      	ldr	r2, [r7, #32]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d302      	bcc.n	8003b90 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e03a      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d023      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b80      	cmp	r3, #128	; 0x80
 8003ba6:	d020      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d01d      	beq.n	8003bea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d116      	bne.n	8003bea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f81d 	bl	8003c12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e00f      	b.n	8003c0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	2300      	movne	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	79fb      	ldrb	r3, [r7, #7]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d0b4      	beq.n	8003b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b095      	sub	sp, #84	; 0x54
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c24:	e853 3f00 	ldrex	r3, [r3]
 8003c28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	330c      	adds	r3, #12
 8003c38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c3a:	643a      	str	r2, [r7, #64]	; 0x40
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e5      	bne.n	8003c1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3314      	adds	r3, #20
 8003c54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d119      	bne.n	8003cbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0310 	bic.w	r3, r3, #16
 8003ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003caa:	61ba      	str	r2, [r7, #24]
 8003cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6979      	ldr	r1, [r7, #20]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e5      	bne.n	8003c8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ccc:	bf00      	nop
 8003cce:	3754      	adds	r7, #84	; 0x54
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b0c0      	sub	sp, #256	; 0x100
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf4:	68d9      	ldr	r1, [r3, #12]
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	ea40 0301 	orr.w	r3, r0, r1
 8003d00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003d30:	f021 010c 	bic.w	r1, r1, #12
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d52:	6999      	ldr	r1, [r3, #24]
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	ea40 0301 	orr.w	r3, r0, r1
 8003d5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	4b8f      	ldr	r3, [pc, #572]	; (8003fa4 <UART_SetConfig+0x2cc>)
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d005      	beq.n	8003d78 <UART_SetConfig+0xa0>
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b8d      	ldr	r3, [pc, #564]	; (8003fa8 <UART_SetConfig+0x2d0>)
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d104      	bne.n	8003d82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7ff f900 	bl	8002f7c <HAL_RCC_GetPCLK2Freq>
 8003d7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003d80:	e003      	b.n	8003d8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d82:	f7ff f8e7 	bl	8002f54 <HAL_RCC_GetPCLK1Freq>
 8003d86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d94:	f040 810c 	bne.w	8003fb0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003da2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003da6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	1891      	adds	r1, r2, r2
 8003db0:	65b9      	str	r1, [r7, #88]	; 0x58
 8003db2:	415b      	adcs	r3, r3
 8003db4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003db6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003dba:	4621      	mov	r1, r4
 8003dbc:	eb12 0801 	adds.w	r8, r2, r1
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	eb43 0901 	adc.w	r9, r3, r1
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dda:	4690      	mov	r8, r2
 8003ddc:	4699      	mov	r9, r3
 8003dde:	4623      	mov	r3, r4
 8003de0:	eb18 0303 	adds.w	r3, r8, r3
 8003de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003de8:	462b      	mov	r3, r5
 8003dea:	eb49 0303 	adc.w	r3, r9, r3
 8003dee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003dfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e06:	460b      	mov	r3, r1
 8003e08:	18db      	adds	r3, r3, r3
 8003e0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	eb42 0303 	adc.w	r3, r2, r3
 8003e12:	657b      	str	r3, [r7, #84]	; 0x54
 8003e14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003e1c:	f7fc fa38 	bl	8000290 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4b61      	ldr	r3, [pc, #388]	; (8003fac <UART_SetConfig+0x2d4>)
 8003e26:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	011c      	lsls	r4, r3, #4
 8003e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003e3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003e40:	4642      	mov	r2, r8
 8003e42:	464b      	mov	r3, r9
 8003e44:	1891      	adds	r1, r2, r2
 8003e46:	64b9      	str	r1, [r7, #72]	; 0x48
 8003e48:	415b      	adcs	r3, r3
 8003e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003e50:	4641      	mov	r1, r8
 8003e52:	eb12 0a01 	adds.w	sl, r2, r1
 8003e56:	4649      	mov	r1, r9
 8003e58:	eb43 0b01 	adc.w	fp, r3, r1
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e70:	4692      	mov	sl, r2
 8003e72:	469b      	mov	fp, r3
 8003e74:	4643      	mov	r3, r8
 8003e76:	eb1a 0303 	adds.w	r3, sl, r3
 8003e7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e7e:	464b      	mov	r3, r9
 8003e80:	eb4b 0303 	adc.w	r3, fp, r3
 8003e84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003e98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	18db      	adds	r3, r3, r3
 8003ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	eb42 0303 	adc.w	r3, r2, r3
 8003ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003eae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003eb2:	f7fc f9ed 	bl	8000290 <__aeabi_uldivmod>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4611      	mov	r1, r2
 8003ebc:	4b3b      	ldr	r3, [pc, #236]	; (8003fac <UART_SetConfig+0x2d4>)
 8003ebe:	fba3 2301 	umull	r2, r3, r3, r1
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2264      	movs	r2, #100	; 0x64
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	1acb      	subs	r3, r1, r3
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003ed2:	4b36      	ldr	r3, [pc, #216]	; (8003fac <UART_SetConfig+0x2d4>)
 8003ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ee0:	441c      	add	r4, r3
 8003ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003eec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ef0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	1891      	adds	r1, r2, r2
 8003efa:	63b9      	str	r1, [r7, #56]	; 0x38
 8003efc:	415b      	adcs	r3, r3
 8003efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f04:	4641      	mov	r1, r8
 8003f06:	1851      	adds	r1, r2, r1
 8003f08:	6339      	str	r1, [r7, #48]	; 0x30
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	414b      	adcs	r3, r1
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	00cb      	lsls	r3, r1, #3
 8003f20:	4651      	mov	r1, sl
 8003f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f26:	4651      	mov	r1, sl
 8003f28:	00ca      	lsls	r2, r1, #3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4642      	mov	r2, r8
 8003f32:	189b      	adds	r3, r3, r2
 8003f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f38:	464b      	mov	r3, r9
 8003f3a:	460a      	mov	r2, r1
 8003f3c:	eb42 0303 	adc.w	r3, r2, r3
 8003f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f58:	460b      	mov	r3, r1
 8003f5a:	18db      	adds	r3, r3, r3
 8003f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5e:	4613      	mov	r3, r2
 8003f60:	eb42 0303 	adc.w	r3, r2, r3
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003f6e:	f7fc f98f 	bl	8000290 <__aeabi_uldivmod>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <UART_SetConfig+0x2d4>)
 8003f78:	fba3 1302 	umull	r1, r3, r3, r2
 8003f7c:	095b      	lsrs	r3, r3, #5
 8003f7e:	2164      	movs	r1, #100	; 0x64
 8003f80:	fb01 f303 	mul.w	r3, r1, r3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	3332      	adds	r3, #50	; 0x32
 8003f8a:	4a08      	ldr	r2, [pc, #32]	; (8003fac <UART_SetConfig+0x2d4>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	095b      	lsrs	r3, r3, #5
 8003f92:	f003 0207 	and.w	r2, r3, #7
 8003f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4422      	add	r2, r4
 8003f9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fa0:	e106      	b.n	80041b0 <UART_SetConfig+0x4d8>
 8003fa2:	bf00      	nop
 8003fa4:	40011000 	.word	0x40011000
 8003fa8:	40011400 	.word	0x40011400
 8003fac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003fba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003fbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003fc2:	4642      	mov	r2, r8
 8003fc4:	464b      	mov	r3, r9
 8003fc6:	1891      	adds	r1, r2, r2
 8003fc8:	6239      	str	r1, [r7, #32]
 8003fca:	415b      	adcs	r3, r3
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8003fce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	1854      	adds	r4, r2, r1
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	eb43 0501 	adc.w	r5, r3, r1
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	00eb      	lsls	r3, r5, #3
 8003fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fea:	00e2      	lsls	r2, r4, #3
 8003fec:	4614      	mov	r4, r2
 8003fee:	461d      	mov	r5, r3
 8003ff0:	4643      	mov	r3, r8
 8003ff2:	18e3      	adds	r3, r4, r3
 8003ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	eb45 0303 	adc.w	r3, r5, r3
 8003ffe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800400e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800401e:	4629      	mov	r1, r5
 8004020:	008b      	lsls	r3, r1, #2
 8004022:	4621      	mov	r1, r4
 8004024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004028:	4621      	mov	r1, r4
 800402a:	008a      	lsls	r2, r1, #2
 800402c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004030:	f7fc f92e 	bl	8000290 <__aeabi_uldivmod>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4b60      	ldr	r3, [pc, #384]	; (80041bc <UART_SetConfig+0x4e4>)
 800403a:	fba3 2302 	umull	r2, r3, r3, r2
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	011c      	lsls	r4, r3, #4
 8004042:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004046:	2200      	movs	r2, #0
 8004048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800404c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004050:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004054:	4642      	mov	r2, r8
 8004056:	464b      	mov	r3, r9
 8004058:	1891      	adds	r1, r2, r2
 800405a:	61b9      	str	r1, [r7, #24]
 800405c:	415b      	adcs	r3, r3
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004064:	4641      	mov	r1, r8
 8004066:	1851      	adds	r1, r2, r1
 8004068:	6139      	str	r1, [r7, #16]
 800406a:	4649      	mov	r1, r9
 800406c:	414b      	adcs	r3, r1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800407c:	4659      	mov	r1, fp
 800407e:	00cb      	lsls	r3, r1, #3
 8004080:	4651      	mov	r1, sl
 8004082:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004086:	4651      	mov	r1, sl
 8004088:	00ca      	lsls	r2, r1, #3
 800408a:	4610      	mov	r0, r2
 800408c:	4619      	mov	r1, r3
 800408e:	4603      	mov	r3, r0
 8004090:	4642      	mov	r2, r8
 8004092:	189b      	adds	r3, r3, r2
 8004094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004098:	464b      	mov	r3, r9
 800409a:	460a      	mov	r2, r1
 800409c:	eb42 0303 	adc.w	r3, r2, r3
 80040a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80040ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80040b0:	f04f 0200 	mov.w	r2, #0
 80040b4:	f04f 0300 	mov.w	r3, #0
 80040b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80040bc:	4649      	mov	r1, r9
 80040be:	008b      	lsls	r3, r1, #2
 80040c0:	4641      	mov	r1, r8
 80040c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040c6:	4641      	mov	r1, r8
 80040c8:	008a      	lsls	r2, r1, #2
 80040ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80040ce:	f7fc f8df 	bl	8000290 <__aeabi_uldivmod>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	4b38      	ldr	r3, [pc, #224]	; (80041bc <UART_SetConfig+0x4e4>)
 80040da:	fba3 2301 	umull	r2, r3, r3, r1
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2264      	movs	r2, #100	; 0x64
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	1acb      	subs	r3, r1, r3
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	3332      	adds	r3, #50	; 0x32
 80040ec:	4a33      	ldr	r2, [pc, #204]	; (80041bc <UART_SetConfig+0x4e4>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f8:	441c      	add	r4, r3
 80040fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040fe:	2200      	movs	r2, #0
 8004100:	673b      	str	r3, [r7, #112]	; 0x70
 8004102:	677a      	str	r2, [r7, #116]	; 0x74
 8004104:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004108:	4642      	mov	r2, r8
 800410a:	464b      	mov	r3, r9
 800410c:	1891      	adds	r1, r2, r2
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	415b      	adcs	r3, r3
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004118:	4641      	mov	r1, r8
 800411a:	1851      	adds	r1, r2, r1
 800411c:	6039      	str	r1, [r7, #0]
 800411e:	4649      	mov	r1, r9
 8004120:	414b      	adcs	r3, r1
 8004122:	607b      	str	r3, [r7, #4]
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004130:	4659      	mov	r1, fp
 8004132:	00cb      	lsls	r3, r1, #3
 8004134:	4651      	mov	r1, sl
 8004136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800413a:	4651      	mov	r1, sl
 800413c:	00ca      	lsls	r2, r1, #3
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	4603      	mov	r3, r0
 8004144:	4642      	mov	r2, r8
 8004146:	189b      	adds	r3, r3, r2
 8004148:	66bb      	str	r3, [r7, #104]	; 0x68
 800414a:	464b      	mov	r3, r9
 800414c:	460a      	mov	r2, r1
 800414e:	eb42 0303 	adc.w	r3, r2, r3
 8004152:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	663b      	str	r3, [r7, #96]	; 0x60
 800415e:	667a      	str	r2, [r7, #100]	; 0x64
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	f04f 0300 	mov.w	r3, #0
 8004168:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800416c:	4649      	mov	r1, r9
 800416e:	008b      	lsls	r3, r1, #2
 8004170:	4641      	mov	r1, r8
 8004172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004176:	4641      	mov	r1, r8
 8004178:	008a      	lsls	r2, r1, #2
 800417a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800417e:	f7fc f887 	bl	8000290 <__aeabi_uldivmod>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <UART_SetConfig+0x4e4>)
 8004188:	fba3 1302 	umull	r1, r3, r3, r2
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	2164      	movs	r1, #100	; 0x64
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	3332      	adds	r3, #50	; 0x32
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <UART_SetConfig+0x4e4>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	f003 020f 	and.w	r2, r3, #15
 80041a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4422      	add	r2, r4
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	bf00      	nop
 80041b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80041b6:	46bd      	mov	sp, r7
 80041b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041bc:	51eb851f 	.word	0x51eb851f

080041c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	4603      	mov	r3, r0
 80041c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80041ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041d2:	2b84      	cmp	r3, #132	; 0x84
 80041d4:	d005      	beq.n	80041e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80041d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4413      	add	r3, r2
 80041de:	3303      	adds	r3, #3
 80041e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041e2:	68fb      	ldr	r3, [r7, #12]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041f4:	f000 faf6 	bl	80047e4 <vTaskStartScheduler>
  
  return osOK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	bd80      	pop	{r7, pc}

080041fe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004200:	b089      	sub	sp, #36	; 0x24
 8004202:	af04      	add	r7, sp, #16
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d020      	beq.n	8004252 <osThreadCreate+0x54>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01c      	beq.n	8004252 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685c      	ldr	r4, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	691e      	ldr	r6, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff ffc8 	bl	80041c0 <makeFreeRtosPriority>
 8004230:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800423a:	9202      	str	r2, [sp, #8]
 800423c:	9301      	str	r3, [sp, #4]
 800423e:	9100      	str	r1, [sp, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	4632      	mov	r2, r6
 8004244:	4629      	mov	r1, r5
 8004246:	4620      	mov	r0, r4
 8004248:	f000 f8ed 	bl	8004426 <xTaskCreateStatic>
 800424c:	4603      	mov	r3, r0
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e01c      	b.n	800428c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685c      	ldr	r4, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800425e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff ffaa 	bl	80041c0 <makeFreeRtosPriority>
 800426c:	4602      	mov	r2, r0
 800426e:	f107 030c 	add.w	r3, r7, #12
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	9200      	str	r2, [sp, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	4632      	mov	r2, r6
 800427a:	4629      	mov	r1, r5
 800427c:	4620      	mov	r0, r4
 800427e:	f000 f92f 	bl	80044e0 <xTaskCreate>
 8004282:	4603      	mov	r3, r0
 8004284:	2b01      	cmp	r3, #1
 8004286:	d001      	beq.n	800428c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004296 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <osDelay+0x16>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	e000      	b.n	80042ae <osDelay+0x18>
 80042ac:	2301      	movs	r3, #1
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fa64 	bl	800477c <vTaskDelay>
  
  return osOK;
 80042b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f103 0208 	add.w	r2, r3, #8
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f103 0208 	add.w	r2, r3, #8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f103 0208 	add.w	r2, r3, #8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	1c5a      	adds	r2, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	601a      	str	r2, [r3, #0]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d103      	bne.n	8004380 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e00c      	b.n	800439a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	3308      	adds	r3, #8
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e002      	b.n	800438e <vListInsert+0x2e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	429a      	cmp	r2, r3
 8004398:	d2f6      	bcs.n	8004388 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	601a      	str	r2, [r3, #0]
}
 80043c6:	bf00      	nop
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6892      	ldr	r2, [r2, #8]
 80043e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6852      	ldr	r2, [r2, #4]
 80043f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d103      	bne.n	8004406 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	1e5a      	subs	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004426:	b580      	push	{r7, lr}
 8004428:	b08e      	sub	sp, #56	; 0x38
 800442a:	af04      	add	r7, sp, #16
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800443a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443e:	f383 8811 	msr	BASEPRI, r3
 8004442:	f3bf 8f6f 	isb	sy
 8004446:	f3bf 8f4f 	dsb	sy
 800444a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800444c:	bf00      	nop
 800444e:	e7fe      	b.n	800444e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <xTaskCreateStatic+0x46>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	61fb      	str	r3, [r7, #28]
}
 8004468:	bf00      	nop
 800446a:	e7fe      	b.n	800446a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800446c:	23a0      	movs	r3, #160	; 0xa0
 800446e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2ba0      	cmp	r3, #160	; 0xa0
 8004474:	d00a      	beq.n	800448c <xTaskCreateStatic+0x66>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	61bb      	str	r3, [r7, #24]
}
 8004488:	bf00      	nop
 800448a:	e7fe      	b.n	800448a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800448c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01e      	beq.n	80044d2 <xTaskCreateStatic+0xac>
 8004494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004496:	2b00      	cmp	r3, #0
 8004498:	d01b      	beq.n	80044d2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044ac:	2300      	movs	r3, #0
 80044ae:	9303      	str	r3, [sp, #12]
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	9302      	str	r3, [sp, #8]
 80044b4:	f107 0314 	add.w	r3, r7, #20
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f851 	bl	800456c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044cc:	f000 f8ec 	bl	80046a8 <prvAddNewTaskToReadyList>
 80044d0:	e001      	b.n	80044d6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044d6:	697b      	ldr	r3, [r7, #20]
	}
 80044d8:	4618      	mov	r0, r3
 80044da:	3728      	adds	r7, #40	; 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08c      	sub	sp, #48	; 0x30
 80044e4:	af04      	add	r7, sp, #16
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 feef 	bl	80052d8 <pvPortMalloc>
 80044fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00e      	beq.n	8004520 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004502:	20a0      	movs	r0, #160	; 0xa0
 8004504:	f000 fee8 	bl	80052d8 <pvPortMalloc>
 8004508:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
 8004516:	e005      	b.n	8004524 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004518:	6978      	ldr	r0, [r7, #20]
 800451a:	f000 ffa9 	bl	8005470 <vPortFree>
 800451e:	e001      	b.n	8004524 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004520:	2300      	movs	r3, #0
 8004522:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d017      	beq.n	800455a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	2300      	movs	r3, #0
 8004536:	9303      	str	r3, [sp, #12]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	9302      	str	r3, [sp, #8]
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f80f 	bl	800456c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800454e:	69f8      	ldr	r0, [r7, #28]
 8004550:	f000 f8aa 	bl	80046a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004554:	2301      	movs	r3, #1
 8004556:	61bb      	str	r3, [r7, #24]
 8004558:	e002      	b.n	8004560 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
 800455e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004560:	69bb      	ldr	r3, [r7, #24]
	}
 8004562:	4618      	mov	r0, r3
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004584:	3b01      	subs	r3, #1
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f023 0307 	bic.w	r3, r3, #7
 8004592:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	617b      	str	r3, [r7, #20]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01f      	beq.n	80045fa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e012      	b.n	80045e6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	7819      	ldrb	r1, [r3, #0]
 80045c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	3334      	adds	r3, #52	; 0x34
 80045d0:	460a      	mov	r2, r1
 80045d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	4413      	add	r3, r2
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d006      	beq.n	80045ee <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	3301      	adds	r3, #1
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	d9e9      	bls.n	80045c0 <prvInitialiseNewTask+0x54>
 80045ec:	e000      	b.n	80045f0 <prvInitialiseNewTask+0x84>
			{
				break;
 80045ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f8:	e003      	b.n	8004602 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	2b06      	cmp	r3, #6
 8004606:	d901      	bls.n	800460c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004608:	2306      	movs	r3, #6
 800460a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004610:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004616:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461a:	2200      	movs	r2, #0
 800461c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	3304      	adds	r3, #4
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff fe6b 	bl	80042fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462a:	3318      	adds	r3, #24
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fe66 	bl	80042fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004636:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	f1c3 0207 	rsb	r2, r3, #7
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004646:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	2200      	movs	r2, #0
 800464c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	2200      	movs	r2, #0
 8004654:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	334c      	adds	r3, #76	; 0x4c
 800465c:	224c      	movs	r2, #76	; 0x4c
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f001 fb41 	bl	8005ce8 <memset>
 8004666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004668:	4a0c      	ldr	r2, [pc, #48]	; (800469c <prvInitialiseNewTask+0x130>)
 800466a:	651a      	str	r2, [r3, #80]	; 0x50
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	4a0c      	ldr	r2, [pc, #48]	; (80046a0 <prvInitialiseNewTask+0x134>)
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
 8004672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004674:	4a0b      	ldr	r2, [pc, #44]	; (80046a4 <prvInitialiseNewTask+0x138>)
 8004676:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	68f9      	ldr	r1, [r7, #12]
 800467c:	69b8      	ldr	r0, [r7, #24]
 800467e:	f000 fc1f 	bl	8004ec0 <pxPortInitialiseStack>
 8004682:	4602      	mov	r2, r0
 8004684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004686:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004692:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004694:	bf00      	nop
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20004224 	.word	0x20004224
 80046a0:	2000428c 	.word	0x2000428c
 80046a4:	200042f4 	.word	0x200042f4

080046a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046b0:	f000 fd30 	bl	8005114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046b4:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <prvAddNewTaskToReadyList+0xb8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	4a29      	ldr	r2, [pc, #164]	; (8004760 <prvAddNewTaskToReadyList+0xb8>)
 80046bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046be:	4b29      	ldr	r3, [pc, #164]	; (8004764 <prvAddNewTaskToReadyList+0xbc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046c6:	4a27      	ldr	r2, [pc, #156]	; (8004764 <prvAddNewTaskToReadyList+0xbc>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046cc:	4b24      	ldr	r3, [pc, #144]	; (8004760 <prvAddNewTaskToReadyList+0xb8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d110      	bne.n	80046f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046d4:	f000 facc 	bl	8004c70 <prvInitialiseTaskLists>
 80046d8:	e00d      	b.n	80046f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046da:	4b23      	ldr	r3, [pc, #140]	; (8004768 <prvAddNewTaskToReadyList+0xc0>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046e2:	4b20      	ldr	r3, [pc, #128]	; (8004764 <prvAddNewTaskToReadyList+0xbc>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d802      	bhi.n	80046f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046f0:	4a1c      	ldr	r2, [pc, #112]	; (8004764 <prvAddNewTaskToReadyList+0xbc>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046f6:	4b1d      	ldr	r3, [pc, #116]	; (800476c <prvAddNewTaskToReadyList+0xc4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	4a1b      	ldr	r2, [pc, #108]	; (800476c <prvAddNewTaskToReadyList+0xc4>)
 80046fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004704:	2201      	movs	r2, #1
 8004706:	409a      	lsls	r2, r3
 8004708:	4b19      	ldr	r3, [pc, #100]	; (8004770 <prvAddNewTaskToReadyList+0xc8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4313      	orrs	r3, r2
 800470e:	4a18      	ldr	r2, [pc, #96]	; (8004770 <prvAddNewTaskToReadyList+0xc8>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4a15      	ldr	r2, [pc, #84]	; (8004774 <prvAddNewTaskToReadyList+0xcc>)
 8004720:	441a      	add	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	3304      	adds	r3, #4
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f7ff fdf5 	bl	8004318 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800472e:	f000 fd21 	bl	8005174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <prvAddNewTaskToReadyList+0xc0>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00e      	beq.n	8004758 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <prvAddNewTaskToReadyList+0xbc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	429a      	cmp	r2, r3
 8004746:	d207      	bcs.n	8004758 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <prvAddNewTaskToReadyList+0xd0>)
 800474a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	200005d0 	.word	0x200005d0
 8004764:	200004d0 	.word	0x200004d0
 8004768:	200005dc 	.word	0x200005dc
 800476c:	200005ec 	.word	0x200005ec
 8004770:	200005d8 	.word	0x200005d8
 8004774:	200004d4 	.word	0x200004d4
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d017      	beq.n	80047be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800478e:	4b13      	ldr	r3, [pc, #76]	; (80047dc <vTaskDelay+0x60>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <vTaskDelay+0x30>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60bb      	str	r3, [r7, #8]
}
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047ac:	f000 f884 	bl	80048b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047b0:	2100      	movs	r1, #0
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fb1e 	bl	8004df4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047b8:	f000 f88c 	bl	80048d4 <xTaskResumeAll>
 80047bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d107      	bne.n	80047d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80047c4:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <vTaskDelay+0x64>)
 80047c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047d4:	bf00      	nop
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	200005f8 	.word	0x200005f8
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	; 0x28
 80047e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047f2:	463a      	mov	r2, r7
 80047f4:	1d39      	adds	r1, r7, #4
 80047f6:	f107 0308 	add.w	r3, r7, #8
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc faf2 	bl	8000de4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	9202      	str	r2, [sp, #8]
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	2300      	movs	r3, #0
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	2300      	movs	r3, #0
 8004810:	460a      	mov	r2, r1
 8004812:	4921      	ldr	r1, [pc, #132]	; (8004898 <vTaskStartScheduler+0xb4>)
 8004814:	4821      	ldr	r0, [pc, #132]	; (800489c <vTaskStartScheduler+0xb8>)
 8004816:	f7ff fe06 	bl	8004426 <xTaskCreateStatic>
 800481a:	4603      	mov	r3, r0
 800481c:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <vTaskStartScheduler+0xbc>)
 800481e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004820:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <vTaskStartScheduler+0xbc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004828:	2301      	movs	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e001      	b.n	8004832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d11b      	bne.n	8004870 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	613b      	str	r3, [r7, #16]
}
 800484a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800484c:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <vTaskStartScheduler+0xc0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	334c      	adds	r3, #76	; 0x4c
 8004852:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <vTaskStartScheduler+0xc4>)
 8004854:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004856:	4b15      	ldr	r3, [pc, #84]	; (80048ac <vTaskStartScheduler+0xc8>)
 8004858:	f04f 32ff 	mov.w	r2, #4294967295
 800485c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800485e:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <vTaskStartScheduler+0xcc>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004864:	4b13      	ldr	r3, [pc, #76]	; (80048b4 <vTaskStartScheduler+0xd0>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800486a:	f000 fbb1 	bl	8004fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800486e:	e00e      	b.n	800488e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004876:	d10a      	bne.n	800488e <vTaskStartScheduler+0xaa>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	60fb      	str	r3, [r7, #12]
}
 800488a:	bf00      	nop
 800488c:	e7fe      	b.n	800488c <vTaskStartScheduler+0xa8>
}
 800488e:	bf00      	nop
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	08006a28 	.word	0x08006a28
 800489c:	08004c41 	.word	0x08004c41
 80048a0:	200005f4 	.word	0x200005f4
 80048a4:	200004d0 	.word	0x200004d0
 80048a8:	200000a0 	.word	0x200000a0
 80048ac:	200005f0 	.word	0x200005f0
 80048b0:	200005dc 	.word	0x200005dc
 80048b4:	200005d4 	.word	0x200005d4

080048b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <vTaskSuspendAll+0x18>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a03      	ldr	r2, [pc, #12]	; (80048d0 <vTaskSuspendAll+0x18>)
 80048c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048c6:	bf00      	nop
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	200005f8 	.word	0x200005f8

080048d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048e2:	4b41      	ldr	r3, [pc, #260]	; (80049e8 <xTaskResumeAll+0x114>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10a      	bne.n	8004900 <xTaskResumeAll+0x2c>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	603b      	str	r3, [r7, #0]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004900:	f000 fc08 	bl	8005114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004904:	4b38      	ldr	r3, [pc, #224]	; (80049e8 <xTaskResumeAll+0x114>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3b01      	subs	r3, #1
 800490a:	4a37      	ldr	r2, [pc, #220]	; (80049e8 <xTaskResumeAll+0x114>)
 800490c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800490e:	4b36      	ldr	r3, [pc, #216]	; (80049e8 <xTaskResumeAll+0x114>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d161      	bne.n	80049da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004916:	4b35      	ldr	r3, [pc, #212]	; (80049ec <xTaskResumeAll+0x118>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d05d      	beq.n	80049da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800491e:	e02e      	b.n	800497e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004920:	4b33      	ldr	r3, [pc, #204]	; (80049f0 <xTaskResumeAll+0x11c>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3318      	adds	r3, #24
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fd50 	bl	80043d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3304      	adds	r3, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f7ff fd4b 	bl	80043d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004940:	2201      	movs	r2, #1
 8004942:	409a      	lsls	r2, r3
 8004944:	4b2b      	ldr	r3, [pc, #172]	; (80049f4 <xTaskResumeAll+0x120>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4313      	orrs	r3, r2
 800494a:	4a2a      	ldr	r2, [pc, #168]	; (80049f4 <xTaskResumeAll+0x120>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4a27      	ldr	r2, [pc, #156]	; (80049f8 <xTaskResumeAll+0x124>)
 800495c:	441a      	add	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7ff fcd7 	bl	8004318 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496e:	4b23      	ldr	r3, [pc, #140]	; (80049fc <xTaskResumeAll+0x128>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004978:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <xTaskResumeAll+0x12c>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800497e:	4b1c      	ldr	r3, [pc, #112]	; (80049f0 <xTaskResumeAll+0x11c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1cc      	bne.n	8004920 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800498c:	f000 fa12 	bl	8004db4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004990:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <xTaskResumeAll+0x130>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800499c:	f000 f836 	bl	8004a0c <xTaskIncrementTick>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80049a6:	4b16      	ldr	r3, [pc, #88]	; (8004a00 <xTaskResumeAll+0x12c>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f1      	bne.n	800499c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80049b8:	4b12      	ldr	r3, [pc, #72]	; (8004a04 <xTaskResumeAll+0x130>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049be:	4b10      	ldr	r3, [pc, #64]	; (8004a00 <xTaskResumeAll+0x12c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049c6:	2301      	movs	r3, #1
 80049c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049ca:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <xTaskResumeAll+0x134>)
 80049cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049da:	f000 fbcb 	bl	8005174 <vPortExitCritical>

	return xAlreadyYielded;
 80049de:	68bb      	ldr	r3, [r7, #8]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	200005f8 	.word	0x200005f8
 80049ec:	200005d0 	.word	0x200005d0
 80049f0:	20000590 	.word	0x20000590
 80049f4:	200005d8 	.word	0x200005d8
 80049f8:	200004d4 	.word	0x200004d4
 80049fc:	200004d0 	.word	0x200004d0
 8004a00:	200005e4 	.word	0x200005e4
 8004a04:	200005e0 	.word	0x200005e0
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a16:	4b4e      	ldr	r3, [pc, #312]	; (8004b50 <xTaskIncrementTick+0x144>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 808e 	bne.w	8004b3c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a20:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <xTaskIncrementTick+0x148>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a28:	4a4a      	ldr	r2, [pc, #296]	; (8004b54 <xTaskIncrementTick+0x148>)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d120      	bne.n	8004a76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a34:	4b48      	ldr	r3, [pc, #288]	; (8004b58 <xTaskIncrementTick+0x14c>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <xTaskIncrementTick+0x48>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	603b      	str	r3, [r7, #0]
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <xTaskIncrementTick+0x46>
 8004a54:	4b40      	ldr	r3, [pc, #256]	; (8004b58 <xTaskIncrementTick+0x14c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	4b40      	ldr	r3, [pc, #256]	; (8004b5c <xTaskIncrementTick+0x150>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a3e      	ldr	r2, [pc, #248]	; (8004b58 <xTaskIncrementTick+0x14c>)
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	4a3e      	ldr	r2, [pc, #248]	; (8004b5c <xTaskIncrementTick+0x150>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <xTaskIncrementTick+0x154>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	4a3c      	ldr	r2, [pc, #240]	; (8004b60 <xTaskIncrementTick+0x154>)
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	f000 f99f 	bl	8004db4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a76:	4b3b      	ldr	r3, [pc, #236]	; (8004b64 <xTaskIncrementTick+0x158>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d348      	bcc.n	8004b12 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a80:	4b35      	ldr	r3, [pc, #212]	; (8004b58 <xTaskIncrementTick+0x14c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8a:	4b36      	ldr	r3, [pc, #216]	; (8004b64 <xTaskIncrementTick+0x158>)
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	601a      	str	r2, [r3, #0]
					break;
 8004a92:	e03e      	b.n	8004b12 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a94:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <xTaskIncrementTick+0x14c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d203      	bcs.n	8004ab4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004aac:	4a2d      	ldr	r2, [pc, #180]	; (8004b64 <xTaskIncrementTick+0x158>)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ab2:	e02e      	b.n	8004b12 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff fc8a 	bl	80043d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d004      	beq.n	8004ad0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	3318      	adds	r3, #24
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fc81 	bl	80043d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <xTaskIncrementTick+0x15c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	4a22      	ldr	r2, [pc, #136]	; (8004b68 <xTaskIncrementTick+0x15c>)
 8004ae0:	6013      	str	r3, [r2, #0]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4a1f      	ldr	r2, [pc, #124]	; (8004b6c <xTaskIncrementTick+0x160>)
 8004af0:	441a      	add	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	3304      	adds	r3, #4
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f7ff fc0d 	bl	8004318 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b02:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <xTaskIncrementTick+0x164>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d3b9      	bcc.n	8004a80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b10:	e7b6      	b.n	8004a80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b12:	4b17      	ldr	r3, [pc, #92]	; (8004b70 <xTaskIncrementTick+0x164>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	4914      	ldr	r1, [pc, #80]	; (8004b6c <xTaskIncrementTick+0x160>)
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d901      	bls.n	8004b2e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b2e:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <xTaskIncrementTick+0x168>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004b36:	2301      	movs	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e004      	b.n	8004b46 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b3c:	4b0e      	ldr	r3, [pc, #56]	; (8004b78 <xTaskIncrementTick+0x16c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	4a0d      	ldr	r2, [pc, #52]	; (8004b78 <xTaskIncrementTick+0x16c>)
 8004b44:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b46:	697b      	ldr	r3, [r7, #20]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3718      	adds	r7, #24
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	200005f8 	.word	0x200005f8
 8004b54:	200005d4 	.word	0x200005d4
 8004b58:	20000588 	.word	0x20000588
 8004b5c:	2000058c 	.word	0x2000058c
 8004b60:	200005e8 	.word	0x200005e8
 8004b64:	200005f0 	.word	0x200005f0
 8004b68:	200005d8 	.word	0x200005d8
 8004b6c:	200004d4 	.word	0x200004d4
 8004b70:	200004d0 	.word	0x200004d0
 8004b74:	200005e4 	.word	0x200005e4
 8004b78:	200005e0 	.word	0x200005e0

08004b7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b82:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <vTaskSwitchContext+0xac>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b8a:	4b28      	ldr	r3, [pc, #160]	; (8004c2c <vTaskSwitchContext+0xb0>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b90:	e044      	b.n	8004c1c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004b92:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <vTaskSwitchContext+0xb0>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <vTaskSwitchContext+0xb4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	fab3 f383 	clz	r3, r3
 8004ba4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004ba6:	7afb      	ldrb	r3, [r7, #11]
 8004ba8:	f1c3 031f 	rsb	r3, r3, #31
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	4921      	ldr	r1, [pc, #132]	; (8004c34 <vTaskSwitchContext+0xb8>)
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	607b      	str	r3, [r7, #4]
}
 8004bd4:	bf00      	nop
 8004bd6:	e7fe      	b.n	8004bd6 <vTaskSwitchContext+0x5a>
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <vTaskSwitchContext+0xb8>)
 8004be4:	4413      	add	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3308      	adds	r3, #8
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d104      	bne.n	8004c08 <vTaskSwitchContext+0x8c>
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	605a      	str	r2, [r3, #4]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <vTaskSwitchContext+0xbc>)
 8004c10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c12:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <vTaskSwitchContext+0xbc>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	334c      	adds	r3, #76	; 0x4c
 8004c18:	4a08      	ldr	r2, [pc, #32]	; (8004c3c <vTaskSwitchContext+0xc0>)
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	371c      	adds	r7, #28
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	200005f8 	.word	0x200005f8
 8004c2c:	200005e4 	.word	0x200005e4
 8004c30:	200005d8 	.word	0x200005d8
 8004c34:	200004d4 	.word	0x200004d4
 8004c38:	200004d0 	.word	0x200004d0
 8004c3c:	200000a0 	.word	0x200000a0

08004c40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c48:	f000 f852 	bl	8004cf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c4c:	4b06      	ldr	r3, [pc, #24]	; (8004c68 <prvIdleTask+0x28>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d9f9      	bls.n	8004c48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <prvIdleTask+0x2c>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c64:	e7f0      	b.n	8004c48 <prvIdleTask+0x8>
 8004c66:	bf00      	nop
 8004c68:	200004d4 	.word	0x200004d4
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c76:	2300      	movs	r3, #0
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	e00c      	b.n	8004c96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4a12      	ldr	r2, [pc, #72]	; (8004cd0 <prvInitialiseTaskLists+0x60>)
 8004c88:	4413      	add	r3, r2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fb17 	bl	80042be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3301      	adds	r3, #1
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d9ef      	bls.n	8004c7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c9c:	480d      	ldr	r0, [pc, #52]	; (8004cd4 <prvInitialiseTaskLists+0x64>)
 8004c9e:	f7ff fb0e 	bl	80042be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ca2:	480d      	ldr	r0, [pc, #52]	; (8004cd8 <prvInitialiseTaskLists+0x68>)
 8004ca4:	f7ff fb0b 	bl	80042be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ca8:	480c      	ldr	r0, [pc, #48]	; (8004cdc <prvInitialiseTaskLists+0x6c>)
 8004caa:	f7ff fb08 	bl	80042be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cae:	480c      	ldr	r0, [pc, #48]	; (8004ce0 <prvInitialiseTaskLists+0x70>)
 8004cb0:	f7ff fb05 	bl	80042be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cb4:	480b      	ldr	r0, [pc, #44]	; (8004ce4 <prvInitialiseTaskLists+0x74>)
 8004cb6:	f7ff fb02 	bl	80042be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <prvInitialiseTaskLists+0x78>)
 8004cbc:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <prvInitialiseTaskLists+0x64>)
 8004cbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cc0:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <prvInitialiseTaskLists+0x7c>)
 8004cc2:	4a05      	ldr	r2, [pc, #20]	; (8004cd8 <prvInitialiseTaskLists+0x68>)
 8004cc4:	601a      	str	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	200004d4 	.word	0x200004d4
 8004cd4:	20000560 	.word	0x20000560
 8004cd8:	20000574 	.word	0x20000574
 8004cdc:	20000590 	.word	0x20000590
 8004ce0:	200005a4 	.word	0x200005a4
 8004ce4:	200005bc 	.word	0x200005bc
 8004ce8:	20000588 	.word	0x20000588
 8004cec:	2000058c 	.word	0x2000058c

08004cf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cf6:	e019      	b.n	8004d2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cf8:	f000 fa0c 	bl	8005114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfc:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <prvCheckTasksWaitingTermination+0x50>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3304      	adds	r3, #4
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff fb62 	bl	80043d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d0e:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <prvCheckTasksWaitingTermination+0x54>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	4a0b      	ldr	r2, [pc, #44]	; (8004d44 <prvCheckTasksWaitingTermination+0x54>)
 8004d16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <prvCheckTasksWaitingTermination+0x58>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	4a0a      	ldr	r2, [pc, #40]	; (8004d48 <prvCheckTasksWaitingTermination+0x58>)
 8004d20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d22:	f000 fa27 	bl	8005174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f810 	bl	8004d4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d2c:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <prvCheckTasksWaitingTermination+0x58>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e1      	bne.n	8004cf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200005a4 	.word	0x200005a4
 8004d44:	200005d0 	.word	0x200005d0
 8004d48:	200005b8 	.word	0x200005b8

08004d4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	334c      	adds	r3, #76	; 0x4c
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 ffdd 	bl	8005d18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d108      	bne.n	8004d7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 fb7f 	bl	8005470 <vPortFree>
				vPortFree( pxTCB );
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fb7c 	bl	8005470 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d78:	e018      	b.n	8004dac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d103      	bne.n	8004d8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 fb73 	bl	8005470 <vPortFree>
	}
 8004d8a:	e00f      	b.n	8004dac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d00a      	beq.n	8004dac <prvDeleteTCB+0x60>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	60fb      	str	r3, [r7, #12]
}
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <prvDeleteTCB+0x5e>
	}
 8004dac:	bf00      	nop
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dba:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <prvResetNextTaskUnblockTime+0x38>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dc4:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <prvResetNextTaskUnblockTime+0x3c>)
 8004dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dcc:	e008      	b.n	8004de0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dce:	4b07      	ldr	r3, [pc, #28]	; (8004dec <prvResetNextTaskUnblockTime+0x38>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a04      	ldr	r2, [pc, #16]	; (8004df0 <prvResetNextTaskUnblockTime+0x3c>)
 8004dde:	6013      	str	r3, [r2, #0]
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	20000588 	.word	0x20000588
 8004df0:	200005f0 	.word	0x200005f0

08004df4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dfe:	4b29      	ldr	r3, [pc, #164]	; (8004ea4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e04:	4b28      	ldr	r3, [pc, #160]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3304      	adds	r3, #4
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fae1 	bl	80043d2 <uxListRemove>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e16:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43da      	mvns	r2, r3
 8004e24:	4b21      	ldr	r3, [pc, #132]	; (8004eac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	4a20      	ldr	r2, [pc, #128]	; (8004eac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e2c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d10a      	bne.n	8004e4c <prvAddCurrentTaskToDelayedList+0x58>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3304      	adds	r3, #4
 8004e42:	4619      	mov	r1, r3
 8004e44:	481a      	ldr	r0, [pc, #104]	; (8004eb0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e46:	f7ff fa67 	bl	8004318 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e4a:	e026      	b.n	8004e9a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4413      	add	r3, r2
 8004e52:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e54:	4b14      	ldr	r3, [pc, #80]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d209      	bcs.n	8004e78 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e64:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f7ff fa75 	bl	8004360 <vListInsert>
}
 8004e76:	e010      	b.n	8004e9a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3304      	adds	r3, #4
 8004e82:	4619      	mov	r1, r3
 8004e84:	4610      	mov	r0, r2
 8004e86:	f7ff fa6b 	bl	8004360 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e8a:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d202      	bcs.n	8004e9a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004e94:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6013      	str	r3, [r2, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200005d4 	.word	0x200005d4
 8004ea8:	200004d0 	.word	0x200004d0
 8004eac:	200005d8 	.word	0x200005d8
 8004eb0:	200005bc 	.word	0x200005bc
 8004eb4:	2000058c 	.word	0x2000058c
 8004eb8:	20000588 	.word	0x20000588
 8004ebc:	200005f0 	.word	0x200005f0

08004ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3b04      	subs	r3, #4
 8004ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3b04      	subs	r3, #4
 8004ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f023 0201 	bic.w	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3b04      	subs	r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ef0:	4a0c      	ldr	r2, [pc, #48]	; (8004f24 <pxPortInitialiseStack+0x64>)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	3b14      	subs	r3, #20
 8004efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b04      	subs	r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f06f 0202 	mvn.w	r2, #2
 8004f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b20      	subs	r3, #32
 8004f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f16:	68fb      	ldr	r3, [r7, #12]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	08004f29 	.word	0x08004f29

08004f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f32:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <prvTaskExitError+0x54>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d00a      	beq.n	8004f52 <prvTaskExitError+0x2a>
	__asm volatile
 8004f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f40:	f383 8811 	msr	BASEPRI, r3
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	f3bf 8f4f 	dsb	sy
 8004f4c:	60fb      	str	r3, [r7, #12]
}
 8004f4e:	bf00      	nop
 8004f50:	e7fe      	b.n	8004f50 <prvTaskExitError+0x28>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	60bb      	str	r3, [r7, #8]
}
 8004f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f66:	bf00      	nop
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0fc      	beq.n	8004f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f6e:	bf00      	nop
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000044 	.word	0x20000044

08004f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f80:	4b07      	ldr	r3, [pc, #28]	; (8004fa0 <pxCurrentTCBConst2>)
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	6808      	ldr	r0, [r1, #0]
 8004f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8a:	f380 8809 	msr	PSP, r0
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f04f 0000 	mov.w	r0, #0
 8004f96:	f380 8811 	msr	BASEPRI, r0
 8004f9a:	4770      	bx	lr
 8004f9c:	f3af 8000 	nop.w

08004fa0 <pxCurrentTCBConst2>:
 8004fa0:	200004d0 	.word	0x200004d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop

08004fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fa8:	4808      	ldr	r0, [pc, #32]	; (8004fcc <prvPortStartFirstTask+0x24>)
 8004faa:	6800      	ldr	r0, [r0, #0]
 8004fac:	6800      	ldr	r0, [r0, #0]
 8004fae:	f380 8808 	msr	MSP, r0
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8814 	msr	CONTROL, r0
 8004fba:	b662      	cpsie	i
 8004fbc:	b661      	cpsie	f
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	df00      	svc	0
 8004fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fca:	bf00      	nop
 8004fcc:	e000ed08 	.word	0xe000ed08

08004fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004fd6:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <xPortStartScheduler+0x120>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a46      	ldr	r2, [pc, #280]	; (80050f4 <xPortStartScheduler+0x124>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10a      	bne.n	8004ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	613b      	str	r3, [r7, #16]
}
 8004ff2:	bf00      	nop
 8004ff4:	e7fe      	b.n	8004ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ff6:	4b3e      	ldr	r3, [pc, #248]	; (80050f0 <xPortStartScheduler+0x120>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a3f      	ldr	r2, [pc, #252]	; (80050f8 <xPortStartScheduler+0x128>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10a      	bne.n	8005016 <xPortStartScheduler+0x46>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60fb      	str	r3, [r7, #12]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005016:	4b39      	ldr	r3, [pc, #228]	; (80050fc <xPortStartScheduler+0x12c>)
 8005018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	22ff      	movs	r2, #255	; 0xff
 8005026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005038:	b2da      	uxtb	r2, r3
 800503a:	4b31      	ldr	r3, [pc, #196]	; (8005100 <xPortStartScheduler+0x130>)
 800503c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <xPortStartScheduler+0x134>)
 8005040:	2207      	movs	r2, #7
 8005042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005044:	e009      	b.n	800505a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005046:	4b2f      	ldr	r3, [pc, #188]	; (8005104 <xPortStartScheduler+0x134>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3b01      	subs	r3, #1
 800504c:	4a2d      	ldr	r2, [pc, #180]	; (8005104 <xPortStartScheduler+0x134>)
 800504e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	b2db      	uxtb	r3, r3
 8005058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800505a:	78fb      	ldrb	r3, [r7, #3]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d0ef      	beq.n	8005046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005066:	4b27      	ldr	r3, [pc, #156]	; (8005104 <xPortStartScheduler+0x134>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f1c3 0307 	rsb	r3, r3, #7
 800506e:	2b04      	cmp	r3, #4
 8005070:	d00a      	beq.n	8005088 <xPortStartScheduler+0xb8>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	60bb      	str	r3, [r7, #8]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005088:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <xPortStartScheduler+0x134>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	021b      	lsls	r3, r3, #8
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <xPortStartScheduler+0x134>)
 8005090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005092:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <xPortStartScheduler+0x134>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800509a:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <xPortStartScheduler+0x134>)
 800509c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050a6:	4b18      	ldr	r3, [pc, #96]	; (8005108 <xPortStartScheduler+0x138>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a17      	ldr	r2, [pc, #92]	; (8005108 <xPortStartScheduler+0x138>)
 80050ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <xPortStartScheduler+0x138>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a14      	ldr	r2, [pc, #80]	; (8005108 <xPortStartScheduler+0x138>)
 80050b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050be:	f000 f8dd 	bl	800527c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050c2:	4b12      	ldr	r3, [pc, #72]	; (800510c <xPortStartScheduler+0x13c>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050c8:	f000 f8fc 	bl	80052c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <xPortStartScheduler+0x140>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0f      	ldr	r2, [pc, #60]	; (8005110 <xPortStartScheduler+0x140>)
 80050d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050d8:	f7ff ff66 	bl	8004fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050dc:	f7ff fd4e 	bl	8004b7c <vTaskSwitchContext>
	prvTaskExitError();
 80050e0:	f7ff ff22 	bl	8004f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	410fc271 	.word	0x410fc271
 80050f8:	410fc270 	.word	0x410fc270
 80050fc:	e000e400 	.word	0xe000e400
 8005100:	200005fc 	.word	0x200005fc
 8005104:	20000600 	.word	0x20000600
 8005108:	e000ed20 	.word	0xe000ed20
 800510c:	20000044 	.word	0x20000044
 8005110:	e000ef34 	.word	0xe000ef34

08005114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
	__asm volatile
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	607b      	str	r3, [r7, #4]
}
 800512c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800512e:	4b0f      	ldr	r3, [pc, #60]	; (800516c <vPortEnterCritical+0x58>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3301      	adds	r3, #1
 8005134:	4a0d      	ldr	r2, [pc, #52]	; (800516c <vPortEnterCritical+0x58>)
 8005136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005138:	4b0c      	ldr	r3, [pc, #48]	; (800516c <vPortEnterCritical+0x58>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d10f      	bne.n	8005160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <vPortEnterCritical+0x5c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <vPortEnterCritical+0x4c>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	603b      	str	r3, [r7, #0]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <vPortEnterCritical+0x4a>
	}
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	20000044 	.word	0x20000044
 8005170:	e000ed04 	.word	0xe000ed04

08005174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800517a:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <vPortExitCritical+0x50>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <vPortExitCritical+0x24>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	607b      	str	r3, [r7, #4]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005198:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <vPortExitCritical+0x50>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3b01      	subs	r3, #1
 800519e:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <vPortExitCritical+0x50>)
 80051a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051a2:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <vPortExitCritical+0x50>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d105      	bne.n	80051b6 <vPortExitCritical+0x42>
 80051aa:	2300      	movs	r3, #0
 80051ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	20000044 	.word	0x20000044
	...

080051d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051d0:	f3ef 8009 	mrs	r0, PSP
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	4b15      	ldr	r3, [pc, #84]	; (8005230 <pxCurrentTCBConst>)
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	f01e 0f10 	tst.w	lr, #16
 80051e0:	bf08      	it	eq
 80051e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80051e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	6010      	str	r0, [r2, #0]
 80051ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80051f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80051f4:	f380 8811 	msr	BASEPRI, r0
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f7ff fcbc 	bl	8004b7c <vTaskSwitchContext>
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f380 8811 	msr	BASEPRI, r0
 800520c:	bc09      	pop	{r0, r3}
 800520e:	6819      	ldr	r1, [r3, #0]
 8005210:	6808      	ldr	r0, [r1, #0]
 8005212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005216:	f01e 0f10 	tst.w	lr, #16
 800521a:	bf08      	it	eq
 800521c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005220:	f380 8809 	msr	PSP, r0
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	f3af 8000 	nop.w

08005230 <pxCurrentTCBConst>:
 8005230:	200004d0 	.word	0x200004d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop

08005238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	607b      	str	r3, [r7, #4]
}
 8005250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005252:	f7ff fbdb 	bl	8004a0c <xTaskIncrementTick>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <SysTick_Handler+0x40>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	2300      	movs	r3, #0
 8005266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f383 8811 	msr	BASEPRI, r3
}
 800526e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005270:	bf00      	nop
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800527c:	b480      	push	{r7}
 800527e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <vPortSetupTimerInterrupt+0x34>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <vPortSetupTimerInterrupt+0x38>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800528c:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <vPortSetupTimerInterrupt+0x3c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <vPortSetupTimerInterrupt+0x40>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	099b      	lsrs	r3, r3, #6
 8005298:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <vPortSetupTimerInterrupt+0x44>)
 800529a:	3b01      	subs	r3, #1
 800529c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800529e:	4b04      	ldr	r3, [pc, #16]	; (80052b0 <vPortSetupTimerInterrupt+0x34>)
 80052a0:	2207      	movs	r2, #7
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	e000e010 	.word	0xe000e010
 80052b4:	e000e018 	.word	0xe000e018
 80052b8:	20000038 	.word	0x20000038
 80052bc:	10624dd3 	.word	0x10624dd3
 80052c0:	e000e014 	.word	0xe000e014

080052c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052d4 <vPortEnableVFP+0x10>
 80052c8:	6801      	ldr	r1, [r0, #0]
 80052ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052ce:	6001      	str	r1, [r0, #0]
 80052d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052d2:	bf00      	nop
 80052d4:	e000ed88 	.word	0xe000ed88

080052d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	; 0x28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052e4:	f7ff fae8 	bl	80048b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052e8:	4b5b      	ldr	r3, [pc, #364]	; (8005458 <pvPortMalloc+0x180>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052f0:	f000 f920 	bl	8005534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052f4:	4b59      	ldr	r3, [pc, #356]	; (800545c <pvPortMalloc+0x184>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f040 8093 	bne.w	8005428 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d01d      	beq.n	8005344 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005308:	2208      	movs	r2, #8
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4413      	add	r3, r2
 800530e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	2b00      	cmp	r3, #0
 8005318:	d014      	beq.n	8005344 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f023 0307 	bic.w	r3, r3, #7
 8005320:	3308      	adds	r3, #8
 8005322:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <pvPortMalloc+0x6c>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	617b      	str	r3, [r7, #20]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d06e      	beq.n	8005428 <pvPortMalloc+0x150>
 800534a:	4b45      	ldr	r3, [pc, #276]	; (8005460 <pvPortMalloc+0x188>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d869      	bhi.n	8005428 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005354:	4b43      	ldr	r3, [pc, #268]	; (8005464 <pvPortMalloc+0x18c>)
 8005356:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005358:	4b42      	ldr	r3, [pc, #264]	; (8005464 <pvPortMalloc+0x18c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800535e:	e004      	b.n	800536a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	429a      	cmp	r2, r3
 8005372:	d903      	bls.n	800537c <pvPortMalloc+0xa4>
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1f1      	bne.n	8005360 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800537c:	4b36      	ldr	r3, [pc, #216]	; (8005458 <pvPortMalloc+0x180>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005382:	429a      	cmp	r2, r3
 8005384:	d050      	beq.n	8005428 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2208      	movs	r2, #8
 800538c:	4413      	add	r3, r2
 800538e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	685a      	ldr	r2, [r3, #4]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	1ad2      	subs	r2, r2, r3
 80053a0:	2308      	movs	r3, #8
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d91f      	bls.n	80053e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <pvPortMalloc+0xf8>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	613b      	str	r3, [r7, #16]
}
 80053cc:	bf00      	nop
 80053ce:	e7fe      	b.n	80053ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053e2:	69b8      	ldr	r0, [r7, #24]
 80053e4:	f000 f908 	bl	80055f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053e8:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <pvPortMalloc+0x188>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	4a1b      	ldr	r2, [pc, #108]	; (8005460 <pvPortMalloc+0x188>)
 80053f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053f6:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <pvPortMalloc+0x188>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <pvPortMalloc+0x190>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d203      	bcs.n	800540a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005402:	4b17      	ldr	r3, [pc, #92]	; (8005460 <pvPortMalloc+0x188>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a18      	ldr	r2, [pc, #96]	; (8005468 <pvPortMalloc+0x190>)
 8005408:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	4b13      	ldr	r3, [pc, #76]	; (800545c <pvPortMalloc+0x184>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	431a      	orrs	r2, r3
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800541e:	4b13      	ldr	r3, [pc, #76]	; (800546c <pvPortMalloc+0x194>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3301      	adds	r3, #1
 8005424:	4a11      	ldr	r2, [pc, #68]	; (800546c <pvPortMalloc+0x194>)
 8005426:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005428:	f7ff fa54 	bl	80048d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <pvPortMalloc+0x174>
	__asm volatile
 8005436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543a:	f383 8811 	msr	BASEPRI, r3
 800543e:	f3bf 8f6f 	isb	sy
 8005442:	f3bf 8f4f 	dsb	sy
 8005446:	60fb      	str	r3, [r7, #12]
}
 8005448:	bf00      	nop
 800544a:	e7fe      	b.n	800544a <pvPortMalloc+0x172>
	return pvReturn;
 800544c:	69fb      	ldr	r3, [r7, #28]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3728      	adds	r7, #40	; 0x28
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	2000420c 	.word	0x2000420c
 800545c:	20004220 	.word	0x20004220
 8005460:	20004210 	.word	0x20004210
 8005464:	20004204 	.word	0x20004204
 8005468:	20004214 	.word	0x20004214
 800546c:	20004218 	.word	0x20004218

08005470 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d04d      	beq.n	800551e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005482:	2308      	movs	r3, #8
 8005484:	425b      	negs	r3, r3
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4413      	add	r3, r2
 800548a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	685a      	ldr	r2, [r3, #4]
 8005494:	4b24      	ldr	r3, [pc, #144]	; (8005528 <vPortFree+0xb8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4013      	ands	r3, r2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <vPortFree+0x44>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60fb      	str	r3, [r7, #12]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <vPortFree+0x62>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	60bb      	str	r3, [r7, #8]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	4b14      	ldr	r3, [pc, #80]	; (8005528 <vPortFree+0xb8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4013      	ands	r3, r2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01e      	beq.n	800551e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d11a      	bne.n	800551e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <vPortFree+0xb8>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	43db      	mvns	r3, r3
 80054f2:	401a      	ands	r2, r3
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054f8:	f7ff f9de 	bl	80048b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	4b0a      	ldr	r3, [pc, #40]	; (800552c <vPortFree+0xbc>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4413      	add	r3, r2
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <vPortFree+0xbc>)
 8005508:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800550a:	6938      	ldr	r0, [r7, #16]
 800550c:	f000 f874 	bl	80055f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <vPortFree+0xc0>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	3301      	adds	r3, #1
 8005516:	4a06      	ldr	r2, [pc, #24]	; (8005530 <vPortFree+0xc0>)
 8005518:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800551a:	f7ff f9db 	bl	80048d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800551e:	bf00      	nop
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20004220 	.word	0x20004220
 800552c:	20004210 	.word	0x20004210
 8005530:	2000421c 	.word	0x2000421c

08005534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800553a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800553e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005540:	4b27      	ldr	r3, [pc, #156]	; (80055e0 <prvHeapInit+0xac>)
 8005542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00c      	beq.n	8005568 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3307      	adds	r3, #7
 8005552:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f023 0307 	bic.w	r3, r3, #7
 800555a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <prvHeapInit+0xac>)
 8005564:	4413      	add	r3, r2
 8005566:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800556c:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <prvHeapInit+0xb0>)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005572:	4b1c      	ldr	r3, [pc, #112]	; (80055e4 <prvHeapInit+0xb0>)
 8005574:	2200      	movs	r2, #0
 8005576:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68ba      	ldr	r2, [r7, #8]
 800557c:	4413      	add	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005580:	2208      	movs	r2, #8
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <prvHeapInit+0xb4>)
 8005594:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005596:	4b14      	ldr	r3, [pc, #80]	; (80055e8 <prvHeapInit+0xb4>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <prvHeapInit+0xb4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	1ad2      	subs	r2, r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <prvHeapInit+0xb4>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <prvHeapInit+0xb8>)
 80055c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	4a09      	ldr	r2, [pc, #36]	; (80055f0 <prvHeapInit+0xbc>)
 80055ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055cc:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <prvHeapInit+0xc0>)
 80055ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80055d2:	601a      	str	r2, [r3, #0]
}
 80055d4:	bf00      	nop
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	20000604 	.word	0x20000604
 80055e4:	20004204 	.word	0x20004204
 80055e8:	2000420c 	.word	0x2000420c
 80055ec:	20004214 	.word	0x20004214
 80055f0:	20004210 	.word	0x20004210
 80055f4:	20004220 	.word	0x20004220

080055f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005600:	4b28      	ldr	r3, [pc, #160]	; (80056a4 <prvInsertBlockIntoFreeList+0xac>)
 8005602:	60fb      	str	r3, [r7, #12]
 8005604:	e002      	b.n	800560c <prvInsertBlockIntoFreeList+0x14>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d8f7      	bhi.n	8005606 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4413      	add	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	429a      	cmp	r2, r3
 8005626:	d108      	bne.n	800563a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	441a      	add	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d118      	bne.n	8005680 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b15      	ldr	r3, [pc, #84]	; (80056a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d00d      	beq.n	8005676 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	441a      	add	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	e008      	b.n	8005688 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	e003      	b.n	8005688 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	429a      	cmp	r2, r3
 800568e:	d002      	beq.n	8005696 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20004204 	.word	0x20004204
 80056a8:	2000420c 	.word	0x2000420c

080056ac <feof>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	4b0f      	ldr	r3, [pc, #60]	; (80056ec <feof+0x40>)
 80056b0:	4604      	mov	r4, r0
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	b118      	cbz	r0, 80056be <feof+0x12>
 80056b6:	6a03      	ldr	r3, [r0, #32]
 80056b8:	b90b      	cbnz	r3, 80056be <feof+0x12>
 80056ba:	f000 f913 	bl	80058e4 <__sinit>
 80056be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056c0:	07d8      	lsls	r0, r3, #31
 80056c2:	d405      	bmi.n	80056d0 <feof+0x24>
 80056c4:	89a3      	ldrh	r3, [r4, #12]
 80056c6:	0599      	lsls	r1, r3, #22
 80056c8:	d402      	bmi.n	80056d0 <feof+0x24>
 80056ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056cc:	f000 fbdb 	bl	8005e86 <__retarget_lock_acquire_recursive>
 80056d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	07d2      	lsls	r2, r2, #31
 80056d6:	f3c3 1540 	ubfx	r5, r3, #5, #1
 80056da:	d404      	bmi.n	80056e6 <feof+0x3a>
 80056dc:	059b      	lsls	r3, r3, #22
 80056de:	d402      	bmi.n	80056e6 <feof+0x3a>
 80056e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056e2:	f000 fbd1 	bl	8005e88 <__retarget_lock_release_recursive>
 80056e6:	4628      	mov	r0, r5
 80056e8:	bd38      	pop	{r3, r4, r5, pc}
 80056ea:	bf00      	nop
 80056ec:	200000a0 	.word	0x200000a0

080056f0 <_fgets_r>:
 80056f0:	2a01      	cmp	r2, #1
 80056f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f6:	4681      	mov	r9, r0
 80056f8:	460d      	mov	r5, r1
 80056fa:	4617      	mov	r7, r2
 80056fc:	461c      	mov	r4, r3
 80056fe:	dc03      	bgt.n	8005708 <_fgets_r+0x18>
 8005700:	2500      	movs	r5, #0
 8005702:	4628      	mov	r0, r5
 8005704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005708:	b118      	cbz	r0, 8005712 <_fgets_r+0x22>
 800570a:	6a03      	ldr	r3, [r0, #32]
 800570c:	b90b      	cbnz	r3, 8005712 <_fgets_r+0x22>
 800570e:	f000 f8e9 	bl	80058e4 <__sinit>
 8005712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005714:	07de      	lsls	r6, r3, #31
 8005716:	d405      	bmi.n	8005724 <_fgets_r+0x34>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	0598      	lsls	r0, r3, #22
 800571c:	d402      	bmi.n	8005724 <_fgets_r+0x34>
 800571e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005720:	f000 fbb1 	bl	8005e86 <__retarget_lock_acquire_recursive>
 8005724:	3f01      	subs	r7, #1
 8005726:	46a8      	mov	r8, r5
 8005728:	6866      	ldr	r6, [r4, #4]
 800572a:	b996      	cbnz	r6, 8005752 <_fgets_r+0x62>
 800572c:	4621      	mov	r1, r4
 800572e:	4648      	mov	r0, r9
 8005730:	f000 f98a 	bl	8005a48 <__srefill_r>
 8005734:	b160      	cbz	r0, 8005750 <_fgets_r+0x60>
 8005736:	45a8      	cmp	r8, r5
 8005738:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800573a:	d138      	bne.n	80057ae <_fgets_r+0xbe>
 800573c:	07d9      	lsls	r1, r3, #31
 800573e:	d4df      	bmi.n	8005700 <_fgets_r+0x10>
 8005740:	89a5      	ldrh	r5, [r4, #12]
 8005742:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 8005746:	d1db      	bne.n	8005700 <_fgets_r+0x10>
 8005748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800574a:	f000 fb9d 	bl	8005e88 <__retarget_lock_release_recursive>
 800574e:	e7d8      	b.n	8005702 <_fgets_r+0x12>
 8005750:	6866      	ldr	r6, [r4, #4]
 8005752:	f8d4 a000 	ldr.w	sl, [r4]
 8005756:	42be      	cmp	r6, r7
 8005758:	bf28      	it	cs
 800575a:	463e      	movcs	r6, r7
 800575c:	4632      	mov	r2, r6
 800575e:	210a      	movs	r1, #10
 8005760:	4650      	mov	r0, sl
 8005762:	f7fa fd3d 	bl	80001e0 <memchr>
 8005766:	6863      	ldr	r3, [r4, #4]
 8005768:	b1a0      	cbz	r0, 8005794 <_fgets_r+0xa4>
 800576a:	3001      	adds	r0, #1
 800576c:	eba0 060a 	sub.w	r6, r0, sl
 8005770:	1b9b      	subs	r3, r3, r6
 8005772:	e9c4 0300 	strd	r0, r3, [r4]
 8005776:	4632      	mov	r2, r6
 8005778:	4651      	mov	r1, sl
 800577a:	4640      	mov	r0, r8
 800577c:	f000 fb85 	bl	8005e8a <memcpy>
 8005780:	2300      	movs	r3, #0
 8005782:	f808 3006 	strb.w	r3, [r8, r6]
 8005786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005788:	07da      	lsls	r2, r3, #31
 800578a:	d4ba      	bmi.n	8005702 <_fgets_r+0x12>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	059b      	lsls	r3, r3, #22
 8005790:	d4b7      	bmi.n	8005702 <_fgets_r+0x12>
 8005792:	e7d9      	b.n	8005748 <_fgets_r+0x58>
 8005794:	1b9b      	subs	r3, r3, r6
 8005796:	6063      	str	r3, [r4, #4]
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	4433      	add	r3, r6
 800579c:	4640      	mov	r0, r8
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	4632      	mov	r2, r6
 80057a2:	4651      	mov	r1, sl
 80057a4:	f000 fb71 	bl	8005e8a <memcpy>
 80057a8:	1bbf      	subs	r7, r7, r6
 80057aa:	44b0      	add	r8, r6
 80057ac:	d1bc      	bne.n	8005728 <_fgets_r+0x38>
 80057ae:	2300      	movs	r3, #0
 80057b0:	f888 3000 	strb.w	r3, [r8]
 80057b4:	e7e7      	b.n	8005786 <_fgets_r+0x96>
	...

080057b8 <fgets>:
 80057b8:	4613      	mov	r3, r2
 80057ba:	460a      	mov	r2, r1
 80057bc:	4601      	mov	r1, r0
 80057be:	4802      	ldr	r0, [pc, #8]	; (80057c8 <fgets+0x10>)
 80057c0:	6800      	ldr	r0, [r0, #0]
 80057c2:	f7ff bf95 	b.w	80056f0 <_fgets_r>
 80057c6:	bf00      	nop
 80057c8:	200000a0 	.word	0x200000a0

080057cc <std>:
 80057cc:	2300      	movs	r3, #0
 80057ce:	b510      	push	{r4, lr}
 80057d0:	4604      	mov	r4, r0
 80057d2:	e9c0 3300 	strd	r3, r3, [r0]
 80057d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057da:	6083      	str	r3, [r0, #8]
 80057dc:	8181      	strh	r1, [r0, #12]
 80057de:	6643      	str	r3, [r0, #100]	; 0x64
 80057e0:	81c2      	strh	r2, [r0, #14]
 80057e2:	6183      	str	r3, [r0, #24]
 80057e4:	4619      	mov	r1, r3
 80057e6:	2208      	movs	r2, #8
 80057e8:	305c      	adds	r0, #92	; 0x5c
 80057ea:	f000 fa7d 	bl	8005ce8 <memset>
 80057ee:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <std+0x58>)
 80057f0:	6263      	str	r3, [r4, #36]	; 0x24
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <std+0x5c>)
 80057f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80057f6:	4b0d      	ldr	r3, [pc, #52]	; (800582c <std+0x60>)
 80057f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057fa:	4b0d      	ldr	r3, [pc, #52]	; (8005830 <std+0x64>)
 80057fc:	6323      	str	r3, [r4, #48]	; 0x30
 80057fe:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <std+0x68>)
 8005800:	6224      	str	r4, [r4, #32]
 8005802:	429c      	cmp	r4, r3
 8005804:	d006      	beq.n	8005814 <std+0x48>
 8005806:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800580a:	4294      	cmp	r4, r2
 800580c:	d002      	beq.n	8005814 <std+0x48>
 800580e:	33d0      	adds	r3, #208	; 0xd0
 8005810:	429c      	cmp	r4, r3
 8005812:	d105      	bne.n	8005820 <std+0x54>
 8005814:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800581c:	f000 bb32 	b.w	8005e84 <__retarget_lock_init_recursive>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	bf00      	nop
 8005824:	08005b39 	.word	0x08005b39
 8005828:	08005b5b 	.word	0x08005b5b
 800582c:	08005b93 	.word	0x08005b93
 8005830:	08005bb7 	.word	0x08005bb7
 8005834:	20004224 	.word	0x20004224

08005838 <stdio_exit_handler>:
 8005838:	4a02      	ldr	r2, [pc, #8]	; (8005844 <stdio_exit_handler+0xc>)
 800583a:	4903      	ldr	r1, [pc, #12]	; (8005848 <stdio_exit_handler+0x10>)
 800583c:	4803      	ldr	r0, [pc, #12]	; (800584c <stdio_exit_handler+0x14>)
 800583e:	f000 b869 	b.w	8005914 <_fwalk_sglue>
 8005842:	bf00      	nop
 8005844:	20000048 	.word	0x20000048
 8005848:	0800674d 	.word	0x0800674d
 800584c:	20000054 	.word	0x20000054

08005850 <cleanup_stdio>:
 8005850:	6841      	ldr	r1, [r0, #4]
 8005852:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <cleanup_stdio+0x34>)
 8005854:	4299      	cmp	r1, r3
 8005856:	b510      	push	{r4, lr}
 8005858:	4604      	mov	r4, r0
 800585a:	d001      	beq.n	8005860 <cleanup_stdio+0x10>
 800585c:	f000 ff76 	bl	800674c <_fflush_r>
 8005860:	68a1      	ldr	r1, [r4, #8]
 8005862:	4b09      	ldr	r3, [pc, #36]	; (8005888 <cleanup_stdio+0x38>)
 8005864:	4299      	cmp	r1, r3
 8005866:	d002      	beq.n	800586e <cleanup_stdio+0x1e>
 8005868:	4620      	mov	r0, r4
 800586a:	f000 ff6f 	bl	800674c <_fflush_r>
 800586e:	68e1      	ldr	r1, [r4, #12]
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <cleanup_stdio+0x3c>)
 8005872:	4299      	cmp	r1, r3
 8005874:	d004      	beq.n	8005880 <cleanup_stdio+0x30>
 8005876:	4620      	mov	r0, r4
 8005878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800587c:	f000 bf66 	b.w	800674c <_fflush_r>
 8005880:	bd10      	pop	{r4, pc}
 8005882:	bf00      	nop
 8005884:	20004224 	.word	0x20004224
 8005888:	2000428c 	.word	0x2000428c
 800588c:	200042f4 	.word	0x200042f4

08005890 <global_stdio_init.part.0>:
 8005890:	b510      	push	{r4, lr}
 8005892:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <global_stdio_init.part.0+0x30>)
 8005894:	4c0b      	ldr	r4, [pc, #44]	; (80058c4 <global_stdio_init.part.0+0x34>)
 8005896:	4a0c      	ldr	r2, [pc, #48]	; (80058c8 <global_stdio_init.part.0+0x38>)
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	4620      	mov	r0, r4
 800589c:	2200      	movs	r2, #0
 800589e:	2104      	movs	r1, #4
 80058a0:	f7ff ff94 	bl	80057cc <std>
 80058a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80058a8:	2201      	movs	r2, #1
 80058aa:	2109      	movs	r1, #9
 80058ac:	f7ff ff8e 	bl	80057cc <std>
 80058b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80058b4:	2202      	movs	r2, #2
 80058b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ba:	2112      	movs	r1, #18
 80058bc:	f7ff bf86 	b.w	80057cc <std>
 80058c0:	2000435c 	.word	0x2000435c
 80058c4:	20004224 	.word	0x20004224
 80058c8:	08005839 	.word	0x08005839

080058cc <__sfp_lock_acquire>:
 80058cc:	4801      	ldr	r0, [pc, #4]	; (80058d4 <__sfp_lock_acquire+0x8>)
 80058ce:	f000 bada 	b.w	8005e86 <__retarget_lock_acquire_recursive>
 80058d2:	bf00      	nop
 80058d4:	20004365 	.word	0x20004365

080058d8 <__sfp_lock_release>:
 80058d8:	4801      	ldr	r0, [pc, #4]	; (80058e0 <__sfp_lock_release+0x8>)
 80058da:	f000 bad5 	b.w	8005e88 <__retarget_lock_release_recursive>
 80058de:	bf00      	nop
 80058e0:	20004365 	.word	0x20004365

080058e4 <__sinit>:
 80058e4:	b510      	push	{r4, lr}
 80058e6:	4604      	mov	r4, r0
 80058e8:	f7ff fff0 	bl	80058cc <__sfp_lock_acquire>
 80058ec:	6a23      	ldr	r3, [r4, #32]
 80058ee:	b11b      	cbz	r3, 80058f8 <__sinit+0x14>
 80058f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f4:	f7ff bff0 	b.w	80058d8 <__sfp_lock_release>
 80058f8:	4b04      	ldr	r3, [pc, #16]	; (800590c <__sinit+0x28>)
 80058fa:	6223      	str	r3, [r4, #32]
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <__sinit+0x2c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f5      	bne.n	80058f0 <__sinit+0xc>
 8005904:	f7ff ffc4 	bl	8005890 <global_stdio_init.part.0>
 8005908:	e7f2      	b.n	80058f0 <__sinit+0xc>
 800590a:	bf00      	nop
 800590c:	08005851 	.word	0x08005851
 8005910:	2000435c 	.word	0x2000435c

08005914 <_fwalk_sglue>:
 8005914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005918:	4607      	mov	r7, r0
 800591a:	4688      	mov	r8, r1
 800591c:	4614      	mov	r4, r2
 800591e:	2600      	movs	r6, #0
 8005920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005924:	f1b9 0901 	subs.w	r9, r9, #1
 8005928:	d505      	bpl.n	8005936 <_fwalk_sglue+0x22>
 800592a:	6824      	ldr	r4, [r4, #0]
 800592c:	2c00      	cmp	r4, #0
 800592e:	d1f7      	bne.n	8005920 <_fwalk_sglue+0xc>
 8005930:	4630      	mov	r0, r6
 8005932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005936:	89ab      	ldrh	r3, [r5, #12]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d907      	bls.n	800594c <_fwalk_sglue+0x38>
 800593c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005940:	3301      	adds	r3, #1
 8005942:	d003      	beq.n	800594c <_fwalk_sglue+0x38>
 8005944:	4629      	mov	r1, r5
 8005946:	4638      	mov	r0, r7
 8005948:	47c0      	blx	r8
 800594a:	4306      	orrs	r6, r0
 800594c:	3568      	adds	r5, #104	; 0x68
 800594e:	e7e9      	b.n	8005924 <_fwalk_sglue+0x10>

08005950 <iprintf>:
 8005950:	b40f      	push	{r0, r1, r2, r3}
 8005952:	b507      	push	{r0, r1, r2, lr}
 8005954:	4906      	ldr	r1, [pc, #24]	; (8005970 <iprintf+0x20>)
 8005956:	ab04      	add	r3, sp, #16
 8005958:	6808      	ldr	r0, [r1, #0]
 800595a:	f853 2b04 	ldr.w	r2, [r3], #4
 800595e:	6881      	ldr	r1, [r0, #8]
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	f000 fbc3 	bl	80060ec <_vfiprintf_r>
 8005966:	b003      	add	sp, #12
 8005968:	f85d eb04 	ldr.w	lr, [sp], #4
 800596c:	b004      	add	sp, #16
 800596e:	4770      	bx	lr
 8005970:	200000a0 	.word	0x200000a0

08005974 <_puts_r>:
 8005974:	6a03      	ldr	r3, [r0, #32]
 8005976:	b570      	push	{r4, r5, r6, lr}
 8005978:	6884      	ldr	r4, [r0, #8]
 800597a:	4605      	mov	r5, r0
 800597c:	460e      	mov	r6, r1
 800597e:	b90b      	cbnz	r3, 8005984 <_puts_r+0x10>
 8005980:	f7ff ffb0 	bl	80058e4 <__sinit>
 8005984:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005986:	07db      	lsls	r3, r3, #31
 8005988:	d405      	bmi.n	8005996 <_puts_r+0x22>
 800598a:	89a3      	ldrh	r3, [r4, #12]
 800598c:	0598      	lsls	r0, r3, #22
 800598e:	d402      	bmi.n	8005996 <_puts_r+0x22>
 8005990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005992:	f000 fa78 	bl	8005e86 <__retarget_lock_acquire_recursive>
 8005996:	89a3      	ldrh	r3, [r4, #12]
 8005998:	0719      	lsls	r1, r3, #28
 800599a:	d513      	bpl.n	80059c4 <_puts_r+0x50>
 800599c:	6923      	ldr	r3, [r4, #16]
 800599e:	b18b      	cbz	r3, 80059c4 <_puts_r+0x50>
 80059a0:	3e01      	subs	r6, #1
 80059a2:	68a3      	ldr	r3, [r4, #8]
 80059a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80059a8:	3b01      	subs	r3, #1
 80059aa:	60a3      	str	r3, [r4, #8]
 80059ac:	b9e9      	cbnz	r1, 80059ea <_puts_r+0x76>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	da2e      	bge.n	8005a10 <_puts_r+0x9c>
 80059b2:	4622      	mov	r2, r4
 80059b4:	210a      	movs	r1, #10
 80059b6:	4628      	mov	r0, r5
 80059b8:	f000 f901 	bl	8005bbe <__swbuf_r>
 80059bc:	3001      	adds	r0, #1
 80059be:	d007      	beq.n	80059d0 <_puts_r+0x5c>
 80059c0:	250a      	movs	r5, #10
 80059c2:	e007      	b.n	80059d4 <_puts_r+0x60>
 80059c4:	4621      	mov	r1, r4
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 f936 	bl	8005c38 <__swsetup_r>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d0e7      	beq.n	80059a0 <_puts_r+0x2c>
 80059d0:	f04f 35ff 	mov.w	r5, #4294967295
 80059d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059d6:	07da      	lsls	r2, r3, #31
 80059d8:	d405      	bmi.n	80059e6 <_puts_r+0x72>
 80059da:	89a3      	ldrh	r3, [r4, #12]
 80059dc:	059b      	lsls	r3, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_puts_r+0x72>
 80059e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059e2:	f000 fa51 	bl	8005e88 <__retarget_lock_release_recursive>
 80059e6:	4628      	mov	r0, r5
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da04      	bge.n	80059f8 <_puts_r+0x84>
 80059ee:	69a2      	ldr	r2, [r4, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	dc06      	bgt.n	8005a02 <_puts_r+0x8e>
 80059f4:	290a      	cmp	r1, #10
 80059f6:	d004      	beq.n	8005a02 <_puts_r+0x8e>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	6022      	str	r2, [r4, #0]
 80059fe:	7019      	strb	r1, [r3, #0]
 8005a00:	e7cf      	b.n	80059a2 <_puts_r+0x2e>
 8005a02:	4622      	mov	r2, r4
 8005a04:	4628      	mov	r0, r5
 8005a06:	f000 f8da 	bl	8005bbe <__swbuf_r>
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d1c9      	bne.n	80059a2 <_puts_r+0x2e>
 8005a0e:	e7df      	b.n	80059d0 <_puts_r+0x5c>
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	250a      	movs	r5, #10
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	6022      	str	r2, [r4, #0]
 8005a18:	701d      	strb	r5, [r3, #0]
 8005a1a:	e7db      	b.n	80059d4 <_puts_r+0x60>

08005a1c <puts>:
 8005a1c:	4b02      	ldr	r3, [pc, #8]	; (8005a28 <puts+0xc>)
 8005a1e:	4601      	mov	r1, r0
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	f7ff bfa7 	b.w	8005974 <_puts_r>
 8005a26:	bf00      	nop
 8005a28:	200000a0 	.word	0x200000a0

08005a2c <lflush>:
 8005a2c:	898b      	ldrh	r3, [r1, #12]
 8005a2e:	f003 0309 	and.w	r3, r3, #9
 8005a32:	2b09      	cmp	r3, #9
 8005a34:	d103      	bne.n	8005a3e <lflush+0x12>
 8005a36:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <lflush+0x18>)
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	f000 be87 	b.w	800674c <_fflush_r>
 8005a3e:	2000      	movs	r0, #0
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	200000a0 	.word	0x200000a0

08005a48 <__srefill_r>:
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	4605      	mov	r5, r0
 8005a4e:	b118      	cbz	r0, 8005a58 <__srefill_r+0x10>
 8005a50:	6a03      	ldr	r3, [r0, #32]
 8005a52:	b90b      	cbnz	r3, 8005a58 <__srefill_r+0x10>
 8005a54:	f7ff ff46 	bl	80058e4 <__sinit>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6063      	str	r3, [r4, #4]
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a62:	069e      	lsls	r6, r3, #26
 8005a64:	d502      	bpl.n	8005a6c <__srefill_r+0x24>
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	e05c      	b.n	8005b26 <__srefill_r+0xde>
 8005a6c:	0758      	lsls	r0, r3, #29
 8005a6e:	d448      	bmi.n	8005b02 <__srefill_r+0xba>
 8005a70:	06d9      	lsls	r1, r3, #27
 8005a72:	d405      	bmi.n	8005a80 <__srefill_r+0x38>
 8005a74:	2309      	movs	r3, #9
 8005a76:	602b      	str	r3, [r5, #0]
 8005a78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a7c:	81a3      	strh	r3, [r4, #12]
 8005a7e:	e7f2      	b.n	8005a66 <__srefill_r+0x1e>
 8005a80:	071a      	lsls	r2, r3, #28
 8005a82:	d50b      	bpl.n	8005a9c <__srefill_r+0x54>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 fe60 	bl	800674c <_fflush_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d1ea      	bne.n	8005a66 <__srefill_r+0x1e>
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	60a0      	str	r0, [r4, #8]
 8005a94:	f023 0308 	bic.w	r3, r3, #8
 8005a98:	81a3      	strh	r3, [r4, #12]
 8005a9a:	61a0      	str	r0, [r4, #24]
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f043 0304 	orr.w	r3, r3, #4
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	6923      	ldr	r3, [r4, #16]
 8005aa6:	b91b      	cbnz	r3, 8005ab0 <__srefill_r+0x68>
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 fe9c 	bl	80067e8 <__smakebuf_r>
 8005ab0:	89a6      	ldrh	r6, [r4, #12]
 8005ab2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8005ab6:	07b3      	lsls	r3, r6, #30
 8005ab8:	d00f      	beq.n	8005ada <__srefill_r+0x92>
 8005aba:	2301      	movs	r3, #1
 8005abc:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <__srefill_r+0xe4>)
 8005abe:	491c      	ldr	r1, [pc, #112]	; (8005b30 <__srefill_r+0xe8>)
 8005ac0:	481c      	ldr	r0, [pc, #112]	; (8005b34 <__srefill_r+0xec>)
 8005ac2:	81a3      	strh	r3, [r4, #12]
 8005ac4:	f006 0609 	and.w	r6, r6, #9
 8005ac8:	f7ff ff24 	bl	8005914 <_fwalk_sglue>
 8005acc:	2e09      	cmp	r6, #9
 8005ace:	81a7      	strh	r7, [r4, #12]
 8005ad0:	d103      	bne.n	8005ada <__srefill_r+0x92>
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f000 fdb3 	bl	8006640 <__sflush_r>
 8005ada:	6922      	ldr	r2, [r4, #16]
 8005adc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ade:	6963      	ldr	r3, [r4, #20]
 8005ae0:	6a21      	ldr	r1, [r4, #32]
 8005ae2:	6022      	str	r2, [r4, #0]
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b0      	blx	r6
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	6060      	str	r0, [r4, #4]
 8005aec:	dc1c      	bgt.n	8005b28 <__srefill_r+0xe0>
 8005aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af2:	bf17      	itett	ne
 8005af4:	2200      	movne	r2, #0
 8005af6:	f043 0320 	orreq.w	r3, r3, #32
 8005afa:	6062      	strne	r2, [r4, #4]
 8005afc:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005b00:	e7bc      	b.n	8005a7c <__srefill_r+0x34>
 8005b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b04:	2900      	cmp	r1, #0
 8005b06:	d0cd      	beq.n	8005aa4 <__srefill_r+0x5c>
 8005b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b0c:	4299      	cmp	r1, r3
 8005b0e:	d002      	beq.n	8005b16 <__srefill_r+0xce>
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 f9c9 	bl	8005ea8 <_free_r>
 8005b16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0c0      	beq.n	8005aa4 <__srefill_r+0x5c>
 8005b22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b28:	2000      	movs	r0, #0
 8005b2a:	e7fc      	b.n	8005b26 <__srefill_r+0xde>
 8005b2c:	20000048 	.word	0x20000048
 8005b30:	08005a2d 	.word	0x08005a2d
 8005b34:	20000054 	.word	0x20000054

08005b38 <__sread>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b40:	f000 f952 	bl	8005de8 <_read_r>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	bfab      	itete	ge
 8005b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b4c:	181b      	addge	r3, r3, r0
 8005b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b52:	bfac      	ite	ge
 8005b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b56:	81a3      	strhlt	r3, [r4, #12]
 8005b58:	bd10      	pop	{r4, pc}

08005b5a <__swrite>:
 8005b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5e:	461f      	mov	r7, r3
 8005b60:	898b      	ldrh	r3, [r1, #12]
 8005b62:	05db      	lsls	r3, r3, #23
 8005b64:	4605      	mov	r5, r0
 8005b66:	460c      	mov	r4, r1
 8005b68:	4616      	mov	r6, r2
 8005b6a:	d505      	bpl.n	8005b78 <__swrite+0x1e>
 8005b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b70:	2302      	movs	r3, #2
 8005b72:	2200      	movs	r2, #0
 8005b74:	f000 f926 	bl	8005dc4 <_lseek_r>
 8005b78:	89a3      	ldrh	r3, [r4, #12]
 8005b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	4632      	mov	r2, r6
 8005b86:	463b      	mov	r3, r7
 8005b88:	4628      	mov	r0, r5
 8005b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b8e:	f000 b93d 	b.w	8005e0c <_write_r>

08005b92 <__sseek>:
 8005b92:	b510      	push	{r4, lr}
 8005b94:	460c      	mov	r4, r1
 8005b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9a:	f000 f913 	bl	8005dc4 <_lseek_r>
 8005b9e:	1c43      	adds	r3, r0, #1
 8005ba0:	89a3      	ldrh	r3, [r4, #12]
 8005ba2:	bf15      	itete	ne
 8005ba4:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bae:	81a3      	strheq	r3, [r4, #12]
 8005bb0:	bf18      	it	ne
 8005bb2:	81a3      	strhne	r3, [r4, #12]
 8005bb4:	bd10      	pop	{r4, pc}

08005bb6 <__sclose>:
 8005bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bba:	f000 b89d 	b.w	8005cf8 <_close_r>

08005bbe <__swbuf_r>:
 8005bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc0:	460e      	mov	r6, r1
 8005bc2:	4614      	mov	r4, r2
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	b118      	cbz	r0, 8005bd0 <__swbuf_r+0x12>
 8005bc8:	6a03      	ldr	r3, [r0, #32]
 8005bca:	b90b      	cbnz	r3, 8005bd0 <__swbuf_r+0x12>
 8005bcc:	f7ff fe8a 	bl	80058e4 <__sinit>
 8005bd0:	69a3      	ldr	r3, [r4, #24]
 8005bd2:	60a3      	str	r3, [r4, #8]
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	071a      	lsls	r2, r3, #28
 8005bd8:	d525      	bpl.n	8005c26 <__swbuf_r+0x68>
 8005bda:	6923      	ldr	r3, [r4, #16]
 8005bdc:	b31b      	cbz	r3, 8005c26 <__swbuf_r+0x68>
 8005bde:	6823      	ldr	r3, [r4, #0]
 8005be0:	6922      	ldr	r2, [r4, #16]
 8005be2:	1a98      	subs	r0, r3, r2
 8005be4:	6963      	ldr	r3, [r4, #20]
 8005be6:	b2f6      	uxtb	r6, r6
 8005be8:	4283      	cmp	r3, r0
 8005bea:	4637      	mov	r7, r6
 8005bec:	dc04      	bgt.n	8005bf8 <__swbuf_r+0x3a>
 8005bee:	4621      	mov	r1, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 fdab 	bl	800674c <_fflush_r>
 8005bf6:	b9e0      	cbnz	r0, 8005c32 <__swbuf_r+0x74>
 8005bf8:	68a3      	ldr	r3, [r4, #8]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	60a3      	str	r3, [r4, #8]
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	6022      	str	r2, [r4, #0]
 8005c04:	701e      	strb	r6, [r3, #0]
 8005c06:	6962      	ldr	r2, [r4, #20]
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d004      	beq.n	8005c18 <__swbuf_r+0x5a>
 8005c0e:	89a3      	ldrh	r3, [r4, #12]
 8005c10:	07db      	lsls	r3, r3, #31
 8005c12:	d506      	bpl.n	8005c22 <__swbuf_r+0x64>
 8005c14:	2e0a      	cmp	r6, #10
 8005c16:	d104      	bne.n	8005c22 <__swbuf_r+0x64>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	f000 fd96 	bl	800674c <_fflush_r>
 8005c20:	b938      	cbnz	r0, 8005c32 <__swbuf_r+0x74>
 8005c22:	4638      	mov	r0, r7
 8005c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c26:	4621      	mov	r1, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 f805 	bl	8005c38 <__swsetup_r>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d0d5      	beq.n	8005bde <__swbuf_r+0x20>
 8005c32:	f04f 37ff 	mov.w	r7, #4294967295
 8005c36:	e7f4      	b.n	8005c22 <__swbuf_r+0x64>

08005c38 <__swsetup_r>:
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ce4 <__swsetup_r+0xac>)
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	460c      	mov	r4, r1
 8005c42:	b118      	cbz	r0, 8005c4c <__swsetup_r+0x14>
 8005c44:	6a03      	ldr	r3, [r0, #32]
 8005c46:	b90b      	cbnz	r3, 8005c4c <__swsetup_r+0x14>
 8005c48:	f7ff fe4c 	bl	80058e4 <__sinit>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c52:	0718      	lsls	r0, r3, #28
 8005c54:	d422      	bmi.n	8005c9c <__swsetup_r+0x64>
 8005c56:	06d9      	lsls	r1, r3, #27
 8005c58:	d407      	bmi.n	8005c6a <__swsetup_r+0x32>
 8005c5a:	2309      	movs	r3, #9
 8005c5c:	602b      	str	r3, [r5, #0]
 8005c5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c62:	81a3      	strh	r3, [r4, #12]
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	e034      	b.n	8005cd4 <__swsetup_r+0x9c>
 8005c6a:	0758      	lsls	r0, r3, #29
 8005c6c:	d512      	bpl.n	8005c94 <__swsetup_r+0x5c>
 8005c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c70:	b141      	cbz	r1, 8005c84 <__swsetup_r+0x4c>
 8005c72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c76:	4299      	cmp	r1, r3
 8005c78:	d002      	beq.n	8005c80 <__swsetup_r+0x48>
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	f000 f914 	bl	8005ea8 <_free_r>
 8005c80:	2300      	movs	r3, #0
 8005c82:	6363      	str	r3, [r4, #52]	; 0x34
 8005c84:	89a3      	ldrh	r3, [r4, #12]
 8005c86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c8a:	81a3      	strh	r3, [r4, #12]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	6923      	ldr	r3, [r4, #16]
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f043 0308 	orr.w	r3, r3, #8
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	b94b      	cbnz	r3, 8005cb4 <__swsetup_r+0x7c>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ca6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005caa:	d003      	beq.n	8005cb4 <__swsetup_r+0x7c>
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 fd9a 	bl	80067e8 <__smakebuf_r>
 8005cb4:	89a0      	ldrh	r0, [r4, #12]
 8005cb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cba:	f010 0301 	ands.w	r3, r0, #1
 8005cbe:	d00a      	beq.n	8005cd6 <__swsetup_r+0x9e>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60a3      	str	r3, [r4, #8]
 8005cc4:	6963      	ldr	r3, [r4, #20]
 8005cc6:	425b      	negs	r3, r3
 8005cc8:	61a3      	str	r3, [r4, #24]
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	b943      	cbnz	r3, 8005ce0 <__swsetup_r+0xa8>
 8005cce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cd2:	d1c4      	bne.n	8005c5e <__swsetup_r+0x26>
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
 8005cd6:	0781      	lsls	r1, r0, #30
 8005cd8:	bf58      	it	pl
 8005cda:	6963      	ldrpl	r3, [r4, #20]
 8005cdc:	60a3      	str	r3, [r4, #8]
 8005cde:	e7f4      	b.n	8005cca <__swsetup_r+0x92>
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	e7f7      	b.n	8005cd4 <__swsetup_r+0x9c>
 8005ce4:	200000a0 	.word	0x200000a0

08005ce8 <memset>:
 8005ce8:	4402      	add	r2, r0
 8005cea:	4603      	mov	r3, r0
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d100      	bne.n	8005cf2 <memset+0xa>
 8005cf0:	4770      	bx	lr
 8005cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cf6:	e7f9      	b.n	8005cec <memset+0x4>

08005cf8 <_close_r>:
 8005cf8:	b538      	push	{r3, r4, r5, lr}
 8005cfa:	4d06      	ldr	r5, [pc, #24]	; (8005d14 <_close_r+0x1c>)
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	4604      	mov	r4, r0
 8005d00:	4608      	mov	r0, r1
 8005d02:	602b      	str	r3, [r5, #0]
 8005d04:	f7fb fcb4 	bl	8001670 <_close>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_close_r+0x1a>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_close_r+0x1a>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	20004360 	.word	0x20004360

08005d18 <_reclaim_reent>:
 8005d18:	4b29      	ldr	r3, [pc, #164]	; (8005dc0 <_reclaim_reent+0xa8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4283      	cmp	r3, r0
 8005d1e:	b570      	push	{r4, r5, r6, lr}
 8005d20:	4604      	mov	r4, r0
 8005d22:	d04b      	beq.n	8005dbc <_reclaim_reent+0xa4>
 8005d24:	69c3      	ldr	r3, [r0, #28]
 8005d26:	b143      	cbz	r3, 8005d3a <_reclaim_reent+0x22>
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d144      	bne.n	8005db8 <_reclaim_reent+0xa0>
 8005d2e:	69e3      	ldr	r3, [r4, #28]
 8005d30:	6819      	ldr	r1, [r3, #0]
 8005d32:	b111      	cbz	r1, 8005d3a <_reclaim_reent+0x22>
 8005d34:	4620      	mov	r0, r4
 8005d36:	f000 f8b7 	bl	8005ea8 <_free_r>
 8005d3a:	6961      	ldr	r1, [r4, #20]
 8005d3c:	b111      	cbz	r1, 8005d44 <_reclaim_reent+0x2c>
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 f8b2 	bl	8005ea8 <_free_r>
 8005d44:	69e1      	ldr	r1, [r4, #28]
 8005d46:	b111      	cbz	r1, 8005d4e <_reclaim_reent+0x36>
 8005d48:	4620      	mov	r0, r4
 8005d4a:	f000 f8ad 	bl	8005ea8 <_free_r>
 8005d4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005d50:	b111      	cbz	r1, 8005d58 <_reclaim_reent+0x40>
 8005d52:	4620      	mov	r0, r4
 8005d54:	f000 f8a8 	bl	8005ea8 <_free_r>
 8005d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d5a:	b111      	cbz	r1, 8005d62 <_reclaim_reent+0x4a>
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f000 f8a3 	bl	8005ea8 <_free_r>
 8005d62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005d64:	b111      	cbz	r1, 8005d6c <_reclaim_reent+0x54>
 8005d66:	4620      	mov	r0, r4
 8005d68:	f000 f89e 	bl	8005ea8 <_free_r>
 8005d6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005d6e:	b111      	cbz	r1, 8005d76 <_reclaim_reent+0x5e>
 8005d70:	4620      	mov	r0, r4
 8005d72:	f000 f899 	bl	8005ea8 <_free_r>
 8005d76:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005d78:	b111      	cbz	r1, 8005d80 <_reclaim_reent+0x68>
 8005d7a:	4620      	mov	r0, r4
 8005d7c:	f000 f894 	bl	8005ea8 <_free_r>
 8005d80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005d82:	b111      	cbz	r1, 8005d8a <_reclaim_reent+0x72>
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 f88f 	bl	8005ea8 <_free_r>
 8005d8a:	6a23      	ldr	r3, [r4, #32]
 8005d8c:	b1b3      	cbz	r3, 8005dbc <_reclaim_reent+0xa4>
 8005d8e:	4620      	mov	r0, r4
 8005d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005d94:	4718      	bx	r3
 8005d96:	5949      	ldr	r1, [r1, r5]
 8005d98:	b941      	cbnz	r1, 8005dac <_reclaim_reent+0x94>
 8005d9a:	3504      	adds	r5, #4
 8005d9c:	69e3      	ldr	r3, [r4, #28]
 8005d9e:	2d80      	cmp	r5, #128	; 0x80
 8005da0:	68d9      	ldr	r1, [r3, #12]
 8005da2:	d1f8      	bne.n	8005d96 <_reclaim_reent+0x7e>
 8005da4:	4620      	mov	r0, r4
 8005da6:	f000 f87f 	bl	8005ea8 <_free_r>
 8005daa:	e7c0      	b.n	8005d2e <_reclaim_reent+0x16>
 8005dac:	680e      	ldr	r6, [r1, #0]
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 f87a 	bl	8005ea8 <_free_r>
 8005db4:	4631      	mov	r1, r6
 8005db6:	e7ef      	b.n	8005d98 <_reclaim_reent+0x80>
 8005db8:	2500      	movs	r5, #0
 8005dba:	e7ef      	b.n	8005d9c <_reclaim_reent+0x84>
 8005dbc:	bd70      	pop	{r4, r5, r6, pc}
 8005dbe:	bf00      	nop
 8005dc0:	200000a0 	.word	0x200000a0

08005dc4 <_lseek_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d07      	ldr	r5, [pc, #28]	; (8005de4 <_lseek_r+0x20>)
 8005dc8:	4604      	mov	r4, r0
 8005dca:	4608      	mov	r0, r1
 8005dcc:	4611      	mov	r1, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	602a      	str	r2, [r5, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f7fb fc63 	bl	800169e <_lseek>
 8005dd8:	1c43      	adds	r3, r0, #1
 8005dda:	d102      	bne.n	8005de2 <_lseek_r+0x1e>
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	b103      	cbz	r3, 8005de2 <_lseek_r+0x1e>
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	bd38      	pop	{r3, r4, r5, pc}
 8005de4:	20004360 	.word	0x20004360

08005de8 <_read_r>:
 8005de8:	b538      	push	{r3, r4, r5, lr}
 8005dea:	4d07      	ldr	r5, [pc, #28]	; (8005e08 <_read_r+0x20>)
 8005dec:	4604      	mov	r4, r0
 8005dee:	4608      	mov	r0, r1
 8005df0:	4611      	mov	r1, r2
 8005df2:	2200      	movs	r2, #0
 8005df4:	602a      	str	r2, [r5, #0]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f7fb fc62 	bl	80016c0 <_read>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_read_r+0x1e>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_read_r+0x1e>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20004360 	.word	0x20004360

08005e0c <_write_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	; (8005e2c <_write_r+0x20>)
 8005e10:	4604      	mov	r4, r0
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	602a      	str	r2, [r5, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f7fb fbfc 	bl	8001618 <_write>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_write_r+0x1e>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_write_r+0x1e>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	20004360 	.word	0x20004360

08005e30 <__errno>:
 8005e30:	4b01      	ldr	r3, [pc, #4]	; (8005e38 <__errno+0x8>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	200000a0 	.word	0x200000a0

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	4d0d      	ldr	r5, [pc, #52]	; (8005e74 <__libc_init_array+0x38>)
 8005e40:	4c0d      	ldr	r4, [pc, #52]	; (8005e78 <__libc_init_array+0x3c>)
 8005e42:	1b64      	subs	r4, r4, r5
 8005e44:	10a4      	asrs	r4, r4, #2
 8005e46:	2600      	movs	r6, #0
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	4d0b      	ldr	r5, [pc, #44]	; (8005e7c <__libc_init_array+0x40>)
 8005e4e:	4c0c      	ldr	r4, [pc, #48]	; (8005e80 <__libc_init_array+0x44>)
 8005e50:	f000 fd38 	bl	80068c4 <_init>
 8005e54:	1b64      	subs	r4, r4, r5
 8005e56:	10a4      	asrs	r4, r4, #2
 8005e58:	2600      	movs	r6, #0
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	08006a84 	.word	0x08006a84
 8005e78:	08006a84 	.word	0x08006a84
 8005e7c:	08006a84 	.word	0x08006a84
 8005e80:	08006a88 	.word	0x08006a88

08005e84 <__retarget_lock_init_recursive>:
 8005e84:	4770      	bx	lr

08005e86 <__retarget_lock_acquire_recursive>:
 8005e86:	4770      	bx	lr

08005e88 <__retarget_lock_release_recursive>:
 8005e88:	4770      	bx	lr

08005e8a <memcpy>:
 8005e8a:	440a      	add	r2, r1
 8005e8c:	4291      	cmp	r1, r2
 8005e8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e92:	d100      	bne.n	8005e96 <memcpy+0xc>
 8005e94:	4770      	bx	lr
 8005e96:	b510      	push	{r4, lr}
 8005e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea0:	4291      	cmp	r1, r2
 8005ea2:	d1f9      	bne.n	8005e98 <memcpy+0xe>
 8005ea4:	bd10      	pop	{r4, pc}
	...

08005ea8 <_free_r>:
 8005ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005eaa:	2900      	cmp	r1, #0
 8005eac:	d044      	beq.n	8005f38 <_free_r+0x90>
 8005eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb2:	9001      	str	r0, [sp, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8005eba:	bfb8      	it	lt
 8005ebc:	18e4      	addlt	r4, r4, r3
 8005ebe:	f000 f8df 	bl	8006080 <__malloc_lock>
 8005ec2:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <_free_r+0x94>)
 8005ec4:	9801      	ldr	r0, [sp, #4]
 8005ec6:	6813      	ldr	r3, [r2, #0]
 8005ec8:	b933      	cbnz	r3, 8005ed8 <_free_r+0x30>
 8005eca:	6063      	str	r3, [r4, #4]
 8005ecc:	6014      	str	r4, [r2, #0]
 8005ece:	b003      	add	sp, #12
 8005ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ed4:	f000 b8da 	b.w	800608c <__malloc_unlock>
 8005ed8:	42a3      	cmp	r3, r4
 8005eda:	d908      	bls.n	8005eee <_free_r+0x46>
 8005edc:	6825      	ldr	r5, [r4, #0]
 8005ede:	1961      	adds	r1, r4, r5
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf01      	itttt	eq
 8005ee4:	6819      	ldreq	r1, [r3, #0]
 8005ee6:	685b      	ldreq	r3, [r3, #4]
 8005ee8:	1949      	addeq	r1, r1, r5
 8005eea:	6021      	streq	r1, [r4, #0]
 8005eec:	e7ed      	b.n	8005eca <_free_r+0x22>
 8005eee:	461a      	mov	r2, r3
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	b10b      	cbz	r3, 8005ef8 <_free_r+0x50>
 8005ef4:	42a3      	cmp	r3, r4
 8005ef6:	d9fa      	bls.n	8005eee <_free_r+0x46>
 8005ef8:	6811      	ldr	r1, [r2, #0]
 8005efa:	1855      	adds	r5, r2, r1
 8005efc:	42a5      	cmp	r5, r4
 8005efe:	d10b      	bne.n	8005f18 <_free_r+0x70>
 8005f00:	6824      	ldr	r4, [r4, #0]
 8005f02:	4421      	add	r1, r4
 8005f04:	1854      	adds	r4, r2, r1
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	6011      	str	r1, [r2, #0]
 8005f0a:	d1e0      	bne.n	8005ece <_free_r+0x26>
 8005f0c:	681c      	ldr	r4, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	6053      	str	r3, [r2, #4]
 8005f12:	440c      	add	r4, r1
 8005f14:	6014      	str	r4, [r2, #0]
 8005f16:	e7da      	b.n	8005ece <_free_r+0x26>
 8005f18:	d902      	bls.n	8005f20 <_free_r+0x78>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	6003      	str	r3, [r0, #0]
 8005f1e:	e7d6      	b.n	8005ece <_free_r+0x26>
 8005f20:	6825      	ldr	r5, [r4, #0]
 8005f22:	1961      	adds	r1, r4, r5
 8005f24:	428b      	cmp	r3, r1
 8005f26:	bf04      	itt	eq
 8005f28:	6819      	ldreq	r1, [r3, #0]
 8005f2a:	685b      	ldreq	r3, [r3, #4]
 8005f2c:	6063      	str	r3, [r4, #4]
 8005f2e:	bf04      	itt	eq
 8005f30:	1949      	addeq	r1, r1, r5
 8005f32:	6021      	streq	r1, [r4, #0]
 8005f34:	6054      	str	r4, [r2, #4]
 8005f36:	e7ca      	b.n	8005ece <_free_r+0x26>
 8005f38:	b003      	add	sp, #12
 8005f3a:	bd30      	pop	{r4, r5, pc}
 8005f3c:	20004368 	.word	0x20004368

08005f40 <sbrk_aligned>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	4e0e      	ldr	r6, [pc, #56]	; (8005f7c <sbrk_aligned+0x3c>)
 8005f44:	460c      	mov	r4, r1
 8005f46:	6831      	ldr	r1, [r6, #0]
 8005f48:	4605      	mov	r5, r0
 8005f4a:	b911      	cbnz	r1, 8005f52 <sbrk_aligned+0x12>
 8005f4c:	f000 fcaa 	bl	80068a4 <_sbrk_r>
 8005f50:	6030      	str	r0, [r6, #0]
 8005f52:	4621      	mov	r1, r4
 8005f54:	4628      	mov	r0, r5
 8005f56:	f000 fca5 	bl	80068a4 <_sbrk_r>
 8005f5a:	1c43      	adds	r3, r0, #1
 8005f5c:	d00a      	beq.n	8005f74 <sbrk_aligned+0x34>
 8005f5e:	1cc4      	adds	r4, r0, #3
 8005f60:	f024 0403 	bic.w	r4, r4, #3
 8005f64:	42a0      	cmp	r0, r4
 8005f66:	d007      	beq.n	8005f78 <sbrk_aligned+0x38>
 8005f68:	1a21      	subs	r1, r4, r0
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	f000 fc9a 	bl	80068a4 <_sbrk_r>
 8005f70:	3001      	adds	r0, #1
 8005f72:	d101      	bne.n	8005f78 <sbrk_aligned+0x38>
 8005f74:	f04f 34ff 	mov.w	r4, #4294967295
 8005f78:	4620      	mov	r0, r4
 8005f7a:	bd70      	pop	{r4, r5, r6, pc}
 8005f7c:	2000436c 	.word	0x2000436c

08005f80 <_malloc_r>:
 8005f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f84:	1ccd      	adds	r5, r1, #3
 8005f86:	f025 0503 	bic.w	r5, r5, #3
 8005f8a:	3508      	adds	r5, #8
 8005f8c:	2d0c      	cmp	r5, #12
 8005f8e:	bf38      	it	cc
 8005f90:	250c      	movcc	r5, #12
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	4607      	mov	r7, r0
 8005f96:	db01      	blt.n	8005f9c <_malloc_r+0x1c>
 8005f98:	42a9      	cmp	r1, r5
 8005f9a:	d905      	bls.n	8005fa8 <_malloc_r+0x28>
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800607c <_malloc_r+0xfc>
 8005fac:	f000 f868 	bl	8006080 <__malloc_lock>
 8005fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb4:	461c      	mov	r4, r3
 8005fb6:	bb5c      	cbnz	r4, 8006010 <_malloc_r+0x90>
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4638      	mov	r0, r7
 8005fbc:	f7ff ffc0 	bl	8005f40 <sbrk_aligned>
 8005fc0:	1c43      	adds	r3, r0, #1
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	d155      	bne.n	8006072 <_malloc_r+0xf2>
 8005fc6:	f8d8 4000 	ldr.w	r4, [r8]
 8005fca:	4626      	mov	r6, r4
 8005fcc:	2e00      	cmp	r6, #0
 8005fce:	d145      	bne.n	800605c <_malloc_r+0xdc>
 8005fd0:	2c00      	cmp	r4, #0
 8005fd2:	d048      	beq.n	8006066 <_malloc_r+0xe6>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	4631      	mov	r1, r6
 8005fd8:	4638      	mov	r0, r7
 8005fda:	eb04 0903 	add.w	r9, r4, r3
 8005fde:	f000 fc61 	bl	80068a4 <_sbrk_r>
 8005fe2:	4581      	cmp	r9, r0
 8005fe4:	d13f      	bne.n	8006066 <_malloc_r+0xe6>
 8005fe6:	6821      	ldr	r1, [r4, #0]
 8005fe8:	1a6d      	subs	r5, r5, r1
 8005fea:	4629      	mov	r1, r5
 8005fec:	4638      	mov	r0, r7
 8005fee:	f7ff ffa7 	bl	8005f40 <sbrk_aligned>
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	d037      	beq.n	8006066 <_malloc_r+0xe6>
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	442b      	add	r3, r5
 8005ffa:	6023      	str	r3, [r4, #0]
 8005ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d038      	beq.n	8006076 <_malloc_r+0xf6>
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	42a2      	cmp	r2, r4
 8006008:	d12b      	bne.n	8006062 <_malloc_r+0xe2>
 800600a:	2200      	movs	r2, #0
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e00f      	b.n	8006030 <_malloc_r+0xb0>
 8006010:	6822      	ldr	r2, [r4, #0]
 8006012:	1b52      	subs	r2, r2, r5
 8006014:	d41f      	bmi.n	8006056 <_malloc_r+0xd6>
 8006016:	2a0b      	cmp	r2, #11
 8006018:	d917      	bls.n	800604a <_malloc_r+0xca>
 800601a:	1961      	adds	r1, r4, r5
 800601c:	42a3      	cmp	r3, r4
 800601e:	6025      	str	r5, [r4, #0]
 8006020:	bf18      	it	ne
 8006022:	6059      	strne	r1, [r3, #4]
 8006024:	6863      	ldr	r3, [r4, #4]
 8006026:	bf08      	it	eq
 8006028:	f8c8 1000 	streq.w	r1, [r8]
 800602c:	5162      	str	r2, [r4, r5]
 800602e:	604b      	str	r3, [r1, #4]
 8006030:	4638      	mov	r0, r7
 8006032:	f104 060b 	add.w	r6, r4, #11
 8006036:	f000 f829 	bl	800608c <__malloc_unlock>
 800603a:	f026 0607 	bic.w	r6, r6, #7
 800603e:	1d23      	adds	r3, r4, #4
 8006040:	1af2      	subs	r2, r6, r3
 8006042:	d0ae      	beq.n	8005fa2 <_malloc_r+0x22>
 8006044:	1b9b      	subs	r3, r3, r6
 8006046:	50a3      	str	r3, [r4, r2]
 8006048:	e7ab      	b.n	8005fa2 <_malloc_r+0x22>
 800604a:	42a3      	cmp	r3, r4
 800604c:	6862      	ldr	r2, [r4, #4]
 800604e:	d1dd      	bne.n	800600c <_malloc_r+0x8c>
 8006050:	f8c8 2000 	str.w	r2, [r8]
 8006054:	e7ec      	b.n	8006030 <_malloc_r+0xb0>
 8006056:	4623      	mov	r3, r4
 8006058:	6864      	ldr	r4, [r4, #4]
 800605a:	e7ac      	b.n	8005fb6 <_malloc_r+0x36>
 800605c:	4634      	mov	r4, r6
 800605e:	6876      	ldr	r6, [r6, #4]
 8006060:	e7b4      	b.n	8005fcc <_malloc_r+0x4c>
 8006062:	4613      	mov	r3, r2
 8006064:	e7cc      	b.n	8006000 <_malloc_r+0x80>
 8006066:	230c      	movs	r3, #12
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	4638      	mov	r0, r7
 800606c:	f000 f80e 	bl	800608c <__malloc_unlock>
 8006070:	e797      	b.n	8005fa2 <_malloc_r+0x22>
 8006072:	6025      	str	r5, [r4, #0]
 8006074:	e7dc      	b.n	8006030 <_malloc_r+0xb0>
 8006076:	605b      	str	r3, [r3, #4]
 8006078:	deff      	udf	#255	; 0xff
 800607a:	bf00      	nop
 800607c:	20004368 	.word	0x20004368

08006080 <__malloc_lock>:
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <__malloc_lock+0x8>)
 8006082:	f7ff bf00 	b.w	8005e86 <__retarget_lock_acquire_recursive>
 8006086:	bf00      	nop
 8006088:	20004364 	.word	0x20004364

0800608c <__malloc_unlock>:
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <__malloc_unlock+0x8>)
 800608e:	f7ff befb 	b.w	8005e88 <__retarget_lock_release_recursive>
 8006092:	bf00      	nop
 8006094:	20004364 	.word	0x20004364

08006098 <__sfputc_r>:
 8006098:	6893      	ldr	r3, [r2, #8]
 800609a:	3b01      	subs	r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	b410      	push	{r4}
 80060a0:	6093      	str	r3, [r2, #8]
 80060a2:	da08      	bge.n	80060b6 <__sfputc_r+0x1e>
 80060a4:	6994      	ldr	r4, [r2, #24]
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	db01      	blt.n	80060ae <__sfputc_r+0x16>
 80060aa:	290a      	cmp	r1, #10
 80060ac:	d103      	bne.n	80060b6 <__sfputc_r+0x1e>
 80060ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b2:	f7ff bd84 	b.w	8005bbe <__swbuf_r>
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	1c58      	adds	r0, r3, #1
 80060ba:	6010      	str	r0, [r2, #0]
 80060bc:	7019      	strb	r1, [r3, #0]
 80060be:	4608      	mov	r0, r1
 80060c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <__sfputs_r>:
 80060c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c8:	4606      	mov	r6, r0
 80060ca:	460f      	mov	r7, r1
 80060cc:	4614      	mov	r4, r2
 80060ce:	18d5      	adds	r5, r2, r3
 80060d0:	42ac      	cmp	r4, r5
 80060d2:	d101      	bne.n	80060d8 <__sfputs_r+0x12>
 80060d4:	2000      	movs	r0, #0
 80060d6:	e007      	b.n	80060e8 <__sfputs_r+0x22>
 80060d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060dc:	463a      	mov	r2, r7
 80060de:	4630      	mov	r0, r6
 80060e0:	f7ff ffda 	bl	8006098 <__sfputc_r>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d1f3      	bne.n	80060d0 <__sfputs_r+0xa>
 80060e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060ec <_vfiprintf_r>:
 80060ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f0:	460d      	mov	r5, r1
 80060f2:	b09d      	sub	sp, #116	; 0x74
 80060f4:	4614      	mov	r4, r2
 80060f6:	4698      	mov	r8, r3
 80060f8:	4606      	mov	r6, r0
 80060fa:	b118      	cbz	r0, 8006104 <_vfiprintf_r+0x18>
 80060fc:	6a03      	ldr	r3, [r0, #32]
 80060fe:	b90b      	cbnz	r3, 8006104 <_vfiprintf_r+0x18>
 8006100:	f7ff fbf0 	bl	80058e4 <__sinit>
 8006104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006106:	07d9      	lsls	r1, r3, #31
 8006108:	d405      	bmi.n	8006116 <_vfiprintf_r+0x2a>
 800610a:	89ab      	ldrh	r3, [r5, #12]
 800610c:	059a      	lsls	r2, r3, #22
 800610e:	d402      	bmi.n	8006116 <_vfiprintf_r+0x2a>
 8006110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006112:	f7ff feb8 	bl	8005e86 <__retarget_lock_acquire_recursive>
 8006116:	89ab      	ldrh	r3, [r5, #12]
 8006118:	071b      	lsls	r3, r3, #28
 800611a:	d501      	bpl.n	8006120 <_vfiprintf_r+0x34>
 800611c:	692b      	ldr	r3, [r5, #16]
 800611e:	b99b      	cbnz	r3, 8006148 <_vfiprintf_r+0x5c>
 8006120:	4629      	mov	r1, r5
 8006122:	4630      	mov	r0, r6
 8006124:	f7ff fd88 	bl	8005c38 <__swsetup_r>
 8006128:	b170      	cbz	r0, 8006148 <_vfiprintf_r+0x5c>
 800612a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800612c:	07dc      	lsls	r4, r3, #31
 800612e:	d504      	bpl.n	800613a <_vfiprintf_r+0x4e>
 8006130:	f04f 30ff 	mov.w	r0, #4294967295
 8006134:	b01d      	add	sp, #116	; 0x74
 8006136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613a:	89ab      	ldrh	r3, [r5, #12]
 800613c:	0598      	lsls	r0, r3, #22
 800613e:	d4f7      	bmi.n	8006130 <_vfiprintf_r+0x44>
 8006140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006142:	f7ff fea1 	bl	8005e88 <__retarget_lock_release_recursive>
 8006146:	e7f3      	b.n	8006130 <_vfiprintf_r+0x44>
 8006148:	2300      	movs	r3, #0
 800614a:	9309      	str	r3, [sp, #36]	; 0x24
 800614c:	2320      	movs	r3, #32
 800614e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006152:	f8cd 800c 	str.w	r8, [sp, #12]
 8006156:	2330      	movs	r3, #48	; 0x30
 8006158:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800630c <_vfiprintf_r+0x220>
 800615c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006160:	f04f 0901 	mov.w	r9, #1
 8006164:	4623      	mov	r3, r4
 8006166:	469a      	mov	sl, r3
 8006168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800616c:	b10a      	cbz	r2, 8006172 <_vfiprintf_r+0x86>
 800616e:	2a25      	cmp	r2, #37	; 0x25
 8006170:	d1f9      	bne.n	8006166 <_vfiprintf_r+0x7a>
 8006172:	ebba 0b04 	subs.w	fp, sl, r4
 8006176:	d00b      	beq.n	8006190 <_vfiprintf_r+0xa4>
 8006178:	465b      	mov	r3, fp
 800617a:	4622      	mov	r2, r4
 800617c:	4629      	mov	r1, r5
 800617e:	4630      	mov	r0, r6
 8006180:	f7ff ffa1 	bl	80060c6 <__sfputs_r>
 8006184:	3001      	adds	r0, #1
 8006186:	f000 80a9 	beq.w	80062dc <_vfiprintf_r+0x1f0>
 800618a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800618c:	445a      	add	r2, fp
 800618e:	9209      	str	r2, [sp, #36]	; 0x24
 8006190:	f89a 3000 	ldrb.w	r3, [sl]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 80a1 	beq.w	80062dc <_vfiprintf_r+0x1f0>
 800619a:	2300      	movs	r3, #0
 800619c:	f04f 32ff 	mov.w	r2, #4294967295
 80061a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061a4:	f10a 0a01 	add.w	sl, sl, #1
 80061a8:	9304      	str	r3, [sp, #16]
 80061aa:	9307      	str	r3, [sp, #28]
 80061ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061b0:	931a      	str	r3, [sp, #104]	; 0x68
 80061b2:	4654      	mov	r4, sl
 80061b4:	2205      	movs	r2, #5
 80061b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ba:	4854      	ldr	r0, [pc, #336]	; (800630c <_vfiprintf_r+0x220>)
 80061bc:	f7fa f810 	bl	80001e0 <memchr>
 80061c0:	9a04      	ldr	r2, [sp, #16]
 80061c2:	b9d8      	cbnz	r0, 80061fc <_vfiprintf_r+0x110>
 80061c4:	06d1      	lsls	r1, r2, #27
 80061c6:	bf44      	itt	mi
 80061c8:	2320      	movmi	r3, #32
 80061ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061ce:	0713      	lsls	r3, r2, #28
 80061d0:	bf44      	itt	mi
 80061d2:	232b      	movmi	r3, #43	; 0x2b
 80061d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d8:	f89a 3000 	ldrb.w	r3, [sl]
 80061dc:	2b2a      	cmp	r3, #42	; 0x2a
 80061de:	d015      	beq.n	800620c <_vfiprintf_r+0x120>
 80061e0:	9a07      	ldr	r2, [sp, #28]
 80061e2:	4654      	mov	r4, sl
 80061e4:	2000      	movs	r0, #0
 80061e6:	f04f 0c0a 	mov.w	ip, #10
 80061ea:	4621      	mov	r1, r4
 80061ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061f0:	3b30      	subs	r3, #48	; 0x30
 80061f2:	2b09      	cmp	r3, #9
 80061f4:	d94d      	bls.n	8006292 <_vfiprintf_r+0x1a6>
 80061f6:	b1b0      	cbz	r0, 8006226 <_vfiprintf_r+0x13a>
 80061f8:	9207      	str	r2, [sp, #28]
 80061fa:	e014      	b.n	8006226 <_vfiprintf_r+0x13a>
 80061fc:	eba0 0308 	sub.w	r3, r0, r8
 8006200:	fa09 f303 	lsl.w	r3, r9, r3
 8006204:	4313      	orrs	r3, r2
 8006206:	9304      	str	r3, [sp, #16]
 8006208:	46a2      	mov	sl, r4
 800620a:	e7d2      	b.n	80061b2 <_vfiprintf_r+0xc6>
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	1d19      	adds	r1, r3, #4
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	9103      	str	r1, [sp, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	bfbb      	ittet	lt
 8006218:	425b      	neglt	r3, r3
 800621a:	f042 0202 	orrlt.w	r2, r2, #2
 800621e:	9307      	strge	r3, [sp, #28]
 8006220:	9307      	strlt	r3, [sp, #28]
 8006222:	bfb8      	it	lt
 8006224:	9204      	strlt	r2, [sp, #16]
 8006226:	7823      	ldrb	r3, [r4, #0]
 8006228:	2b2e      	cmp	r3, #46	; 0x2e
 800622a:	d10c      	bne.n	8006246 <_vfiprintf_r+0x15a>
 800622c:	7863      	ldrb	r3, [r4, #1]
 800622e:	2b2a      	cmp	r3, #42	; 0x2a
 8006230:	d134      	bne.n	800629c <_vfiprintf_r+0x1b0>
 8006232:	9b03      	ldr	r3, [sp, #12]
 8006234:	1d1a      	adds	r2, r3, #4
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	9203      	str	r2, [sp, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	bfb8      	it	lt
 800623e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006242:	3402      	adds	r4, #2
 8006244:	9305      	str	r3, [sp, #20]
 8006246:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800631c <_vfiprintf_r+0x230>
 800624a:	7821      	ldrb	r1, [r4, #0]
 800624c:	2203      	movs	r2, #3
 800624e:	4650      	mov	r0, sl
 8006250:	f7f9 ffc6 	bl	80001e0 <memchr>
 8006254:	b138      	cbz	r0, 8006266 <_vfiprintf_r+0x17a>
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	eba0 000a 	sub.w	r0, r0, sl
 800625c:	2240      	movs	r2, #64	; 0x40
 800625e:	4082      	lsls	r2, r0
 8006260:	4313      	orrs	r3, r2
 8006262:	3401      	adds	r4, #1
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626a:	4829      	ldr	r0, [pc, #164]	; (8006310 <_vfiprintf_r+0x224>)
 800626c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006270:	2206      	movs	r2, #6
 8006272:	f7f9 ffb5 	bl	80001e0 <memchr>
 8006276:	2800      	cmp	r0, #0
 8006278:	d03f      	beq.n	80062fa <_vfiprintf_r+0x20e>
 800627a:	4b26      	ldr	r3, [pc, #152]	; (8006314 <_vfiprintf_r+0x228>)
 800627c:	bb1b      	cbnz	r3, 80062c6 <_vfiprintf_r+0x1da>
 800627e:	9b03      	ldr	r3, [sp, #12]
 8006280:	3307      	adds	r3, #7
 8006282:	f023 0307 	bic.w	r3, r3, #7
 8006286:	3308      	adds	r3, #8
 8006288:	9303      	str	r3, [sp, #12]
 800628a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628c:	443b      	add	r3, r7
 800628e:	9309      	str	r3, [sp, #36]	; 0x24
 8006290:	e768      	b.n	8006164 <_vfiprintf_r+0x78>
 8006292:	fb0c 3202 	mla	r2, ip, r2, r3
 8006296:	460c      	mov	r4, r1
 8006298:	2001      	movs	r0, #1
 800629a:	e7a6      	b.n	80061ea <_vfiprintf_r+0xfe>
 800629c:	2300      	movs	r3, #0
 800629e:	3401      	adds	r4, #1
 80062a0:	9305      	str	r3, [sp, #20]
 80062a2:	4619      	mov	r1, r3
 80062a4:	f04f 0c0a 	mov.w	ip, #10
 80062a8:	4620      	mov	r0, r4
 80062aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ae:	3a30      	subs	r2, #48	; 0x30
 80062b0:	2a09      	cmp	r2, #9
 80062b2:	d903      	bls.n	80062bc <_vfiprintf_r+0x1d0>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0c6      	beq.n	8006246 <_vfiprintf_r+0x15a>
 80062b8:	9105      	str	r1, [sp, #20]
 80062ba:	e7c4      	b.n	8006246 <_vfiprintf_r+0x15a>
 80062bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80062c0:	4604      	mov	r4, r0
 80062c2:	2301      	movs	r3, #1
 80062c4:	e7f0      	b.n	80062a8 <_vfiprintf_r+0x1bc>
 80062c6:	ab03      	add	r3, sp, #12
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	462a      	mov	r2, r5
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <_vfiprintf_r+0x22c>)
 80062ce:	a904      	add	r1, sp, #16
 80062d0:	4630      	mov	r0, r6
 80062d2:	f3af 8000 	nop.w
 80062d6:	4607      	mov	r7, r0
 80062d8:	1c78      	adds	r0, r7, #1
 80062da:	d1d6      	bne.n	800628a <_vfiprintf_r+0x19e>
 80062dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062de:	07d9      	lsls	r1, r3, #31
 80062e0:	d405      	bmi.n	80062ee <_vfiprintf_r+0x202>
 80062e2:	89ab      	ldrh	r3, [r5, #12]
 80062e4:	059a      	lsls	r2, r3, #22
 80062e6:	d402      	bmi.n	80062ee <_vfiprintf_r+0x202>
 80062e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ea:	f7ff fdcd 	bl	8005e88 <__retarget_lock_release_recursive>
 80062ee:	89ab      	ldrh	r3, [r5, #12]
 80062f0:	065b      	lsls	r3, r3, #25
 80062f2:	f53f af1d 	bmi.w	8006130 <_vfiprintf_r+0x44>
 80062f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062f8:	e71c      	b.n	8006134 <_vfiprintf_r+0x48>
 80062fa:	ab03      	add	r3, sp, #12
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	462a      	mov	r2, r5
 8006300:	4b05      	ldr	r3, [pc, #20]	; (8006318 <_vfiprintf_r+0x22c>)
 8006302:	a904      	add	r1, sp, #16
 8006304:	4630      	mov	r0, r6
 8006306:	f000 f879 	bl	80063fc <_printf_i>
 800630a:	e7e4      	b.n	80062d6 <_vfiprintf_r+0x1ea>
 800630c:	08006a48 	.word	0x08006a48
 8006310:	08006a52 	.word	0x08006a52
 8006314:	00000000 	.word	0x00000000
 8006318:	080060c7 	.word	0x080060c7
 800631c:	08006a4e 	.word	0x08006a4e

08006320 <_printf_common>:
 8006320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006324:	4616      	mov	r6, r2
 8006326:	4699      	mov	r9, r3
 8006328:	688a      	ldr	r2, [r1, #8]
 800632a:	690b      	ldr	r3, [r1, #16]
 800632c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006330:	4293      	cmp	r3, r2
 8006332:	bfb8      	it	lt
 8006334:	4613      	movlt	r3, r2
 8006336:	6033      	str	r3, [r6, #0]
 8006338:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800633c:	4607      	mov	r7, r0
 800633e:	460c      	mov	r4, r1
 8006340:	b10a      	cbz	r2, 8006346 <_printf_common+0x26>
 8006342:	3301      	adds	r3, #1
 8006344:	6033      	str	r3, [r6, #0]
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	0699      	lsls	r1, r3, #26
 800634a:	bf42      	ittt	mi
 800634c:	6833      	ldrmi	r3, [r6, #0]
 800634e:	3302      	addmi	r3, #2
 8006350:	6033      	strmi	r3, [r6, #0]
 8006352:	6825      	ldr	r5, [r4, #0]
 8006354:	f015 0506 	ands.w	r5, r5, #6
 8006358:	d106      	bne.n	8006368 <_printf_common+0x48>
 800635a:	f104 0a19 	add.w	sl, r4, #25
 800635e:	68e3      	ldr	r3, [r4, #12]
 8006360:	6832      	ldr	r2, [r6, #0]
 8006362:	1a9b      	subs	r3, r3, r2
 8006364:	42ab      	cmp	r3, r5
 8006366:	dc26      	bgt.n	80063b6 <_printf_common+0x96>
 8006368:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800636c:	1e13      	subs	r3, r2, #0
 800636e:	6822      	ldr	r2, [r4, #0]
 8006370:	bf18      	it	ne
 8006372:	2301      	movne	r3, #1
 8006374:	0692      	lsls	r2, r2, #26
 8006376:	d42b      	bmi.n	80063d0 <_printf_common+0xb0>
 8006378:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800637c:	4649      	mov	r1, r9
 800637e:	4638      	mov	r0, r7
 8006380:	47c0      	blx	r8
 8006382:	3001      	adds	r0, #1
 8006384:	d01e      	beq.n	80063c4 <_printf_common+0xa4>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	6922      	ldr	r2, [r4, #16]
 800638a:	f003 0306 	and.w	r3, r3, #6
 800638e:	2b04      	cmp	r3, #4
 8006390:	bf02      	ittt	eq
 8006392:	68e5      	ldreq	r5, [r4, #12]
 8006394:	6833      	ldreq	r3, [r6, #0]
 8006396:	1aed      	subeq	r5, r5, r3
 8006398:	68a3      	ldr	r3, [r4, #8]
 800639a:	bf0c      	ite	eq
 800639c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063a0:	2500      	movne	r5, #0
 80063a2:	4293      	cmp	r3, r2
 80063a4:	bfc4      	itt	gt
 80063a6:	1a9b      	subgt	r3, r3, r2
 80063a8:	18ed      	addgt	r5, r5, r3
 80063aa:	2600      	movs	r6, #0
 80063ac:	341a      	adds	r4, #26
 80063ae:	42b5      	cmp	r5, r6
 80063b0:	d11a      	bne.n	80063e8 <_printf_common+0xc8>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e008      	b.n	80063c8 <_printf_common+0xa8>
 80063b6:	2301      	movs	r3, #1
 80063b8:	4652      	mov	r2, sl
 80063ba:	4649      	mov	r1, r9
 80063bc:	4638      	mov	r0, r7
 80063be:	47c0      	blx	r8
 80063c0:	3001      	adds	r0, #1
 80063c2:	d103      	bne.n	80063cc <_printf_common+0xac>
 80063c4:	f04f 30ff 	mov.w	r0, #4294967295
 80063c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063cc:	3501      	adds	r5, #1
 80063ce:	e7c6      	b.n	800635e <_printf_common+0x3e>
 80063d0:	18e1      	adds	r1, r4, r3
 80063d2:	1c5a      	adds	r2, r3, #1
 80063d4:	2030      	movs	r0, #48	; 0x30
 80063d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063da:	4422      	add	r2, r4
 80063dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063e4:	3302      	adds	r3, #2
 80063e6:	e7c7      	b.n	8006378 <_printf_common+0x58>
 80063e8:	2301      	movs	r3, #1
 80063ea:	4622      	mov	r2, r4
 80063ec:	4649      	mov	r1, r9
 80063ee:	4638      	mov	r0, r7
 80063f0:	47c0      	blx	r8
 80063f2:	3001      	adds	r0, #1
 80063f4:	d0e6      	beq.n	80063c4 <_printf_common+0xa4>
 80063f6:	3601      	adds	r6, #1
 80063f8:	e7d9      	b.n	80063ae <_printf_common+0x8e>
	...

080063fc <_printf_i>:
 80063fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	7e0f      	ldrb	r7, [r1, #24]
 8006402:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006404:	2f78      	cmp	r7, #120	; 0x78
 8006406:	4691      	mov	r9, r2
 8006408:	4680      	mov	r8, r0
 800640a:	460c      	mov	r4, r1
 800640c:	469a      	mov	sl, r3
 800640e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006412:	d807      	bhi.n	8006424 <_printf_i+0x28>
 8006414:	2f62      	cmp	r7, #98	; 0x62
 8006416:	d80a      	bhi.n	800642e <_printf_i+0x32>
 8006418:	2f00      	cmp	r7, #0
 800641a:	f000 80d4 	beq.w	80065c6 <_printf_i+0x1ca>
 800641e:	2f58      	cmp	r7, #88	; 0x58
 8006420:	f000 80c0 	beq.w	80065a4 <_printf_i+0x1a8>
 8006424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006428:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800642c:	e03a      	b.n	80064a4 <_printf_i+0xa8>
 800642e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006432:	2b15      	cmp	r3, #21
 8006434:	d8f6      	bhi.n	8006424 <_printf_i+0x28>
 8006436:	a101      	add	r1, pc, #4	; (adr r1, 800643c <_printf_i+0x40>)
 8006438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800643c:	08006495 	.word	0x08006495
 8006440:	080064a9 	.word	0x080064a9
 8006444:	08006425 	.word	0x08006425
 8006448:	08006425 	.word	0x08006425
 800644c:	08006425 	.word	0x08006425
 8006450:	08006425 	.word	0x08006425
 8006454:	080064a9 	.word	0x080064a9
 8006458:	08006425 	.word	0x08006425
 800645c:	08006425 	.word	0x08006425
 8006460:	08006425 	.word	0x08006425
 8006464:	08006425 	.word	0x08006425
 8006468:	080065ad 	.word	0x080065ad
 800646c:	080064d5 	.word	0x080064d5
 8006470:	08006567 	.word	0x08006567
 8006474:	08006425 	.word	0x08006425
 8006478:	08006425 	.word	0x08006425
 800647c:	080065cf 	.word	0x080065cf
 8006480:	08006425 	.word	0x08006425
 8006484:	080064d5 	.word	0x080064d5
 8006488:	08006425 	.word	0x08006425
 800648c:	08006425 	.word	0x08006425
 8006490:	0800656f 	.word	0x0800656f
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	1d1a      	adds	r2, r3, #4
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	602a      	str	r2, [r5, #0]
 800649c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064a4:	2301      	movs	r3, #1
 80064a6:	e09f      	b.n	80065e8 <_printf_i+0x1ec>
 80064a8:	6820      	ldr	r0, [r4, #0]
 80064aa:	682b      	ldr	r3, [r5, #0]
 80064ac:	0607      	lsls	r7, r0, #24
 80064ae:	f103 0104 	add.w	r1, r3, #4
 80064b2:	6029      	str	r1, [r5, #0]
 80064b4:	d501      	bpl.n	80064ba <_printf_i+0xbe>
 80064b6:	681e      	ldr	r6, [r3, #0]
 80064b8:	e003      	b.n	80064c2 <_printf_i+0xc6>
 80064ba:	0646      	lsls	r6, r0, #25
 80064bc:	d5fb      	bpl.n	80064b6 <_printf_i+0xba>
 80064be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	da03      	bge.n	80064ce <_printf_i+0xd2>
 80064c6:	232d      	movs	r3, #45	; 0x2d
 80064c8:	4276      	negs	r6, r6
 80064ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064ce:	485a      	ldr	r0, [pc, #360]	; (8006638 <_printf_i+0x23c>)
 80064d0:	230a      	movs	r3, #10
 80064d2:	e012      	b.n	80064fa <_printf_i+0xfe>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	6820      	ldr	r0, [r4, #0]
 80064d8:	1d19      	adds	r1, r3, #4
 80064da:	6029      	str	r1, [r5, #0]
 80064dc:	0605      	lsls	r5, r0, #24
 80064de:	d501      	bpl.n	80064e4 <_printf_i+0xe8>
 80064e0:	681e      	ldr	r6, [r3, #0]
 80064e2:	e002      	b.n	80064ea <_printf_i+0xee>
 80064e4:	0641      	lsls	r1, r0, #25
 80064e6:	d5fb      	bpl.n	80064e0 <_printf_i+0xe4>
 80064e8:	881e      	ldrh	r6, [r3, #0]
 80064ea:	4853      	ldr	r0, [pc, #332]	; (8006638 <_printf_i+0x23c>)
 80064ec:	2f6f      	cmp	r7, #111	; 0x6f
 80064ee:	bf0c      	ite	eq
 80064f0:	2308      	moveq	r3, #8
 80064f2:	230a      	movne	r3, #10
 80064f4:	2100      	movs	r1, #0
 80064f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064fa:	6865      	ldr	r5, [r4, #4]
 80064fc:	60a5      	str	r5, [r4, #8]
 80064fe:	2d00      	cmp	r5, #0
 8006500:	bfa2      	ittt	ge
 8006502:	6821      	ldrge	r1, [r4, #0]
 8006504:	f021 0104 	bicge.w	r1, r1, #4
 8006508:	6021      	strge	r1, [r4, #0]
 800650a:	b90e      	cbnz	r6, 8006510 <_printf_i+0x114>
 800650c:	2d00      	cmp	r5, #0
 800650e:	d04b      	beq.n	80065a8 <_printf_i+0x1ac>
 8006510:	4615      	mov	r5, r2
 8006512:	fbb6 f1f3 	udiv	r1, r6, r3
 8006516:	fb03 6711 	mls	r7, r3, r1, r6
 800651a:	5dc7      	ldrb	r7, [r0, r7]
 800651c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006520:	4637      	mov	r7, r6
 8006522:	42bb      	cmp	r3, r7
 8006524:	460e      	mov	r6, r1
 8006526:	d9f4      	bls.n	8006512 <_printf_i+0x116>
 8006528:	2b08      	cmp	r3, #8
 800652a:	d10b      	bne.n	8006544 <_printf_i+0x148>
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	07de      	lsls	r6, r3, #31
 8006530:	d508      	bpl.n	8006544 <_printf_i+0x148>
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	6861      	ldr	r1, [r4, #4]
 8006536:	4299      	cmp	r1, r3
 8006538:	bfde      	ittt	le
 800653a:	2330      	movle	r3, #48	; 0x30
 800653c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006540:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006544:	1b52      	subs	r2, r2, r5
 8006546:	6122      	str	r2, [r4, #16]
 8006548:	f8cd a000 	str.w	sl, [sp]
 800654c:	464b      	mov	r3, r9
 800654e:	aa03      	add	r2, sp, #12
 8006550:	4621      	mov	r1, r4
 8006552:	4640      	mov	r0, r8
 8006554:	f7ff fee4 	bl	8006320 <_printf_common>
 8006558:	3001      	adds	r0, #1
 800655a:	d14a      	bne.n	80065f2 <_printf_i+0x1f6>
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	b004      	add	sp, #16
 8006562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	f043 0320 	orr.w	r3, r3, #32
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	4833      	ldr	r0, [pc, #204]	; (800663c <_printf_i+0x240>)
 8006570:	2778      	movs	r7, #120	; 0x78
 8006572:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	6829      	ldr	r1, [r5, #0]
 800657a:	061f      	lsls	r7, r3, #24
 800657c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006580:	d402      	bmi.n	8006588 <_printf_i+0x18c>
 8006582:	065f      	lsls	r7, r3, #25
 8006584:	bf48      	it	mi
 8006586:	b2b6      	uxthmi	r6, r6
 8006588:	07df      	lsls	r7, r3, #31
 800658a:	bf48      	it	mi
 800658c:	f043 0320 	orrmi.w	r3, r3, #32
 8006590:	6029      	str	r1, [r5, #0]
 8006592:	bf48      	it	mi
 8006594:	6023      	strmi	r3, [r4, #0]
 8006596:	b91e      	cbnz	r6, 80065a0 <_printf_i+0x1a4>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	f023 0320 	bic.w	r3, r3, #32
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	2310      	movs	r3, #16
 80065a2:	e7a7      	b.n	80064f4 <_printf_i+0xf8>
 80065a4:	4824      	ldr	r0, [pc, #144]	; (8006638 <_printf_i+0x23c>)
 80065a6:	e7e4      	b.n	8006572 <_printf_i+0x176>
 80065a8:	4615      	mov	r5, r2
 80065aa:	e7bd      	b.n	8006528 <_printf_i+0x12c>
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	6826      	ldr	r6, [r4, #0]
 80065b0:	6961      	ldr	r1, [r4, #20]
 80065b2:	1d18      	adds	r0, r3, #4
 80065b4:	6028      	str	r0, [r5, #0]
 80065b6:	0635      	lsls	r5, r6, #24
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	d501      	bpl.n	80065c0 <_printf_i+0x1c4>
 80065bc:	6019      	str	r1, [r3, #0]
 80065be:	e002      	b.n	80065c6 <_printf_i+0x1ca>
 80065c0:	0670      	lsls	r0, r6, #25
 80065c2:	d5fb      	bpl.n	80065bc <_printf_i+0x1c0>
 80065c4:	8019      	strh	r1, [r3, #0]
 80065c6:	2300      	movs	r3, #0
 80065c8:	6123      	str	r3, [r4, #16]
 80065ca:	4615      	mov	r5, r2
 80065cc:	e7bc      	b.n	8006548 <_printf_i+0x14c>
 80065ce:	682b      	ldr	r3, [r5, #0]
 80065d0:	1d1a      	adds	r2, r3, #4
 80065d2:	602a      	str	r2, [r5, #0]
 80065d4:	681d      	ldr	r5, [r3, #0]
 80065d6:	6862      	ldr	r2, [r4, #4]
 80065d8:	2100      	movs	r1, #0
 80065da:	4628      	mov	r0, r5
 80065dc:	f7f9 fe00 	bl	80001e0 <memchr>
 80065e0:	b108      	cbz	r0, 80065e6 <_printf_i+0x1ea>
 80065e2:	1b40      	subs	r0, r0, r5
 80065e4:	6060      	str	r0, [r4, #4]
 80065e6:	6863      	ldr	r3, [r4, #4]
 80065e8:	6123      	str	r3, [r4, #16]
 80065ea:	2300      	movs	r3, #0
 80065ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f0:	e7aa      	b.n	8006548 <_printf_i+0x14c>
 80065f2:	6923      	ldr	r3, [r4, #16]
 80065f4:	462a      	mov	r2, r5
 80065f6:	4649      	mov	r1, r9
 80065f8:	4640      	mov	r0, r8
 80065fa:	47d0      	blx	sl
 80065fc:	3001      	adds	r0, #1
 80065fe:	d0ad      	beq.n	800655c <_printf_i+0x160>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	079b      	lsls	r3, r3, #30
 8006604:	d413      	bmi.n	800662e <_printf_i+0x232>
 8006606:	68e0      	ldr	r0, [r4, #12]
 8006608:	9b03      	ldr	r3, [sp, #12]
 800660a:	4298      	cmp	r0, r3
 800660c:	bfb8      	it	lt
 800660e:	4618      	movlt	r0, r3
 8006610:	e7a6      	b.n	8006560 <_printf_i+0x164>
 8006612:	2301      	movs	r3, #1
 8006614:	4632      	mov	r2, r6
 8006616:	4649      	mov	r1, r9
 8006618:	4640      	mov	r0, r8
 800661a:	47d0      	blx	sl
 800661c:	3001      	adds	r0, #1
 800661e:	d09d      	beq.n	800655c <_printf_i+0x160>
 8006620:	3501      	adds	r5, #1
 8006622:	68e3      	ldr	r3, [r4, #12]
 8006624:	9903      	ldr	r1, [sp, #12]
 8006626:	1a5b      	subs	r3, r3, r1
 8006628:	42ab      	cmp	r3, r5
 800662a:	dcf2      	bgt.n	8006612 <_printf_i+0x216>
 800662c:	e7eb      	b.n	8006606 <_printf_i+0x20a>
 800662e:	2500      	movs	r5, #0
 8006630:	f104 0619 	add.w	r6, r4, #25
 8006634:	e7f5      	b.n	8006622 <_printf_i+0x226>
 8006636:	bf00      	nop
 8006638:	08006a59 	.word	0x08006a59
 800663c:	08006a6a 	.word	0x08006a6a

08006640 <__sflush_r>:
 8006640:	898a      	ldrh	r2, [r1, #12]
 8006642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006646:	4605      	mov	r5, r0
 8006648:	0710      	lsls	r0, r2, #28
 800664a:	460c      	mov	r4, r1
 800664c:	d458      	bmi.n	8006700 <__sflush_r+0xc0>
 800664e:	684b      	ldr	r3, [r1, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	dc05      	bgt.n	8006660 <__sflush_r+0x20>
 8006654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	dc02      	bgt.n	8006660 <__sflush_r+0x20>
 800665a:	2000      	movs	r0, #0
 800665c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006662:	2e00      	cmp	r6, #0
 8006664:	d0f9      	beq.n	800665a <__sflush_r+0x1a>
 8006666:	2300      	movs	r3, #0
 8006668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800666c:	682f      	ldr	r7, [r5, #0]
 800666e:	6a21      	ldr	r1, [r4, #32]
 8006670:	602b      	str	r3, [r5, #0]
 8006672:	d032      	beq.n	80066da <__sflush_r+0x9a>
 8006674:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	075a      	lsls	r2, r3, #29
 800667a:	d505      	bpl.n	8006688 <__sflush_r+0x48>
 800667c:	6863      	ldr	r3, [r4, #4]
 800667e:	1ac0      	subs	r0, r0, r3
 8006680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006682:	b10b      	cbz	r3, 8006688 <__sflush_r+0x48>
 8006684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006686:	1ac0      	subs	r0, r0, r3
 8006688:	2300      	movs	r3, #0
 800668a:	4602      	mov	r2, r0
 800668c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800668e:	6a21      	ldr	r1, [r4, #32]
 8006690:	4628      	mov	r0, r5
 8006692:	47b0      	blx	r6
 8006694:	1c43      	adds	r3, r0, #1
 8006696:	89a3      	ldrh	r3, [r4, #12]
 8006698:	d106      	bne.n	80066a8 <__sflush_r+0x68>
 800669a:	6829      	ldr	r1, [r5, #0]
 800669c:	291d      	cmp	r1, #29
 800669e:	d82b      	bhi.n	80066f8 <__sflush_r+0xb8>
 80066a0:	4a29      	ldr	r2, [pc, #164]	; (8006748 <__sflush_r+0x108>)
 80066a2:	410a      	asrs	r2, r1
 80066a4:	07d6      	lsls	r6, r2, #31
 80066a6:	d427      	bmi.n	80066f8 <__sflush_r+0xb8>
 80066a8:	2200      	movs	r2, #0
 80066aa:	6062      	str	r2, [r4, #4]
 80066ac:	04d9      	lsls	r1, r3, #19
 80066ae:	6922      	ldr	r2, [r4, #16]
 80066b0:	6022      	str	r2, [r4, #0]
 80066b2:	d504      	bpl.n	80066be <__sflush_r+0x7e>
 80066b4:	1c42      	adds	r2, r0, #1
 80066b6:	d101      	bne.n	80066bc <__sflush_r+0x7c>
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	b903      	cbnz	r3, 80066be <__sflush_r+0x7e>
 80066bc:	6560      	str	r0, [r4, #84]	; 0x54
 80066be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066c0:	602f      	str	r7, [r5, #0]
 80066c2:	2900      	cmp	r1, #0
 80066c4:	d0c9      	beq.n	800665a <__sflush_r+0x1a>
 80066c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ca:	4299      	cmp	r1, r3
 80066cc:	d002      	beq.n	80066d4 <__sflush_r+0x94>
 80066ce:	4628      	mov	r0, r5
 80066d0:	f7ff fbea 	bl	8005ea8 <_free_r>
 80066d4:	2000      	movs	r0, #0
 80066d6:	6360      	str	r0, [r4, #52]	; 0x34
 80066d8:	e7c0      	b.n	800665c <__sflush_r+0x1c>
 80066da:	2301      	movs	r3, #1
 80066dc:	4628      	mov	r0, r5
 80066de:	47b0      	blx	r6
 80066e0:	1c41      	adds	r1, r0, #1
 80066e2:	d1c8      	bne.n	8006676 <__sflush_r+0x36>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0c5      	beq.n	8006676 <__sflush_r+0x36>
 80066ea:	2b1d      	cmp	r3, #29
 80066ec:	d001      	beq.n	80066f2 <__sflush_r+0xb2>
 80066ee:	2b16      	cmp	r3, #22
 80066f0:	d101      	bne.n	80066f6 <__sflush_r+0xb6>
 80066f2:	602f      	str	r7, [r5, #0]
 80066f4:	e7b1      	b.n	800665a <__sflush_r+0x1a>
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066fc:	81a3      	strh	r3, [r4, #12]
 80066fe:	e7ad      	b.n	800665c <__sflush_r+0x1c>
 8006700:	690f      	ldr	r7, [r1, #16]
 8006702:	2f00      	cmp	r7, #0
 8006704:	d0a9      	beq.n	800665a <__sflush_r+0x1a>
 8006706:	0793      	lsls	r3, r2, #30
 8006708:	680e      	ldr	r6, [r1, #0]
 800670a:	bf08      	it	eq
 800670c:	694b      	ldreq	r3, [r1, #20]
 800670e:	600f      	str	r7, [r1, #0]
 8006710:	bf18      	it	ne
 8006712:	2300      	movne	r3, #0
 8006714:	eba6 0807 	sub.w	r8, r6, r7
 8006718:	608b      	str	r3, [r1, #8]
 800671a:	f1b8 0f00 	cmp.w	r8, #0
 800671e:	dd9c      	ble.n	800665a <__sflush_r+0x1a>
 8006720:	6a21      	ldr	r1, [r4, #32]
 8006722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006724:	4643      	mov	r3, r8
 8006726:	463a      	mov	r2, r7
 8006728:	4628      	mov	r0, r5
 800672a:	47b0      	blx	r6
 800672c:	2800      	cmp	r0, #0
 800672e:	dc06      	bgt.n	800673e <__sflush_r+0xfe>
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006736:	81a3      	strh	r3, [r4, #12]
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	e78e      	b.n	800665c <__sflush_r+0x1c>
 800673e:	4407      	add	r7, r0
 8006740:	eba8 0800 	sub.w	r8, r8, r0
 8006744:	e7e9      	b.n	800671a <__sflush_r+0xda>
 8006746:	bf00      	nop
 8006748:	dfbffffe 	.word	0xdfbffffe

0800674c <_fflush_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	690b      	ldr	r3, [r1, #16]
 8006750:	4605      	mov	r5, r0
 8006752:	460c      	mov	r4, r1
 8006754:	b913      	cbnz	r3, 800675c <_fflush_r+0x10>
 8006756:	2500      	movs	r5, #0
 8006758:	4628      	mov	r0, r5
 800675a:	bd38      	pop	{r3, r4, r5, pc}
 800675c:	b118      	cbz	r0, 8006766 <_fflush_r+0x1a>
 800675e:	6a03      	ldr	r3, [r0, #32]
 8006760:	b90b      	cbnz	r3, 8006766 <_fflush_r+0x1a>
 8006762:	f7ff f8bf 	bl	80058e4 <__sinit>
 8006766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f3      	beq.n	8006756 <_fflush_r+0xa>
 800676e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006770:	07d0      	lsls	r0, r2, #31
 8006772:	d404      	bmi.n	800677e <_fflush_r+0x32>
 8006774:	0599      	lsls	r1, r3, #22
 8006776:	d402      	bmi.n	800677e <_fflush_r+0x32>
 8006778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677a:	f7ff fb84 	bl	8005e86 <__retarget_lock_acquire_recursive>
 800677e:	4628      	mov	r0, r5
 8006780:	4621      	mov	r1, r4
 8006782:	f7ff ff5d 	bl	8006640 <__sflush_r>
 8006786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006788:	07da      	lsls	r2, r3, #31
 800678a:	4605      	mov	r5, r0
 800678c:	d4e4      	bmi.n	8006758 <_fflush_r+0xc>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	059b      	lsls	r3, r3, #22
 8006792:	d4e1      	bmi.n	8006758 <_fflush_r+0xc>
 8006794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006796:	f7ff fb77 	bl	8005e88 <__retarget_lock_release_recursive>
 800679a:	e7dd      	b.n	8006758 <_fflush_r+0xc>

0800679c <__swhatbuf_r>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	460c      	mov	r4, r1
 80067a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a4:	2900      	cmp	r1, #0
 80067a6:	b096      	sub	sp, #88	; 0x58
 80067a8:	4615      	mov	r5, r2
 80067aa:	461e      	mov	r6, r3
 80067ac:	da0d      	bge.n	80067ca <__swhatbuf_r+0x2e>
 80067ae:	89a3      	ldrh	r3, [r4, #12]
 80067b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067b4:	f04f 0100 	mov.w	r1, #0
 80067b8:	bf0c      	ite	eq
 80067ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80067be:	2340      	movne	r3, #64	; 0x40
 80067c0:	2000      	movs	r0, #0
 80067c2:	6031      	str	r1, [r6, #0]
 80067c4:	602b      	str	r3, [r5, #0]
 80067c6:	b016      	add	sp, #88	; 0x58
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	466a      	mov	r2, sp
 80067cc:	f000 f848 	bl	8006860 <_fstat_r>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	dbec      	blt.n	80067ae <__swhatbuf_r+0x12>
 80067d4:	9901      	ldr	r1, [sp, #4]
 80067d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80067da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80067de:	4259      	negs	r1, r3
 80067e0:	4159      	adcs	r1, r3
 80067e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e6:	e7eb      	b.n	80067c0 <__swhatbuf_r+0x24>

080067e8 <__smakebuf_r>:
 80067e8:	898b      	ldrh	r3, [r1, #12]
 80067ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067ec:	079d      	lsls	r5, r3, #30
 80067ee:	4606      	mov	r6, r0
 80067f0:	460c      	mov	r4, r1
 80067f2:	d507      	bpl.n	8006804 <__smakebuf_r+0x1c>
 80067f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	6123      	str	r3, [r4, #16]
 80067fc:	2301      	movs	r3, #1
 80067fe:	6163      	str	r3, [r4, #20]
 8006800:	b002      	add	sp, #8
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	ab01      	add	r3, sp, #4
 8006806:	466a      	mov	r2, sp
 8006808:	f7ff ffc8 	bl	800679c <__swhatbuf_r>
 800680c:	9900      	ldr	r1, [sp, #0]
 800680e:	4605      	mov	r5, r0
 8006810:	4630      	mov	r0, r6
 8006812:	f7ff fbb5 	bl	8005f80 <_malloc_r>
 8006816:	b948      	cbnz	r0, 800682c <__smakebuf_r+0x44>
 8006818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800681c:	059a      	lsls	r2, r3, #22
 800681e:	d4ef      	bmi.n	8006800 <__smakebuf_r+0x18>
 8006820:	f023 0303 	bic.w	r3, r3, #3
 8006824:	f043 0302 	orr.w	r3, r3, #2
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	e7e3      	b.n	80067f4 <__smakebuf_r+0xc>
 800682c:	89a3      	ldrh	r3, [r4, #12]
 800682e:	6020      	str	r0, [r4, #0]
 8006830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	9b00      	ldr	r3, [sp, #0]
 8006838:	6163      	str	r3, [r4, #20]
 800683a:	9b01      	ldr	r3, [sp, #4]
 800683c:	6120      	str	r0, [r4, #16]
 800683e:	b15b      	cbz	r3, 8006858 <__smakebuf_r+0x70>
 8006840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006844:	4630      	mov	r0, r6
 8006846:	f000 f81d 	bl	8006884 <_isatty_r>
 800684a:	b128      	cbz	r0, 8006858 <__smakebuf_r+0x70>
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	f023 0303 	bic.w	r3, r3, #3
 8006852:	f043 0301 	orr.w	r3, r3, #1
 8006856:	81a3      	strh	r3, [r4, #12]
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	431d      	orrs	r5, r3
 800685c:	81a5      	strh	r5, [r4, #12]
 800685e:	e7cf      	b.n	8006800 <__smakebuf_r+0x18>

08006860 <_fstat_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4d07      	ldr	r5, [pc, #28]	; (8006880 <_fstat_r+0x20>)
 8006864:	2300      	movs	r3, #0
 8006866:	4604      	mov	r4, r0
 8006868:	4608      	mov	r0, r1
 800686a:	4611      	mov	r1, r2
 800686c:	602b      	str	r3, [r5, #0]
 800686e:	f7fa ff4f 	bl	8001710 <_fstat>
 8006872:	1c43      	adds	r3, r0, #1
 8006874:	d102      	bne.n	800687c <_fstat_r+0x1c>
 8006876:	682b      	ldr	r3, [r5, #0]
 8006878:	b103      	cbz	r3, 800687c <_fstat_r+0x1c>
 800687a:	6023      	str	r3, [r4, #0]
 800687c:	bd38      	pop	{r3, r4, r5, pc}
 800687e:	bf00      	nop
 8006880:	20004360 	.word	0x20004360

08006884 <_isatty_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4d06      	ldr	r5, [pc, #24]	; (80068a0 <_isatty_r+0x1c>)
 8006888:	2300      	movs	r3, #0
 800688a:	4604      	mov	r4, r0
 800688c:	4608      	mov	r0, r1
 800688e:	602b      	str	r3, [r5, #0]
 8006890:	f7fa feab 	bl	80015ea <_isatty>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_isatty_r+0x1a>
 8006898:	682b      	ldr	r3, [r5, #0]
 800689a:	b103      	cbz	r3, 800689e <_isatty_r+0x1a>
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	20004360 	.word	0x20004360

080068a4 <_sbrk_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d06      	ldr	r5, [pc, #24]	; (80068c0 <_sbrk_r+0x1c>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	4604      	mov	r4, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	f7fb f89e 	bl	80019f0 <_sbrk>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d102      	bne.n	80068be <_sbrk_r+0x1a>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	b103      	cbz	r3, 80068be <_sbrk_r+0x1a>
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	20004360 	.word	0x20004360

080068c4 <_init>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	bf00      	nop
 80068c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ca:	bc08      	pop	{r3}
 80068cc:	469e      	mov	lr, r3
 80068ce:	4770      	bx	lr

080068d0 <_fini>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	bf00      	nop
 80068d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d6:	bc08      	pop	{r3}
 80068d8:	469e      	mov	lr, r3
 80068da:	4770      	bx	lr
