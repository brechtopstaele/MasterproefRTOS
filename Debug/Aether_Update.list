
Aether_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007370  0800c000  0800c000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mysection    00000000  08004000  08004000  0000a074  2**0
                  CONTENTS
  3 .rodata       000004a4  08013370  08013370  00009370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08013814  08013814  0000a074  2**0
                  CONTENTS
  5 .ARM          00000008  08013814  08013814  00009814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801381c  0801381c  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801381c  0801381c  0000981c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08013820  08013820  00009820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000074  20000000  08013824  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000042e4  20000074  08013898  0000a074  2**2
                  ALLOC
 11 ._user_heap_stack 00000718  20004358  08013898  0000a358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a0f  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000357c  00000000  00000000  0001fab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  00023030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec0  00000000  00000000  00024348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c01  00000000  00000000  00025208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016eb5  00000000  00000000  0003ee09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099155  00000000  00000000  00055cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eee13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005780  00000000  00000000  000eee58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000f45d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	@ (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	@ (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	@ (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000074 	.word	0x20000074
 800c01c:	00000000 	.word	0x00000000
 800c020:	08013358 	.word	0x08013358

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	@ (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	@ (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	@ (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000078 	.word	0x20000078
 800c03c:	08013358 	.word	0x08013358

0800c040 <memchr>:
 800c040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800c044:	2a10      	cmp	r2, #16
 800c046:	db2b      	blt.n	800c0a0 <memchr+0x60>
 800c048:	f010 0f07 	tst.w	r0, #7
 800c04c:	d008      	beq.n	800c060 <memchr+0x20>
 800c04e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c052:	3a01      	subs	r2, #1
 800c054:	428b      	cmp	r3, r1
 800c056:	d02d      	beq.n	800c0b4 <memchr+0x74>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	b342      	cbz	r2, 800c0b0 <memchr+0x70>
 800c05e:	d1f6      	bne.n	800c04e <memchr+0xe>
 800c060:	b4f0      	push	{r4, r5, r6, r7}
 800c062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c06a:	f022 0407 	bic.w	r4, r2, #7
 800c06e:	f07f 0700 	mvns.w	r7, #0
 800c072:	2300      	movs	r3, #0
 800c074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c078:	3c08      	subs	r4, #8
 800c07a:	ea85 0501 	eor.w	r5, r5, r1
 800c07e:	ea86 0601 	eor.w	r6, r6, r1
 800c082:	fa85 f547 	uadd8	r5, r5, r7
 800c086:	faa3 f587 	sel	r5, r3, r7
 800c08a:	fa86 f647 	uadd8	r6, r6, r7
 800c08e:	faa5 f687 	sel	r6, r5, r7
 800c092:	b98e      	cbnz	r6, 800c0b8 <memchr+0x78>
 800c094:	d1ee      	bne.n	800c074 <memchr+0x34>
 800c096:	bcf0      	pop	{r4, r5, r6, r7}
 800c098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800c09c:	f002 0207 	and.w	r2, r2, #7
 800c0a0:	b132      	cbz	r2, 800c0b0 <memchr+0x70>
 800c0a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0a6:	3a01      	subs	r2, #1
 800c0a8:	ea83 0301 	eor.w	r3, r3, r1
 800c0ac:	b113      	cbz	r3, 800c0b4 <memchr+0x74>
 800c0ae:	d1f8      	bne.n	800c0a2 <memchr+0x62>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	4770      	bx	lr
 800c0b4:	3801      	subs	r0, #1
 800c0b6:	4770      	bx	lr
 800c0b8:	2d00      	cmp	r5, #0
 800c0ba:	bf06      	itte	eq
 800c0bc:	4635      	moveq	r5, r6
 800c0be:	3803      	subeq	r0, #3
 800c0c0:	3807      	subne	r0, #7
 800c0c2:	f015 0f01 	tst.w	r5, #1
 800c0c6:	d107      	bne.n	800c0d8 <memchr+0x98>
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800c0ce:	bf02      	ittt	eq
 800c0d0:	3001      	addeq	r0, #1
 800c0d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 800c0d6:	3001      	addeq	r0, #1
 800c0d8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0da:	3801      	subs	r0, #1
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop

0800c0e0 <strlen>:
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	d1fb      	bne.n	800c0e2 <strlen+0x2>
 800c0ea:	1a18      	subs	r0, r3, r0
 800c0ec:	3801      	subs	r0, #1
 800c0ee:	4770      	bx	lr

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b96a 	b.w	800c3dc <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9d08      	ldr	r5, [sp, #32]
 800c126:	460c      	mov	r4, r1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d14e      	bne.n	800c1ca <__udivmoddi4+0xaa>
 800c12c:	4694      	mov	ip, r2
 800c12e:	458c      	cmp	ip, r1
 800c130:	4686      	mov	lr, r0
 800c132:	fab2 f282 	clz	r2, r2
 800c136:	d962      	bls.n	800c1fe <__udivmoddi4+0xde>
 800c138:	b14a      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13a:	f1c2 0320 	rsb	r3, r2, #32
 800c13e:	4091      	lsls	r1, r2
 800c140:	fa20 f303 	lsr.w	r3, r0, r3
 800c144:	fa0c fc02 	lsl.w	ip, ip, r2
 800c148:	4319      	orrs	r1, r3
 800c14a:	fa00 fe02 	lsl.w	lr, r0, r2
 800c14e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c152:	fa1f f68c 	uxth.w	r6, ip
 800c156:	fbb1 f4f7 	udiv	r4, r1, r7
 800c15a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800c15e:	fb07 1114 	mls	r1, r7, r4, r1
 800c162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c166:	fb04 f106 	mul.w	r1, r4, r6
 800c16a:	4299      	cmp	r1, r3
 800c16c:	d90a      	bls.n	800c184 <__udivmoddi4+0x64>
 800c16e:	eb1c 0303 	adds.w	r3, ip, r3
 800c172:	f104 30ff 	add.w	r0, r4, #4294967295
 800c176:	f080 8112 	bcs.w	800c39e <__udivmoddi4+0x27e>
 800c17a:	4299      	cmp	r1, r3
 800c17c:	f240 810f 	bls.w	800c39e <__udivmoddi4+0x27e>
 800c180:	3c02      	subs	r4, #2
 800c182:	4463      	add	r3, ip
 800c184:	1a59      	subs	r1, r3, r1
 800c186:	fa1f f38e 	uxth.w	r3, lr
 800c18a:	fbb1 f0f7 	udiv	r0, r1, r7
 800c18e:	fb07 1110 	mls	r1, r7, r0, r1
 800c192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c196:	fb00 f606 	mul.w	r6, r0, r6
 800c19a:	429e      	cmp	r6, r3
 800c19c:	d90a      	bls.n	800c1b4 <__udivmoddi4+0x94>
 800c19e:	eb1c 0303 	adds.w	r3, ip, r3
 800c1a2:	f100 31ff 	add.w	r1, r0, #4294967295
 800c1a6:	f080 80fc 	bcs.w	800c3a2 <__udivmoddi4+0x282>
 800c1aa:	429e      	cmp	r6, r3
 800c1ac:	f240 80f9 	bls.w	800c3a2 <__udivmoddi4+0x282>
 800c1b0:	4463      	add	r3, ip
 800c1b2:	3802      	subs	r0, #2
 800c1b4:	1b9b      	subs	r3, r3, r6
 800c1b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	b11d      	cbz	r5, 800c1c6 <__udivmoddi4+0xa6>
 800c1be:	40d3      	lsrs	r3, r2
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	e9c5 3200 	strd	r3, r2, [r5]
 800c1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ca:	428b      	cmp	r3, r1
 800c1cc:	d905      	bls.n	800c1da <__udivmoddi4+0xba>
 800c1ce:	b10d      	cbz	r5, 800c1d4 <__udivmoddi4+0xb4>
 800c1d0:	e9c5 0100 	strd	r0, r1, [r5]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	e7f5      	b.n	800c1c6 <__udivmoddi4+0xa6>
 800c1da:	fab3 f183 	clz	r1, r3
 800c1de:	2900      	cmp	r1, #0
 800c1e0:	d146      	bne.n	800c270 <__udivmoddi4+0x150>
 800c1e2:	42a3      	cmp	r3, r4
 800c1e4:	d302      	bcc.n	800c1ec <__udivmoddi4+0xcc>
 800c1e6:	4290      	cmp	r0, r2
 800c1e8:	f0c0 80f0 	bcc.w	800c3cc <__udivmoddi4+0x2ac>
 800c1ec:	1a86      	subs	r6, r0, r2
 800c1ee:	eb64 0303 	sbc.w	r3, r4, r3
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	2d00      	cmp	r5, #0
 800c1f6:	d0e6      	beq.n	800c1c6 <__udivmoddi4+0xa6>
 800c1f8:	e9c5 6300 	strd	r6, r3, [r5]
 800c1fc:	e7e3      	b.n	800c1c6 <__udivmoddi4+0xa6>
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	f040 8090 	bne.w	800c324 <__udivmoddi4+0x204>
 800c204:	eba1 040c 	sub.w	r4, r1, ip
 800c208:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c20c:	fa1f f78c 	uxth.w	r7, ip
 800c210:	2101      	movs	r1, #1
 800c212:	fbb4 f6f8 	udiv	r6, r4, r8
 800c216:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800c21a:	fb08 4416 	mls	r4, r8, r6, r4
 800c21e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c222:	fb07 f006 	mul.w	r0, r7, r6
 800c226:	4298      	cmp	r0, r3
 800c228:	d908      	bls.n	800c23c <__udivmoddi4+0x11c>
 800c22a:	eb1c 0303 	adds.w	r3, ip, r3
 800c22e:	f106 34ff 	add.w	r4, r6, #4294967295
 800c232:	d202      	bcs.n	800c23a <__udivmoddi4+0x11a>
 800c234:	4298      	cmp	r0, r3
 800c236:	f200 80cd 	bhi.w	800c3d4 <__udivmoddi4+0x2b4>
 800c23a:	4626      	mov	r6, r4
 800c23c:	1a1c      	subs	r4, r3, r0
 800c23e:	fa1f f38e 	uxth.w	r3, lr
 800c242:	fbb4 f0f8 	udiv	r0, r4, r8
 800c246:	fb08 4410 	mls	r4, r8, r0, r4
 800c24a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c24e:	fb00 f707 	mul.w	r7, r0, r7
 800c252:	429f      	cmp	r7, r3
 800c254:	d908      	bls.n	800c268 <__udivmoddi4+0x148>
 800c256:	eb1c 0303 	adds.w	r3, ip, r3
 800c25a:	f100 34ff 	add.w	r4, r0, #4294967295
 800c25e:	d202      	bcs.n	800c266 <__udivmoddi4+0x146>
 800c260:	429f      	cmp	r7, r3
 800c262:	f200 80b0 	bhi.w	800c3c6 <__udivmoddi4+0x2a6>
 800c266:	4620      	mov	r0, r4
 800c268:	1bdb      	subs	r3, r3, r7
 800c26a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c26e:	e7a5      	b.n	800c1bc <__udivmoddi4+0x9c>
 800c270:	f1c1 0620 	rsb	r6, r1, #32
 800c274:	408b      	lsls	r3, r1
 800c276:	fa22 f706 	lsr.w	r7, r2, r6
 800c27a:	431f      	orrs	r7, r3
 800c27c:	fa20 fc06 	lsr.w	ip, r0, r6
 800c280:	fa04 f301 	lsl.w	r3, r4, r1
 800c284:	ea43 030c 	orr.w	r3, r3, ip
 800c288:	40f4      	lsrs	r4, r6
 800c28a:	fa00 f801 	lsl.w	r8, r0, r1
 800c28e:	0c38      	lsrs	r0, r7, #16
 800c290:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800c294:	fbb4 fef0 	udiv	lr, r4, r0
 800c298:	fa1f fc87 	uxth.w	ip, r7
 800c29c:	fb00 441e 	mls	r4, r0, lr, r4
 800c2a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800c2a4:	fb0e f90c 	mul.w	r9, lr, ip
 800c2a8:	45a1      	cmp	r9, r4
 800c2aa:	fa02 f201 	lsl.w	r2, r2, r1
 800c2ae:	d90a      	bls.n	800c2c6 <__udivmoddi4+0x1a6>
 800c2b0:	193c      	adds	r4, r7, r4
 800c2b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 800c2b6:	f080 8084 	bcs.w	800c3c2 <__udivmoddi4+0x2a2>
 800c2ba:	45a1      	cmp	r9, r4
 800c2bc:	f240 8081 	bls.w	800c3c2 <__udivmoddi4+0x2a2>
 800c2c0:	f1ae 0e02 	sub.w	lr, lr, #2
 800c2c4:	443c      	add	r4, r7
 800c2c6:	eba4 0409 	sub.w	r4, r4, r9
 800c2ca:	fa1f f983 	uxth.w	r9, r3
 800c2ce:	fbb4 f3f0 	udiv	r3, r4, r0
 800c2d2:	fb00 4413 	mls	r4, r0, r3, r4
 800c2d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800c2da:	fb03 fc0c 	mul.w	ip, r3, ip
 800c2de:	45a4      	cmp	ip, r4
 800c2e0:	d907      	bls.n	800c2f2 <__udivmoddi4+0x1d2>
 800c2e2:	193c      	adds	r4, r7, r4
 800c2e4:	f103 30ff 	add.w	r0, r3, #4294967295
 800c2e8:	d267      	bcs.n	800c3ba <__udivmoddi4+0x29a>
 800c2ea:	45a4      	cmp	ip, r4
 800c2ec:	d965      	bls.n	800c3ba <__udivmoddi4+0x29a>
 800c2ee:	3b02      	subs	r3, #2
 800c2f0:	443c      	add	r4, r7
 800c2f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800c2f6:	fba0 9302 	umull	r9, r3, r0, r2
 800c2fa:	eba4 040c 	sub.w	r4, r4, ip
 800c2fe:	429c      	cmp	r4, r3
 800c300:	46ce      	mov	lr, r9
 800c302:	469c      	mov	ip, r3
 800c304:	d351      	bcc.n	800c3aa <__udivmoddi4+0x28a>
 800c306:	d04e      	beq.n	800c3a6 <__udivmoddi4+0x286>
 800c308:	b155      	cbz	r5, 800c320 <__udivmoddi4+0x200>
 800c30a:	ebb8 030e 	subs.w	r3, r8, lr
 800c30e:	eb64 040c 	sbc.w	r4, r4, ip
 800c312:	fa04 f606 	lsl.w	r6, r4, r6
 800c316:	40cb      	lsrs	r3, r1
 800c318:	431e      	orrs	r6, r3
 800c31a:	40cc      	lsrs	r4, r1
 800c31c:	e9c5 6400 	strd	r6, r4, [r5]
 800c320:	2100      	movs	r1, #0
 800c322:	e750      	b.n	800c1c6 <__udivmoddi4+0xa6>
 800c324:	f1c2 0320 	rsb	r3, r2, #32
 800c328:	fa20 f103 	lsr.w	r1, r0, r3
 800c32c:	fa0c fc02 	lsl.w	ip, ip, r2
 800c330:	fa24 f303 	lsr.w	r3, r4, r3
 800c334:	4094      	lsls	r4, r2
 800c336:	430c      	orrs	r4, r1
 800c338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c33c:	fa00 fe02 	lsl.w	lr, r0, r2
 800c340:	fa1f f78c 	uxth.w	r7, ip
 800c344:	fbb3 f0f8 	udiv	r0, r3, r8
 800c348:	fb08 3110 	mls	r1, r8, r0, r3
 800c34c:	0c23      	lsrs	r3, r4, #16
 800c34e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c352:	fb00 f107 	mul.w	r1, r0, r7
 800c356:	4299      	cmp	r1, r3
 800c358:	d908      	bls.n	800c36c <__udivmoddi4+0x24c>
 800c35a:	eb1c 0303 	adds.w	r3, ip, r3
 800c35e:	f100 36ff 	add.w	r6, r0, #4294967295
 800c362:	d22c      	bcs.n	800c3be <__udivmoddi4+0x29e>
 800c364:	4299      	cmp	r1, r3
 800c366:	d92a      	bls.n	800c3be <__udivmoddi4+0x29e>
 800c368:	3802      	subs	r0, #2
 800c36a:	4463      	add	r3, ip
 800c36c:	1a5b      	subs	r3, r3, r1
 800c36e:	b2a4      	uxth	r4, r4
 800c370:	fbb3 f1f8 	udiv	r1, r3, r8
 800c374:	fb08 3311 	mls	r3, r8, r1, r3
 800c378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c37c:	fb01 f307 	mul.w	r3, r1, r7
 800c380:	42a3      	cmp	r3, r4
 800c382:	d908      	bls.n	800c396 <__udivmoddi4+0x276>
 800c384:	eb1c 0404 	adds.w	r4, ip, r4
 800c388:	f101 36ff 	add.w	r6, r1, #4294967295
 800c38c:	d213      	bcs.n	800c3b6 <__udivmoddi4+0x296>
 800c38e:	42a3      	cmp	r3, r4
 800c390:	d911      	bls.n	800c3b6 <__udivmoddi4+0x296>
 800c392:	3902      	subs	r1, #2
 800c394:	4464      	add	r4, ip
 800c396:	1ae4      	subs	r4, r4, r3
 800c398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c39c:	e739      	b.n	800c212 <__udivmoddi4+0xf2>
 800c39e:	4604      	mov	r4, r0
 800c3a0:	e6f0      	b.n	800c184 <__udivmoddi4+0x64>
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	e706      	b.n	800c1b4 <__udivmoddi4+0x94>
 800c3a6:	45c8      	cmp	r8, r9
 800c3a8:	d2ae      	bcs.n	800c308 <__udivmoddi4+0x1e8>
 800c3aa:	ebb9 0e02 	subs.w	lr, r9, r2
 800c3ae:	eb63 0c07 	sbc.w	ip, r3, r7
 800c3b2:	3801      	subs	r0, #1
 800c3b4:	e7a8      	b.n	800c308 <__udivmoddi4+0x1e8>
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	e7ed      	b.n	800c396 <__udivmoddi4+0x276>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	e799      	b.n	800c2f2 <__udivmoddi4+0x1d2>
 800c3be:	4630      	mov	r0, r6
 800c3c0:	e7d4      	b.n	800c36c <__udivmoddi4+0x24c>
 800c3c2:	46d6      	mov	lr, sl
 800c3c4:	e77f      	b.n	800c2c6 <__udivmoddi4+0x1a6>
 800c3c6:	4463      	add	r3, ip
 800c3c8:	3802      	subs	r0, #2
 800c3ca:	e74d      	b.n	800c268 <__udivmoddi4+0x148>
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	4623      	mov	r3, r4
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	e70f      	b.n	800c1f4 <__udivmoddi4+0xd4>
 800c3d4:	3e02      	subs	r6, #2
 800c3d6:	4463      	add	r3, ip
 800c3d8:	e730      	b.n	800c23c <__udivmoddi4+0x11c>
 800c3da:	bf00      	nop

0800c3dc <__aeabi_idiv0>:
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop

0800c3e0 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08a      	sub	sp, #40	@ 0x28
 800c3e4:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800c3e6:	2306      	movs	r3, #6
 800c3e8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c3ea:	2306      	movs	r3, #6
 800c3ec:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	83fb      	strh	r3, [r7, #30]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800c3fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800c404:	4ba1      	ldr	r3, [pc, #644]	@ (800c68c <EE_Init+0x2ac>)
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800c40a:	4ba1      	ldr	r3, [pc, #644]	@ (800c690 <EE_Init+0x2b0>)
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800c410:	2300      	movs	r3, #0
 800c412:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 800c414:	2302      	movs	r3, #2
 800c416:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 800c418:	2301      	movs	r3, #1
 800c41a:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c41c:	2302      	movs	r3, #2
 800c41e:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 800c420:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c426:	4293      	cmp	r3, r2
 800c428:	d00b      	beq.n	800c442 <EE_Init+0x62>
 800c42a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c42e:	f280 8196 	bge.w	800c75e <EE_Init+0x37e>
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 80f8 	beq.w	800c628 <EE_Init+0x248>
 800c438:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d050      	beq.n	800c4e2 <EE_Init+0x102>
 800c440:	e18d      	b.n	800c75e <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800c442:	8c3b      	ldrh	r3, [r7, #32]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d116      	bne.n	800c476 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c448:	4890      	ldr	r0, [pc, #576]	@ (800c68c <EE_Init+0x2ac>)
 800c44a:	f000 f9a9 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	f040 818e 	bne.w	800c772 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c456:	f107 0214 	add.w	r2, r7, #20
 800c45a:	463b      	mov	r3, r7
 800c45c:	4611      	mov	r1, r2
 800c45e:	4618      	mov	r0, r3
 800c460:	f002 f9c6 	bl	800e7f0 <HAL_FLASHEx_Erase>
 800c464:	4603      	mov	r3, r0
 800c466:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c468:	7efb      	ldrb	r3, [r7, #27]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 8181 	beq.w	800c772 <EE_Init+0x392>
          {
            return FlashStatus;
 800c470:	7efb      	ldrb	r3, [r7, #27]
 800c472:	b29b      	uxth	r3, r3
 800c474:	e185      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800c476:	8c3b      	ldrh	r3, [r7, #32]
 800c478:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d125      	bne.n	800c4cc <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c480:	4882      	ldr	r0, [pc, #520]	@ (800c68c <EE_Init+0x2ac>)
 800c482:	f000 f98d 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10e      	bne.n	800c4aa <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c48c:	f107 0214 	add.w	r2, r7, #20
 800c490:	463b      	mov	r3, r7
 800c492:	4611      	mov	r1, r2
 800c494:	4618      	mov	r0, r3
 800c496:	f002 f9ab 	bl	800e7f0 <HAL_FLASHEx_Erase>
 800c49a:	4603      	mov	r3, r0
 800c49c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c49e:	7efb      	ldrb	r3, [r7, #27]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <EE_Init+0xca>
          {
            return FlashStatus;
 800c4a4:	7efb      	ldrb	r3, [r7, #27]
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	e16b      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800c4aa:	f04f 0200 	mov.w	r2, #0
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	4977      	ldr	r1, [pc, #476]	@ (800c690 <EE_Init+0x2b0>)
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	f001 ffe5 	bl	800e484 <HAL_FLASH_Program>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c4be:	7efb      	ldrb	r3, [r7, #27]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 8156 	beq.w	800c772 <EE_Init+0x392>
        {
          return FlashStatus;
 800c4c6:	7efb      	ldrb	r3, [r7, #27]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	e15a      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800c4cc:	f000 f9fe 	bl	800c8cc <EE_Format>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c4d4:	7efb      	ldrb	r3, [r7, #27]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 814b 	beq.w	800c772 <EE_Init+0x392>
        {
          return FlashStatus;
 800c4dc:	7efb      	ldrb	r3, [r7, #27]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	e14f      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800c4e2:	8c3b      	ldrh	r3, [r7, #32]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d163      	bne.n	800c5b0 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c4ec:	e030      	b.n	800c550 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800c4ee:	4b69      	ldr	r3, [pc, #420]	@ (800c694 <EE_Init+0x2b4>)
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c4f6:	4968      	ldr	r1, [pc, #416]	@ (800c698 <EE_Init+0x2b8>)
 800c4f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d101      	bne.n	800c504 <EE_Init+0x124>
          {
            x = VarIdx;
 800c500:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c502:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 800c504:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c506:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d01d      	beq.n	800c54a <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c50e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c510:	4a61      	ldr	r2, [pc, #388]	@ (800c698 <EE_Init+0x2b8>)
 800c512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c516:	4961      	ldr	r1, [pc, #388]	@ (800c69c <EE_Init+0x2bc>)
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 f96b 	bl	800c7f4 <EE_ReadVariable>
 800c51e:	4603      	mov	r3, r0
 800c520:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800c522:	8bbb      	ldrh	r3, [r7, #28]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d010      	beq.n	800c54a <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c528:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c52a:	4a5b      	ldr	r2, [pc, #364]	@ (800c698 <EE_Init+0x2b8>)
 800c52c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c530:	4a5a      	ldr	r2, [pc, #360]	@ (800c69c <EE_Init+0x2bc>)
 800c532:	8812      	ldrh	r2, [r2, #0]
 800c534:	4611      	mov	r1, r2
 800c536:	4618      	mov	r0, r3
 800c538:	f000 fa60 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800c53c:	4603      	mov	r3, r0
 800c53e:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800c540:	8bfb      	ldrh	r3, [r7, #30]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <EE_Init+0x16a>
              {
                return EepromStatus;
 800c546:	8bfb      	ldrh	r3, [r7, #30]
 800c548:	e11b      	b.n	800c782 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c54a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c54c:	3301      	adds	r3, #1
 800c54e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c550:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c552:	2b31      	cmp	r3, #49	@ 0x31
 800c554:	d9cb      	bls.n	800c4ee <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c556:	f04f 0200 	mov.w	r2, #0
 800c55a:	f04f 0300 	mov.w	r3, #0
 800c55e:	494b      	ldr	r1, [pc, #300]	@ (800c68c <EE_Init+0x2ac>)
 800c560:	2001      	movs	r0, #1
 800c562:	f001 ff8f 	bl	800e484 <HAL_FLASH_Program>
 800c566:	4603      	mov	r3, r0
 800c568:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c56a:	7efb      	ldrb	r3, [r7, #27]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <EE_Init+0x196>
        {
          return FlashStatus;
 800c570:	7efb      	ldrb	r3, [r7, #27]
 800c572:	b29b      	uxth	r3, r3
 800c574:	e105      	b.n	800c782 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 800c576:	2303      	movs	r3, #3
 800c578:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c57a:	2301      	movs	r3, #1
 800c57c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c57e:	2302      	movs	r3, #2
 800c580:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c582:	4843      	ldr	r0, [pc, #268]	@ (800c690 <EE_Init+0x2b0>)
 800c584:	f000 f90c 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f040 80f3 	bne.w	800c776 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c590:	f107 0214 	add.w	r2, r7, #20
 800c594:	463b      	mov	r3, r7
 800c596:	4611      	mov	r1, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f002 f929 	bl	800e7f0 <HAL_FLASHEx_Erase>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c5a2:	7efb      	ldrb	r3, [r7, #27]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 80e6 	beq.w	800c776 <EE_Init+0x396>
          {
            return FlashStatus;
 800c5aa:	7efb      	ldrb	r3, [r7, #27]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	e0e8      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800c5b0:	8c3b      	ldrh	r3, [r7, #32]
 800c5b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d12b      	bne.n	800c612 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c5c6:	4832      	ldr	r0, [pc, #200]	@ (800c690 <EE_Init+0x2b0>)
 800c5c8:	f000 f8ea 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10e      	bne.n	800c5f0 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c5d2:	f107 0214 	add.w	r2, r7, #20
 800c5d6:	463b      	mov	r3, r7
 800c5d8:	4611      	mov	r1, r2
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f002 f908 	bl	800e7f0 <HAL_FLASHEx_Erase>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c5e4:	7efb      	ldrb	r3, [r7, #27]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <EE_Init+0x210>
          {
            return FlashStatus;
 800c5ea:	7efb      	ldrb	r3, [r7, #27]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	e0c8      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c5f0:	f04f 0200 	mov.w	r2, #0
 800c5f4:	f04f 0300 	mov.w	r3, #0
 800c5f8:	4924      	ldr	r1, [pc, #144]	@ (800c68c <EE_Init+0x2ac>)
 800c5fa:	2001      	movs	r0, #1
 800c5fc:	f001 ff42 	bl	800e484 <HAL_FLASH_Program>
 800c600:	4603      	mov	r3, r0
 800c602:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c604:	7efb      	ldrb	r3, [r7, #27]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 80b5 	beq.w	800c776 <EE_Init+0x396>
        {
          return FlashStatus;
 800c60c:	7efb      	ldrb	r3, [r7, #27]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	e0b7      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800c612:	f000 f95b 	bl	800c8cc <EE_Format>
 800c616:	4603      	mov	r3, r0
 800c618:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c61a:	7efb      	ldrb	r3, [r7, #27]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 80aa 	beq.w	800c776 <EE_Init+0x396>
        {
          return FlashStatus;
 800c622:	7efb      	ldrb	r3, [r7, #27]
 800c624:	b29b      	uxth	r3, r3
 800c626:	e0ac      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800c628:	8c3b      	ldrh	r3, [r7, #32]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10a      	bne.n	800c644 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800c62e:	f000 f94d 	bl	800c8cc <EE_Format>
 800c632:	4603      	mov	r3, r0
 800c634:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c636:	7efb      	ldrb	r3, [r7, #27]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 809e 	beq.w	800c77a <EE_Init+0x39a>
        {
          return FlashStatus;
 800c63e:	7efb      	ldrb	r3, [r7, #27]
 800c640:	b29b      	uxth	r3, r3
 800c642:	e09e      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800c644:	8c3b      	ldrh	r3, [r7, #32]
 800c646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d11b      	bne.n	800c686 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800c64e:	2303      	movs	r3, #3
 800c650:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c652:	2301      	movs	r3, #1
 800c654:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c656:	2302      	movs	r3, #2
 800c658:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c65a:	480d      	ldr	r0, [pc, #52]	@ (800c690 <EE_Init+0x2b0>)
 800c65c:	f000 f8a0 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	f040 8089 	bne.w	800c77a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c668:	f107 0214 	add.w	r2, r7, #20
 800c66c:	463b      	mov	r3, r7
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f002 f8bd 	bl	800e7f0 <HAL_FLASHEx_Erase>
 800c676:	4603      	mov	r3, r0
 800c678:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c67a:	7efb      	ldrb	r3, [r7, #27]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d07c      	beq.n	800c77a <EE_Init+0x39a>
          {
            return FlashStatus;
 800c680:	7efb      	ldrb	r3, [r7, #27]
 800c682:	b29b      	uxth	r3, r3
 800c684:	e07d      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c686:	2300      	movs	r3, #0
 800c688:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c68a:	e03a      	b.n	800c702 <EE_Init+0x322>
 800c68c:	08004000 	.word	0x08004000
 800c690:	08008000 	.word	0x08008000
 800c694:	08004006 	.word	0x08004006
 800c698:	20000430 	.word	0x20000430
 800c69c:	20000090 	.word	0x20000090
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800c6a0:	4b3a      	ldr	r3, [pc, #232]	@ (800c78c <EE_Init+0x3ac>)
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6a8:	4939      	ldr	r1, [pc, #228]	@ (800c790 <EE_Init+0x3b0>)
 800c6aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d101      	bne.n	800c6b6 <EE_Init+0x2d6>
          {
            x = VarIdx;
 800c6b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 800c6b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c6b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d01d      	beq.n	800c6fc <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c6c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6c2:	4a33      	ldr	r2, [pc, #204]	@ (800c790 <EE_Init+0x3b0>)
 800c6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6c8:	4932      	ldr	r1, [pc, #200]	@ (800c794 <EE_Init+0x3b4>)
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f000 f892 	bl	800c7f4 <EE_ReadVariable>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800c6d4:	8bbb      	ldrh	r3, [r7, #28]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d010      	beq.n	800c6fc <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c6da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6dc:	4a2c      	ldr	r2, [pc, #176]	@ (800c790 <EE_Init+0x3b0>)
 800c6de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6e2:	4a2c      	ldr	r2, [pc, #176]	@ (800c794 <EE_Init+0x3b4>)
 800c6e4:	8812      	ldrh	r2, [r2, #0]
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f987 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800c6f2:	8bfb      	ldrh	r3, [r7, #30]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d001      	beq.n	800c6fc <EE_Init+0x31c>
              {
                return EepromStatus;
 800c6f8:	8bfb      	ldrh	r3, [r7, #30]
 800c6fa:	e042      	b.n	800c782 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c6fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6fe:	3301      	adds	r3, #1
 800c700:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c702:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c704:	2b31      	cmp	r3, #49	@ 0x31
 800c706:	d9cb      	bls.n	800c6a0 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 800c708:	f04f 0200 	mov.w	r2, #0
 800c70c:	f04f 0300 	mov.w	r3, #0
 800c710:	4921      	ldr	r1, [pc, #132]	@ (800c798 <EE_Init+0x3b8>)
 800c712:	2001      	movs	r0, #1
 800c714:	f001 feb6 	bl	800e484 <HAL_FLASH_Program>
 800c718:	4603      	mov	r3, r0
 800c71a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c71c:	7efb      	ldrb	r3, [r7, #27]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <EE_Init+0x348>
        {
          return FlashStatus;
 800c722:	7efb      	ldrb	r3, [r7, #27]
 800c724:	b29b      	uxth	r3, r3
 800c726:	e02c      	b.n	800c782 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 800c728:	2302      	movs	r3, #2
 800c72a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c72c:	2301      	movs	r3, #1
 800c72e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c730:	2302      	movs	r3, #2
 800c732:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c734:	4819      	ldr	r0, [pc, #100]	@ (800c79c <EE_Init+0x3bc>)
 800c736:	f000 f833 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d11c      	bne.n	800c77a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c740:	f107 0214 	add.w	r2, r7, #20
 800c744:	463b      	mov	r3, r7
 800c746:	4611      	mov	r1, r2
 800c748:	4618      	mov	r0, r3
 800c74a:	f002 f851 	bl	800e7f0 <HAL_FLASHEx_Erase>
 800c74e:	4603      	mov	r3, r0
 800c750:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c752:	7efb      	ldrb	r3, [r7, #27]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d010      	beq.n	800c77a <EE_Init+0x39a>
          {
            return FlashStatus;
 800c758:	7efb      	ldrb	r3, [r7, #27]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	e011      	b.n	800c782 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800c75e:	f000 f8b5 	bl	800c8cc <EE_Format>
 800c762:	4603      	mov	r3, r0
 800c764:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800c766:	7efb      	ldrb	r3, [r7, #27]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d008      	beq.n	800c77e <EE_Init+0x39e>
      {
        return FlashStatus;
 800c76c:	7efb      	ldrb	r3, [r7, #27]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	e007      	b.n	800c782 <EE_Init+0x3a2>
      break;
 800c772:	bf00      	nop
 800c774:	e004      	b.n	800c780 <EE_Init+0x3a0>
      break;
 800c776:	bf00      	nop
 800c778:	e002      	b.n	800c780 <EE_Init+0x3a0>
      break;
 800c77a:	bf00      	nop
 800c77c:	e000      	b.n	800c780 <EE_Init+0x3a0>
      }
      break;
 800c77e:	bf00      	nop
  }

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3728      	adds	r7, #40	@ 0x28
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08008006 	.word	0x08008006
 800c790:	20000430 	.word	0x20000430
 800c794:	20000090 	.word	0x20000090
 800c798:	08008000 	.word	0x08008000
 800c79c:	08004000 	.word	0x08004000

0800c7a0 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 800c7b0:	f245 5355 	movw	r3, #21845	@ 0x5555
 800c7b4:	81fb      	strh	r3, [r7, #14]
    
  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800c7b6:	e00d      	b.n	800c7d4 <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	881b      	ldrh	r3, [r3, #0]
 800c7bc:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800c7be:	89fb      	ldrh	r3, [r7, #14]
 800c7c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d002      	beq.n	800c7ce <EE_VerifyPageFullyErased+0x2e>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	617b      	str	r3, [r7, #20]

      break;
 800c7cc:	e009      	b.n	800c7e2 <EE_VerifyPageFullyErased+0x42>
    }
    /* Next address location */
    Address = Address + 4;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800c7da:	333f      	adds	r3, #63	@ 0x3f
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d9ea      	bls.n	800c7b8 <EE_VerifyPageFullyErased+0x18>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	b29b      	uxth	r3, r3
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	371c      	adds	r7, #28
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	6039      	str	r1, [r7, #0]
 800c7fe:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 800c800:	2300      	movs	r3, #0
 800c802:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800c804:	f245 5355 	movw	r3, #21845	@ 0x5555
 800c808:	81bb      	strh	r3, [r7, #12]
 800c80a:	2301      	movs	r3, #1
 800c80c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800c80e:	4b1c      	ldr	r3, [pc, #112]	@ (800c880 <EE_ReadVariable+0x8c>)
 800c810:	613b      	str	r3, [r7, #16]
 800c812:	4b1b      	ldr	r3, [pc, #108]	@ (800c880 <EE_ReadVariable+0x8c>)
 800c814:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800c816:	2000      	movs	r0, #0
 800c818:	f000 f8aa 	bl	800c970 <EE_FindValidPage>
 800c81c:	4603      	mov	r3, r0
 800c81e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800c820:	89fb      	ldrh	r3, [r7, #14]
 800c822:	2bab      	cmp	r3, #171	@ 0xab
 800c824:	d101      	bne.n	800c82a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800c826:	23ab      	movs	r3, #171	@ 0xab
 800c828:	e025      	b.n	800c876 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800c82a:	89fb      	ldrh	r3, [r7, #14]
 800c82c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c830:	3301      	adds	r3, #1
 800c832:	039b      	lsls	r3, r3, #14
 800c834:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800c836:	89fb      	ldrh	r3, [r7, #14]
 800c838:	3301      	adds	r3, #1
 800c83a:	039a      	lsls	r2, r3, #14
 800c83c:	4b11      	ldr	r3, [pc, #68]	@ (800c884 <EE_ReadVariable+0x90>)
 800c83e:	4413      	add	r3, r2
 800c840:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800c842:	e012      	b.n	800c86a <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800c84a:	89ba      	ldrh	r2, [r7, #12]
 800c84c:	88fb      	ldrh	r3, [r7, #6]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d108      	bne.n	800c864 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	3b02      	subs	r3, #2
 800c856:	881b      	ldrh	r3, [r3, #0]
 800c858:	b29a      	uxth	r2, r3
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	82fb      	strh	r3, [r7, #22]

      break;
 800c862:	e007      	b.n	800c874 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	3b04      	subs	r3, #4
 800c868:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	3302      	adds	r3, #2
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	429a      	cmp	r2, r3
 800c872:	d8e7      	bhi.n	800c844 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800c874:	8afb      	ldrh	r3, [r7, #22]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	08004000 	.word	0x08004000
 800c884:	08003ffe 	.word	0x08003ffe

0800c888 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	460a      	mov	r2, r1
 800c892:	80fb      	strh	r3, [r7, #6]
 800c894:	4613      	mov	r3, r2
 800c896:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800c89c:	88ba      	ldrh	r2, [r7, #4]
 800c89e:	88fb      	ldrh	r3, [r7, #6]
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 f8aa 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800c8ac:	89fb      	ldrh	r3, [r7, #14]
 800c8ae:	2b80      	cmp	r3, #128	@ 0x80
 800c8b0:	d107      	bne.n	800c8c2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800c8b2:	88ba      	ldrh	r2, [r7, #4]
 800c8b4:	88fb      	ldrh	r3, [r7, #6]
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 f901 	bl	800cac0 <EE_PageTransfer>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800c8c2:	89fb      	ldrh	r3, [r7, #14]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 800c8da:	2300      	movs	r3, #0
 800c8dc:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 800c8de:	2302      	movs	r3, #2
 800c8e0:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c8e6:	2302      	movs	r3, #2
 800c8e8:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c8ea:	481f      	ldr	r0, [pc, #124]	@ (800c968 <EE_Format+0x9c>)
 800c8ec:	f7ff ff58 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10d      	bne.n	800c912 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800c8f6:	f107 0218 	add.w	r2, r7, #24
 800c8fa:	1d3b      	adds	r3, r7, #4
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	4618      	mov	r0, r3
 800c900:	f001 ff76 	bl	800e7f0 <HAL_FLASHEx_Erase>
 800c904:	4603      	mov	r3, r0
 800c906:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800c908:	7ffb      	ldrb	r3, [r7, #31]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <EE_Format+0x46>
    {
      return FlashStatus;
 800c90e:	7ffb      	ldrb	r3, [r7, #31]
 800c910:	e025      	b.n	800c95e <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800c912:	f04f 0200 	mov.w	r2, #0
 800c916:	f04f 0300 	mov.w	r3, #0
 800c91a:	4913      	ldr	r1, [pc, #76]	@ (800c968 <EE_Format+0x9c>)
 800c91c:	2001      	movs	r0, #1
 800c91e:	f001 fdb1 	bl	800e484 <HAL_FLASH_Program>
 800c922:	4603      	mov	r3, r0
 800c924:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800c926:	7ffb      	ldrb	r3, [r7, #31]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d001      	beq.n	800c930 <EE_Format+0x64>
  {
    return FlashStatus;
 800c92c:	7ffb      	ldrb	r3, [r7, #31]
 800c92e:	e016      	b.n	800c95e <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 800c930:	2303      	movs	r3, #3
 800c932:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c934:	480d      	ldr	r0, [pc, #52]	@ (800c96c <EE_Format+0xa0>)
 800c936:	f7ff ff33 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10d      	bne.n	800c95c <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800c940:	f107 0218 	add.w	r2, r7, #24
 800c944:	1d3b      	adds	r3, r7, #4
 800c946:	4611      	mov	r1, r2
 800c948:	4618      	mov	r0, r3
 800c94a:	f001 ff51 	bl	800e7f0 <HAL_FLASHEx_Erase>
 800c94e:	4603      	mov	r3, r0
 800c950:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800c952:	7ffb      	ldrb	r3, [r7, #31]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <EE_Format+0x90>
    {
      return FlashStatus;
 800c958:	7ffb      	ldrb	r3, [r7, #31]
 800c95a:	e000      	b.n	800c95e <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3720      	adds	r7, #32
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	08004000 	.word	0x08004000
 800c96c:	08008000 	.word	0x08008000

0800c970 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	4603      	mov	r3, r0
 800c978:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800c97a:	2306      	movs	r3, #6
 800c97c:	81fb      	strh	r3, [r7, #14]
 800c97e:	2306      	movs	r3, #6
 800c980:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800c982:	4b1c      	ldr	r3, [pc, #112]	@ (800c9f4 <EE_FindValidPage+0x84>)
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800c988:	4b1b      	ldr	r3, [pc, #108]	@ (800c9f8 <EE_FindValidPage+0x88>)
 800c98a:	881b      	ldrh	r3, [r3, #0]
 800c98c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d01b      	beq.n	800c9cc <EE_FindValidPage+0x5c>
 800c994:	2b01      	cmp	r3, #1
 800c996:	d125      	bne.n	800c9e4 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800c998:	89bb      	ldrh	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d108      	bne.n	800c9b0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800c99e:	89fb      	ldrh	r3, [r7, #14]
 800c9a0:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d101      	bne.n	800c9ac <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	e01c      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e01a      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 800c9b0:	89fb      	ldrh	r3, [r7, #14]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d108      	bne.n	800c9c8 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800c9b6:	89bb      	ldrh	r3, [r7, #12]
 800c9b8:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d101      	bne.n	800c9c4 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e010      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	e00e      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800c9c8:	23ab      	movs	r3, #171	@ 0xab
 800c9ca:	e00c      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 800c9cc:	89fb      	ldrh	r3, [r7, #14]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	e007      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800c9d6:	89bb      	ldrh	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e002      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 800c9e0:	23ab      	movs	r3, #171	@ 0xab
 800c9e2:	e000      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800c9e4:	2300      	movs	r3, #0
  }
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	08004000 	.word	0x08004000
 800c9f8:	08008000 	.word	0x08008000

0800c9fc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800c9fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ca00:	b086      	sub	sp, #24
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	4603      	mov	r3, r0
 800ca06:	460a      	mov	r2, r1
 800ca08:	80fb      	strh	r3, [r7, #6]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800ca16:	4b27      	ldr	r3, [pc, #156]	@ (800cab4 <EE_VerifyPageFullWriteVariable+0xb8>)
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	4b27      	ldr	r3, [pc, #156]	@ (800cab8 <EE_VerifyPageFullWriteVariable+0xbc>)
 800ca1c:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800ca1e:	2001      	movs	r0, #1
 800ca20:	f7ff ffa6 	bl	800c970 <EE_FindValidPage>
 800ca24:	4603      	mov	r3, r0
 800ca26:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800ca28:	8a3b      	ldrh	r3, [r7, #16]
 800ca2a:	2bab      	cmp	r3, #171	@ 0xab
 800ca2c:	d101      	bne.n	800ca32 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800ca2e:	23ab      	movs	r3, #171	@ 0xab
 800ca30:	e03b      	b.n	800caaa <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800ca32:	8a3b      	ldrh	r3, [r7, #16]
 800ca34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ca38:	3301      	adds	r3, #1
 800ca3a:	039b      	lsls	r3, r3, #14
 800ca3c:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800ca3e:	8a3b      	ldrh	r3, [r7, #16]
 800ca40:	3301      	adds	r3, #1
 800ca42:	039a      	lsls	r2, r3, #14
 800ca44:	4b1d      	ldr	r3, [pc, #116]	@ (800cabc <EE_VerifyPageFullWriteVariable+0xc0>)
 800ca46:	4413      	add	r3, r2
 800ca48:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800ca4a:	e029      	b.n	800caa0 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca54:	d121      	bne.n	800ca9a <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 800ca56:	88bb      	ldrh	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	4615      	mov	r5, r2
 800ca5e:	4622      	mov	r2, r4
 800ca60:	462b      	mov	r3, r5
 800ca62:	6979      	ldr	r1, [r7, #20]
 800ca64:	2001      	movs	r0, #1
 800ca66:	f001 fd0d 	bl	800e484 <HAL_FLASH_Program>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800ca6e:	7cfb      	ldrb	r3, [r7, #19]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 800ca74:	7cfb      	ldrb	r3, [r7, #19]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	e017      	b.n	800caaa <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	1c99      	adds	r1, r3, #2
 800ca7e:	88fb      	ldrh	r3, [r7, #6]
 800ca80:	2200      	movs	r2, #0
 800ca82:	4698      	mov	r8, r3
 800ca84:	4691      	mov	r9, r2
 800ca86:	4642      	mov	r2, r8
 800ca88:	464b      	mov	r3, r9
 800ca8a:	2001      	movs	r0, #1
 800ca8c:	f001 fcfa 	bl	800e484 <HAL_FLASH_Program>
 800ca90:	4603      	mov	r3, r0
 800ca92:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800ca94:	7cfb      	ldrb	r3, [r7, #19]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	e007      	b.n	800caaa <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800caa0:	697a      	ldr	r2, [r7, #20]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d3d1      	bcc.n	800ca4c <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800caa8:	2380      	movs	r3, #128	@ 0x80
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cab4:	08004000 	.word	0x08004000
 800cab8:	08008000 	.word	0x08008000
 800cabc:	08003fff 	.word	0x08003fff

0800cac0 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b08c      	sub	sp, #48	@ 0x30
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	4603      	mov	r3, r0
 800cac8:	460a      	mov	r2, r1
 800caca:	80fb      	strh	r3, [r7, #6]
 800cacc:	4613      	mov	r3, r2
 800cace:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800cad6:	4b54      	ldr	r3, [pc, #336]	@ (800cc28 <EE_PageTransfer+0x168>)
 800cad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t OldPageId=0;
 800cada:	2300      	movs	r3, #0
 800cadc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cae2:	2300      	movs	r3, #0
 800cae4:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800caea:	2300      	movs	r3, #0
 800caec:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800caf2:	2000      	movs	r0, #0
 800caf4:	f7ff ff3c 	bl	800c970 <EE_FindValidPage>
 800caf8:	4603      	mov	r3, r0
 800cafa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 800cafc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d104      	bne.n	800cb0c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 800cb02:	4b49      	ldr	r3, [pc, #292]	@ (800cc28 <EE_PageTransfer+0x168>)
 800cb04:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800cb06:	2303      	movs	r3, #3
 800cb08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cb0a:	e009      	b.n	800cb20 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 800cb0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d104      	bne.n	800cb1c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 800cb12:	4b46      	ldr	r3, [pc, #280]	@ (800cc2c <EE_PageTransfer+0x16c>)
 800cb14:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 800cb16:	2302      	movs	r3, #2
 800cb18:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cb1a:	e001      	b.n	800cb20 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800cb1c:	23ab      	movs	r3, #171	@ 0xab
 800cb1e:	e07e      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 800cb20:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800cb24:	f04f 0300 	mov.w	r3, #0
 800cb28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	f001 fcaa 	bl	800e484 <HAL_FLASH_Program>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cb36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 800cb3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	e06b      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800cb46:	88ba      	ldrh	r2, [r7, #4]
 800cb48:	88fb      	ldrh	r3, [r7, #6]
 800cb4a:	4611      	mov	r1, r2
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7ff ff55 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800cb52:	4603      	mov	r3, r0
 800cb54:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800cb56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 800cb5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb5e:	e05e      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800cb60:	2300      	movs	r3, #0
 800cb62:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb64:	e027      	b.n	800cbb6 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800cb66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb68:	4a31      	ldr	r2, [pc, #196]	@ (800cc30 <EE_PageTransfer+0x170>)
 800cb6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb6e:	88fa      	ldrh	r2, [r7, #6]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d01d      	beq.n	800cbb0 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800cb74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb76:	4a2e      	ldr	r2, [pc, #184]	@ (800cc30 <EE_PageTransfer+0x170>)
 800cb78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb7c:	492d      	ldr	r1, [pc, #180]	@ (800cc34 <EE_PageTransfer+0x174>)
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff fe38 	bl	800c7f4 <EE_ReadVariable>
 800cb84:	4603      	mov	r3, r0
 800cb86:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800cb88:	8c3b      	ldrh	r3, [r7, #32]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d010      	beq.n	800cbb0 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800cb8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb90:	4a27      	ldr	r2, [pc, #156]	@ (800cc30 <EE_PageTransfer+0x170>)
 800cb92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb96:	4a27      	ldr	r2, [pc, #156]	@ (800cc34 <EE_PageTransfer+0x174>)
 800cb98:	8812      	ldrh	r2, [r2, #0]
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff ff2d 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800cba2:	4603      	mov	r3, r0
 800cba4:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800cba6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 800cbac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cbae:	e036      	b.n	800cc1e <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800cbb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cbb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbb8:	2b31      	cmp	r3, #49	@ 0x31
 800cbba:	d9d4      	bls.n	800cb66 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 800cbc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cbc2:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800cbc8:	2302      	movs	r3, #2
 800cbca:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 800cbcc:	f107 021c 	add.w	r2, r7, #28
 800cbd0:	f107 0308 	add.w	r3, r7, #8
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f001 fe0a 	bl	800e7f0 <HAL_FLASHEx_Erase>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cbe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 800cbea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	e015      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	f04f 0300 	mov.w	r3, #0
 800cbfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbfc:	2001      	movs	r0, #1
 800cbfe:	f001 fc41 	bl	800e484 <HAL_FLASH_Program>
 800cc02:	4603      	mov	r3, r0
 800cc04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cc08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 800cc10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	e002      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 800cc18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc1c:	b29b      	uxth	r3, r3
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3730      	adds	r7, #48	@ 0x30
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	08004000 	.word	0x08004000
 800cc2c:	08008000 	.word	0x08008000
 800cc30:	20000430 	.word	0x20000430
 800cc34:	20000090 	.word	0x20000090

0800cc38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4a07      	ldr	r2, [pc, #28]	@ (800cc64 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	4a06      	ldr	r2, [pc, #24]	@ (800cc68 <vApplicationGetIdleTaskMemory+0x30>)
 800cc4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2280      	movs	r2, #128	@ 0x80
 800cc54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800cc56:	bf00      	nop
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	20000094 	.word	0x20000094
 800cc68:	20000134 	.word	0x20000134

0800cc6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cc6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc70:	b0ba      	sub	sp, #232	@ 0xe8
 800cc72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cc74:	f001 fa10 	bl	800e098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cc78:	f000 f980 	bl	800cf7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cc7c:	f000 faa4 	bl	800d1c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800cc80:	f000 fa78 	bl	800d174 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800cc84:	f000 f9fa 	bl	800d07c <MX_TIM1_Init>
  MX_CRC_Init();
 800cc88:	f000 f9e4 	bl	800d054 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800cc8c:	f000 fa48 	bl	800d120 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800cc90:	48a9      	ldr	r0, [pc, #676]	@ (800cf38 <main+0x2cc>)
 800cc92:	f000 ffad 	bl	800dbf0 <RetargetInit>
  printf("F401: Starting up.....\r\n");
 800cc96:	48a9      	ldr	r0, [pc, #676]	@ (800cf3c <main+0x2d0>)
 800cc98:	f005 fb58 	bl	801234c <puts>

  // Write initial data to EEPROM
  HAL_Delay(1000);
 800cc9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800cca0:	f001 fa6c 	bl	800e17c <HAL_Delay>
  char data[50] = "This is the original data";
 800cca4:	4ba6      	ldr	r3, [pc, #664]	@ (800cf40 <main+0x2d4>)
 800cca6:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800ccaa:	461d      	mov	r5, r3
 800ccac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ccb4:	c403      	stmia	r4!, {r0, r1}
 800ccb6:	8022      	strh	r2, [r4, #0]
 800ccb8:	f107 03be 	add.w	r3, r7, #190	@ 0xbe
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	605a      	str	r2, [r3, #4]
 800ccc2:	609a      	str	r2, [r3, #8]
 800ccc4:	60da      	str	r2, [r3, #12]
 800ccc6:	611a      	str	r2, [r3, #16]
 800ccc8:	615a      	str	r2, [r3, #20]
  dataLengthOrig = strlen(data);
 800ccca:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7ff fa06 	bl	800c0e0 <strlen>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	4b9a      	ldr	r3, [pc, #616]	@ (800cf44 <main+0x2d8>)
 800ccda:	701a      	strb	r2, [r3, #0]
	if (EE_Init() != EE_OK) {
		Error_Handler();
	}*/

	// Fill EEPROM variables addresses
	uint16_t VirtAddVarTab[dataLengthOrig];
 800ccdc:	4b99      	ldr	r3, [pc, #612]	@ (800cf44 <main+0x2d8>)
 800ccde:	7819      	ldrb	r1, [r3, #0]
 800cce0:	460b      	mov	r3, r1
 800cce2:	3b01      	subs	r3, #1
 800cce4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cce8:	b2cb      	uxtb	r3, r1
 800ccea:	2200      	movs	r2, #0
 800ccec:	469a      	mov	sl, r3
 800ccee:	4693      	mov	fp, r2
 800ccf0:	f04f 0200 	mov.w	r2, #0
 800ccf4:	f04f 0300 	mov.w	r3, #0
 800ccf8:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800ccfc:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800cd00:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800cd04:	b2cb      	uxtb	r3, r1
 800cd06:	2200      	movs	r2, #0
 800cd08:	4698      	mov	r8, r3
 800cd0a:	4691      	mov	r9, r2
 800cd0c:	f04f 0200 	mov.w	r2, #0
 800cd10:	f04f 0300 	mov.w	r3, #0
 800cd14:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800cd18:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800cd1c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800cd20:	460b      	mov	r3, r1
 800cd22:	005b      	lsls	r3, r3, #1
 800cd24:	3307      	adds	r3, #7
 800cd26:	08db      	lsrs	r3, r3, #3
 800cd28:	00db      	lsls	r3, r3, #3
 800cd2a:	ebad 0d03 	sub.w	sp, sp, r3
 800cd2e:	466b      	mov	r3, sp
 800cd30:	3301      	adds	r3, #1
 800cd32:	085b      	lsrs	r3, r3, #1
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	for (uint16_t i = 1; i <= dataLengthOrig; i++) {
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
 800cd40:	e00d      	b.n	800cd5e <main+0xf2>
		VirtAddVarTab[i - 1] = i;
 800cd42:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 800cd46:	1e5a      	subs	r2, r3, #1
 800cd48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cd4c:	f8b7 10e6 	ldrh.w	r1, [r7, #230]	@ 0xe6
 800cd50:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 1; i <= dataLengthOrig; i++) {
 800cd54:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 800cd58:	3301      	adds	r3, #1
 800cd5a:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
 800cd5e:	4b79      	ldr	r3, [pc, #484]	@ (800cf44 <main+0x2d8>)
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	461a      	mov	r2, r3
 800cd64:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d9ea      	bls.n	800cd42 <main+0xd6>
			Error_Handler();
		}
	}*/
	uint8_t VarDataTabRead[NB_OF_VAR];

	uint8_t dataLength = strlen(data);
 800cd6c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff f9b5 	bl	800c0e0 <strlen>
 800cd76:	4603      	mov	r3, r0
 800cd78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

		// Unlock the Flash Program Erase controller
		HAL_FLASH_Unlock();
 800cd7c:	f001 fbd6 	bl	800e52c <HAL_FLASH_Unlock>

		/* EEPROM Init */
		if (EE_Init() != EE_OK) {
 800cd80:	f7ff fb2e 	bl	800c3e0 <EE_Init>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <main+0x122>
			Error_Handler();
 800cd8a:	f000 ff21 	bl	800dbd0 <Error_Handler>
		}

		// Fill EEPROM variables addresses
		for (uint16_t i = 1; i <= dataLength; i++) {
 800cd8e:	2301      	movs	r3, #1
 800cd90:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
 800cd94:	e00d      	b.n	800cdb2 <main+0x146>
			VirtAddVarTab[i - 1] = i;
 800cd96:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 800cd9a:	1e5a      	subs	r2, r3, #1
 800cd9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cda0:	f8b7 10e4 	ldrh.w	r1, [r7, #228]	@ 0xe4
 800cda4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint16_t i = 1; i <= dataLength; i++) {
 800cda8:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 800cdac:	3301      	adds	r3, #1
 800cdae:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
 800cdb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d9ea      	bls.n	800cd96 <main+0x12a>
		}

		// Store Values in EEPROM emulation
		HAL_UART_Transmit(&huart2, "Store values\n\r", 14, 100);
 800cdc0:	2364      	movs	r3, #100	@ 0x64
 800cdc2:	220e      	movs	r2, #14
 800cdc4:	4960      	ldr	r1, [pc, #384]	@ (800cf48 <main+0x2dc>)
 800cdc6:	485c      	ldr	r0, [pc, #368]	@ (800cf38 <main+0x2cc>)
 800cdc8:	f002 ff96 	bl	800fcf8 <HAL_UART_Transmit>
		for (uint16_t i = 0; i < dataLength; i++) {
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
 800cdd2:	e019      	b.n	800ce08 <main+0x19c>
			/* Sequence 1 */
			if ((EE_WriteVariable(VirtAddVarTab[i], data[i]))
 800cdd4:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 800cdd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cddc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800cde0:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 800cde4:	33e8      	adds	r3, #232	@ 0xe8
 800cde6:	443b      	add	r3, r7
 800cde8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800cdec:	4619      	mov	r1, r3
 800cdee:	4610      	mov	r0, r2
 800cdf0:	f7ff fd4a 	bl	800c888 <EE_WriteVariable>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <main+0x192>
					!= HAL_OK) {
				Error_Handler();
 800cdfa:	f000 fee9 	bl	800dbd0 <Error_Handler>
		for (uint16_t i = 0; i < dataLength; i++) {
 800cdfe:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 800ce02:	3301      	adds	r3, #1
 800ce04:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
 800ce08:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d3de      	bcc.n	800cdd4 <main+0x168>
			}
		}

		// Read values
		HAL_UART_Transmit(&huart2, "Read values\n\r", 13, 100);
 800ce16:	2364      	movs	r3, #100	@ 0x64
 800ce18:	220d      	movs	r2, #13
 800ce1a:	494c      	ldr	r1, [pc, #304]	@ (800cf4c <main+0x2e0>)
 800ce1c:	4846      	ldr	r0, [pc, #280]	@ (800cf38 <main+0x2cc>)
 800ce1e:	f002 ff6b 	bl	800fcf8 <HAL_UART_Transmit>
		for (uint16_t i = 0; i < dataLength; i++) {
 800ce22:	2300      	movs	r3, #0
 800ce24:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
 800ce28:	e017      	b.n	800ce5a <main+0x1ee>
			if ((EE_ReadVariable(VirtAddVarTab[i],
 800ce2a:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	@ 0xe0
 800ce2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce32:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
					&VarDataTabRead[i])) != HAL_OK) {
 800ce36:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 800ce3a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800ce3e:	4413      	add	r3, r2
			if ((EE_ReadVariable(VirtAddVarTab[i],
 800ce40:	4619      	mov	r1, r3
 800ce42:	f7ff fcd7 	bl	800c7f4 <EE_ReadVariable>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d001      	beq.n	800ce50 <main+0x1e4>
				Error_Handler();
 800ce4c:	f000 fec0 	bl	800dbd0 <Error_Handler>
		for (uint16_t i = 0; i < dataLength; i++) {
 800ce50:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 800ce54:	3301      	adds	r3, #1
 800ce56:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
 800ce5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	f8b7 20e0 	ldrh.w	r2, [r7, #224]	@ 0xe0
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d3e0      	bcc.n	800ce2a <main+0x1be>
			}
		}

		HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 800ce68:	2364      	movs	r3, #100	@ 0x64
 800ce6a:	220c      	movs	r2, #12
 800ce6c:	4938      	ldr	r1, [pc, #224]	@ (800cf50 <main+0x2e4>)
 800ce6e:	4832      	ldr	r0, [pc, #200]	@ (800cf38 <main+0x2cc>)
 800ce70:	f002 ff42 	bl	800fcf8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, VarDataTabRead, dataLength, 1000);
 800ce74:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ce78:	b29a      	uxth	r2, r3
 800ce7a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800ce7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ce82:	482d      	ldr	r0, [pc, #180]	@ (800cf38 <main+0x2cc>)
 800ce84:	f002 ff38 	bl	800fcf8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800ce88:	2364      	movs	r3, #100	@ 0x64
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	4931      	ldr	r1, [pc, #196]	@ (800cf54 <main+0x2e8>)
 800ce8e:	482a      	ldr	r0, [pc, #168]	@ (800cf38 <main+0x2cc>)
 800ce90:	f002 ff32 	bl	800fcf8 <HAL_UART_Transmit>

	printf("Successfully saved original data to EEPROM \r\n");
 800ce94:	4830      	ldr	r0, [pc, #192]	@ (800cf58 <main+0x2ec>)
 800ce96:	f005 fa59 	bl	801234c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800ce9a:	4b30      	ldr	r3, [pc, #192]	@ (800cf5c <main+0x2f0>)
 800ce9c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800cea0:	461d      	mov	r5, r3
 800cea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cea6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ceaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ceae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f003 fb90 	bl	80105da <osThreadCreate>
 800ceba:	4603      	mov	r3, r0
 800cebc:	4a28      	ldr	r2, [pc, #160]	@ (800cf60 <main+0x2f4>)
 800cebe:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 128);
 800cec0:	4b28      	ldr	r3, [pc, #160]	@ (800cf64 <main+0x2f8>)
 800cec2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800cec6:	461d      	mov	r5, r3
 800cec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ceca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cecc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ced0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800ced4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ced8:	2100      	movs	r1, #0
 800ceda:	4618      	mov	r0, r3
 800cedc:	f003 fb7d 	bl	80105da <osThreadCreate>
 800cee0:	4603      	mov	r3, r0
 800cee2:	4a21      	ldr	r2, [pc, #132]	@ (800cf68 <main+0x2fc>)
 800cee4:	6013      	str	r3, [r2, #0]

  /* definition and creation of statusTask */
  osThreadDef(statusTask, StartStatusTask, osPriorityNormal, 0, 128);
 800cee6:	4b21      	ldr	r3, [pc, #132]	@ (800cf6c <main+0x300>)
 800cee8:	f107 041c 	add.w	r4, r7, #28
 800ceec:	461d      	mov	r5, r3
 800ceee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cef2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  statusTaskHandle = osThreadCreate(osThread(statusTask), NULL);
 800cefa:	f107 031c 	add.w	r3, r7, #28
 800cefe:	2100      	movs	r1, #0
 800cf00:	4618      	mov	r0, r3
 800cf02:	f003 fb6a 	bl	80105da <osThreadCreate>
 800cf06:	4603      	mov	r3, r0
 800cf08:	4a19      	ldr	r2, [pc, #100]	@ (800cf70 <main+0x304>)
 800cf0a:	6013      	str	r3, [r2, #0]

  /* definition and creation of updateTask */
  osThreadDef(updateTask, StartUpdateTask, osPriorityNormal, 0, 128);
 800cf0c:	4b19      	ldr	r3, [pc, #100]	@ (800cf74 <main+0x308>)
 800cf0e:	463c      	mov	r4, r7
 800cf10:	461d      	mov	r5, r3
 800cf12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cf14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cf16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cf1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  updateTaskHandle = osThreadCreate(osThread(updateTask), NULL);
 800cf1e:	463b      	mov	r3, r7
 800cf20:	2100      	movs	r1, #0
 800cf22:	4618      	mov	r0, r3
 800cf24:	f003 fb59 	bl	80105da <osThreadCreate>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	4a13      	ldr	r2, [pc, #76]	@ (800cf78 <main+0x30c>)
 800cf2c:	6013      	str	r3, [r2, #0]
  //vTaskSuspend(receiveTaskHandle);
  //vTaskSuspend(updateTaskHandle);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800cf2e:	f003 fb4d 	bl	80105cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800cf32:	bf00      	nop
 800cf34:	e7fd      	b.n	800cf32 <main+0x2c6>
 800cf36:	bf00      	nop
 800cf38:	200003cc 	.word	0x200003cc
 800cf3c:	08013370 	.word	0x08013370
 800cf40:	080133ec 	.word	0x080133ec
 800cf44:	20000424 	.word	0x20000424
 800cf48:	08013388 	.word	0x08013388
 800cf4c:	08013398 	.word	0x08013398
 800cf50:	080133a8 	.word	0x080133a8
 800cf54:	080133b8 	.word	0x080133b8
 800cf58:	080133bc 	.word	0x080133bc
 800cf5c:	0801342c 	.word	0x0801342c
 800cf60:	20000414 	.word	0x20000414
 800cf64:	08013454 	.word	0x08013454
 800cf68:	20000418 	.word	0x20000418
 800cf6c:	0801347c 	.word	0x0801347c
 800cf70:	2000041c 	.word	0x2000041c
 800cf74:	080134a4 	.word	0x080134a4
 800cf78:	20000420 	.word	0x20000420

0800cf7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b094      	sub	sp, #80	@ 0x50
 800cf80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cf82:	f107 0320 	add.w	r3, r7, #32
 800cf86:	2230      	movs	r2, #48	@ 0x30
 800cf88:	2100      	movs	r1, #0
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f005 fbf4 	bl	8012778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cf90:	f107 030c 	add.w	r3, r7, #12
 800cf94:	2200      	movs	r2, #0
 800cf96:	601a      	str	r2, [r3, #0]
 800cf98:	605a      	str	r2, [r3, #4]
 800cf9a:	609a      	str	r2, [r3, #8]
 800cf9c:	60da      	str	r2, [r3, #12]
 800cf9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	60bb      	str	r3, [r7, #8]
 800cfa4:	4b29      	ldr	r3, [pc, #164]	@ (800d04c <SystemClock_Config+0xd0>)
 800cfa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfa8:	4a28      	ldr	r2, [pc, #160]	@ (800d04c <SystemClock_Config+0xd0>)
 800cfaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cfae:	6413      	str	r3, [r2, #64]	@ 0x40
 800cfb0:	4b26      	ldr	r3, [pc, #152]	@ (800d04c <SystemClock_Config+0xd0>)
 800cfb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cfb8:	60bb      	str	r3, [r7, #8]
 800cfba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	607b      	str	r3, [r7, #4]
 800cfc0:	4b23      	ldr	r3, [pc, #140]	@ (800d050 <SystemClock_Config+0xd4>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800cfc8:	4a21      	ldr	r2, [pc, #132]	@ (800d050 <SystemClock_Config+0xd4>)
 800cfca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfce:	6013      	str	r3, [r2, #0]
 800cfd0:	4b1f      	ldr	r3, [pc, #124]	@ (800d050 <SystemClock_Config+0xd4>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cfd8:	607b      	str	r3, [r7, #4]
 800cfda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800cfdc:	2302      	movs	r3, #2
 800cfde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800cfe4:	2310      	movs	r3, #16
 800cfe6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cfe8:	2302      	movs	r3, #2
 800cfea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800cfec:	2300      	movs	r3, #0
 800cfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800cff0:	2310      	movs	r3, #16
 800cff2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800cff4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800cff8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800cffa:	2304      	movs	r3, #4
 800cffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800cffe:	2307      	movs	r3, #7
 800d000:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d002:	f107 0320 	add.w	r3, r7, #32
 800d006:	4618      	mov	r0, r3
 800d008:	f001 fee4 	bl	800edd4 <HAL_RCC_OscConfig>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d001      	beq.n	800d016 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800d012:	f000 fddd 	bl	800dbd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d016:	230f      	movs	r3, #15
 800d018:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d01a:	2302      	movs	r3, #2
 800d01c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d01e:	2300      	movs	r3, #0
 800d020:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d022:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d026:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d028:	2300      	movs	r3, #0
 800d02a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d02c:	f107 030c 	add.w	r3, r7, #12
 800d030:	2102      	movs	r1, #2
 800d032:	4618      	mov	r0, r3
 800d034:	f002 f946 	bl	800f2c4 <HAL_RCC_ClockConfig>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800d03e:	f000 fdc7 	bl	800dbd0 <Error_Handler>
  }
}
 800d042:	bf00      	nop
 800d044:	3750      	adds	r7, #80	@ 0x50
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
 800d04a:	bf00      	nop
 800d04c:	40023800 	.word	0x40023800
 800d050:	40007000 	.word	0x40007000

0800d054 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800d058:	4b06      	ldr	r3, [pc, #24]	@ (800d074 <MX_CRC_Init+0x20>)
 800d05a:	4a07      	ldr	r2, [pc, #28]	@ (800d078 <MX_CRC_Init+0x24>)
 800d05c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800d05e:	4805      	ldr	r0, [pc, #20]	@ (800d074 <MX_CRC_Init+0x20>)
 800d060:	f001 f9c1 	bl	800e3e6 <HAL_CRC_Init>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800d06a:	f000 fdb1 	bl	800dbd0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800d06e:	bf00      	nop
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	20000334 	.word	0x20000334
 800d078:	40023000 	.word	0x40023000

0800d07c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b086      	sub	sp, #24
 800d080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d082:	f107 0308 	add.w	r3, r7, #8
 800d086:	2200      	movs	r2, #0
 800d088:	601a      	str	r2, [r3, #0]
 800d08a:	605a      	str	r2, [r3, #4]
 800d08c:	609a      	str	r2, [r3, #8]
 800d08e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d090:	463b      	mov	r3, r7
 800d092:	2200      	movs	r2, #0
 800d094:	601a      	str	r2, [r3, #0]
 800d096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800d098:	4b1f      	ldr	r3, [pc, #124]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d09a:	4a20      	ldr	r2, [pc, #128]	@ (800d11c <MX_TIM1_Init+0xa0>)
 800d09c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800d09e:	4b1e      	ldr	r3, [pc, #120]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d0a0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800d0a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d0a6:	4b1c      	ldr	r3, [pc, #112]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 800d0ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d0ae:	f245 2207 	movw	r2, #20999	@ 0x5207
 800d0b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d0b4:	4b18      	ldr	r3, [pc, #96]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d0ba:	4b17      	ldr	r3, [pc, #92]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d0c0:	4b15      	ldr	r3, [pc, #84]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d0c2:	2280      	movs	r2, #128	@ 0x80
 800d0c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d0c6:	4814      	ldr	r0, [pc, #80]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d0c8:	f002 fb1c 	bl	800f704 <HAL_TIM_Base_Init>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d001      	beq.n	800d0d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800d0d2:	f000 fd7d 	bl	800dbd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d0d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d0da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d0dc:	f107 0308 	add.w	r3, r7, #8
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	480d      	ldr	r0, [pc, #52]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d0e4:	f002 fb5d 	bl	800f7a2 <HAL_TIM_ConfigClockSource>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800d0ee:	f000 fd6f 	bl	800dbd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d0fa:	463b      	mov	r3, r7
 800d0fc:	4619      	mov	r1, r3
 800d0fe:	4806      	ldr	r0, [pc, #24]	@ (800d118 <MX_TIM1_Init+0x9c>)
 800d100:	f002 fd3c 	bl	800fb7c <HAL_TIMEx_MasterConfigSynchronization>
 800d104:	4603      	mov	r3, r0
 800d106:	2b00      	cmp	r3, #0
 800d108:	d001      	beq.n	800d10e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800d10a:	f000 fd61 	bl	800dbd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800d10e:	bf00      	nop
 800d110:	3718      	adds	r7, #24
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	2000033c 	.word	0x2000033c
 800d11c:	40010000 	.word	0x40010000

0800d120 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d124:	4b11      	ldr	r3, [pc, #68]	@ (800d16c <MX_USART1_UART_Init+0x4c>)
 800d126:	4a12      	ldr	r2, [pc, #72]	@ (800d170 <MX_USART1_UART_Init+0x50>)
 800d128:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d12a:	4b10      	ldr	r3, [pc, #64]	@ (800d16c <MX_USART1_UART_Init+0x4c>)
 800d12c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d130:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d132:	4b0e      	ldr	r3, [pc, #56]	@ (800d16c <MX_USART1_UART_Init+0x4c>)
 800d134:	2200      	movs	r2, #0
 800d136:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d138:	4b0c      	ldr	r3, [pc, #48]	@ (800d16c <MX_USART1_UART_Init+0x4c>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d13e:	4b0b      	ldr	r3, [pc, #44]	@ (800d16c <MX_USART1_UART_Init+0x4c>)
 800d140:	2200      	movs	r2, #0
 800d142:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d144:	4b09      	ldr	r3, [pc, #36]	@ (800d16c <MX_USART1_UART_Init+0x4c>)
 800d146:	220c      	movs	r2, #12
 800d148:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d14a:	4b08      	ldr	r3, [pc, #32]	@ (800d16c <MX_USART1_UART_Init+0x4c>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d150:	4b06      	ldr	r3, [pc, #24]	@ (800d16c <MX_USART1_UART_Init+0x4c>)
 800d152:	2200      	movs	r2, #0
 800d154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d156:	4805      	ldr	r0, [pc, #20]	@ (800d16c <MX_USART1_UART_Init+0x4c>)
 800d158:	f002 fd7e 	bl	800fc58 <HAL_UART_Init>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d001      	beq.n	800d166 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d162:	f000 fd35 	bl	800dbd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d166:	bf00      	nop
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	20000384 	.word	0x20000384
 800d170:	40011000 	.word	0x40011000

0800d174 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d178:	4b11      	ldr	r3, [pc, #68]	@ (800d1c0 <MX_USART2_UART_Init+0x4c>)
 800d17a:	4a12      	ldr	r2, [pc, #72]	@ (800d1c4 <MX_USART2_UART_Init+0x50>)
 800d17c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d17e:	4b10      	ldr	r3, [pc, #64]	@ (800d1c0 <MX_USART2_UART_Init+0x4c>)
 800d180:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d186:	4b0e      	ldr	r3, [pc, #56]	@ (800d1c0 <MX_USART2_UART_Init+0x4c>)
 800d188:	2200      	movs	r2, #0
 800d18a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d18c:	4b0c      	ldr	r3, [pc, #48]	@ (800d1c0 <MX_USART2_UART_Init+0x4c>)
 800d18e:	2200      	movs	r2, #0
 800d190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d192:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c0 <MX_USART2_UART_Init+0x4c>)
 800d194:	2200      	movs	r2, #0
 800d196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d198:	4b09      	ldr	r3, [pc, #36]	@ (800d1c0 <MX_USART2_UART_Init+0x4c>)
 800d19a:	220c      	movs	r2, #12
 800d19c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d19e:	4b08      	ldr	r3, [pc, #32]	@ (800d1c0 <MX_USART2_UART_Init+0x4c>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d1a4:	4b06      	ldr	r3, [pc, #24]	@ (800d1c0 <MX_USART2_UART_Init+0x4c>)
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d1aa:	4805      	ldr	r0, [pc, #20]	@ (800d1c0 <MX_USART2_UART_Init+0x4c>)
 800d1ac:	f002 fd54 	bl	800fc58 <HAL_UART_Init>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d001      	beq.n	800d1ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d1b6:	f000 fd0b 	bl	800dbd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d1ba:	bf00      	nop
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	200003cc 	.word	0x200003cc
 800d1c4:	40004400 	.word	0x40004400

0800d1c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08a      	sub	sp, #40	@ 0x28
 800d1cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d1ce:	f107 0314 	add.w	r3, r7, #20
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	605a      	str	r2, [r3, #4]
 800d1d8:	609a      	str	r2, [r3, #8]
 800d1da:	60da      	str	r2, [r3, #12]
 800d1dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d1de:	2300      	movs	r3, #0
 800d1e0:	613b      	str	r3, [r7, #16]
 800d1e2:	4b31      	ldr	r3, [pc, #196]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d1e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e6:	4a30      	ldr	r2, [pc, #192]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d1e8:	f043 0304 	orr.w	r3, r3, #4
 800d1ec:	6313      	str	r3, [r2, #48]	@ 0x30
 800d1ee:	4b2e      	ldr	r3, [pc, #184]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d1f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1f2:	f003 0304 	and.w	r3, r3, #4
 800d1f6:	613b      	str	r3, [r7, #16]
 800d1f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	60fb      	str	r3, [r7, #12]
 800d1fe:	4b2a      	ldr	r3, [pc, #168]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d202:	4a29      	ldr	r2, [pc, #164]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d208:	6313      	str	r3, [r2, #48]	@ 0x30
 800d20a:	4b27      	ldr	r3, [pc, #156]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d20c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d212:	60fb      	str	r3, [r7, #12]
 800d214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d216:	2300      	movs	r3, #0
 800d218:	60bb      	str	r3, [r7, #8]
 800d21a:	4b23      	ldr	r3, [pc, #140]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d21c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d21e:	4a22      	ldr	r2, [pc, #136]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d220:	f043 0301 	orr.w	r3, r3, #1
 800d224:	6313      	str	r3, [r2, #48]	@ 0x30
 800d226:	4b20      	ldr	r3, [pc, #128]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	60bb      	str	r3, [r7, #8]
 800d230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d232:	2300      	movs	r3, #0
 800d234:	607b      	str	r3, [r7, #4]
 800d236:	4b1c      	ldr	r3, [pc, #112]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d23a:	4a1b      	ldr	r2, [pc, #108]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d23c:	f043 0302 	orr.w	r3, r3, #2
 800d240:	6313      	str	r3, [r2, #48]	@ 0x30
 800d242:	4b19      	ldr	r3, [pc, #100]	@ (800d2a8 <MX_GPIO_Init+0xe0>)
 800d244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d246:	f003 0302 	and.w	r3, r3, #2
 800d24a:	607b      	str	r3, [r7, #4]
 800d24c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800d24e:	2200      	movs	r2, #0
 800d250:	2120      	movs	r1, #32
 800d252:	4816      	ldr	r0, [pc, #88]	@ (800d2ac <MX_GPIO_Init+0xe4>)
 800d254:	f001 fd72 	bl	800ed3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800d258:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d25c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d25e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d264:	2300      	movs	r3, #0
 800d266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800d268:	f107 0314 	add.w	r3, r7, #20
 800d26c:	4619      	mov	r1, r3
 800d26e:	4810      	ldr	r0, [pc, #64]	@ (800d2b0 <MX_GPIO_Init+0xe8>)
 800d270:	f001 fbe0 	bl	800ea34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800d274:	2320      	movs	r3, #32
 800d276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d278:	2301      	movs	r3, #1
 800d27a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d27c:	2300      	movs	r3, #0
 800d27e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d280:	2300      	movs	r3, #0
 800d282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800d284:	f107 0314 	add.w	r3, r7, #20
 800d288:	4619      	mov	r1, r3
 800d28a:	4808      	ldr	r0, [pc, #32]	@ (800d2ac <MX_GPIO_Init+0xe4>)
 800d28c:	f001 fbd2 	bl	800ea34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800d290:	2200      	movs	r2, #0
 800d292:	2105      	movs	r1, #5
 800d294:	2028      	movs	r0, #40	@ 0x28
 800d296:	f001 f870 	bl	800e37a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d29a:	2028      	movs	r0, #40	@ 0x28
 800d29c:	f001 f889 	bl	800e3b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d2a0:	bf00      	nop
 800d2a2:	3728      	adds	r7, #40	@ 0x28
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	40023800 	.word	0x40023800
 800d2ac:	40020000 	.word	0x40020000
 800d2b0:	40020800 	.word	0x40020800

0800d2b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// Interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af02      	add	r7, sp, #8
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	80fb      	strh	r3, [r7, #6]
	uint32_t ulStatusRegister;
  // Execute when blue push button pressed
  if(GPIO_Pin == GPIO_PIN_13) {
 800d2be:	88fb      	ldrh	r3, [r7, #6]
 800d2c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d2c4:	d10c      	bne.n	800d2e0 <HAL_GPIO_EXTI_Callback+0x2c>
	  printf("F401: Button pressed, starting receive task \r\n");
 800d2c6:	4809      	ldr	r0, [pc, #36]	@ (800d2ec <HAL_GPIO_EXTI_Callback+0x38>)
 800d2c8:	f005 f840 	bl	801234c <puts>

	  //ulStatusRegister = ulReadPeripheralInterruptStatus();
	  //vClearPeripheralInterruptStatus( ulStatusRegister );
	  xTaskNotifyFromISR( receiveTaskHandle, 0x01, eSetBits, NULL );
 800d2cc:	4b08      	ldr	r3, [pc, #32]	@ (800d2f0 <HAL_GPIO_EXTI_Callback+0x3c>)
 800d2ce:	6818      	ldr	r0, [r3, #0]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	2101      	movs	r1, #1
 800d2da:	f004 f913 	bl	8011504 <xTaskGenericNotifyFromISR>
	  //vTaskResume(receiveTaskHandle);
  } else {
      __NOP();
  }
}
 800d2de:	e000      	b.n	800d2e2 <HAL_GPIO_EXTI_Callback+0x2e>
      __NOP();
 800d2e0:	bf00      	nop
}
 800d2e2:	bf00      	nop
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	080134c0 	.word	0x080134c0
 800d2f0:	20000418 	.word	0x20000418

0800d2f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800d2fc:	2120      	movs	r1, #32
 800d2fe:	4804      	ldr	r0, [pc, #16]	@ (800d310 <StartDefaultTask+0x1c>)
 800d300:	f001 fd35 	bl	800ed6e <HAL_GPIO_TogglePin>
	  //printf("F401: Normal operation \r\n");
	  osDelay(200);
 800d304:	20c8      	movs	r0, #200	@ 0xc8
 800d306:	f003 f9b4 	bl	8010672 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800d30a:	bf00      	nop
 800d30c:	e7f6      	b.n	800d2fc <StartDefaultTask+0x8>
 800d30e:	bf00      	nop
 800d310:	40020000 	.word	0x40020000

0800d314 <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 800d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d318:	b0a9      	sub	sp, #164	@ 0xa4
 800d31a:	af00      	add	r7, sp, #0
 800d31c:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN StartReceiveTask */
	char input[100];
	/* Infinite loop */
	for (;;) {
		// Wait until button is pressed
		xTaskNotifyWait( 0x00, 0xffffffff, NULL, pdMS_TO_TICKS(100000));
 800d31e:	4bba      	ldr	r3, [pc, #744]	@ (800d608 <StartReceiveTask+0x2f4>)
 800d320:	2200      	movs	r2, #0
 800d322:	f04f 31ff 	mov.w	r1, #4294967295
 800d326:	2000      	movs	r0, #0
 800d328:	f003 ffca 	bl	80112c0 <xTaskNotifyWait>

		// For debugging purposes disable watchdog
		//vTaskSuspend(statusTaskHandle);

		// Read the user input
		printf("\r\n Provide update code: \r\n");
 800d32c:	48b7      	ldr	r0, [pc, #732]	@ (800d60c <StartReceiveTask+0x2f8>)
 800d32e:	f005 f80d 	bl	801234c <puts>
		//if(scanf("%s", input) != -1){
		//TODO: fgets doesn't read newline?
		if (fgets(input, 10, stdin)) {
 800d332:	4bb7      	ldr	r3, [pc, #732]	@ (800d610 <StartReceiveTask+0x2fc>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	f107 0314 	add.w	r3, r7, #20
 800d33c:	210a      	movs	r1, #10
 800d33e:	4618      	mov	r0, r3
 800d340:	f004 fed0 	bl	80120e4 <fgets>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	f000 81c3 	beq.w	800d6d2 <StartReceiveTask+0x3be>
 800d34c:	466b      	mov	r3, sp
 800d34e:	461e      	mov	r6, r3
			size_t len = strlen(input);
 800d350:	f107 0314 	add.w	r3, r7, #20
 800d354:	4618      	mov	r0, r3
 800d356:	f7fe fec3 	bl	800c0e0 <strlen>
 800d35a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
			printf("Length: %d \r\n", len);
 800d35e:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800d362:	48ac      	ldr	r0, [pc, #688]	@ (800d614 <StartReceiveTask+0x300>)
 800d364:	f004 ff8a 	bl	801227c <iprintf>
			//if (feof(stdin) || (len != 0 && input[len - 1] == '\n')) {
				printf("Code received:  %s \r\n", input);
 800d368:	f107 0314 	add.w	r3, r7, #20
 800d36c:	4619      	mov	r1, r3
 800d36e:	48aa      	ldr	r0, [pc, #680]	@ (800d618 <StartReceiveTask+0x304>)
 800d370:	f004 ff84 	bl	801227c <iprintf>
				printf("%s \r\n", input);
 800d374:	f107 0314 	add.w	r3, r7, #20
 800d378:	4619      	mov	r1, r3
 800d37a:	48a8      	ldr	r0, [pc, #672]	@ (800d61c <StartReceiveTask+0x308>)
 800d37c:	f004 ff7e 	bl	801227c <iprintf>

				// Output for debugging
				for(uint8_t i = 0; i<len; i++){
 800d380:	2300      	movs	r3, #0
 800d382:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800d386:	e010      	b.n	800d3aa <StartReceiveTask+0x96>
					printf("%d", input[i]);
 800d388:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d38c:	3398      	adds	r3, #152	@ 0x98
 800d38e:	f107 0208 	add.w	r2, r7, #8
 800d392:	4413      	add	r3, r2
 800d394:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800d398:	4619      	mov	r1, r3
 800d39a:	48a1      	ldr	r0, [pc, #644]	@ (800d620 <StartReceiveTask+0x30c>)
 800d39c:	f004 ff6e 	bl	801227c <iprintf>
				for(uint8_t i = 0; i<len; i++){
 800d3a0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800d3aa:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d3ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d8e8      	bhi.n	800d388 <StartReceiveTask+0x74>
				}
				printf("\r\n");
 800d3b6:	489b      	ldr	r0, [pc, #620]	@ (800d624 <StartReceiveTask+0x310>)
 800d3b8:	f004 ffc8 	bl	801234c <puts>

				//readFlash(huart2, 26);

				//CRC
				uint32_t crcValue = HAL_CRC_Calculate(&hcrc, input, sizeof(input));
 800d3bc:	f107 0314 	add.w	r3, r7, #20
 800d3c0:	2264      	movs	r2, #100	@ 0x64
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	4898      	ldr	r0, [pc, #608]	@ (800d628 <StartReceiveTask+0x314>)
 800d3c6:	f001 f82a 	bl	800e41e <HAL_CRC_Calculate>
 800d3ca:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
				uint32_t mask = (1 << 16) - 1;
 800d3ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d3d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				uint16_t lsbits = crcValue & mask;
 800d3d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
				mask = ((1 << 16) - 1) << 16;
 800d3e8:	4b90      	ldr	r3, [pc, #576]	@ (800d62c <StartReceiveTask+0x318>)
 800d3ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
				uint16_t msbits = crcValue & mask;
 800d3ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d3f2:	b29a      	uxth	r2, r3
 800d3f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
				printf("CRC Value: %lu \r\n", crcValue);
 800d400:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d404:	488a      	ldr	r0, [pc, #552]	@ (800d630 <StartReceiveTask+0x31c>)
 800d406:	f004 ff39 	bl	801227c <iprintf>
				printf("CRC msbits: %u \r\n", msbits);
 800d40a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d40e:	4619      	mov	r1, r3
 800d410:	4888      	ldr	r0, [pc, #544]	@ (800d634 <StartReceiveTask+0x320>)
 800d412:	f004 ff33 	bl	801227c <iprintf>
				printf("CRC lsbits: %u \r\n", lsbits);
 800d416:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d41a:	4619      	mov	r1, r3
 800d41c:	4886      	ldr	r0, [pc, #536]	@ (800d638 <StartReceiveTask+0x324>)
 800d41e:	f004 ff2d 	bl	801227c <iprintf>

				input[len] = msbits;
 800d422:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d426:	b2d9      	uxtb	r1, r3
 800d428:	f107 0214 	add.w	r2, r7, #20
 800d42c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d430:	4413      	add	r3, r2
 800d432:	460a      	mov	r2, r1
 800d434:	701a      	strb	r2, [r3, #0]
				input[len+1] = lsbits;
 800d436:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d43a:	3301      	adds	r3, #1
 800d43c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d440:	b2d2      	uxtb	r2, r2
 800d442:	3398      	adds	r3, #152	@ 0x98
 800d444:	f107 0108 	add.w	r1, r7, #8
 800d448:	440b      	add	r3, r1
 800d44a:	f803 2c8c 	strb.w	r2, [r3, #-140]

				// Write to EEPROM
				dataLengthNew = strlen(input);
 800d44e:	f107 0314 	add.w	r3, r7, #20
 800d452:	4618      	mov	r0, r3
 800d454:	f7fe fe44 	bl	800c0e0 <strlen>
 800d458:	4603      	mov	r3, r0
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	4b77      	ldr	r3, [pc, #476]	@ (800d63c <StartReceiveTask+0x328>)
 800d45e:	701a      	strb	r2, [r3, #0]
				uint16_t VirtAddVarTab[dataLengthNew];
 800d460:	4b76      	ldr	r3, [pc, #472]	@ (800d63c <StartReceiveTask+0x328>)
 800d462:	7819      	ldrb	r1, [r3, #0]
 800d464:	460b      	mov	r3, r1
 800d466:	3b01      	subs	r3, #1
 800d468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d46c:	b2cb      	uxtb	r3, r1
 800d46e:	2200      	movs	r2, #0
 800d470:	461c      	mov	r4, r3
 800d472:	4615      	mov	r5, r2
 800d474:	f04f 0200 	mov.w	r2, #0
 800d478:	f04f 0300 	mov.w	r3, #0
 800d47c:	012b      	lsls	r3, r5, #4
 800d47e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800d482:	0122      	lsls	r2, r4, #4
 800d484:	b2cb      	uxtb	r3, r1
 800d486:	2200      	movs	r2, #0
 800d488:	4698      	mov	r8, r3
 800d48a:	4691      	mov	r9, r2
 800d48c:	f04f 0200 	mov.w	r2, #0
 800d490:	f04f 0300 	mov.w	r3, #0
 800d494:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800d498:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800d49c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	005b      	lsls	r3, r3, #1
 800d4a4:	3307      	adds	r3, #7
 800d4a6:	08db      	lsrs	r3, r3, #3
 800d4a8:	00db      	lsls	r3, r3, #3
 800d4aa:	ebad 0d03 	sub.w	sp, sp, r3
 800d4ae:	466b      	mov	r3, sp
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	085b      	lsrs	r3, r3, #1
 800d4b4:	005b      	lsls	r3, r3, #1
 800d4b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

				for(uint8_t i = 0; i<dataLengthNew; i++){
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800d4c0:	e010      	b.n	800d4e4 <StartReceiveTask+0x1d0>
					printf("%d", input[i]);
 800d4c2:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800d4c6:	3398      	adds	r3, #152	@ 0x98
 800d4c8:	f107 0208 	add.w	r2, r7, #8
 800d4cc:	4413      	add	r3, r2
 800d4ce:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	4852      	ldr	r0, [pc, #328]	@ (800d620 <StartReceiveTask+0x30c>)
 800d4d6:	f004 fed1 	bl	801227c <iprintf>
				for(uint8_t i = 0; i<dataLengthNew; i++){
 800d4da:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800d4de:	3301      	adds	r3, #1
 800d4e0:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800d4e4:	4b55      	ldr	r3, [pc, #340]	@ (800d63c <StartReceiveTask+0x328>)
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d3e8      	bcc.n	800d4c2 <StartReceiveTask+0x1ae>
				}
				printf("\r\n");
 800d4f0:	484c      	ldr	r0, [pc, #304]	@ (800d624 <StartReceiveTask+0x310>)
 800d4f2:	f004 ff2b 	bl	801234c <puts>

				// Unlock the Flash Program Erase controller
				HAL_FLASH_Unlock();
 800d4f6:	f001 f819 	bl	800e52c <HAL_FLASH_Unlock>

				// EEPROM Init
				if (EE_Init() != EE_OK) {
 800d4fa:	f7fe ff71 	bl	800c3e0 <EE_Init>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <StartReceiveTask+0x1f4>
					Error_Handler();
 800d504:	f000 fb64 	bl	800dbd0 <Error_Handler>
				}

				// Fill EEPROM variables addresses with offset from original data
				for (uint16_t i = 1; i <= dataLengthNew; i++) {
 800d508:	2301      	movs	r3, #1
 800d50a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 800d50e:	e00f      	b.n	800d530 <StartReceiveTask+0x21c>
					VirtAddVarTab[i - 1] = 100 + i;
 800d510:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d514:	1e5a      	subs	r2, r3, #1
 800d516:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d51a:	3364      	adds	r3, #100	@ 0x64
 800d51c:	b299      	uxth	r1, r3
 800d51e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d522:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for (uint16_t i = 1; i <= dataLengthNew; i++) {
 800d526:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d52a:	3301      	adds	r3, #1
 800d52c:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 800d530:	4b42      	ldr	r3, [pc, #264]	@ (800d63c <StartReceiveTask+0x328>)
 800d532:	781b      	ldrb	r3, [r3, #0]
 800d534:	461a      	mov	r2, r3
 800d536:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d9e8      	bls.n	800d510 <StartReceiveTask+0x1fc>
				}

				// Store values in EEPROM emulation
				printf("Start saving \r\n");
 800d53e:	4840      	ldr	r0, [pc, #256]	@ (800d640 <StartReceiveTask+0x32c>)
 800d540:	f004 ff04 	bl	801234c <puts>
				for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d544:	2300      	movs	r3, #0
 800d546:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
 800d54a:	e01e      	b.n	800d58a <StartReceiveTask+0x276>
					// Sequence 1
					if ((EE_WriteVariable(VirtAddVarTab[i], input[i])) != HAL_OK) {
 800d54c:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 800d550:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d554:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d558:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800d55c:	3398      	adds	r3, #152	@ 0x98
 800d55e:	f107 0108 	add.w	r1, r7, #8
 800d562:	440b      	add	r3, r1
 800d564:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800d568:	4619      	mov	r1, r3
 800d56a:	4610      	mov	r0, r2
 800d56c:	f7ff f98c 	bl	800c888 <EE_WriteVariable>
 800d570:	4603      	mov	r3, r0
 800d572:	2b00      	cmp	r3, #0
 800d574:	d004      	beq.n	800d580 <StartReceiveTask+0x26c>
						printf("Error pos 1 \r\n");
 800d576:	4833      	ldr	r0, [pc, #204]	@ (800d644 <StartReceiveTask+0x330>)
 800d578:	f004 fee8 	bl	801234c <puts>
						Error_Handler();
 800d57c:	f000 fb28 	bl	800dbd0 <Error_Handler>
				for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d580:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800d584:	3301      	adds	r3, #1
 800d586:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
 800d58a:	4b2c      	ldr	r3, [pc, #176]	@ (800d63c <StartReceiveTask+0x328>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	461a      	mov	r2, r3
 800d590:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800d594:	4293      	cmp	r3, r2
 800d596:	d3d9      	bcc.n	800d54c <StartReceiveTask+0x238>
					}
				}
				printf("Completed saving of main data \r\n");
 800d598:	482b      	ldr	r0, [pc, #172]	@ (800d648 <StartReceiveTask+0x334>)
 800d59a:	f004 fed7 	bl	801234c <puts>
				}
				if ((EE_WriteVariable(VirtAddVarTab[0] + dataLengthNew, lsbits)) != HAL_OK) {
					printf("Error pos 3 \r\n");
					Error_Handler();
				}*/
				printf("Update data and CRC saved on EEPROM \r\n");
 800d59e:	482b      	ldr	r0, [pc, #172]	@ (800d64c <StartReceiveTask+0x338>)
 800d5a0:	f004 fed4 	bl	801234c <puts>

				// Read values for debugging:
				uint8_t VarDataTabRead[dataLengthNew];
 800d5a4:	4b25      	ldr	r3, [pc, #148]	@ (800d63c <StartReceiveTask+0x328>)
 800d5a6:	7819      	ldrb	r1, [r3, #0]
 800d5a8:	460b      	mov	r3, r1
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d5ae:	b2cb      	uxtb	r3, r1
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	469a      	mov	sl, r3
 800d5b4:	4693      	mov	fp, r2
 800d5b6:	f04f 0200 	mov.w	r2, #0
 800d5ba:	f04f 0300 	mov.w	r3, #0
 800d5be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d5c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d5c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d5ca:	b2cb      	uxtb	r3, r1
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	603b      	str	r3, [r7, #0]
 800d5d0:	607a      	str	r2, [r7, #4]
 800d5d2:	f04f 0200 	mov.w	r2, #0
 800d5d6:	f04f 0300 	mov.w	r3, #0
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	00c3      	lsls	r3, r0, #3
 800d5de:	6838      	ldr	r0, [r7, #0]
 800d5e0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d5e4:	6838      	ldr	r0, [r7, #0]
 800d5e6:	00c2      	lsls	r2, r0, #3
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	3307      	adds	r3, #7
 800d5ec:	08db      	lsrs	r3, r3, #3
 800d5ee:	00db      	lsls	r3, r3, #3
 800d5f0:	ebad 0d03 	sub.w	sp, sp, r3
 800d5f4:	466b      	mov	r3, sp
 800d5f6:	3300      	adds	r3, #0
 800d5f8:	67bb      	str	r3, [r7, #120]	@ 0x78
				printf("Reading values \r\n");
 800d5fa:	4815      	ldr	r0, [pc, #84]	@ (800d650 <StartReceiveTask+0x33c>)
 800d5fc:	f004 fea6 	bl	801234c <puts>
				for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d600:	2300      	movs	r3, #0
 800d602:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800d606:	e03f      	b.n	800d688 <StartReceiveTask+0x374>
 800d608:	000186a0 	.word	0x000186a0
 800d60c:	080134f0 	.word	0x080134f0
 800d610:	20000024 	.word	0x20000024
 800d614:	0801350c 	.word	0x0801350c
 800d618:	0801351c 	.word	0x0801351c
 800d61c:	08013534 	.word	0x08013534
 800d620:	0801353c 	.word	0x0801353c
 800d624:	08013540 	.word	0x08013540
 800d628:	20000334 	.word	0x20000334
 800d62c:	ffff0000 	.word	0xffff0000
 800d630:	08013544 	.word	0x08013544
 800d634:	08013558 	.word	0x08013558
 800d638:	0801356c 	.word	0x0801356c
 800d63c:	20000425 	.word	0x20000425
 800d640:	08013580 	.word	0x08013580
 800d644:	08013590 	.word	0x08013590
 800d648:	080135a0 	.word	0x080135a0
 800d64c:	080135c0 	.word	0x080135c0
 800d650:	080135e8 	.word	0x080135e8
					if ((EE_ReadVariable(VirtAddVarTab[i], &VarDataTabRead[i])) != HAL_OK) {
 800d654:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
 800d658:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d65c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800d660:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800d664:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800d666:	4413      	add	r3, r2
 800d668:	4619      	mov	r1, r3
 800d66a:	f7ff f8c3 	bl	800c7f4 <EE_ReadVariable>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d004      	beq.n	800d67e <StartReceiveTask+0x36a>
						printf("Error pos 4 \r\n");
 800d674:	481c      	ldr	r0, [pc, #112]	@ (800d6e8 <StartReceiveTask+0x3d4>)
 800d676:	f004 fe69 	bl	801234c <puts>
						Error_Handler();
 800d67a:	f000 faa9 	bl	800dbd0 <Error_Handler>
				for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d67e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800d682:	3301      	adds	r3, #1
 800d684:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
 800d688:	4b18      	ldr	r3, [pc, #96]	@ (800d6ec <StartReceiveTask+0x3d8>)
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	461a      	mov	r2, r3
 800d68e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 800d692:	4293      	cmp	r3, r2
 800d694:	d3de      	bcc.n	800d654 <StartReceiveTask+0x340>
					}
				}
				//printf("Successfully read data %s \r\n", VarDataTabRead);
				HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 800d696:	2364      	movs	r3, #100	@ 0x64
 800d698:	220c      	movs	r2, #12
 800d69a:	4915      	ldr	r1, [pc, #84]	@ (800d6f0 <StartReceiveTask+0x3dc>)
 800d69c:	4815      	ldr	r0, [pc, #84]	@ (800d6f4 <StartReceiveTask+0x3e0>)
 800d69e:	f002 fb2b 	bl	800fcf8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, VarDataTabRead, dataLengthNew, 1000);
 800d6a2:	4b12      	ldr	r3, [pc, #72]	@ (800d6ec <StartReceiveTask+0x3d8>)
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6ac:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800d6ae:	4811      	ldr	r0, [pc, #68]	@ (800d6f4 <StartReceiveTask+0x3e0>)
 800d6b0:	f002 fb22 	bl	800fcf8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800d6b4:	2364      	movs	r3, #100	@ 0x64
 800d6b6:	2202      	movs	r2, #2
 800d6b8:	490f      	ldr	r1, [pc, #60]	@ (800d6f8 <StartReceiveTask+0x3e4>)
 800d6ba:	480e      	ldr	r0, [pc, #56]	@ (800d6f4 <StartReceiveTask+0x3e0>)
 800d6bc:	f002 fb1c 	bl	800fcf8 <HAL_UART_Transmit>

				//writeToFlash(huart2, input);

				//vTaskSuspend(receiveTaskHandle);
				xTaskNotifyGive(updateTaskHandle);
 800d6c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d6fc <StartReceiveTask+0x3e8>)
 800d6c2:	6818      	ldr	r0, [r3, #0]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	2202      	movs	r2, #2
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	f003 fe59 	bl	8011380 <xTaskGenericNotify>
 800d6ce:	46b5      	mov	sp, r6
 800d6d0:	e002      	b.n	800d6d8 <StartReceiveTask+0x3c4>

			//} else {
			//	printf("Invalid input \r\n");
			//}
		} else {
			printf("Invalid input \r\n");
 800d6d2:	480b      	ldr	r0, [pc, #44]	@ (800d700 <StartReceiveTask+0x3ec>)
 800d6d4:	f004 fe3a 	bl	801234c <puts>
		}

		printf("ReceiveTask finished \r\n");
 800d6d8:	480a      	ldr	r0, [pc, #40]	@ (800d704 <StartReceiveTask+0x3f0>)
 800d6da:	f004 fe37 	bl	801234c <puts>

		osDelay(1);
 800d6de:	2001      	movs	r0, #1
 800d6e0:	f002 ffc7 	bl	8010672 <osDelay>
		xTaskNotifyWait( 0x00, 0xffffffff, NULL, pdMS_TO_TICKS(100000));
 800d6e4:	e61b      	b.n	800d31e <StartReceiveTask+0xa>
 800d6e6:	bf00      	nop
 800d6e8:	080135fc 	.word	0x080135fc
 800d6ec:	20000425 	.word	0x20000425
 800d6f0:	080133a8 	.word	0x080133a8
 800d6f4:	200003cc 	.word	0x200003cc
 800d6f8:	080133b8 	.word	0x080133b8
 800d6fc:	20000420 	.word	0x20000420
 800d700:	0801360c 	.word	0x0801360c
 800d704:	0801361c 	.word	0x0801361c

0800d708 <StartStatusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusTask */
void StartStatusTask(void const * argument)
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b086      	sub	sp, #24
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusTask */
  int prevTime = HAL_GetTick();
 800d710:	f000 fd28 	bl	800e164 <HAL_GetTick>
 800d714:	4603      	mov	r3, r0
 800d716:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int currentTime = HAL_GetTick();
 800d718:	f000 fd24 	bl	800e164 <HAL_GetTick>
 800d71c:	4603      	mov	r3, r0
 800d71e:	613b      	str	r3, [r7, #16]
	  if(currentTime < prevTime + statusDelay) {
 800d720:	4b16      	ldr	r3, [pc, #88]	@ (800d77c <StartStatusTask+0x74>)
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	4413      	add	r3, r2
 800d728:	693a      	ldr	r2, [r7, #16]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	da05      	bge.n	800d73a <StartStatusTask+0x32>
		  osDelay(currentTime + statusDelay - currentTime);
 800d72e:	4b13      	ldr	r3, [pc, #76]	@ (800d77c <StartStatusTask+0x74>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4618      	mov	r0, r3
 800d734:	f002 ff9d 	bl	8010672 <osDelay>
 800d738:	e7ee      	b.n	800d718 <StartStatusTask+0x10>
	  } else {
		  printf("F401: Starting status transmission \r\n");
 800d73a:	4811      	ldr	r0, [pc, #68]	@ (800d780 <StartStatusTask+0x78>)
 800d73c:	f004 fe06 	bl	801234c <puts>
		  uint8_t checkSum = 2+version;
 800d740:	4b10      	ldr	r3, [pc, #64]	@ (800d784 <StartStatusTask+0x7c>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	3302      	adds	r3, #2
 800d746:	73fb      	strb	r3, [r7, #15]
		  uint8_t tx_buff[]={1,0,1,0,version,checkSum};
 800d748:	2301      	movs	r3, #1
 800d74a:	723b      	strb	r3, [r7, #8]
 800d74c:	2300      	movs	r3, #0
 800d74e:	727b      	strb	r3, [r7, #9]
 800d750:	2301      	movs	r3, #1
 800d752:	72bb      	strb	r3, [r7, #10]
 800d754:	2300      	movs	r3, #0
 800d756:	72fb      	strb	r3, [r7, #11]
 800d758:	4b0a      	ldr	r3, [pc, #40]	@ (800d784 <StartStatusTask+0x7c>)
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	733b      	strb	r3, [r7, #12]
 800d75e:	7bfb      	ldrb	r3, [r7, #15]
 800d760:	737b      	strb	r3, [r7, #13]
		  HAL_UART_Transmit(&huart1, tx_buff, 6, 1000);
 800d762:	f107 0108 	add.w	r1, r7, #8
 800d766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d76a:	2206      	movs	r2, #6
 800d76c:	4806      	ldr	r0, [pc, #24]	@ (800d788 <StartStatusTask+0x80>)
 800d76e:	f002 fac3 	bl	800fcf8 <HAL_UART_Transmit>
		  osDelay(10000);
 800d772:	f242 7010 	movw	r0, #10000	@ 0x2710
 800d776:	f002 ff7c 	bl	8010672 <osDelay>
  {
 800d77a:	e7cd      	b.n	800d718 <StartStatusTask+0x10>
 800d77c:	20000004 	.word	0x20000004
 800d780:	08013634 	.word	0x08013634
 800d784:	20000000 	.word	0x20000000
 800d788:	20000384 	.word	0x20000384

0800d78c <StartUpdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateTask */
void StartUpdateTask(void const * argument)
{
 800d78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d790:	b0b1      	sub	sp, #196	@ 0xc4
 800d792:	af00      	add	r7, sp, #0
 800d794:	6278      	str	r0, [r7, #36]	@ 0x24
  /* USER CODE BEGIN StartUpdateTask */
  /* Infinite loop */
  for(;;)
  {
 800d796:	466b      	mov	r3, sp
 800d798:	461e      	mov	r6, r3
	  //printf("Task Handle: %s", xTaskGetCurrentTaskHandle());
	  ulTaskNotifyTake( 0x00, pdMS_TO_TICKS(100000) );
 800d79a:	49ad      	ldr	r1, [pc, #692]	@ (800da50 <StartUpdateTask+0x2c4>)
 800d79c:	2000      	movs	r0, #0
 800d79e:	f003 fd43 	bl	8011228 <ulTaskNotifyTake>
	  osDelay(500);
 800d7a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d7a6:	f002 ff64 	bl	8010672 <osDelay>

	  printf("updateTask started \r\n");
 800d7aa:	48aa      	ldr	r0, [pc, #680]	@ (800da54 <StartUpdateTask+0x2c8>)
 800d7ac:	f004 fdce 	bl	801234c <puts>

	  // Read from EEPROM
	  osDelay(500);
 800d7b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d7b4:	f002 ff5d 	bl	8010672 <osDelay>
	  // Fill EEPROM variables addresses on the original data
		uint16_t VirtAddNew[dataLengthNew];
 800d7b8:	4ba7      	ldr	r3, [pc, #668]	@ (800da58 <StartUpdateTask+0x2cc>)
 800d7ba:	7819      	ldrb	r1, [r3, #0]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	3b01      	subs	r3, #1
 800d7c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d7c4:	b2cb      	uxtb	r3, r1
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	4698      	mov	r8, r3
 800d7ca:	4691      	mov	r9, r2
 800d7cc:	f04f 0200 	mov.w	r2, #0
 800d7d0:	f04f 0300 	mov.w	r3, #0
 800d7d4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800d7d8:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800d7dc:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800d7e0:	b2cb      	uxtb	r3, r1
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	469a      	mov	sl, r3
 800d7e6:	4693      	mov	fp, r2
 800d7e8:	f04f 0200 	mov.w	r2, #0
 800d7ec:	f04f 0300 	mov.w	r3, #0
 800d7f0:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800d7f4:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800d7f8:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	005b      	lsls	r3, r3, #1
 800d800:	3307      	adds	r3, #7
 800d802:	08db      	lsrs	r3, r3, #3
 800d804:	00db      	lsls	r3, r3, #3
 800d806:	ebad 0d03 	sub.w	sp, sp, r3
 800d80a:	466b      	mov	r3, sp
 800d80c:	3301      	adds	r3, #1
 800d80e:	085b      	lsrs	r3, r3, #1
 800d810:	005b      	lsls	r3, r3, #1
 800d812:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		for (uint16_t i = 1; i <= dataLengthNew; i++) {
 800d816:	2301      	movs	r3, #1
 800d818:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 800d81c:	e00f      	b.n	800d83e <StartUpdateTask+0xb2>
			VirtAddNew[i - 1] = 100 + i;
 800d81e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d822:	1e59      	subs	r1, r3, #1
 800d824:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d828:	3364      	adds	r3, #100	@ 0x64
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d830:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		for (uint16_t i = 1; i <= dataLengthNew; i++) {
 800d834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d838:	3301      	adds	r3, #1
 800d83a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
 800d83e:	4b86      	ldr	r3, [pc, #536]	@ (800da58 <StartUpdateTask+0x2cc>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	461a      	mov	r2, r3
 800d844:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d848:	4293      	cmp	r3, r2
 800d84a:	d9e8      	bls.n	800d81e <StartUpdateTask+0x92>
		}
	  char data[100] = "Hello, this is updated code";
 800d84c:	4b83      	ldr	r3, [pc, #524]	@ (800da5c <StartUpdateTask+0x2d0>)
 800d84e:	f107 0528 	add.w	r5, r7, #40	@ 0x28
 800d852:	461c      	mov	r4, r3
 800d854:	6820      	ldr	r0, [r4, #0]
 800d856:	6861      	ldr	r1, [r4, #4]
 800d858:	68a2      	ldr	r2, [r4, #8]
 800d85a:	68e3      	ldr	r3, [r4, #12]
 800d85c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d85e:	6920      	ldr	r0, [r4, #16]
 800d860:	6961      	ldr	r1, [r4, #20]
 800d862:	69a2      	ldr	r2, [r4, #24]
 800d864:	c507      	stmia	r5!, {r0, r1, r2}
 800d866:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800d86a:	2348      	movs	r3, #72	@ 0x48
 800d86c:	461a      	mov	r2, r3
 800d86e:	2100      	movs	r1, #0
 800d870:	f004 ff82 	bl	8012778 <memset>
	  for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d874:	2300      	movs	r3, #0
 800d876:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 800d87a:	e01a      	b.n	800d8b2 <StartUpdateTask+0x126>
	  		if ((EE_ReadVariable(VirtAddNew[i], &data[i])) != HAL_OK) {
 800d87c:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 800d880:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d884:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800d888:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 800d88c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d890:	4413      	add	r3, r2
 800d892:	4619      	mov	r1, r3
 800d894:	f7fe ffae 	bl	800c7f4 <EE_ReadVariable>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d004      	beq.n	800d8a8 <StartUpdateTask+0x11c>
	  			printf("Error reading update data \r\n");
 800d89e:	4870      	ldr	r0, [pc, #448]	@ (800da60 <StartUpdateTask+0x2d4>)
 800d8a0:	f004 fd54 	bl	801234c <puts>
	  			Error_Handler();
 800d8a4:	f000 f994 	bl	800dbd0 <Error_Handler>
	  for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d8a8:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 800d8ac:	3301      	adds	r3, #1
 800d8ae:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 800d8b2:	4b69      	ldr	r3, [pc, #420]	@ (800da58 <StartUpdateTask+0x2cc>)
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	461a      	mov	r2, r3
 800d8b8:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d3dd      	bcc.n	800d87c <StartUpdateTask+0xf0>
	  		}
	  }

	  printf("Update data read from EEPROM: %s \r\n", data);
 800d8c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	4867      	ldr	r0, [pc, #412]	@ (800da64 <StartUpdateTask+0x2d8>)
 800d8c8:	f004 fcd8 	bl	801227c <iprintf>

	  // Fault introduction
	  int faultMask = 11;
 800d8cc:	230b      	movs	r3, #11
 800d8ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	  printf("%i \r\n", data[0]);
 800d8d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	4863      	ldr	r0, [pc, #396]	@ (800da68 <StartUpdateTask+0x2dc>)
 800d8da:	f004 fccf 	bl	801227c <iprintf>
	  data[0] ^= faultMask;
 800d8de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d8e2:	b25a      	sxtb	r2, r3
 800d8e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8e8:	b25b      	sxtb	r3, r3
 800d8ea:	4053      	eors	r3, r2
 800d8ec:	b25b      	sxtb	r3, r3
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	  printf("%i \r\n", data[0]);
 800d8f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	485b      	ldr	r0, [pc, #364]	@ (800da68 <StartUpdateTask+0x2dc>)
 800d8fc:	f004 fcbe 	bl	801227c <iprintf>

	  //CRC
	  uint32_t crcValue = HAL_CRC_Calculate(&hcrc, data, sizeof(data));
 800d900:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d904:	2264      	movs	r2, #100	@ 0x64
 800d906:	4619      	mov	r1, r3
 800d908:	4858      	ldr	r0, [pc, #352]	@ (800da6c <StartUpdateTask+0x2e0>)
 800d90a:	f000 fd88 	bl	800e41e <HAL_CRC_Calculate>
 800d90e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
	  unsigned mask = (1 << 16) - 1;
 800d912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		uint16_t lsbits = crcValue & mask;
 800d91a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d91e:	b29a      	uxth	r2, r3
 800d920:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d924:	b29b      	uxth	r3, r3
 800d926:	4013      	ands	r3, r2
 800d928:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
		mask = ((1 << 16) - 1) << 16;
 800d92c:	4b50      	ldr	r3, [pc, #320]	@ (800da70 <StartUpdateTask+0x2e4>)
 800d92e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		uint16_t msbits = crcValue & mask;
 800d932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d936:	b29a      	uxth	r2, r3
 800d938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	4013      	ands	r3, r2
 800d940:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
	  printf("CRC: %lu \r\n", crcValue);
 800d944:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d948:	484a      	ldr	r0, [pc, #296]	@ (800da74 <StartUpdateTask+0x2e8>)
 800d94a:	f004 fc97 	bl	801227c <iprintf>

	  if(msbits == data[dataLengthNew-1] && lsbits == data[dataLengthNew]){
 800d94e:	4b42      	ldr	r3, [pc, #264]	@ (800da58 <StartUpdateTask+0x2cc>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	3b01      	subs	r3, #1
 800d954:	33a0      	adds	r3, #160	@ 0xa0
 800d956:	f107 0220 	add.w	r2, r7, #32
 800d95a:	4413      	add	r3, r2
 800d95c:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 800d960:	461a      	mov	r2, r3
 800d962:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800d966:	4293      	cmp	r3, r2
 800d968:	d110      	bne.n	800d98c <StartUpdateTask+0x200>
 800d96a:	4b3b      	ldr	r3, [pc, #236]	@ (800da58 <StartUpdateTask+0x2cc>)
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	33a0      	adds	r3, #160	@ 0xa0
 800d970:	f107 0220 	add.w	r2, r7, #32
 800d974:	4413      	add	r3, r2
 800d976:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 800d97a:	461a      	mov	r2, r3
 800d97c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800d980:	4293      	cmp	r3, r2
 800d982:	d103      	bne.n	800d98c <StartUpdateTask+0x200>
		  printf("CRC matches memory value \r\n");
 800d984:	483c      	ldr	r0, [pc, #240]	@ (800da78 <StartUpdateTask+0x2ec>)
 800d986:	f004 fce1 	bl	801234c <puts>
 800d98a:	e002      	b.n	800d992 <StartUpdateTask+0x206>
	  } else {
		  printf("CRC doesn't match memory, update should be cancelled \r\n");
 800d98c:	483b      	ldr	r0, [pc, #236]	@ (800da7c <StartUpdateTask+0x2f0>)
 800d98e:	f004 fcdd 	bl	801234c <puts>
	  }

	  osDelay(500);
 800d992:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d996:	f002 fe6c 	bl	8010672 <osDelay>

	  // Write to EEPROM
	  // Unlock the Flash Program Erase controller
		HAL_FLASH_Unlock();
 800d99a:	f000 fdc7 	bl	800e52c <HAL_FLASH_Unlock>

		/* EEPROM Init */
		if (EE_Init() != EE_OK) {
 800d99e:	f7fe fd1f 	bl	800c3e0 <EE_Init>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d001      	beq.n	800d9ac <StartUpdateTask+0x220>
			Error_Handler();
 800d9a8:	f000 f912 	bl	800dbd0 <Error_Handler>
		}

		uint16_t VirtAddOrig[dataLengthOrig];
 800d9ac:	4b34      	ldr	r3, [pc, #208]	@ (800da80 <StartUpdateTask+0x2f4>)
 800d9ae:	7819      	ldrb	r1, [r3, #0]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d9b8:	b2cb      	uxtb	r3, r1
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	61bb      	str	r3, [r7, #24]
 800d9be:	61fa      	str	r2, [r7, #28]
 800d9c0:	f04f 0200 	mov.w	r2, #0
 800d9c4:	f04f 0300 	mov.w	r3, #0
 800d9c8:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	0103      	lsls	r3, r0, #4
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	0102      	lsls	r2, r0, #4
 800d9da:	b2cb      	uxtb	r3, r1
 800d9dc:	2200      	movs	r2, #0
 800d9de:	613b      	str	r3, [r7, #16]
 800d9e0:	617a      	str	r2, [r7, #20]
 800d9e2:	f04f 0200 	mov.w	r2, #0
 800d9e6:	f04f 0300 	mov.w	r3, #0
 800d9ea:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	0103      	lsls	r3, r0, #4
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	0102      	lsls	r2, r0, #4
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	005b      	lsls	r3, r3, #1
 800da00:	3307      	adds	r3, #7
 800da02:	08db      	lsrs	r3, r3, #3
 800da04:	00db      	lsls	r3, r3, #3
 800da06:	ebad 0d03 	sub.w	sp, sp, r3
 800da0a:	466b      	mov	r3, sp
 800da0c:	3301      	adds	r3, #1
 800da0e:	085b      	lsrs	r3, r3, #1
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			for (uint16_t i = 1; i <= dataLengthOrig; i++) {
 800da16:	2301      	movs	r3, #1
 800da18:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
 800da1c:	e00d      	b.n	800da3a <StartUpdateTask+0x2ae>
				VirtAddOrig[i - 1] = i;
 800da1e:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 800da22:	1e59      	subs	r1, r3, #1
 800da24:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800da28:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 800da2c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			for (uint16_t i = 1; i <= dataLengthOrig; i++) {
 800da30:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 800da34:	3301      	adds	r3, #1
 800da36:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
 800da3a:	4b11      	ldr	r3, [pc, #68]	@ (800da80 <StartUpdateTask+0x2f4>)
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	461a      	mov	r2, r3
 800da40:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 800da44:	4293      	cmp	r3, r2
 800da46:	d9ea      	bls.n	800da1e <StartUpdateTask+0x292>
			}

		// Store values in EEPROM emulation
		for (uint16_t i = 0; i < dataLengthOrig - 2; i++) {
 800da48:	2300      	movs	r3, #0
 800da4a:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
 800da4e:	e035      	b.n	800dabc <StartUpdateTask+0x330>
 800da50:	000186a0 	.word	0x000186a0
 800da54:	0801365c 	.word	0x0801365c
 800da58:	20000425 	.word	0x20000425
 800da5c:	08013798 	.word	0x08013798
 800da60:	08013674 	.word	0x08013674
 800da64:	08013690 	.word	0x08013690
 800da68:	080136b4 	.word	0x080136b4
 800da6c:	20000334 	.word	0x20000334
 800da70:	ffff0000 	.word	0xffff0000
 800da74:	080136bc 	.word	0x080136bc
 800da78:	080136c8 	.word	0x080136c8
 800da7c:	080136e4 	.word	0x080136e4
 800da80:	20000424 	.word	0x20000424
			/* Sequence 1 */
			if ((EE_WriteVariable(VirtAddOrig[i], data[i])) != HAL_OK) {
 800da84:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 800da88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800da8c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800da90:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800da94:	33a0      	adds	r3, #160	@ 0xa0
 800da96:	f107 0120 	add.w	r1, r7, #32
 800da9a:	440b      	add	r3, r1
 800da9c:	f813 3c98 	ldrb.w	r3, [r3, #-152]
 800daa0:	4619      	mov	r1, r3
 800daa2:	4610      	mov	r0, r2
 800daa4:	f7fe fef0 	bl	800c888 <EE_WriteVariable>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <StartUpdateTask+0x326>
				Error_Handler();
 800daae:	f000 f88f 	bl	800dbd0 <Error_Handler>
		for (uint16_t i = 0; i < dataLengthOrig - 2; i++) {
 800dab2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800dab6:	3301      	adds	r3, #1
 800dab8:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
 800dabc:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 800dac0:	4b3c      	ldr	r3, [pc, #240]	@ (800dbb4 <StartUpdateTask+0x428>)
 800dac2:	781b      	ldrb	r3, [r3, #0]
 800dac4:	3b02      	subs	r3, #2
 800dac6:	429a      	cmp	r2, r3
 800dac8:	dbdc      	blt.n	800da84 <StartUpdateTask+0x2f8>
			}
		}
		printf("Update data updated on EEPROM \r\n");
 800daca:	483b      	ldr	r0, [pc, #236]	@ (800dbb8 <StartUpdateTask+0x42c>)
 800dacc:	f004 fc3e 	bl	801234c <puts>

		// Read values for debugging:
		uint8_t VarDataTabRead[dataLengthOrig+2];
 800dad0:	4b38      	ldr	r3, [pc, #224]	@ (800dbb4 <StartUpdateTask+0x428>)
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	1c99      	adds	r1, r3, #2
 800dad6:	1e4b      	subs	r3, r1, #1
 800dad8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dadc:	460a      	mov	r2, r1
 800dade:	2300      	movs	r3, #0
 800dae0:	60ba      	str	r2, [r7, #8]
 800dae2:	60fb      	str	r3, [r7, #12]
 800dae4:	f04f 0200 	mov.w	r2, #0
 800dae8:	f04f 0300 	mov.w	r3, #0
 800daec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800daf0:	4628      	mov	r0, r5
 800daf2:	00c3      	lsls	r3, r0, #3
 800daf4:	4620      	mov	r0, r4
 800daf6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800dafa:	4620      	mov	r0, r4
 800dafc:	00c2      	lsls	r2, r0, #3
 800dafe:	460a      	mov	r2, r1
 800db00:	2300      	movs	r3, #0
 800db02:	603a      	str	r2, [r7, #0]
 800db04:	607b      	str	r3, [r7, #4]
 800db06:	f04f 0200 	mov.w	r2, #0
 800db0a:	f04f 0300 	mov.w	r3, #0
 800db0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800db12:	4628      	mov	r0, r5
 800db14:	00c3      	lsls	r3, r0, #3
 800db16:	4620      	mov	r0, r4
 800db18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800db1c:	4620      	mov	r0, r4
 800db1e:	00c2      	lsls	r2, r0, #3
 800db20:	460b      	mov	r3, r1
 800db22:	3307      	adds	r3, #7
 800db24:	08db      	lsrs	r3, r3, #3
 800db26:	00db      	lsls	r3, r3, #3
 800db28:	ebad 0d03 	sub.w	sp, sp, r3
 800db2c:	466b      	mov	r3, sp
 800db2e:	3300      	adds	r3, #0
 800db30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		printf("Reading values \r\n");
 800db34:	4821      	ldr	r0, [pc, #132]	@ (800dbbc <StartUpdateTask+0x430>)
 800db36:	f004 fc09 	bl	801234c <puts>
		for (uint16_t i = 0; i < dataLengthOrig; i++) {
 800db3a:	2300      	movs	r3, #0
 800db3c:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 800db40:	e017      	b.n	800db72 <StartUpdateTask+0x3e6>
			if ((EE_ReadVariable(VirtAddOrig[i], &VarDataTabRead[i])) != HAL_OK) {
 800db42:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 800db46:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800db4a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800db4e:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 800db52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800db56:	4413      	add	r3, r2
 800db58:	4619      	mov	r1, r3
 800db5a:	f7fe fe4b 	bl	800c7f4 <EE_ReadVariable>
 800db5e:	4603      	mov	r3, r0
 800db60:	2b00      	cmp	r3, #0
 800db62:	d001      	beq.n	800db68 <StartUpdateTask+0x3dc>
				Error_Handler();
 800db64:	f000 f834 	bl	800dbd0 <Error_Handler>
		for (uint16_t i = 0; i < dataLengthOrig; i++) {
 800db68:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800db6c:	3301      	adds	r3, #1
 800db6e:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 800db72:	4b10      	ldr	r3, [pc, #64]	@ (800dbb4 <StartUpdateTask+0x428>)
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	461a      	mov	r2, r3
 800db78:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d3e0      	bcc.n	800db42 <StartUpdateTask+0x3b6>
		}

		/*HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
		HAL_UART_Transmit(&huart2, VarDataTabRead, dataLengthOrig, 1000);
		HAL_UART_Transmit(&huart2, "\n\r", 2, 100);*/
		printf("succesfully read data %s \r\n", VarDataTabRead);
 800db80:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800db84:	480e      	ldr	r0, [pc, #56]	@ (800dbc0 <StartUpdateTask+0x434>)
 800db86:	f004 fb79 	bl	801227c <iprintf>

	  osDelay(200);
 800db8a:	20c8      	movs	r0, #200	@ 0xc8
 800db8c:	f002 fd71 	bl	8010672 <osDelay>

	  version++;
 800db90:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc4 <StartUpdateTask+0x438>)
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	3301      	adds	r3, #1
 800db96:	b2db      	uxtb	r3, r3
 800db98:	4a0a      	ldr	r2, [pc, #40]	@ (800dbc4 <StartUpdateTask+0x438>)
 800db9a:	7013      	strb	r3, [r2, #0]
	  printf("Code update successful \r\n");
 800db9c:	480a      	ldr	r0, [pc, #40]	@ (800dbc8 <StartUpdateTask+0x43c>)
 800db9e:	f004 fbd5 	bl	801234c <puts>


	  // Resume watchdog:
	  //vTaskResume(statusTaskHandle);

	  printf("UpdateTask completed successfully \r\n");
 800dba2:	480a      	ldr	r0, [pc, #40]	@ (800dbcc <StartUpdateTask+0x440>)
 800dba4:	f004 fbd2 	bl	801234c <puts>

	  osDelay(1);
 800dba8:	2001      	movs	r0, #1
 800dbaa:	f002 fd62 	bl	8010672 <osDelay>
 800dbae:	46b5      	mov	sp, r6
  {
 800dbb0:	e5f1      	b.n	800d796 <StartUpdateTask+0xa>
 800dbb2:	bf00      	nop
 800dbb4:	20000424 	.word	0x20000424
 800dbb8:	0801371c 	.word	0x0801371c
 800dbbc:	080135e8 	.word	0x080135e8
 800dbc0:	0801373c 	.word	0x0801373c
 800dbc4:	20000000 	.word	0x20000000
 800dbc8:	08013758 	.word	0x08013758
 800dbcc:	08013774 	.word	0x08013774

0800dbd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800dbd4:	b672      	cpsid	i
}
 800dbd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  osDelay(1000);
 800dbd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800dbdc:	f002 fd49 	bl	8010672 <osDelay>
  printf("HAL ERROR \r\n");
 800dbe0:	4802      	ldr	r0, [pc, #8]	@ (800dbec <Error_Handler+0x1c>)
 800dbe2:	f004 fbb3 	bl	801234c <puts>
  while (1)
 800dbe6:	bf00      	nop
 800dbe8:	e7fd      	b.n	800dbe6 <Error_Handler+0x16>
 800dbea:	bf00      	nop
 800dbec:	080137b4 	.word	0x080137b4

0800dbf0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800dbf8:	4a07      	ldr	r2, [pc, #28]	@ (800dc18 <RetargetInit+0x28>)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800dbfe:	4b07      	ldr	r3, [pc, #28]	@ (800dc1c <RetargetInit+0x2c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6898      	ldr	r0, [r3, #8]
 800dc04:	2300      	movs	r3, #0
 800dc06:	2202      	movs	r2, #2
 800dc08:	2100      	movs	r1, #0
 800dc0a:	f004 fc29 	bl	8012460 <setvbuf>
}
 800dc0e:	bf00      	nop
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	20000428 	.word	0x20000428
 800dc1c:	20000024 	.word	0x20000024

0800dc20 <_isatty>:

int _isatty(int fd) {
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	db04      	blt.n	800dc38 <_isatty+0x18>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b02      	cmp	r3, #2
 800dc32:	dc01      	bgt.n	800dc38 <_isatty+0x18>
    return 1;
 800dc34:	2301      	movs	r3, #1
 800dc36:	e005      	b.n	800dc44 <_isatty+0x24>

  errno = EBADF;
 800dc38:	f004 fe42 	bl	80128c0 <__errno>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2209      	movs	r2, #9
 800dc40:	601a      	str	r2, [r3, #0]
  return 0;
 800dc42:	2300      	movs	r3, #0
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <_write>:

int _write(int fd, char* ptr, int len) {
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b086      	sub	sp, #24
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	60f8      	str	r0, [r7, #12]
 800dc54:	60b9      	str	r1, [r7, #8]
 800dc56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b01      	cmp	r3, #1
 800dc5c:	d002      	beq.n	800dc64 <_write+0x18>
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2b02      	cmp	r3, #2
 800dc62:	d111      	bne.n	800dc88 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800dc64:	4b0e      	ldr	r3, [pc, #56]	@ (800dca0 <_write+0x54>)
 800dc66:	6818      	ldr	r0, [r3, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	b29a      	uxth	r2, r3
 800dc6c:	f04f 33ff 	mov.w	r3, #4294967295
 800dc70:	68b9      	ldr	r1, [r7, #8]
 800dc72:	f002 f841 	bl	800fcf8 <HAL_UART_Transmit>
 800dc76:	4603      	mov	r3, r0
 800dc78:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800dc7a:	7dfb      	ldrb	r3, [r7, #23]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d101      	bne.n	800dc84 <_write+0x38>
      return len;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	e008      	b.n	800dc96 <_write+0x4a>
    else
      return EIO;
 800dc84:	2305      	movs	r3, #5
 800dc86:	e006      	b.n	800dc96 <_write+0x4a>
  }
  errno = EBADF;
 800dc88:	f004 fe1a 	bl	80128c0 <__errno>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2209      	movs	r2, #9
 800dc90:	601a      	str	r2, [r3, #0]
  return -1;
 800dc92:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3718      	adds	r7, #24
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20000428 	.word	0x20000428

0800dca4 <_close>:

int _close(int fd) {
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	db04      	blt.n	800dcbc <_close+0x18>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	dc01      	bgt.n	800dcbc <_close+0x18>
    return 0;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	e006      	b.n	800dcca <_close+0x26>

  errno = EBADF;
 800dcbc:	f004 fe00 	bl	80128c0 <__errno>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2209      	movs	r2, #9
 800dcc4:	601a      	str	r2, [r3, #0]
  return -1;
 800dcc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b084      	sub	sp, #16
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	60f8      	str	r0, [r7, #12]
 800dcda:	60b9      	str	r1, [r7, #8]
 800dcdc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800dcde:	f004 fdef 	bl	80128c0 <__errno>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2209      	movs	r2, #9
 800dce6:	601a      	str	r2, [r3, #0]
  return -1;
 800dce8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3710      	adds	r7, #16
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <_read>:

int _read(int fd, char* ptr, int len) {
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d110      	bne.n	800dd28 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800dd06:	4b0e      	ldr	r3, [pc, #56]	@ (800dd40 <_read+0x4c>)
 800dd08:	6818      	ldr	r0, [r3, #0]
 800dd0a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd0e:	2201      	movs	r2, #1
 800dd10:	68b9      	ldr	r1, [r7, #8]
 800dd12:	f002 f87c 	bl	800fe0e <HAL_UART_Receive>
 800dd16:	4603      	mov	r3, r0
 800dd18:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800dd1a:	7dfb      	ldrb	r3, [r7, #23]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d101      	bne.n	800dd24 <_read+0x30>
      return 1;
 800dd20:	2301      	movs	r3, #1
 800dd22:	e008      	b.n	800dd36 <_read+0x42>
    else
      return EIO;
 800dd24:	2305      	movs	r3, #5
 800dd26:	e006      	b.n	800dd36 <_read+0x42>
  }
  errno = EBADF;
 800dd28:	f004 fdca 	bl	80128c0 <__errno>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2209      	movs	r2, #9
 800dd30:	601a      	str	r2, [r3, #0]
  return -1;
 800dd32:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3718      	adds	r7, #24
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	20000428 	.word	0x20000428

0800dd44 <_fstat>:

int _fstat(int fd, struct stat* st) {
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	db08      	blt.n	800dd66 <_fstat+0x22>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	dc05      	bgt.n	800dd66 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800dd60:	605a      	str	r2, [r3, #4]
    return 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	e005      	b.n	800dd72 <_fstat+0x2e>
  }

  errno = EBADF;
 800dd66:	f004 fdab 	bl	80128c0 <__errno>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2209      	movs	r2, #9
 800dd6e:	601a      	str	r2, [r3, #0]
  return 0;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
	...

0800dd7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dd82:	2300      	movs	r3, #0
 800dd84:	607b      	str	r3, [r7, #4]
 800dd86:	4b12      	ldr	r3, [pc, #72]	@ (800ddd0 <HAL_MspInit+0x54>)
 800dd88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd8a:	4a11      	ldr	r2, [pc, #68]	@ (800ddd0 <HAL_MspInit+0x54>)
 800dd8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dd90:	6453      	str	r3, [r2, #68]	@ 0x44
 800dd92:	4b0f      	ldr	r3, [pc, #60]	@ (800ddd0 <HAL_MspInit+0x54>)
 800dd94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd9a:	607b      	str	r3, [r7, #4]
 800dd9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800dd9e:	2300      	movs	r3, #0
 800dda0:	603b      	str	r3, [r7, #0]
 800dda2:	4b0b      	ldr	r3, [pc, #44]	@ (800ddd0 <HAL_MspInit+0x54>)
 800dda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dda6:	4a0a      	ldr	r2, [pc, #40]	@ (800ddd0 <HAL_MspInit+0x54>)
 800dda8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ddac:	6413      	str	r3, [r2, #64]	@ 0x40
 800ddae:	4b08      	ldr	r3, [pc, #32]	@ (800ddd0 <HAL_MspInit+0x54>)
 800ddb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ddb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ddb6:	603b      	str	r3, [r7, #0]
 800ddb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ddba:	2200      	movs	r2, #0
 800ddbc:	210f      	movs	r1, #15
 800ddbe:	f06f 0001 	mvn.w	r0, #1
 800ddc2:	f000 fada 	bl	800e37a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ddc6:	bf00      	nop
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	40023800 	.word	0x40023800

0800ddd4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a0b      	ldr	r2, [pc, #44]	@ (800de10 <HAL_CRC_MspInit+0x3c>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d10d      	bne.n	800de02 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800dde6:	2300      	movs	r3, #0
 800dde8:	60fb      	str	r3, [r7, #12]
 800ddea:	4b0a      	ldr	r3, [pc, #40]	@ (800de14 <HAL_CRC_MspInit+0x40>)
 800ddec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddee:	4a09      	ldr	r2, [pc, #36]	@ (800de14 <HAL_CRC_MspInit+0x40>)
 800ddf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ddf4:	6313      	str	r3, [r2, #48]	@ 0x30
 800ddf6:	4b07      	ldr	r3, [pc, #28]	@ (800de14 <HAL_CRC_MspInit+0x40>)
 800ddf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800de02:	bf00      	nop
 800de04:	3714      	adds	r7, #20
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	40023000 	.word	0x40023000
 800de14:	40023800 	.word	0x40023800

0800de18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a0b      	ldr	r2, [pc, #44]	@ (800de54 <HAL_TIM_Base_MspInit+0x3c>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d10d      	bne.n	800de46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800de2a:	2300      	movs	r3, #0
 800de2c:	60fb      	str	r3, [r7, #12]
 800de2e:	4b0a      	ldr	r3, [pc, #40]	@ (800de58 <HAL_TIM_Base_MspInit+0x40>)
 800de30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de32:	4a09      	ldr	r2, [pc, #36]	@ (800de58 <HAL_TIM_Base_MspInit+0x40>)
 800de34:	f043 0301 	orr.w	r3, r3, #1
 800de38:	6453      	str	r3, [r2, #68]	@ 0x44
 800de3a:	4b07      	ldr	r3, [pc, #28]	@ (800de58 <HAL_TIM_Base_MspInit+0x40>)
 800de3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de3e:	f003 0301 	and.w	r3, r3, #1
 800de42:	60fb      	str	r3, [r7, #12]
 800de44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800de46:	bf00      	nop
 800de48:	3714      	adds	r7, #20
 800de4a:	46bd      	mov	sp, r7
 800de4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de50:	4770      	bx	lr
 800de52:	bf00      	nop
 800de54:	40010000 	.word	0x40010000
 800de58:	40023800 	.word	0x40023800

0800de5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b08c      	sub	sp, #48	@ 0x30
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de64:	f107 031c 	add.w	r3, r7, #28
 800de68:	2200      	movs	r2, #0
 800de6a:	601a      	str	r2, [r3, #0]
 800de6c:	605a      	str	r2, [r3, #4]
 800de6e:	609a      	str	r2, [r3, #8]
 800de70:	60da      	str	r2, [r3, #12]
 800de72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a32      	ldr	r2, [pc, #200]	@ (800df44 <HAL_UART_MspInit+0xe8>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d12d      	bne.n	800deda <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800de7e:	2300      	movs	r3, #0
 800de80:	61bb      	str	r3, [r7, #24]
 800de82:	4b31      	ldr	r3, [pc, #196]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800de84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de86:	4a30      	ldr	r2, [pc, #192]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800de88:	f043 0310 	orr.w	r3, r3, #16
 800de8c:	6453      	str	r3, [r2, #68]	@ 0x44
 800de8e:	4b2e      	ldr	r3, [pc, #184]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800de90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de92:	f003 0310 	and.w	r3, r3, #16
 800de96:	61bb      	str	r3, [r7, #24]
 800de98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de9a:	2300      	movs	r3, #0
 800de9c:	617b      	str	r3, [r7, #20]
 800de9e:	4b2a      	ldr	r3, [pc, #168]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800dea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dea2:	4a29      	ldr	r2, [pc, #164]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800dea4:	f043 0301 	orr.w	r3, r3, #1
 800dea8:	6313      	str	r3, [r2, #48]	@ 0x30
 800deaa:	4b27      	ldr	r3, [pc, #156]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800deac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deae:	f003 0301 	and.w	r3, r3, #1
 800deb2:	617b      	str	r3, [r7, #20]
 800deb4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800deb6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800deba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800debc:	2302      	movs	r3, #2
 800debe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dec0:	2300      	movs	r3, #0
 800dec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dec4:	2300      	movs	r3, #0
 800dec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800dec8:	2307      	movs	r3, #7
 800deca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800decc:	f107 031c 	add.w	r3, r7, #28
 800ded0:	4619      	mov	r1, r3
 800ded2:	481e      	ldr	r0, [pc, #120]	@ (800df4c <HAL_UART_MspInit+0xf0>)
 800ded4:	f000 fdae 	bl	800ea34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800ded8:	e030      	b.n	800df3c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	4a1c      	ldr	r2, [pc, #112]	@ (800df50 <HAL_UART_MspInit+0xf4>)
 800dee0:	4293      	cmp	r3, r2
 800dee2:	d12b      	bne.n	800df3c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800dee4:	2300      	movs	r3, #0
 800dee6:	613b      	str	r3, [r7, #16]
 800dee8:	4b17      	ldr	r3, [pc, #92]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800deea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800deec:	4a16      	ldr	r2, [pc, #88]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800deee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800def2:	6413      	str	r3, [r2, #64]	@ 0x40
 800def4:	4b14      	ldr	r3, [pc, #80]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800def6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800def8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800defc:	613b      	str	r3, [r7, #16]
 800defe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df00:	2300      	movs	r3, #0
 800df02:	60fb      	str	r3, [r7, #12]
 800df04:	4b10      	ldr	r3, [pc, #64]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800df06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df08:	4a0f      	ldr	r2, [pc, #60]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800df0a:	f043 0301 	orr.w	r3, r3, #1
 800df0e:	6313      	str	r3, [r2, #48]	@ 0x30
 800df10:	4b0d      	ldr	r3, [pc, #52]	@ (800df48 <HAL_UART_MspInit+0xec>)
 800df12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df14:	f003 0301 	and.w	r3, r3, #1
 800df18:	60fb      	str	r3, [r7, #12]
 800df1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800df1c:	230c      	movs	r3, #12
 800df1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df20:	2302      	movs	r3, #2
 800df22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df24:	2300      	movs	r3, #0
 800df26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800df28:	2300      	movs	r3, #0
 800df2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800df2c:	2307      	movs	r3, #7
 800df2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800df30:	f107 031c 	add.w	r3, r7, #28
 800df34:	4619      	mov	r1, r3
 800df36:	4805      	ldr	r0, [pc, #20]	@ (800df4c <HAL_UART_MspInit+0xf0>)
 800df38:	f000 fd7c 	bl	800ea34 <HAL_GPIO_Init>
}
 800df3c:	bf00      	nop
 800df3e:	3730      	adds	r7, #48	@ 0x30
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	40011000 	.word	0x40011000
 800df48:	40023800 	.word	0x40023800
 800df4c:	40020000 	.word	0x40020000
 800df50:	40004400 	.word	0x40004400

0800df54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800df54:	b480      	push	{r7}
 800df56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800df58:	bf00      	nop
 800df5a:	e7fd      	b.n	800df58 <NMI_Handler+0x4>

0800df5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800df5c:	b480      	push	{r7}
 800df5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800df60:	bf00      	nop
 800df62:	e7fd      	b.n	800df60 <HardFault_Handler+0x4>

0800df64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800df64:	b480      	push	{r7}
 800df66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800df68:	bf00      	nop
 800df6a:	e7fd      	b.n	800df68 <MemManage_Handler+0x4>

0800df6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800df6c:	b480      	push	{r7}
 800df6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800df70:	bf00      	nop
 800df72:	e7fd      	b.n	800df70 <BusFault_Handler+0x4>

0800df74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800df74:	b480      	push	{r7}
 800df76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800df78:	bf00      	nop
 800df7a:	e7fd      	b.n	800df78 <UsageFault_Handler+0x4>

0800df7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800df7c:	b480      	push	{r7}
 800df7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800df80:	bf00      	nop
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr

0800df8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800df8a:	b580      	push	{r7, lr}
 800df8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800df8e:	f000 f8d5 	bl	800e13c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800df92:	f003 f92b 	bl	80111ec <xTaskGetSchedulerState>
 800df96:	4603      	mov	r3, r0
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d001      	beq.n	800dfa0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800df9c:	f003 fdbc 	bl	8011b18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800dfa0:	bf00      	nop
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800dfa8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dfac:	f000 fefa 	bl	800eda4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800dfb0:	bf00      	nop
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b086      	sub	sp, #24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800dfbc:	4a14      	ldr	r2, [pc, #80]	@ (800e010 <_sbrk+0x5c>)
 800dfbe:	4b15      	ldr	r3, [pc, #84]	@ (800e014 <_sbrk+0x60>)
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800dfc8:	4b13      	ldr	r3, [pc, #76]	@ (800e018 <_sbrk+0x64>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d102      	bne.n	800dfd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800dfd0:	4b11      	ldr	r3, [pc, #68]	@ (800e018 <_sbrk+0x64>)
 800dfd2:	4a12      	ldr	r2, [pc, #72]	@ (800e01c <_sbrk+0x68>)
 800dfd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800dfd6:	4b10      	ldr	r3, [pc, #64]	@ (800e018 <_sbrk+0x64>)
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	4413      	add	r3, r2
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d207      	bcs.n	800dff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800dfe4:	f004 fc6c 	bl	80128c0 <__errno>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	220c      	movs	r2, #12
 800dfec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800dfee:	f04f 33ff 	mov.w	r3, #4294967295
 800dff2:	e009      	b.n	800e008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800dff4:	4b08      	ldr	r3, [pc, #32]	@ (800e018 <_sbrk+0x64>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800dffa:	4b07      	ldr	r3, [pc, #28]	@ (800e018 <_sbrk+0x64>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4413      	add	r3, r2
 800e002:	4a05      	ldr	r2, [pc, #20]	@ (800e018 <_sbrk+0x64>)
 800e004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e006:	68fb      	ldr	r3, [r7, #12]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3718      	adds	r7, #24
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	20018000 	.word	0x20018000
 800e014:	00000512 	.word	0x00000512
 800e018:	2000042c 	.word	0x2000042c
 800e01c:	20004358 	.word	0x20004358

0800e020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e020:	b480      	push	{r7}
 800e022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e024:	4b06      	ldr	r3, [pc, #24]	@ (800e040 <SystemInit+0x20>)
 800e026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e02a:	4a05      	ldr	r2, [pc, #20]	@ (800e040 <SystemInit+0x20>)
 800e02c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e030:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e034:	bf00      	nop
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
 800e03e:	bf00      	nop
 800e040:	e000ed00 	.word	0xe000ed00

0800e044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800e044:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800e07c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800e048:	f7ff ffea 	bl	800e020 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e04c:	480c      	ldr	r0, [pc, #48]	@ (800e080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e04e:	490d      	ldr	r1, [pc, #52]	@ (800e084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e050:	4a0d      	ldr	r2, [pc, #52]	@ (800e088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e054:	e002      	b.n	800e05c <LoopCopyDataInit>

0800e056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e05a:	3304      	adds	r3, #4

0800e05c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e05c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e05e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e060:	d3f9      	bcc.n	800e056 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e062:	4a0a      	ldr	r2, [pc, #40]	@ (800e08c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800e064:	4c0a      	ldr	r4, [pc, #40]	@ (800e090 <LoopFillZerobss+0x22>)
  movs r3, #0
 800e066:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e068:	e001      	b.n	800e06e <LoopFillZerobss>

0800e06a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e06a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e06c:	3204      	adds	r2, #4

0800e06e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e06e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e070:	d3fb      	bcc.n	800e06a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800e072:	f004 fc2b 	bl	80128cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e076:	f7fe fdf9 	bl	800cc6c <main>
  bx  lr    
 800e07a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800e07c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800e080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e084:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800e088:	08013824 	.word	0x08013824
  ldr r2, =_sbss
 800e08c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800e090:	20004358 	.word	0x20004358

0800e094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e094:	e7fe      	b.n	800e094 <ADC_IRQHandler>
	...

0800e098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e09c:	4b0e      	ldr	r3, [pc, #56]	@ (800e0d8 <HAL_Init+0x40>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4a0d      	ldr	r2, [pc, #52]	@ (800e0d8 <HAL_Init+0x40>)
 800e0a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e0a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e0a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d8 <HAL_Init+0x40>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4a0a      	ldr	r2, [pc, #40]	@ (800e0d8 <HAL_Init+0x40>)
 800e0ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e0b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e0b4:	4b08      	ldr	r3, [pc, #32]	@ (800e0d8 <HAL_Init+0x40>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a07      	ldr	r2, [pc, #28]	@ (800e0d8 <HAL_Init+0x40>)
 800e0ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e0be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e0c0:	2003      	movs	r0, #3
 800e0c2:	f000 f94f 	bl	800e364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e0c6:	200f      	movs	r0, #15
 800e0c8:	f000 f808 	bl	800e0dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e0cc:	f7ff fe56 	bl	800dd7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e0d0:	2300      	movs	r3, #0
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	40023c00 	.word	0x40023c00

0800e0dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b082      	sub	sp, #8
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e0e4:	4b12      	ldr	r3, [pc, #72]	@ (800e130 <HAL_InitTick+0x54>)
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	4b12      	ldr	r3, [pc, #72]	@ (800e134 <HAL_InitTick+0x58>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e0f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f000 f967 	bl	800e3ce <HAL_SYSTICK_Config>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e106:	2301      	movs	r3, #1
 800e108:	e00e      	b.n	800e128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2b0f      	cmp	r3, #15
 800e10e:	d80a      	bhi.n	800e126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e110:	2200      	movs	r2, #0
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	f04f 30ff 	mov.w	r0, #4294967295
 800e118:	f000 f92f 	bl	800e37a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e11c:	4a06      	ldr	r2, [pc, #24]	@ (800e138 <HAL_InitTick+0x5c>)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e122:	2300      	movs	r3, #0
 800e124:	e000      	b.n	800e128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e126:	2301      	movs	r3, #1
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3708      	adds	r7, #8
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	20000008 	.word	0x20000008
 800e134:	20000010 	.word	0x20000010
 800e138:	2000000c 	.word	0x2000000c

0800e13c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e13c:	b480      	push	{r7}
 800e13e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e140:	4b06      	ldr	r3, [pc, #24]	@ (800e15c <HAL_IncTick+0x20>)
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	461a      	mov	r2, r3
 800e146:	4b06      	ldr	r3, [pc, #24]	@ (800e160 <HAL_IncTick+0x24>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4413      	add	r3, r2
 800e14c:	4a04      	ldr	r2, [pc, #16]	@ (800e160 <HAL_IncTick+0x24>)
 800e14e:	6013      	str	r3, [r2, #0]
}
 800e150:	bf00      	nop
 800e152:	46bd      	mov	sp, r7
 800e154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e158:	4770      	bx	lr
 800e15a:	bf00      	nop
 800e15c:	20000010 	.word	0x20000010
 800e160:	20000494 	.word	0x20000494

0800e164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e164:	b480      	push	{r7}
 800e166:	af00      	add	r7, sp, #0
  return uwTick;
 800e168:	4b03      	ldr	r3, [pc, #12]	@ (800e178 <HAL_GetTick+0x14>)
 800e16a:	681b      	ldr	r3, [r3, #0]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	20000494 	.word	0x20000494

0800e17c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b084      	sub	sp, #16
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e184:	f7ff ffee 	bl	800e164 <HAL_GetTick>
 800e188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e194:	d005      	beq.n	800e1a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e196:	4b0a      	ldr	r3, [pc, #40]	@ (800e1c0 <HAL_Delay+0x44>)
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	461a      	mov	r2, r3
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	4413      	add	r3, r2
 800e1a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e1a2:	bf00      	nop
 800e1a4:	f7ff ffde 	bl	800e164 <HAL_GetTick>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	1ad3      	subs	r3, r2, r3
 800e1ae:	68fa      	ldr	r2, [r7, #12]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d8f7      	bhi.n	800e1a4 <HAL_Delay+0x28>
  {
  }
}
 800e1b4:	bf00      	nop
 800e1b6:	bf00      	nop
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}
 800e1be:	bf00      	nop
 800e1c0:	20000010 	.word	0x20000010

0800e1c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	b085      	sub	sp, #20
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f003 0307 	and.w	r3, r3, #7
 800e1d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e1d4:	4b0c      	ldr	r3, [pc, #48]	@ (800e208 <__NVIC_SetPriorityGrouping+0x44>)
 800e1d6:	68db      	ldr	r3, [r3, #12]
 800e1d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e1da:	68ba      	ldr	r2, [r7, #8]
 800e1dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800e1e0:	4013      	ands	r3, r2
 800e1e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e1ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800e1f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e1f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e1f6:	4a04      	ldr	r2, [pc, #16]	@ (800e208 <__NVIC_SetPriorityGrouping+0x44>)
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	60d3      	str	r3, [r2, #12]
}
 800e1fc:	bf00      	nop
 800e1fe:	3714      	adds	r7, #20
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr
 800e208:	e000ed00 	.word	0xe000ed00

0800e20c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e20c:	b480      	push	{r7}
 800e20e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e210:	4b04      	ldr	r3, [pc, #16]	@ (800e224 <__NVIC_GetPriorityGrouping+0x18>)
 800e212:	68db      	ldr	r3, [r3, #12]
 800e214:	0a1b      	lsrs	r3, r3, #8
 800e216:	f003 0307 	and.w	r3, r3, #7
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr
 800e224:	e000ed00 	.word	0xe000ed00

0800e228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	4603      	mov	r3, r0
 800e230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e236:	2b00      	cmp	r3, #0
 800e238:	db0b      	blt.n	800e252 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	f003 021f 	and.w	r2, r3, #31
 800e240:	4907      	ldr	r1, [pc, #28]	@ (800e260 <__NVIC_EnableIRQ+0x38>)
 800e242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e246:	095b      	lsrs	r3, r3, #5
 800e248:	2001      	movs	r0, #1
 800e24a:	fa00 f202 	lsl.w	r2, r0, r2
 800e24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800e252:	bf00      	nop
 800e254:	370c      	adds	r7, #12
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	e000e100 	.word	0xe000e100

0800e264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	4603      	mov	r3, r0
 800e26c:	6039      	str	r1, [r7, #0]
 800e26e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e274:	2b00      	cmp	r3, #0
 800e276:	db0a      	blt.n	800e28e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	b2da      	uxtb	r2, r3
 800e27c:	490c      	ldr	r1, [pc, #48]	@ (800e2b0 <__NVIC_SetPriority+0x4c>)
 800e27e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e282:	0112      	lsls	r2, r2, #4
 800e284:	b2d2      	uxtb	r2, r2
 800e286:	440b      	add	r3, r1
 800e288:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e28c:	e00a      	b.n	800e2a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	b2da      	uxtb	r2, r3
 800e292:	4908      	ldr	r1, [pc, #32]	@ (800e2b4 <__NVIC_SetPriority+0x50>)
 800e294:	79fb      	ldrb	r3, [r7, #7]
 800e296:	f003 030f 	and.w	r3, r3, #15
 800e29a:	3b04      	subs	r3, #4
 800e29c:	0112      	lsls	r2, r2, #4
 800e29e:	b2d2      	uxtb	r2, r2
 800e2a0:	440b      	add	r3, r1
 800e2a2:	761a      	strb	r2, [r3, #24]
}
 800e2a4:	bf00      	nop
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr
 800e2b0:	e000e100 	.word	0xe000e100
 800e2b4:	e000ed00 	.word	0xe000ed00

0800e2b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	b089      	sub	sp, #36	@ 0x24
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	60f8      	str	r0, [r7, #12]
 800e2c0:	60b9      	str	r1, [r7, #8]
 800e2c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f003 0307 	and.w	r3, r3, #7
 800e2ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	f1c3 0307 	rsb	r3, r3, #7
 800e2d2:	2b04      	cmp	r3, #4
 800e2d4:	bf28      	it	cs
 800e2d6:	2304      	movcs	r3, #4
 800e2d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	2b06      	cmp	r3, #6
 800e2e0:	d902      	bls.n	800e2e8 <NVIC_EncodePriority+0x30>
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	3b03      	subs	r3, #3
 800e2e6:	e000      	b.n	800e2ea <NVIC_EncodePriority+0x32>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2f6:	43da      	mvns	r2, r3
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	401a      	ands	r2, r3
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e300:	f04f 31ff 	mov.w	r1, #4294967295
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	fa01 f303 	lsl.w	r3, r1, r3
 800e30a:	43d9      	mvns	r1, r3
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e310:	4313      	orrs	r3, r2
         );
}
 800e312:	4618      	mov	r0, r3
 800e314:	3724      	adds	r7, #36	@ 0x24
 800e316:	46bd      	mov	sp, r7
 800e318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31c:	4770      	bx	lr
	...

0800e320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	3b01      	subs	r3, #1
 800e32c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e330:	d301      	bcc.n	800e336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e332:	2301      	movs	r3, #1
 800e334:	e00f      	b.n	800e356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e336:	4a0a      	ldr	r2, [pc, #40]	@ (800e360 <SysTick_Config+0x40>)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	3b01      	subs	r3, #1
 800e33c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e33e:	210f      	movs	r1, #15
 800e340:	f04f 30ff 	mov.w	r0, #4294967295
 800e344:	f7ff ff8e 	bl	800e264 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e348:	4b05      	ldr	r3, [pc, #20]	@ (800e360 <SysTick_Config+0x40>)
 800e34a:	2200      	movs	r2, #0
 800e34c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e34e:	4b04      	ldr	r3, [pc, #16]	@ (800e360 <SysTick_Config+0x40>)
 800e350:	2207      	movs	r2, #7
 800e352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}
 800e35e:	bf00      	nop
 800e360:	e000e010 	.word	0xe000e010

0800e364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f7ff ff29 	bl	800e1c4 <__NVIC_SetPriorityGrouping>
}
 800e372:	bf00      	nop
 800e374:	3708      	adds	r7, #8
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b086      	sub	sp, #24
 800e37e:	af00      	add	r7, sp, #0
 800e380:	4603      	mov	r3, r0
 800e382:	60b9      	str	r1, [r7, #8]
 800e384:	607a      	str	r2, [r7, #4]
 800e386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e388:	2300      	movs	r3, #0
 800e38a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e38c:	f7ff ff3e 	bl	800e20c <__NVIC_GetPriorityGrouping>
 800e390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	68b9      	ldr	r1, [r7, #8]
 800e396:	6978      	ldr	r0, [r7, #20]
 800e398:	f7ff ff8e 	bl	800e2b8 <NVIC_EncodePriority>
 800e39c:	4602      	mov	r2, r0
 800e39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3a2:	4611      	mov	r1, r2
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7ff ff5d 	bl	800e264 <__NVIC_SetPriority>
}
 800e3aa:	bf00      	nop
 800e3ac:	3718      	adds	r7, #24
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e3b2:	b580      	push	{r7, lr}
 800e3b4:	b082      	sub	sp, #8
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e3bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff ff31 	bl	800e228 <__NVIC_EnableIRQ>
}
 800e3c6:	bf00      	nop
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b082      	sub	sp, #8
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7ff ffa2 	bl	800e320 <SysTick_Config>
 800e3dc:	4603      	mov	r3, r0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3708      	adds	r7, #8
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b082      	sub	sp, #8
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d101      	bne.n	800e3f8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e00e      	b.n	800e416 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	795b      	ldrb	r3, [r3, #5]
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d105      	bne.n	800e40e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2200      	movs	r2, #0
 800e406:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f7ff fce3 	bl	800ddd4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2201      	movs	r2, #1
 800e412:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3708      	adds	r7, #8
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800e41e:	b480      	push	{r7}
 800e420:	b087      	sub	sp, #28
 800e422:	af00      	add	r7, sp, #0
 800e424:	60f8      	str	r0, [r7, #12]
 800e426:	60b9      	str	r1, [r7, #8]
 800e428:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800e42a:	2300      	movs	r3, #0
 800e42c:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2202      	movs	r2, #2
 800e432:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	689a      	ldr	r2, [r3, #8]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f042 0201 	orr.w	r2, r2, #1
 800e442:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800e444:	2300      	movs	r3, #0
 800e446:	617b      	str	r3, [r7, #20]
 800e448:	e00a      	b.n	800e460 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	68ba      	ldr	r2, [r7, #8]
 800e450:	441a      	add	r2, r3
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	6812      	ldr	r2, [r2, #0]
 800e458:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	3301      	adds	r3, #1
 800e45e:	617b      	str	r3, [r7, #20]
 800e460:	697a      	ldr	r2, [r7, #20]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	429a      	cmp	r2, r3
 800e466:	d3f0      	bcc.n	800e44a <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2201      	movs	r2, #1
 800e474:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800e476:	693b      	ldr	r3, [r7, #16]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	371c      	adds	r7, #28
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr

0800e484 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b086      	sub	sp, #24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e492:	2301      	movs	r3, #1
 800e494:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e496:	4b23      	ldr	r3, [pc, #140]	@ (800e524 <HAL_FLASH_Program+0xa0>)
 800e498:	7e1b      	ldrb	r3, [r3, #24]
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d101      	bne.n	800e4a2 <HAL_FLASH_Program+0x1e>
 800e49e:	2302      	movs	r3, #2
 800e4a0:	e03b      	b.n	800e51a <HAL_FLASH_Program+0x96>
 800e4a2:	4b20      	ldr	r3, [pc, #128]	@ (800e524 <HAL_FLASH_Program+0xa0>)
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e4a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e4ac:	f000 f860 	bl	800e570 <FLASH_WaitForLastOperation>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800e4b4:	7dfb      	ldrb	r3, [r7, #23]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d12b      	bne.n	800e512 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d105      	bne.n	800e4cc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800e4c0:	783b      	ldrb	r3, [r7, #0]
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	68b8      	ldr	r0, [r7, #8]
 800e4c6:	f000 f90b 	bl	800e6e0 <FLASH_Program_Byte>
 800e4ca:	e016      	b.n	800e4fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d105      	bne.n	800e4de <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800e4d2:	883b      	ldrh	r3, [r7, #0]
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	68b8      	ldr	r0, [r7, #8]
 800e4d8:	f000 f8de 	bl	800e698 <FLASH_Program_HalfWord>
 800e4dc:	e00d      	b.n	800e4fa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2b02      	cmp	r3, #2
 800e4e2:	d105      	bne.n	800e4f0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	68b8      	ldr	r0, [r7, #8]
 800e4ea:	f000 f8b3 	bl	800e654 <FLASH_Program_Word>
 800e4ee:	e004      	b.n	800e4fa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800e4f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4f4:	68b8      	ldr	r0, [r7, #8]
 800e4f6:	f000 f87b 	bl	800e5f0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e4fa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e4fe:	f000 f837 	bl	800e570 <FLASH_WaitForLastOperation>
 800e502:	4603      	mov	r3, r0
 800e504:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800e506:	4b08      	ldr	r3, [pc, #32]	@ (800e528 <HAL_FLASH_Program+0xa4>)
 800e508:	691b      	ldr	r3, [r3, #16]
 800e50a:	4a07      	ldr	r2, [pc, #28]	@ (800e528 <HAL_FLASH_Program+0xa4>)
 800e50c:	f023 0301 	bic.w	r3, r3, #1
 800e510:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e512:	4b04      	ldr	r3, [pc, #16]	@ (800e524 <HAL_FLASH_Program+0xa0>)
 800e514:	2200      	movs	r2, #0
 800e516:	761a      	strb	r2, [r3, #24]
  
  return status;
 800e518:	7dfb      	ldrb	r3, [r7, #23]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	3718      	adds	r7, #24
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}
 800e522:	bf00      	nop
 800e524:	20000498 	.word	0x20000498
 800e528:	40023c00 	.word	0x40023c00

0800e52c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e52c:	b480      	push	{r7}
 800e52e:	b083      	sub	sp, #12
 800e530:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e532:	2300      	movs	r3, #0
 800e534:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800e536:	4b0b      	ldr	r3, [pc, #44]	@ (800e564 <HAL_FLASH_Unlock+0x38>)
 800e538:	691b      	ldr	r3, [r3, #16]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	da0b      	bge.n	800e556 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e53e:	4b09      	ldr	r3, [pc, #36]	@ (800e564 <HAL_FLASH_Unlock+0x38>)
 800e540:	4a09      	ldr	r2, [pc, #36]	@ (800e568 <HAL_FLASH_Unlock+0x3c>)
 800e542:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e544:	4b07      	ldr	r3, [pc, #28]	@ (800e564 <HAL_FLASH_Unlock+0x38>)
 800e546:	4a09      	ldr	r2, [pc, #36]	@ (800e56c <HAL_FLASH_Unlock+0x40>)
 800e548:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800e54a:	4b06      	ldr	r3, [pc, #24]	@ (800e564 <HAL_FLASH_Unlock+0x38>)
 800e54c:	691b      	ldr	r3, [r3, #16]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	da01      	bge.n	800e556 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e552:	2301      	movs	r3, #1
 800e554:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e556:	79fb      	ldrb	r3, [r7, #7]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	370c      	adds	r7, #12
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr
 800e564:	40023c00 	.word	0x40023c00
 800e568:	45670123 	.word	0x45670123
 800e56c:	cdef89ab 	.word	0xcdef89ab

0800e570 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800e570:	b580      	push	{r7, lr}
 800e572:	b084      	sub	sp, #16
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e578:	2300      	movs	r3, #0
 800e57a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e57c:	4b1a      	ldr	r3, [pc, #104]	@ (800e5e8 <FLASH_WaitForLastOperation+0x78>)
 800e57e:	2200      	movs	r2, #0
 800e580:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800e582:	f7ff fdef 	bl	800e164 <HAL_GetTick>
 800e586:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800e588:	e010      	b.n	800e5ac <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e590:	d00c      	beq.n	800e5ac <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d007      	beq.n	800e5a8 <FLASH_WaitForLastOperation+0x38>
 800e598:	f7ff fde4 	bl	800e164 <HAL_GetTick>
 800e59c:	4602      	mov	r2, r0
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	1ad3      	subs	r3, r2, r3
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d201      	bcs.n	800e5ac <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800e5a8:	2303      	movs	r3, #3
 800e5aa:	e019      	b.n	800e5e0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800e5ac:	4b0f      	ldr	r3, [pc, #60]	@ (800e5ec <FLASH_WaitForLastOperation+0x7c>)
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d1e8      	bne.n	800e58a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800e5b8:	4b0c      	ldr	r3, [pc, #48]	@ (800e5ec <FLASH_WaitForLastOperation+0x7c>)
 800e5ba:	68db      	ldr	r3, [r3, #12]
 800e5bc:	f003 0301 	and.w	r3, r3, #1
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d002      	beq.n	800e5ca <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e5c4:	4b09      	ldr	r3, [pc, #36]	@ (800e5ec <FLASH_WaitForLastOperation+0x7c>)
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800e5ca:	4b08      	ldr	r3, [pc, #32]	@ (800e5ec <FLASH_WaitForLastOperation+0x7c>)
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d003      	beq.n	800e5de <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800e5d6:	f000 f8a5 	bl	800e724 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	e000      	b.n	800e5e0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800e5de:	2300      	movs	r3, #0
  
}  
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	3710      	adds	r7, #16
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	20000498 	.word	0x20000498
 800e5ec:	40023c00 	.word	0x40023c00

0800e5f0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e5fc:	4b14      	ldr	r3, [pc, #80]	@ (800e650 <FLASH_Program_DoubleWord+0x60>)
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	4a13      	ldr	r2, [pc, #76]	@ (800e650 <FLASH_Program_DoubleWord+0x60>)
 800e602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e606:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800e608:	4b11      	ldr	r3, [pc, #68]	@ (800e650 <FLASH_Program_DoubleWord+0x60>)
 800e60a:	691b      	ldr	r3, [r3, #16]
 800e60c:	4a10      	ldr	r2, [pc, #64]	@ (800e650 <FLASH_Program_DoubleWord+0x60>)
 800e60e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800e612:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e614:	4b0e      	ldr	r3, [pc, #56]	@ (800e650 <FLASH_Program_DoubleWord+0x60>)
 800e616:	691b      	ldr	r3, [r3, #16]
 800e618:	4a0d      	ldr	r2, [pc, #52]	@ (800e650 <FLASH_Program_DoubleWord+0x60>)
 800e61a:	f043 0301 	orr.w	r3, r3, #1
 800e61e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800e626:	f3bf 8f6f 	isb	sy
}
 800e62a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800e62c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e630:	f04f 0200 	mov.w	r2, #0
 800e634:	f04f 0300 	mov.w	r3, #0
 800e638:	000a      	movs	r2, r1
 800e63a:	2300      	movs	r3, #0
 800e63c:	68f9      	ldr	r1, [r7, #12]
 800e63e:	3104      	adds	r1, #4
 800e640:	4613      	mov	r3, r2
 800e642:	600b      	str	r3, [r1, #0]
}
 800e644:	bf00      	nop
 800e646:	3714      	adds	r7, #20
 800e648:	46bd      	mov	sp, r7
 800e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64e:	4770      	bx	lr
 800e650:	40023c00 	.word	0x40023c00

0800e654 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800e654:	b480      	push	{r7}
 800e656:	b083      	sub	sp, #12
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e65e:	4b0d      	ldr	r3, [pc, #52]	@ (800e694 <FLASH_Program_Word+0x40>)
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	4a0c      	ldr	r2, [pc, #48]	@ (800e694 <FLASH_Program_Word+0x40>)
 800e664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e668:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800e66a:	4b0a      	ldr	r3, [pc, #40]	@ (800e694 <FLASH_Program_Word+0x40>)
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	4a09      	ldr	r2, [pc, #36]	@ (800e694 <FLASH_Program_Word+0x40>)
 800e670:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e674:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e676:	4b07      	ldr	r3, [pc, #28]	@ (800e694 <FLASH_Program_Word+0x40>)
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	4a06      	ldr	r2, [pc, #24]	@ (800e694 <FLASH_Program_Word+0x40>)
 800e67c:	f043 0301 	orr.w	r3, r3, #1
 800e680:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	683a      	ldr	r2, [r7, #0]
 800e686:	601a      	str	r2, [r3, #0]
}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr
 800e694:	40023c00 	.word	0x40023c00

0800e698 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	460b      	mov	r3, r1
 800e6a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e6a4:	4b0d      	ldr	r3, [pc, #52]	@ (800e6dc <FLASH_Program_HalfWord+0x44>)
 800e6a6:	691b      	ldr	r3, [r3, #16]
 800e6a8:	4a0c      	ldr	r2, [pc, #48]	@ (800e6dc <FLASH_Program_HalfWord+0x44>)
 800e6aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800e6b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e6dc <FLASH_Program_HalfWord+0x44>)
 800e6b2:	691b      	ldr	r3, [r3, #16]
 800e6b4:	4a09      	ldr	r2, [pc, #36]	@ (800e6dc <FLASH_Program_HalfWord+0x44>)
 800e6b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e6ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e6bc:	4b07      	ldr	r3, [pc, #28]	@ (800e6dc <FLASH_Program_HalfWord+0x44>)
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	4a06      	ldr	r2, [pc, #24]	@ (800e6dc <FLASH_Program_HalfWord+0x44>)
 800e6c2:	f043 0301 	orr.w	r3, r3, #1
 800e6c6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	887a      	ldrh	r2, [r7, #2]
 800e6cc:	801a      	strh	r2, [r3, #0]
}
 800e6ce:	bf00      	nop
 800e6d0:	370c      	adds	r7, #12
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	40023c00 	.word	0x40023c00

0800e6e0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e6ec:	4b0c      	ldr	r3, [pc, #48]	@ (800e720 <FLASH_Program_Byte+0x40>)
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	4a0b      	ldr	r2, [pc, #44]	@ (800e720 <FLASH_Program_Byte+0x40>)
 800e6f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800e6f8:	4b09      	ldr	r3, [pc, #36]	@ (800e720 <FLASH_Program_Byte+0x40>)
 800e6fa:	4a09      	ldr	r2, [pc, #36]	@ (800e720 <FLASH_Program_Byte+0x40>)
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e700:	4b07      	ldr	r3, [pc, #28]	@ (800e720 <FLASH_Program_Byte+0x40>)
 800e702:	691b      	ldr	r3, [r3, #16]
 800e704:	4a06      	ldr	r2, [pc, #24]	@ (800e720 <FLASH_Program_Byte+0x40>)
 800e706:	f043 0301 	orr.w	r3, r3, #1
 800e70a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	78fa      	ldrb	r2, [r7, #3]
 800e710:	701a      	strb	r2, [r3, #0]
}
 800e712:	bf00      	nop
 800e714:	370c      	adds	r7, #12
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop
 800e720:	40023c00 	.word	0x40023c00

0800e724 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800e724:	b480      	push	{r7}
 800e726:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800e728:	4b2f      	ldr	r3, [pc, #188]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	f003 0310 	and.w	r3, r3, #16
 800e730:	2b00      	cmp	r3, #0
 800e732:	d008      	beq.n	800e746 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e734:	4b2d      	ldr	r3, [pc, #180]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e736:	69db      	ldr	r3, [r3, #28]
 800e738:	f043 0310 	orr.w	r3, r3, #16
 800e73c:	4a2b      	ldr	r2, [pc, #172]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e73e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800e740:	4b29      	ldr	r3, [pc, #164]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e742:	2210      	movs	r2, #16
 800e744:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800e746:	4b28      	ldr	r3, [pc, #160]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	f003 0320 	and.w	r3, r3, #32
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d008      	beq.n	800e764 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e752:	4b26      	ldr	r3, [pc, #152]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e754:	69db      	ldr	r3, [r3, #28]
 800e756:	f043 0308 	orr.w	r3, r3, #8
 800e75a:	4a24      	ldr	r2, [pc, #144]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e75c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800e75e:	4b22      	ldr	r3, [pc, #136]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e760:	2220      	movs	r2, #32
 800e762:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800e764:	4b20      	ldr	r3, [pc, #128]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d008      	beq.n	800e782 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800e770:	4b1e      	ldr	r3, [pc, #120]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e772:	69db      	ldr	r3, [r3, #28]
 800e774:	f043 0304 	orr.w	r3, r3, #4
 800e778:	4a1c      	ldr	r2, [pc, #112]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e77a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800e77c:	4b1a      	ldr	r3, [pc, #104]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e77e:	2240      	movs	r2, #64	@ 0x40
 800e780:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800e782:	4b19      	ldr	r3, [pc, #100]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d008      	beq.n	800e7a0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800e78e:	4b17      	ldr	r3, [pc, #92]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e790:	69db      	ldr	r3, [r3, #28]
 800e792:	f043 0302 	orr.w	r3, r3, #2
 800e796:	4a15      	ldr	r2, [pc, #84]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e798:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800e79a:	4b13      	ldr	r3, [pc, #76]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e79c:	2280      	movs	r2, #128	@ 0x80
 800e79e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800e7a0:	4b11      	ldr	r3, [pc, #68]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e7a2:	68db      	ldr	r3, [r3, #12]
 800e7a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d009      	beq.n	800e7c0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e7ac:	4b0f      	ldr	r3, [pc, #60]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e7ae:	69db      	ldr	r3, [r3, #28]
 800e7b0:	f043 0301 	orr.w	r3, r3, #1
 800e7b4:	4a0d      	ldr	r2, [pc, #52]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e7b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800e7b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e7ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e7be:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800e7c0:	4b09      	ldr	r3, [pc, #36]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	f003 0302 	and.w	r3, r3, #2
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d008      	beq.n	800e7de <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800e7cc:	4b07      	ldr	r3, [pc, #28]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e7ce:	69db      	ldr	r3, [r3, #28]
 800e7d0:	f043 0320 	orr.w	r3, r3, #32
 800e7d4:	4a05      	ldr	r2, [pc, #20]	@ (800e7ec <FLASH_SetErrorCode+0xc8>)
 800e7d6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800e7d8:	4b03      	ldr	r3, [pc, #12]	@ (800e7e8 <FLASH_SetErrorCode+0xc4>)
 800e7da:	2202      	movs	r2, #2
 800e7dc:	60da      	str	r2, [r3, #12]
  }
}
 800e7de:	bf00      	nop
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr
 800e7e8:	40023c00 	.word	0x40023c00
 800e7ec:	20000498 	.word	0x20000498

0800e7f0 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800e7fe:	2300      	movs	r3, #0
 800e800:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e802:	4b31      	ldr	r3, [pc, #196]	@ (800e8c8 <HAL_FLASHEx_Erase+0xd8>)
 800e804:	7e1b      	ldrb	r3, [r3, #24]
 800e806:	2b01      	cmp	r3, #1
 800e808:	d101      	bne.n	800e80e <HAL_FLASHEx_Erase+0x1e>
 800e80a:	2302      	movs	r3, #2
 800e80c:	e058      	b.n	800e8c0 <HAL_FLASHEx_Erase+0xd0>
 800e80e:	4b2e      	ldr	r3, [pc, #184]	@ (800e8c8 <HAL_FLASHEx_Erase+0xd8>)
 800e810:	2201      	movs	r2, #1
 800e812:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e814:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e818:	f7ff feaa 	bl	800e570 <FLASH_WaitForLastOperation>
 800e81c:	4603      	mov	r3, r0
 800e81e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e820:	7bfb      	ldrb	r3, [r7, #15]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d148      	bne.n	800e8b8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	f04f 32ff 	mov.w	r2, #4294967295
 800e82c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d115      	bne.n	800e862 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	b2da      	uxtb	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	4619      	mov	r1, r3
 800e842:	4610      	mov	r0, r2
 800e844:	f000 f844 	bl	800e8d0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e848:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e84c:	f7ff fe90 	bl	800e570 <FLASH_WaitForLastOperation>
 800e850:	4603      	mov	r3, r0
 800e852:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800e854:	4b1d      	ldr	r3, [pc, #116]	@ (800e8cc <HAL_FLASHEx_Erase+0xdc>)
 800e856:	691b      	ldr	r3, [r3, #16]
 800e858:	4a1c      	ldr	r2, [pc, #112]	@ (800e8cc <HAL_FLASHEx_Erase+0xdc>)
 800e85a:	f023 0304 	bic.w	r3, r3, #4
 800e85e:	6113      	str	r3, [r2, #16]
 800e860:	e028      	b.n	800e8b4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	689b      	ldr	r3, [r3, #8]
 800e866:	60bb      	str	r3, [r7, #8]
 800e868:	e01c      	b.n	800e8a4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	b2db      	uxtb	r3, r3
 800e870:	4619      	mov	r1, r3
 800e872:	68b8      	ldr	r0, [r7, #8]
 800e874:	f000 f850 	bl	800e918 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e878:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e87c:	f7ff fe78 	bl	800e570 <FLASH_WaitForLastOperation>
 800e880:	4603      	mov	r3, r0
 800e882:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800e884:	4b11      	ldr	r3, [pc, #68]	@ (800e8cc <HAL_FLASHEx_Erase+0xdc>)
 800e886:	691b      	ldr	r3, [r3, #16]
 800e888:	4a10      	ldr	r2, [pc, #64]	@ (800e8cc <HAL_FLASHEx_Erase+0xdc>)
 800e88a:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800e88e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800e890:	7bfb      	ldrb	r3, [r7, #15]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d003      	beq.n	800e89e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	68ba      	ldr	r2, [r7, #8]
 800e89a:	601a      	str	r2, [r3, #0]
          break;
 800e89c:	e00a      	b.n	800e8b4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	60bb      	str	r3, [r7, #8]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	68da      	ldr	r2, [r3, #12]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	68ba      	ldr	r2, [r7, #8]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d3da      	bcc.n	800e86a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e8b4:	f000 f878 	bl	800e9a8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e8b8:	4b03      	ldr	r3, [pc, #12]	@ (800e8c8 <HAL_FLASHEx_Erase+0xd8>)
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	761a      	strb	r2, [r3, #24]

  return status;
 800e8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3710      	adds	r7, #16
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	20000498 	.word	0x20000498
 800e8cc:	40023c00 	.word	0x40023c00

0800e8d0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	6039      	str	r1, [r7, #0]
 800e8da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e8dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e914 <FLASH_MassErase+0x44>)
 800e8de:	691b      	ldr	r3, [r3, #16]
 800e8e0:	4a0c      	ldr	r2, [pc, #48]	@ (800e914 <FLASH_MassErase+0x44>)
 800e8e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e8e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800e8e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e914 <FLASH_MassErase+0x44>)
 800e8ea:	691b      	ldr	r3, [r3, #16]
 800e8ec:	4a09      	ldr	r2, [pc, #36]	@ (800e914 <FLASH_MassErase+0x44>)
 800e8ee:	f043 0304 	orr.w	r3, r3, #4
 800e8f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800e8f4:	4b07      	ldr	r3, [pc, #28]	@ (800e914 <FLASH_MassErase+0x44>)
 800e8f6:	691a      	ldr	r2, [r3, #16]
 800e8f8:	79fb      	ldrb	r3, [r7, #7]
 800e8fa:	021b      	lsls	r3, r3, #8
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	4a05      	ldr	r2, [pc, #20]	@ (800e914 <FLASH_MassErase+0x44>)
 800e900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e904:	6113      	str	r3, [r2, #16]
}
 800e906:	bf00      	nop
 800e908:	370c      	adds	r7, #12
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	40023c00 	.word	0x40023c00

0800e918 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800e918:	b480      	push	{r7}
 800e91a:	b085      	sub	sp, #20
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	460b      	mov	r3, r1
 800e922:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800e924:	2300      	movs	r3, #0
 800e926:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800e928:	78fb      	ldrb	r3, [r7, #3]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d102      	bne.n	800e934 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800e92e:	2300      	movs	r3, #0
 800e930:	60fb      	str	r3, [r7, #12]
 800e932:	e010      	b.n	800e956 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800e934:	78fb      	ldrb	r3, [r7, #3]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d103      	bne.n	800e942 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800e93a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e93e:	60fb      	str	r3, [r7, #12]
 800e940:	e009      	b.n	800e956 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800e942:	78fb      	ldrb	r3, [r7, #3]
 800e944:	2b02      	cmp	r3, #2
 800e946:	d103      	bne.n	800e950 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800e948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e94c:	60fb      	str	r3, [r7, #12]
 800e94e:	e002      	b.n	800e956 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800e950:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e954:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e956:	4b13      	ldr	r3, [pc, #76]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e958:	691b      	ldr	r3, [r3, #16]
 800e95a:	4a12      	ldr	r2, [pc, #72]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e95c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e960:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800e962:	4b10      	ldr	r3, [pc, #64]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e964:	691a      	ldr	r2, [r3, #16]
 800e966:	490f      	ldr	r1, [pc, #60]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	4313      	orrs	r3, r2
 800e96c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800e96e:	4b0d      	ldr	r3, [pc, #52]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	4a0c      	ldr	r2, [pc, #48]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e974:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e978:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800e97a:	4b0a      	ldr	r3, [pc, #40]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e97c:	691a      	ldr	r2, [r3, #16]
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	00db      	lsls	r3, r3, #3
 800e982:	4313      	orrs	r3, r2
 800e984:	4a07      	ldr	r2, [pc, #28]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e986:	f043 0302 	orr.w	r3, r3, #2
 800e98a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800e98c:	4b05      	ldr	r3, [pc, #20]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e98e:	691b      	ldr	r3, [r3, #16]
 800e990:	4a04      	ldr	r2, [pc, #16]	@ (800e9a4 <FLASH_Erase_Sector+0x8c>)
 800e992:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e996:	6113      	str	r3, [r2, #16]
}
 800e998:	bf00      	nop
 800e99a:	3714      	adds	r7, #20
 800e99c:	46bd      	mov	sp, r7
 800e99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a2:	4770      	bx	lr
 800e9a4:	40023c00 	.word	0x40023c00

0800e9a8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800e9ac:	4b20      	ldr	r3, [pc, #128]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d017      	beq.n	800e9e8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e9b8:	4b1d      	ldr	r3, [pc, #116]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a1c      	ldr	r2, [pc, #112]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9be:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e9c2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e9c4:	4b1a      	ldr	r3, [pc, #104]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a19      	ldr	r2, [pc, #100]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e9ce:	6013      	str	r3, [r2, #0]
 800e9d0:	4b17      	ldr	r3, [pc, #92]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a16      	ldr	r2, [pc, #88]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e9da:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e9dc:	4b14      	ldr	r3, [pc, #80]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	4a13      	ldr	r2, [pc, #76]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e9e6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800e9e8:	4b11      	ldr	r3, [pc, #68]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d017      	beq.n	800ea24 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	4a0d      	ldr	r2, [pc, #52]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800e9fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e9fe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800ea00:	4b0b      	ldr	r3, [pc, #44]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	4a0a      	ldr	r2, [pc, #40]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800ea06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ea0a:	6013      	str	r3, [r2, #0]
 800ea0c:	4b08      	ldr	r3, [pc, #32]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4a07      	ldr	r2, [pc, #28]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800ea12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ea18:	4b05      	ldr	r3, [pc, #20]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a04      	ldr	r2, [pc, #16]	@ (800ea30 <FLASH_FlushCaches+0x88>)
 800ea1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ea22:	6013      	str	r3, [r2, #0]
  }
}
 800ea24:	bf00      	nop
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	40023c00 	.word	0x40023c00

0800ea34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b089      	sub	sp, #36	@ 0x24
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ea42:	2300      	movs	r3, #0
 800ea44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ea46:	2300      	movs	r3, #0
 800ea48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	61fb      	str	r3, [r7, #28]
 800ea4e:	e159      	b.n	800ed04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ea50:	2201      	movs	r2, #1
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	fa02 f303 	lsl.w	r3, r2, r3
 800ea58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	697a      	ldr	r2, [r7, #20]
 800ea60:	4013      	ands	r3, r2
 800ea62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ea64:	693a      	ldr	r2, [r7, #16]
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	f040 8148 	bne.w	800ecfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	f003 0303 	and.w	r3, r3, #3
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d005      	beq.n	800ea86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ea82:	2b02      	cmp	r3, #2
 800ea84:	d130      	bne.n	800eae8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	005b      	lsls	r3, r3, #1
 800ea90:	2203      	movs	r2, #3
 800ea92:	fa02 f303 	lsl.w	r3, r2, r3
 800ea96:	43db      	mvns	r3, r3
 800ea98:	69ba      	ldr	r2, [r7, #24]
 800ea9a:	4013      	ands	r3, r2
 800ea9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	68da      	ldr	r2, [r3, #12]
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	005b      	lsls	r3, r3, #1
 800eaa6:	fa02 f303 	lsl.w	r3, r2, r3
 800eaaa:	69ba      	ldr	r2, [r7, #24]
 800eaac:	4313      	orrs	r3, r2
 800eaae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	69ba      	ldr	r2, [r7, #24]
 800eab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800eabc:	2201      	movs	r2, #1
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	fa02 f303 	lsl.w	r3, r2, r3
 800eac4:	43db      	mvns	r3, r3
 800eac6:	69ba      	ldr	r2, [r7, #24]
 800eac8:	4013      	ands	r3, r2
 800eaca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	091b      	lsrs	r3, r3, #4
 800ead2:	f003 0201 	and.w	r2, r3, #1
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	fa02 f303 	lsl.w	r3, r2, r3
 800eadc:	69ba      	ldr	r2, [r7, #24]
 800eade:	4313      	orrs	r3, r2
 800eae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	69ba      	ldr	r2, [r7, #24]
 800eae6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	f003 0303 	and.w	r3, r3, #3
 800eaf0:	2b03      	cmp	r3, #3
 800eaf2:	d017      	beq.n	800eb24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	005b      	lsls	r3, r3, #1
 800eafe:	2203      	movs	r2, #3
 800eb00:	fa02 f303 	lsl.w	r3, r2, r3
 800eb04:	43db      	mvns	r3, r3
 800eb06:	69ba      	ldr	r2, [r7, #24]
 800eb08:	4013      	ands	r3, r2
 800eb0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	689a      	ldr	r2, [r3, #8]
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	005b      	lsls	r3, r3, #1
 800eb14:	fa02 f303 	lsl.w	r3, r2, r3
 800eb18:	69ba      	ldr	r2, [r7, #24]
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	69ba      	ldr	r2, [r7, #24]
 800eb22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	f003 0303 	and.w	r3, r3, #3
 800eb2c:	2b02      	cmp	r3, #2
 800eb2e:	d123      	bne.n	800eb78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	08da      	lsrs	r2, r3, #3
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	3208      	adds	r2, #8
 800eb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800eb3e:	69fb      	ldr	r3, [r7, #28]
 800eb40:	f003 0307 	and.w	r3, r3, #7
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	220f      	movs	r2, #15
 800eb48:	fa02 f303 	lsl.w	r3, r2, r3
 800eb4c:	43db      	mvns	r3, r3
 800eb4e:	69ba      	ldr	r2, [r7, #24]
 800eb50:	4013      	ands	r3, r2
 800eb52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	691a      	ldr	r2, [r3, #16]
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	f003 0307 	and.w	r3, r3, #7
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	fa02 f303 	lsl.w	r3, r2, r3
 800eb64:	69ba      	ldr	r2, [r7, #24]
 800eb66:	4313      	orrs	r3, r2
 800eb68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	08da      	lsrs	r2, r3, #3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	3208      	adds	r2, #8
 800eb72:	69b9      	ldr	r1, [r7, #24]
 800eb74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	005b      	lsls	r3, r3, #1
 800eb82:	2203      	movs	r2, #3
 800eb84:	fa02 f303 	lsl.w	r3, r2, r3
 800eb88:	43db      	mvns	r3, r3
 800eb8a:	69ba      	ldr	r2, [r7, #24]
 800eb8c:	4013      	ands	r3, r2
 800eb8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	f003 0203 	and.w	r2, r3, #3
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	005b      	lsls	r3, r3, #1
 800eb9c:	fa02 f303 	lsl.w	r3, r2, r3
 800eba0:	69ba      	ldr	r2, [r7, #24]
 800eba2:	4313      	orrs	r3, r2
 800eba4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	69ba      	ldr	r2, [r7, #24]
 800ebaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f000 80a2 	beq.w	800ecfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60fb      	str	r3, [r7, #12]
 800ebbe:	4b57      	ldr	r3, [pc, #348]	@ (800ed1c <HAL_GPIO_Init+0x2e8>)
 800ebc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebc2:	4a56      	ldr	r2, [pc, #344]	@ (800ed1c <HAL_GPIO_Init+0x2e8>)
 800ebc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ebc8:	6453      	str	r3, [r2, #68]	@ 0x44
 800ebca:	4b54      	ldr	r3, [pc, #336]	@ (800ed1c <HAL_GPIO_Init+0x2e8>)
 800ebcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ebd2:	60fb      	str	r3, [r7, #12]
 800ebd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ebd6:	4a52      	ldr	r2, [pc, #328]	@ (800ed20 <HAL_GPIO_Init+0x2ec>)
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	089b      	lsrs	r3, r3, #2
 800ebdc:	3302      	adds	r3, #2
 800ebde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ebe4:	69fb      	ldr	r3, [r7, #28]
 800ebe6:	f003 0303 	and.w	r3, r3, #3
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	220f      	movs	r2, #15
 800ebee:	fa02 f303 	lsl.w	r3, r2, r3
 800ebf2:	43db      	mvns	r3, r3
 800ebf4:	69ba      	ldr	r2, [r7, #24]
 800ebf6:	4013      	ands	r3, r2
 800ebf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	4a49      	ldr	r2, [pc, #292]	@ (800ed24 <HAL_GPIO_Init+0x2f0>)
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	d019      	beq.n	800ec36 <HAL_GPIO_Init+0x202>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	4a48      	ldr	r2, [pc, #288]	@ (800ed28 <HAL_GPIO_Init+0x2f4>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d013      	beq.n	800ec32 <HAL_GPIO_Init+0x1fe>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	4a47      	ldr	r2, [pc, #284]	@ (800ed2c <HAL_GPIO_Init+0x2f8>)
 800ec0e:	4293      	cmp	r3, r2
 800ec10:	d00d      	beq.n	800ec2e <HAL_GPIO_Init+0x1fa>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4a46      	ldr	r2, [pc, #280]	@ (800ed30 <HAL_GPIO_Init+0x2fc>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d007      	beq.n	800ec2a <HAL_GPIO_Init+0x1f6>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	4a45      	ldr	r2, [pc, #276]	@ (800ed34 <HAL_GPIO_Init+0x300>)
 800ec1e:	4293      	cmp	r3, r2
 800ec20:	d101      	bne.n	800ec26 <HAL_GPIO_Init+0x1f2>
 800ec22:	2304      	movs	r3, #4
 800ec24:	e008      	b.n	800ec38 <HAL_GPIO_Init+0x204>
 800ec26:	2307      	movs	r3, #7
 800ec28:	e006      	b.n	800ec38 <HAL_GPIO_Init+0x204>
 800ec2a:	2303      	movs	r3, #3
 800ec2c:	e004      	b.n	800ec38 <HAL_GPIO_Init+0x204>
 800ec2e:	2302      	movs	r3, #2
 800ec30:	e002      	b.n	800ec38 <HAL_GPIO_Init+0x204>
 800ec32:	2301      	movs	r3, #1
 800ec34:	e000      	b.n	800ec38 <HAL_GPIO_Init+0x204>
 800ec36:	2300      	movs	r3, #0
 800ec38:	69fa      	ldr	r2, [r7, #28]
 800ec3a:	f002 0203 	and.w	r2, r2, #3
 800ec3e:	0092      	lsls	r2, r2, #2
 800ec40:	4093      	lsls	r3, r2
 800ec42:	69ba      	ldr	r2, [r7, #24]
 800ec44:	4313      	orrs	r3, r2
 800ec46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ec48:	4935      	ldr	r1, [pc, #212]	@ (800ed20 <HAL_GPIO_Init+0x2ec>)
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	089b      	lsrs	r3, r3, #2
 800ec4e:	3302      	adds	r3, #2
 800ec50:	69ba      	ldr	r2, [r7, #24]
 800ec52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ec56:	4b38      	ldr	r3, [pc, #224]	@ (800ed38 <HAL_GPIO_Init+0x304>)
 800ec58:	689b      	ldr	r3, [r3, #8]
 800ec5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	43db      	mvns	r3, r3
 800ec60:	69ba      	ldr	r2, [r7, #24]
 800ec62:	4013      	ands	r3, r2
 800ec64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	685b      	ldr	r3, [r3, #4]
 800ec6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d003      	beq.n	800ec7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800ec72:	69ba      	ldr	r2, [r7, #24]
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	4313      	orrs	r3, r2
 800ec78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ec7a:	4a2f      	ldr	r2, [pc, #188]	@ (800ed38 <HAL_GPIO_Init+0x304>)
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ec80:	4b2d      	ldr	r3, [pc, #180]	@ (800ed38 <HAL_GPIO_Init+0x304>)
 800ec82:	68db      	ldr	r3, [r3, #12]
 800ec84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	43db      	mvns	r3, r3
 800ec8a:	69ba      	ldr	r2, [r7, #24]
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d003      	beq.n	800eca4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ec9c:	69ba      	ldr	r2, [r7, #24]
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	4313      	orrs	r3, r2
 800eca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800eca4:	4a24      	ldr	r2, [pc, #144]	@ (800ed38 <HAL_GPIO_Init+0x304>)
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ecaa:	4b23      	ldr	r3, [pc, #140]	@ (800ed38 <HAL_GPIO_Init+0x304>)
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	43db      	mvns	r3, r3
 800ecb4:	69ba      	ldr	r2, [r7, #24]
 800ecb6:	4013      	ands	r3, r2
 800ecb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	685b      	ldr	r3, [r3, #4]
 800ecbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d003      	beq.n	800ecce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ecc6:	69ba      	ldr	r2, [r7, #24]
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	4313      	orrs	r3, r2
 800eccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ecce:	4a1a      	ldr	r2, [pc, #104]	@ (800ed38 <HAL_GPIO_Init+0x304>)
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ecd4:	4b18      	ldr	r3, [pc, #96]	@ (800ed38 <HAL_GPIO_Init+0x304>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	43db      	mvns	r3, r3
 800ecde:	69ba      	ldr	r2, [r7, #24]
 800ece0:	4013      	ands	r3, r2
 800ece2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d003      	beq.n	800ecf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800ecf0:	69ba      	ldr	r2, [r7, #24]
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ecf8:	4a0f      	ldr	r2, [pc, #60]	@ (800ed38 <HAL_GPIO_Init+0x304>)
 800ecfa:	69bb      	ldr	r3, [r7, #24]
 800ecfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	3301      	adds	r3, #1
 800ed02:	61fb      	str	r3, [r7, #28]
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	2b0f      	cmp	r3, #15
 800ed08:	f67f aea2 	bls.w	800ea50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ed0c:	bf00      	nop
 800ed0e:	bf00      	nop
 800ed10:	3724      	adds	r7, #36	@ 0x24
 800ed12:	46bd      	mov	sp, r7
 800ed14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed18:	4770      	bx	lr
 800ed1a:	bf00      	nop
 800ed1c:	40023800 	.word	0x40023800
 800ed20:	40013800 	.word	0x40013800
 800ed24:	40020000 	.word	0x40020000
 800ed28:	40020400 	.word	0x40020400
 800ed2c:	40020800 	.word	0x40020800
 800ed30:	40020c00 	.word	0x40020c00
 800ed34:	40021000 	.word	0x40021000
 800ed38:	40013c00 	.word	0x40013c00

0800ed3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	460b      	mov	r3, r1
 800ed46:	807b      	strh	r3, [r7, #2]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ed4c:	787b      	ldrb	r3, [r7, #1]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d003      	beq.n	800ed5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ed52:	887a      	ldrh	r2, [r7, #2]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ed58:	e003      	b.n	800ed62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ed5a:	887b      	ldrh	r3, [r7, #2]
 800ed5c:	041a      	lsls	r2, r3, #16
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	619a      	str	r2, [r3, #24]
}
 800ed62:	bf00      	nop
 800ed64:	370c      	adds	r7, #12
 800ed66:	46bd      	mov	sp, r7
 800ed68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6c:	4770      	bx	lr

0800ed6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ed6e:	b480      	push	{r7}
 800ed70:	b085      	sub	sp, #20
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	6078      	str	r0, [r7, #4]
 800ed76:	460b      	mov	r3, r1
 800ed78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ed80:	887a      	ldrh	r2, [r7, #2]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	4013      	ands	r3, r2
 800ed86:	041a      	lsls	r2, r3, #16
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	43d9      	mvns	r1, r3
 800ed8c:	887b      	ldrh	r3, [r7, #2]
 800ed8e:	400b      	ands	r3, r1
 800ed90:	431a      	orrs	r2, r3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	619a      	str	r2, [r3, #24]
}
 800ed96:	bf00      	nop
 800ed98:	3714      	adds	r7, #20
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
	...

0800eda4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	4603      	mov	r3, r0
 800edac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800edae:	4b08      	ldr	r3, [pc, #32]	@ (800edd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800edb0:	695a      	ldr	r2, [r3, #20]
 800edb2:	88fb      	ldrh	r3, [r7, #6]
 800edb4:	4013      	ands	r3, r2
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d006      	beq.n	800edc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800edba:	4a05      	ldr	r2, [pc, #20]	@ (800edd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800edbc:	88fb      	ldrh	r3, [r7, #6]
 800edbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800edc0:	88fb      	ldrh	r3, [r7, #6]
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7fe fa76 	bl	800d2b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800edc8:	bf00      	nop
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	40013c00 	.word	0x40013c00

0800edd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d101      	bne.n	800ede6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ede2:	2301      	movs	r3, #1
 800ede4:	e267      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d075      	beq.n	800eede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800edf2:	4b88      	ldr	r3, [pc, #544]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	f003 030c 	and.w	r3, r3, #12
 800edfa:	2b04      	cmp	r3, #4
 800edfc:	d00c      	beq.n	800ee18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800edfe:	4b85      	ldr	r3, [pc, #532]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ee06:	2b08      	cmp	r3, #8
 800ee08:	d112      	bne.n	800ee30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ee0a:	4b82      	ldr	r3, [pc, #520]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ee12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ee16:	d10b      	bne.n	800ee30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ee18:	4b7e      	ldr	r3, [pc, #504]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d05b      	beq.n	800eedc <HAL_RCC_OscConfig+0x108>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d157      	bne.n	800eedc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	e242      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee38:	d106      	bne.n	800ee48 <HAL_RCC_OscConfig+0x74>
 800ee3a:	4b76      	ldr	r3, [pc, #472]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	4a75      	ldr	r2, [pc, #468]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee44:	6013      	str	r3, [r2, #0]
 800ee46:	e01d      	b.n	800ee84 <HAL_RCC_OscConfig+0xb0>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	685b      	ldr	r3, [r3, #4]
 800ee4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ee50:	d10c      	bne.n	800ee6c <HAL_RCC_OscConfig+0x98>
 800ee52:	4b70      	ldr	r3, [pc, #448]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4a6f      	ldr	r2, [pc, #444]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ee5c:	6013      	str	r3, [r2, #0]
 800ee5e:	4b6d      	ldr	r3, [pc, #436]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	4a6c      	ldr	r2, [pc, #432]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ee68:	6013      	str	r3, [r2, #0]
 800ee6a:	e00b      	b.n	800ee84 <HAL_RCC_OscConfig+0xb0>
 800ee6c:	4b69      	ldr	r3, [pc, #420]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a68      	ldr	r2, [pc, #416]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee76:	6013      	str	r3, [r2, #0]
 800ee78:	4b66      	ldr	r3, [pc, #408]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	4a65      	ldr	r2, [pc, #404]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ee7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ee82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d013      	beq.n	800eeb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee8c:	f7ff f96a 	bl	800e164 <HAL_GetTick>
 800ee90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ee92:	e008      	b.n	800eea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ee94:	f7ff f966 	bl	800e164 <HAL_GetTick>
 800ee98:	4602      	mov	r2, r0
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	1ad3      	subs	r3, r2, r3
 800ee9e:	2b64      	cmp	r3, #100	@ 0x64
 800eea0:	d901      	bls.n	800eea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800eea2:	2303      	movs	r3, #3
 800eea4:	e207      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800eea6:	4b5b      	ldr	r3, [pc, #364]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d0f0      	beq.n	800ee94 <HAL_RCC_OscConfig+0xc0>
 800eeb2:	e014      	b.n	800eede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eeb4:	f7ff f956 	bl	800e164 <HAL_GetTick>
 800eeb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eeba:	e008      	b.n	800eece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800eebc:	f7ff f952 	bl	800e164 <HAL_GetTick>
 800eec0:	4602      	mov	r2, r0
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	1ad3      	subs	r3, r2, r3
 800eec6:	2b64      	cmp	r3, #100	@ 0x64
 800eec8:	d901      	bls.n	800eece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800eeca:	2303      	movs	r3, #3
 800eecc:	e1f3      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800eece:	4b51      	ldr	r3, [pc, #324]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1f0      	bne.n	800eebc <HAL_RCC_OscConfig+0xe8>
 800eeda:	e000      	b.n	800eede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eedc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f003 0302 	and.w	r3, r3, #2
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d063      	beq.n	800efb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800eeea:	4b4a      	ldr	r3, [pc, #296]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	f003 030c 	and.w	r3, r3, #12
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00b      	beq.n	800ef0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800eef6:	4b47      	ldr	r3, [pc, #284]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800eef8:	689b      	ldr	r3, [r3, #8]
 800eefa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800eefe:	2b08      	cmp	r3, #8
 800ef00:	d11c      	bne.n	800ef3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ef02:	4b44      	ldr	r3, [pc, #272]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d116      	bne.n	800ef3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ef0e:	4b41      	ldr	r3, [pc, #260]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f003 0302 	and.w	r3, r3, #2
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d005      	beq.n	800ef26 <HAL_RCC_OscConfig+0x152>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d001      	beq.n	800ef26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ef22:	2301      	movs	r3, #1
 800ef24:	e1c7      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef26:	4b3b      	ldr	r3, [pc, #236]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	691b      	ldr	r3, [r3, #16]
 800ef32:	00db      	lsls	r3, r3, #3
 800ef34:	4937      	ldr	r1, [pc, #220]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ef36:	4313      	orrs	r3, r2
 800ef38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ef3a:	e03a      	b.n	800efb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d020      	beq.n	800ef86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ef44:	4b34      	ldr	r3, [pc, #208]	@ (800f018 <HAL_RCC_OscConfig+0x244>)
 800ef46:	2201      	movs	r2, #1
 800ef48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef4a:	f7ff f90b 	bl	800e164 <HAL_GetTick>
 800ef4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef50:	e008      	b.n	800ef64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ef52:	f7ff f907 	bl	800e164 <HAL_GetTick>
 800ef56:	4602      	mov	r2, r0
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d901      	bls.n	800ef64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ef60:	2303      	movs	r3, #3
 800ef62:	e1a8      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ef64:	4b2b      	ldr	r3, [pc, #172]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f003 0302 	and.w	r3, r3, #2
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d0f0      	beq.n	800ef52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ef70:	4b28      	ldr	r3, [pc, #160]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	691b      	ldr	r3, [r3, #16]
 800ef7c:	00db      	lsls	r3, r3, #3
 800ef7e:	4925      	ldr	r1, [pc, #148]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800ef80:	4313      	orrs	r3, r2
 800ef82:	600b      	str	r3, [r1, #0]
 800ef84:	e015      	b.n	800efb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ef86:	4b24      	ldr	r3, [pc, #144]	@ (800f018 <HAL_RCC_OscConfig+0x244>)
 800ef88:	2200      	movs	r2, #0
 800ef8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ef8c:	f7ff f8ea 	bl	800e164 <HAL_GetTick>
 800ef90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ef92:	e008      	b.n	800efa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ef94:	f7ff f8e6 	bl	800e164 <HAL_GetTick>
 800ef98:	4602      	mov	r2, r0
 800ef9a:	693b      	ldr	r3, [r7, #16]
 800ef9c:	1ad3      	subs	r3, r2, r3
 800ef9e:	2b02      	cmp	r3, #2
 800efa0:	d901      	bls.n	800efa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800efa2:	2303      	movs	r3, #3
 800efa4:	e187      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800efa6:	4b1b      	ldr	r3, [pc, #108]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f003 0302 	and.w	r3, r3, #2
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d1f0      	bne.n	800ef94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f003 0308 	and.w	r3, r3, #8
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d036      	beq.n	800f02c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	695b      	ldr	r3, [r3, #20]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d016      	beq.n	800eff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800efc6:	4b15      	ldr	r3, [pc, #84]	@ (800f01c <HAL_RCC_OscConfig+0x248>)
 800efc8:	2201      	movs	r2, #1
 800efca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800efcc:	f7ff f8ca 	bl	800e164 <HAL_GetTick>
 800efd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800efd2:	e008      	b.n	800efe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800efd4:	f7ff f8c6 	bl	800e164 <HAL_GetTick>
 800efd8:	4602      	mov	r2, r0
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d901      	bls.n	800efe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800efe2:	2303      	movs	r3, #3
 800efe4:	e167      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800efe6:	4b0b      	ldr	r3, [pc, #44]	@ (800f014 <HAL_RCC_OscConfig+0x240>)
 800efe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800efea:	f003 0302 	and.w	r3, r3, #2
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d0f0      	beq.n	800efd4 <HAL_RCC_OscConfig+0x200>
 800eff2:	e01b      	b.n	800f02c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eff4:	4b09      	ldr	r3, [pc, #36]	@ (800f01c <HAL_RCC_OscConfig+0x248>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800effa:	f7ff f8b3 	bl	800e164 <HAL_GetTick>
 800effe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f000:	e00e      	b.n	800f020 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f002:	f7ff f8af 	bl	800e164 <HAL_GetTick>
 800f006:	4602      	mov	r2, r0
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	1ad3      	subs	r3, r2, r3
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	d907      	bls.n	800f020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f010:	2303      	movs	r3, #3
 800f012:	e150      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
 800f014:	40023800 	.word	0x40023800
 800f018:	42470000 	.word	0x42470000
 800f01c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f020:	4b88      	ldr	r3, [pc, #544]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f022:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f024:	f003 0302 	and.w	r3, r3, #2
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d1ea      	bne.n	800f002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f003 0304 	and.w	r3, r3, #4
 800f034:	2b00      	cmp	r3, #0
 800f036:	f000 8097 	beq.w	800f168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f03a:	2300      	movs	r3, #0
 800f03c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f03e:	4b81      	ldr	r3, [pc, #516]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f046:	2b00      	cmp	r3, #0
 800f048:	d10f      	bne.n	800f06a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f04a:	2300      	movs	r3, #0
 800f04c:	60bb      	str	r3, [r7, #8]
 800f04e:	4b7d      	ldr	r3, [pc, #500]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f052:	4a7c      	ldr	r2, [pc, #496]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f058:	6413      	str	r3, [r2, #64]	@ 0x40
 800f05a:	4b7a      	ldr	r3, [pc, #488]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f05e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f062:	60bb      	str	r3, [r7, #8]
 800f064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f066:	2301      	movs	r3, #1
 800f068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f06a:	4b77      	ldr	r3, [pc, #476]	@ (800f248 <HAL_RCC_OscConfig+0x474>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f072:	2b00      	cmp	r3, #0
 800f074:	d118      	bne.n	800f0a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f076:	4b74      	ldr	r3, [pc, #464]	@ (800f248 <HAL_RCC_OscConfig+0x474>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4a73      	ldr	r2, [pc, #460]	@ (800f248 <HAL_RCC_OscConfig+0x474>)
 800f07c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f082:	f7ff f86f 	bl	800e164 <HAL_GetTick>
 800f086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f088:	e008      	b.n	800f09c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f08a:	f7ff f86b 	bl	800e164 <HAL_GetTick>
 800f08e:	4602      	mov	r2, r0
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	1ad3      	subs	r3, r2, r3
 800f094:	2b02      	cmp	r3, #2
 800f096:	d901      	bls.n	800f09c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f098:	2303      	movs	r3, #3
 800f09a:	e10c      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f09c:	4b6a      	ldr	r3, [pc, #424]	@ (800f248 <HAL_RCC_OscConfig+0x474>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d0f0      	beq.n	800f08a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	689b      	ldr	r3, [r3, #8]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d106      	bne.n	800f0be <HAL_RCC_OscConfig+0x2ea>
 800f0b0:	4b64      	ldr	r3, [pc, #400]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0b4:	4a63      	ldr	r2, [pc, #396]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0b6:	f043 0301 	orr.w	r3, r3, #1
 800f0ba:	6713      	str	r3, [r2, #112]	@ 0x70
 800f0bc:	e01c      	b.n	800f0f8 <HAL_RCC_OscConfig+0x324>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	689b      	ldr	r3, [r3, #8]
 800f0c2:	2b05      	cmp	r3, #5
 800f0c4:	d10c      	bne.n	800f0e0 <HAL_RCC_OscConfig+0x30c>
 800f0c6:	4b5f      	ldr	r3, [pc, #380]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0ca:	4a5e      	ldr	r2, [pc, #376]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0cc:	f043 0304 	orr.w	r3, r3, #4
 800f0d0:	6713      	str	r3, [r2, #112]	@ 0x70
 800f0d2:	4b5c      	ldr	r3, [pc, #368]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0d6:	4a5b      	ldr	r2, [pc, #364]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0d8:	f043 0301 	orr.w	r3, r3, #1
 800f0dc:	6713      	str	r3, [r2, #112]	@ 0x70
 800f0de:	e00b      	b.n	800f0f8 <HAL_RCC_OscConfig+0x324>
 800f0e0:	4b58      	ldr	r3, [pc, #352]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0e4:	4a57      	ldr	r2, [pc, #348]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0e6:	f023 0301 	bic.w	r3, r3, #1
 800f0ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800f0ec:	4b55      	ldr	r3, [pc, #340]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0f0:	4a54      	ldr	r2, [pc, #336]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f0f2:	f023 0304 	bic.w	r3, r3, #4
 800f0f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d015      	beq.n	800f12c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f100:	f7ff f830 	bl	800e164 <HAL_GetTick>
 800f104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f106:	e00a      	b.n	800f11e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f108:	f7ff f82c 	bl	800e164 <HAL_GetTick>
 800f10c:	4602      	mov	r2, r0
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	1ad3      	subs	r3, r2, r3
 800f112:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f116:	4293      	cmp	r3, r2
 800f118:	d901      	bls.n	800f11e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f11a:	2303      	movs	r3, #3
 800f11c:	e0cb      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f11e:	4b49      	ldr	r3, [pc, #292]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f122:	f003 0302 	and.w	r3, r3, #2
 800f126:	2b00      	cmp	r3, #0
 800f128:	d0ee      	beq.n	800f108 <HAL_RCC_OscConfig+0x334>
 800f12a:	e014      	b.n	800f156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f12c:	f7ff f81a 	bl	800e164 <HAL_GetTick>
 800f130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f132:	e00a      	b.n	800f14a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f134:	f7ff f816 	bl	800e164 <HAL_GetTick>
 800f138:	4602      	mov	r2, r0
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f142:	4293      	cmp	r3, r2
 800f144:	d901      	bls.n	800f14a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f146:	2303      	movs	r3, #3
 800f148:	e0b5      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f14a:	4b3e      	ldr	r3, [pc, #248]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f14c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f14e:	f003 0302 	and.w	r3, r3, #2
 800f152:	2b00      	cmp	r3, #0
 800f154:	d1ee      	bne.n	800f134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f156:	7dfb      	ldrb	r3, [r7, #23]
 800f158:	2b01      	cmp	r3, #1
 800f15a:	d105      	bne.n	800f168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f15c:	4b39      	ldr	r3, [pc, #228]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f15e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f160:	4a38      	ldr	r2, [pc, #224]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f162:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f166:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	699b      	ldr	r3, [r3, #24]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f000 80a1 	beq.w	800f2b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f172:	4b34      	ldr	r3, [pc, #208]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f174:	689b      	ldr	r3, [r3, #8]
 800f176:	f003 030c 	and.w	r3, r3, #12
 800f17a:	2b08      	cmp	r3, #8
 800f17c:	d05c      	beq.n	800f238 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	699b      	ldr	r3, [r3, #24]
 800f182:	2b02      	cmp	r3, #2
 800f184:	d141      	bne.n	800f20a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f186:	4b31      	ldr	r3, [pc, #196]	@ (800f24c <HAL_RCC_OscConfig+0x478>)
 800f188:	2200      	movs	r2, #0
 800f18a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f18c:	f7fe ffea 	bl	800e164 <HAL_GetTick>
 800f190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f192:	e008      	b.n	800f1a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f194:	f7fe ffe6 	bl	800e164 <HAL_GetTick>
 800f198:	4602      	mov	r2, r0
 800f19a:	693b      	ldr	r3, [r7, #16]
 800f19c:	1ad3      	subs	r3, r2, r3
 800f19e:	2b02      	cmp	r3, #2
 800f1a0:	d901      	bls.n	800f1a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f1a2:	2303      	movs	r3, #3
 800f1a4:	e087      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f1a6:	4b27      	ldr	r3, [pc, #156]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d1f0      	bne.n	800f194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	69da      	ldr	r2, [r3, #28]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	431a      	orrs	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1c0:	019b      	lsls	r3, r3, #6
 800f1c2:	431a      	orrs	r2, r3
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1c8:	085b      	lsrs	r3, r3, #1
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	041b      	lsls	r3, r3, #16
 800f1ce:	431a      	orrs	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1d4:	061b      	lsls	r3, r3, #24
 800f1d6:	491b      	ldr	r1, [pc, #108]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f1dc:	4b1b      	ldr	r3, [pc, #108]	@ (800f24c <HAL_RCC_OscConfig+0x478>)
 800f1de:	2201      	movs	r2, #1
 800f1e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f1e2:	f7fe ffbf 	bl	800e164 <HAL_GetTick>
 800f1e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f1e8:	e008      	b.n	800f1fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f1ea:	f7fe ffbb 	bl	800e164 <HAL_GetTick>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	1ad3      	subs	r3, r2, r3
 800f1f4:	2b02      	cmp	r3, #2
 800f1f6:	d901      	bls.n	800f1fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	e05c      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f1fc:	4b11      	ldr	r3, [pc, #68]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f204:	2b00      	cmp	r3, #0
 800f206:	d0f0      	beq.n	800f1ea <HAL_RCC_OscConfig+0x416>
 800f208:	e054      	b.n	800f2b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f20a:	4b10      	ldr	r3, [pc, #64]	@ (800f24c <HAL_RCC_OscConfig+0x478>)
 800f20c:	2200      	movs	r2, #0
 800f20e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f210:	f7fe ffa8 	bl	800e164 <HAL_GetTick>
 800f214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f216:	e008      	b.n	800f22a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f218:	f7fe ffa4 	bl	800e164 <HAL_GetTick>
 800f21c:	4602      	mov	r2, r0
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	2b02      	cmp	r3, #2
 800f224:	d901      	bls.n	800f22a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f226:	2303      	movs	r3, #3
 800f228:	e045      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f22a:	4b06      	ldr	r3, [pc, #24]	@ (800f244 <HAL_RCC_OscConfig+0x470>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f232:	2b00      	cmp	r3, #0
 800f234:	d1f0      	bne.n	800f218 <HAL_RCC_OscConfig+0x444>
 800f236:	e03d      	b.n	800f2b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	699b      	ldr	r3, [r3, #24]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d107      	bne.n	800f250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f240:	2301      	movs	r3, #1
 800f242:	e038      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
 800f244:	40023800 	.word	0x40023800
 800f248:	40007000 	.word	0x40007000
 800f24c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f250:	4b1b      	ldr	r3, [pc, #108]	@ (800f2c0 <HAL_RCC_OscConfig+0x4ec>)
 800f252:	685b      	ldr	r3, [r3, #4]
 800f254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	699b      	ldr	r3, [r3, #24]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d028      	beq.n	800f2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f268:	429a      	cmp	r2, r3
 800f26a:	d121      	bne.n	800f2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f276:	429a      	cmp	r2, r3
 800f278:	d11a      	bne.n	800f2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f280:	4013      	ands	r3, r2
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f288:	4293      	cmp	r3, r2
 800f28a:	d111      	bne.n	800f2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f296:	085b      	lsrs	r3, r3, #1
 800f298:	3b01      	subs	r3, #1
 800f29a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d107      	bne.n	800f2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d001      	beq.n	800f2b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	e000      	b.n	800f2b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f2b4:	2300      	movs	r3, #0
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3718      	adds	r7, #24
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	40023800 	.word	0x40023800

0800f2c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d101      	bne.n	800f2d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	e0cc      	b.n	800f472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f2d8:	4b68      	ldr	r3, [pc, #416]	@ (800f47c <HAL_RCC_ClockConfig+0x1b8>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	f003 0307 	and.w	r3, r3, #7
 800f2e0:	683a      	ldr	r2, [r7, #0]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d90c      	bls.n	800f300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f2e6:	4b65      	ldr	r3, [pc, #404]	@ (800f47c <HAL_RCC_ClockConfig+0x1b8>)
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	b2d2      	uxtb	r2, r2
 800f2ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f2ee:	4b63      	ldr	r3, [pc, #396]	@ (800f47c <HAL_RCC_ClockConfig+0x1b8>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f003 0307 	and.w	r3, r3, #7
 800f2f6:	683a      	ldr	r2, [r7, #0]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d001      	beq.n	800f300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e0b8      	b.n	800f472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f003 0302 	and.w	r3, r3, #2
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d020      	beq.n	800f34e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	f003 0304 	and.w	r3, r3, #4
 800f314:	2b00      	cmp	r3, #0
 800f316:	d005      	beq.n	800f324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f318:	4b59      	ldr	r3, [pc, #356]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	4a58      	ldr	r2, [pc, #352]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f31e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	f003 0308 	and.w	r3, r3, #8
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d005      	beq.n	800f33c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f330:	4b53      	ldr	r3, [pc, #332]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f332:	689b      	ldr	r3, [r3, #8]
 800f334:	4a52      	ldr	r2, [pc, #328]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f336:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f33a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f33c:	4b50      	ldr	r3, [pc, #320]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	689b      	ldr	r3, [r3, #8]
 800f348:	494d      	ldr	r1, [pc, #308]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f34a:	4313      	orrs	r3, r2
 800f34c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f003 0301 	and.w	r3, r3, #1
 800f356:	2b00      	cmp	r3, #0
 800f358:	d044      	beq.n	800f3e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	685b      	ldr	r3, [r3, #4]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d107      	bne.n	800f372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f362:	4b47      	ldr	r3, [pc, #284]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d119      	bne.n	800f3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f36e:	2301      	movs	r3, #1
 800f370:	e07f      	b.n	800f472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	2b02      	cmp	r3, #2
 800f378:	d003      	beq.n	800f382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f37e:	2b03      	cmp	r3, #3
 800f380:	d107      	bne.n	800f392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f382:	4b3f      	ldr	r3, [pc, #252]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d109      	bne.n	800f3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f38e:	2301      	movs	r3, #1
 800f390:	e06f      	b.n	800f472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f392:	4b3b      	ldr	r3, [pc, #236]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f003 0302 	and.w	r3, r3, #2
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d101      	bne.n	800f3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f39e:	2301      	movs	r3, #1
 800f3a0:	e067      	b.n	800f472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f3a2:	4b37      	ldr	r3, [pc, #220]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	f023 0203 	bic.w	r2, r3, #3
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	4934      	ldr	r1, [pc, #208]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f3b0:	4313      	orrs	r3, r2
 800f3b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f3b4:	f7fe fed6 	bl	800e164 <HAL_GetTick>
 800f3b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3ba:	e00a      	b.n	800f3d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f3bc:	f7fe fed2 	bl	800e164 <HAL_GetTick>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	1ad3      	subs	r3, r2, r3
 800f3c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d901      	bls.n	800f3d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f3ce:	2303      	movs	r3, #3
 800f3d0:	e04f      	b.n	800f472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f3d2:	4b2b      	ldr	r3, [pc, #172]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f3d4:	689b      	ldr	r3, [r3, #8]
 800f3d6:	f003 020c 	and.w	r2, r3, #12
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	009b      	lsls	r3, r3, #2
 800f3e0:	429a      	cmp	r2, r3
 800f3e2:	d1eb      	bne.n	800f3bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f3e4:	4b25      	ldr	r3, [pc, #148]	@ (800f47c <HAL_RCC_ClockConfig+0x1b8>)
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f003 0307 	and.w	r3, r3, #7
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d20c      	bcs.n	800f40c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3f2:	4b22      	ldr	r3, [pc, #136]	@ (800f47c <HAL_RCC_ClockConfig+0x1b8>)
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	b2d2      	uxtb	r2, r2
 800f3f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3fa:	4b20      	ldr	r3, [pc, #128]	@ (800f47c <HAL_RCC_ClockConfig+0x1b8>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f003 0307 	and.w	r3, r3, #7
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	429a      	cmp	r2, r3
 800f406:	d001      	beq.n	800f40c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f408:	2301      	movs	r3, #1
 800f40a:	e032      	b.n	800f472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	f003 0304 	and.w	r3, r3, #4
 800f414:	2b00      	cmp	r3, #0
 800f416:	d008      	beq.n	800f42a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f418:	4b19      	ldr	r3, [pc, #100]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	4916      	ldr	r1, [pc, #88]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f426:	4313      	orrs	r3, r2
 800f428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f003 0308 	and.w	r3, r3, #8
 800f432:	2b00      	cmp	r3, #0
 800f434:	d009      	beq.n	800f44a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f436:	4b12      	ldr	r3, [pc, #72]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f438:	689b      	ldr	r3, [r3, #8]
 800f43a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	691b      	ldr	r3, [r3, #16]
 800f442:	00db      	lsls	r3, r3, #3
 800f444:	490e      	ldr	r1, [pc, #56]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f446:	4313      	orrs	r3, r2
 800f448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f44a:	f000 f821 	bl	800f490 <HAL_RCC_GetSysClockFreq>
 800f44e:	4602      	mov	r2, r0
 800f450:	4b0b      	ldr	r3, [pc, #44]	@ (800f480 <HAL_RCC_ClockConfig+0x1bc>)
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	091b      	lsrs	r3, r3, #4
 800f456:	f003 030f 	and.w	r3, r3, #15
 800f45a:	490a      	ldr	r1, [pc, #40]	@ (800f484 <HAL_RCC_ClockConfig+0x1c0>)
 800f45c:	5ccb      	ldrb	r3, [r1, r3]
 800f45e:	fa22 f303 	lsr.w	r3, r2, r3
 800f462:	4a09      	ldr	r2, [pc, #36]	@ (800f488 <HAL_RCC_ClockConfig+0x1c4>)
 800f464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f466:	4b09      	ldr	r3, [pc, #36]	@ (800f48c <HAL_RCC_ClockConfig+0x1c8>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7fe fe36 	bl	800e0dc <HAL_InitTick>

  return HAL_OK;
 800f470:	2300      	movs	r3, #0
}
 800f472:	4618      	mov	r0, r3
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	40023c00 	.word	0x40023c00
 800f480:	40023800 	.word	0x40023800
 800f484:	080137c8 	.word	0x080137c8
 800f488:	20000008 	.word	0x20000008
 800f48c:	2000000c 	.word	0x2000000c

0800f490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f494:	b094      	sub	sp, #80	@ 0x50
 800f496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f498:	2300      	movs	r3, #0
 800f49a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f49c:	2300      	movs	r3, #0
 800f49e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f4a8:	4b79      	ldr	r3, [pc, #484]	@ (800f690 <HAL_RCC_GetSysClockFreq+0x200>)
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	f003 030c 	and.w	r3, r3, #12
 800f4b0:	2b08      	cmp	r3, #8
 800f4b2:	d00d      	beq.n	800f4d0 <HAL_RCC_GetSysClockFreq+0x40>
 800f4b4:	2b08      	cmp	r3, #8
 800f4b6:	f200 80e1 	bhi.w	800f67c <HAL_RCC_GetSysClockFreq+0x1ec>
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d002      	beq.n	800f4c4 <HAL_RCC_GetSysClockFreq+0x34>
 800f4be:	2b04      	cmp	r3, #4
 800f4c0:	d003      	beq.n	800f4ca <HAL_RCC_GetSysClockFreq+0x3a>
 800f4c2:	e0db      	b.n	800f67c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f4c4:	4b73      	ldr	r3, [pc, #460]	@ (800f694 <HAL_RCC_GetSysClockFreq+0x204>)
 800f4c6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800f4c8:	e0db      	b.n	800f682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f4ca:	4b73      	ldr	r3, [pc, #460]	@ (800f698 <HAL_RCC_GetSysClockFreq+0x208>)
 800f4cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f4ce:	e0d8      	b.n	800f682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f4d0:	4b6f      	ldr	r3, [pc, #444]	@ (800f690 <HAL_RCC_GetSysClockFreq+0x200>)
 800f4d2:	685b      	ldr	r3, [r3, #4]
 800f4d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f4d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f4da:	4b6d      	ldr	r3, [pc, #436]	@ (800f690 <HAL_RCC_GetSysClockFreq+0x200>)
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d063      	beq.n	800f5ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f4e6:	4b6a      	ldr	r3, [pc, #424]	@ (800f690 <HAL_RCC_GetSysClockFreq+0x200>)
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	099b      	lsrs	r3, r3, #6
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f4f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800f4f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f4fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800f502:	4622      	mov	r2, r4
 800f504:	462b      	mov	r3, r5
 800f506:	f04f 0000 	mov.w	r0, #0
 800f50a:	f04f 0100 	mov.w	r1, #0
 800f50e:	0159      	lsls	r1, r3, #5
 800f510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f514:	0150      	lsls	r0, r2, #5
 800f516:	4602      	mov	r2, r0
 800f518:	460b      	mov	r3, r1
 800f51a:	4621      	mov	r1, r4
 800f51c:	1a51      	subs	r1, r2, r1
 800f51e:	6139      	str	r1, [r7, #16]
 800f520:	4629      	mov	r1, r5
 800f522:	eb63 0301 	sbc.w	r3, r3, r1
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	f04f 0200 	mov.w	r2, #0
 800f52c:	f04f 0300 	mov.w	r3, #0
 800f530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f534:	4659      	mov	r1, fp
 800f536:	018b      	lsls	r3, r1, #6
 800f538:	4651      	mov	r1, sl
 800f53a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f53e:	4651      	mov	r1, sl
 800f540:	018a      	lsls	r2, r1, #6
 800f542:	4651      	mov	r1, sl
 800f544:	ebb2 0801 	subs.w	r8, r2, r1
 800f548:	4659      	mov	r1, fp
 800f54a:	eb63 0901 	sbc.w	r9, r3, r1
 800f54e:	f04f 0200 	mov.w	r2, #0
 800f552:	f04f 0300 	mov.w	r3, #0
 800f556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f55a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f55e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f562:	4690      	mov	r8, r2
 800f564:	4699      	mov	r9, r3
 800f566:	4623      	mov	r3, r4
 800f568:	eb18 0303 	adds.w	r3, r8, r3
 800f56c:	60bb      	str	r3, [r7, #8]
 800f56e:	462b      	mov	r3, r5
 800f570:	eb49 0303 	adc.w	r3, r9, r3
 800f574:	60fb      	str	r3, [r7, #12]
 800f576:	f04f 0200 	mov.w	r2, #0
 800f57a:	f04f 0300 	mov.w	r3, #0
 800f57e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f582:	4629      	mov	r1, r5
 800f584:	024b      	lsls	r3, r1, #9
 800f586:	4621      	mov	r1, r4
 800f588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f58c:	4621      	mov	r1, r4
 800f58e:	024a      	lsls	r2, r1, #9
 800f590:	4610      	mov	r0, r2
 800f592:	4619      	mov	r1, r3
 800f594:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f596:	2200      	movs	r2, #0
 800f598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f59a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f59c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f5a0:	f7fc fda6 	bl	800c0f0 <__aeabi_uldivmod>
 800f5a4:	4602      	mov	r2, r0
 800f5a6:	460b      	mov	r3, r1
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f5ac:	e058      	b.n	800f660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5ae:	4b38      	ldr	r3, [pc, #224]	@ (800f690 <HAL_RCC_GetSysClockFreq+0x200>)
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	099b      	lsrs	r3, r3, #6
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f5be:	623b      	str	r3, [r7, #32]
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f5c8:	4642      	mov	r2, r8
 800f5ca:	464b      	mov	r3, r9
 800f5cc:	f04f 0000 	mov.w	r0, #0
 800f5d0:	f04f 0100 	mov.w	r1, #0
 800f5d4:	0159      	lsls	r1, r3, #5
 800f5d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f5da:	0150      	lsls	r0, r2, #5
 800f5dc:	4602      	mov	r2, r0
 800f5de:	460b      	mov	r3, r1
 800f5e0:	4641      	mov	r1, r8
 800f5e2:	ebb2 0a01 	subs.w	sl, r2, r1
 800f5e6:	4649      	mov	r1, r9
 800f5e8:	eb63 0b01 	sbc.w	fp, r3, r1
 800f5ec:	f04f 0200 	mov.w	r2, #0
 800f5f0:	f04f 0300 	mov.w	r3, #0
 800f5f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f5f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f5fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f600:	ebb2 040a 	subs.w	r4, r2, sl
 800f604:	eb63 050b 	sbc.w	r5, r3, fp
 800f608:	f04f 0200 	mov.w	r2, #0
 800f60c:	f04f 0300 	mov.w	r3, #0
 800f610:	00eb      	lsls	r3, r5, #3
 800f612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f616:	00e2      	lsls	r2, r4, #3
 800f618:	4614      	mov	r4, r2
 800f61a:	461d      	mov	r5, r3
 800f61c:	4643      	mov	r3, r8
 800f61e:	18e3      	adds	r3, r4, r3
 800f620:	603b      	str	r3, [r7, #0]
 800f622:	464b      	mov	r3, r9
 800f624:	eb45 0303 	adc.w	r3, r5, r3
 800f628:	607b      	str	r3, [r7, #4]
 800f62a:	f04f 0200 	mov.w	r2, #0
 800f62e:	f04f 0300 	mov.w	r3, #0
 800f632:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f636:	4629      	mov	r1, r5
 800f638:	028b      	lsls	r3, r1, #10
 800f63a:	4621      	mov	r1, r4
 800f63c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f640:	4621      	mov	r1, r4
 800f642:	028a      	lsls	r2, r1, #10
 800f644:	4610      	mov	r0, r2
 800f646:	4619      	mov	r1, r3
 800f648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f64a:	2200      	movs	r2, #0
 800f64c:	61bb      	str	r3, [r7, #24]
 800f64e:	61fa      	str	r2, [r7, #28]
 800f650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f654:	f7fc fd4c 	bl	800c0f0 <__aeabi_uldivmod>
 800f658:	4602      	mov	r2, r0
 800f65a:	460b      	mov	r3, r1
 800f65c:	4613      	mov	r3, r2
 800f65e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f660:	4b0b      	ldr	r3, [pc, #44]	@ (800f690 <HAL_RCC_GetSysClockFreq+0x200>)
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	0c1b      	lsrs	r3, r3, #16
 800f666:	f003 0303 	and.w	r3, r3, #3
 800f66a:	3301      	adds	r3, #1
 800f66c:	005b      	lsls	r3, r3, #1
 800f66e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800f670:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f674:	fbb2 f3f3 	udiv	r3, r2, r3
 800f678:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f67a:	e002      	b.n	800f682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f67c:	4b05      	ldr	r3, [pc, #20]	@ (800f694 <HAL_RCC_GetSysClockFreq+0x204>)
 800f67e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f680:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f682:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f684:	4618      	mov	r0, r3
 800f686:	3750      	adds	r7, #80	@ 0x50
 800f688:	46bd      	mov	sp, r7
 800f68a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f68e:	bf00      	nop
 800f690:	40023800 	.word	0x40023800
 800f694:	00f42400 	.word	0x00f42400
 800f698:	007a1200 	.word	0x007a1200

0800f69c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f69c:	b480      	push	{r7}
 800f69e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f6a0:	4b03      	ldr	r3, [pc, #12]	@ (800f6b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr
 800f6ae:	bf00      	nop
 800f6b0:	20000008 	.word	0x20000008

0800f6b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f6b8:	f7ff fff0 	bl	800f69c <HAL_RCC_GetHCLKFreq>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	4b05      	ldr	r3, [pc, #20]	@ (800f6d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	0a9b      	lsrs	r3, r3, #10
 800f6c4:	f003 0307 	and.w	r3, r3, #7
 800f6c8:	4903      	ldr	r1, [pc, #12]	@ (800f6d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f6ca:	5ccb      	ldrb	r3, [r1, r3]
 800f6cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	40023800 	.word	0x40023800
 800f6d8:	080137d8 	.word	0x080137d8

0800f6dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f6e0:	f7ff ffdc 	bl	800f69c <HAL_RCC_GetHCLKFreq>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	4b05      	ldr	r3, [pc, #20]	@ (800f6fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	0b5b      	lsrs	r3, r3, #13
 800f6ec:	f003 0307 	and.w	r3, r3, #7
 800f6f0:	4903      	ldr	r1, [pc, #12]	@ (800f700 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f6f2:	5ccb      	ldrb	r3, [r1, r3]
 800f6f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	bd80      	pop	{r7, pc}
 800f6fc:	40023800 	.word	0x40023800
 800f700:	080137d8 	.word	0x080137d8

0800f704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d101      	bne.n	800f716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f712:	2301      	movs	r3, #1
 800f714:	e041      	b.n	800f79a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d106      	bne.n	800f730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f7fe fb74 	bl	800de18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2202      	movs	r2, #2
 800f734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	3304      	adds	r3, #4
 800f740:	4619      	mov	r1, r3
 800f742:	4610      	mov	r0, r2
 800f744:	f000 f8f4 	bl	800f930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2201      	movs	r2, #1
 800f74c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	2201      	movs	r2, #1
 800f754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2201      	movs	r2, #1
 800f764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2201      	movs	r2, #1
 800f774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2201      	movs	r2, #1
 800f77c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2201      	movs	r2, #1
 800f784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2201      	movs	r2, #1
 800f78c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	2201      	movs	r2, #1
 800f794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f798:	2300      	movs	r3, #0
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3708      	adds	r7, #8
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b084      	sub	sp, #16
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
 800f7aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d101      	bne.n	800f7be <HAL_TIM_ConfigClockSource+0x1c>
 800f7ba:	2302      	movs	r3, #2
 800f7bc:	e0b4      	b.n	800f928 <HAL_TIM_ConfigClockSource+0x186>
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2202      	movs	r2, #2
 800f7ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	689b      	ldr	r3, [r3, #8]
 800f7d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f7dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f7e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	68ba      	ldr	r2, [r7, #8]
 800f7ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f7f6:	d03e      	beq.n	800f876 <HAL_TIM_ConfigClockSource+0xd4>
 800f7f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f7fc:	f200 8087 	bhi.w	800f90e <HAL_TIM_ConfigClockSource+0x16c>
 800f800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f804:	f000 8086 	beq.w	800f914 <HAL_TIM_ConfigClockSource+0x172>
 800f808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f80c:	d87f      	bhi.n	800f90e <HAL_TIM_ConfigClockSource+0x16c>
 800f80e:	2b70      	cmp	r3, #112	@ 0x70
 800f810:	d01a      	beq.n	800f848 <HAL_TIM_ConfigClockSource+0xa6>
 800f812:	2b70      	cmp	r3, #112	@ 0x70
 800f814:	d87b      	bhi.n	800f90e <HAL_TIM_ConfigClockSource+0x16c>
 800f816:	2b60      	cmp	r3, #96	@ 0x60
 800f818:	d050      	beq.n	800f8bc <HAL_TIM_ConfigClockSource+0x11a>
 800f81a:	2b60      	cmp	r3, #96	@ 0x60
 800f81c:	d877      	bhi.n	800f90e <HAL_TIM_ConfigClockSource+0x16c>
 800f81e:	2b50      	cmp	r3, #80	@ 0x50
 800f820:	d03c      	beq.n	800f89c <HAL_TIM_ConfigClockSource+0xfa>
 800f822:	2b50      	cmp	r3, #80	@ 0x50
 800f824:	d873      	bhi.n	800f90e <HAL_TIM_ConfigClockSource+0x16c>
 800f826:	2b40      	cmp	r3, #64	@ 0x40
 800f828:	d058      	beq.n	800f8dc <HAL_TIM_ConfigClockSource+0x13a>
 800f82a:	2b40      	cmp	r3, #64	@ 0x40
 800f82c:	d86f      	bhi.n	800f90e <HAL_TIM_ConfigClockSource+0x16c>
 800f82e:	2b30      	cmp	r3, #48	@ 0x30
 800f830:	d064      	beq.n	800f8fc <HAL_TIM_ConfigClockSource+0x15a>
 800f832:	2b30      	cmp	r3, #48	@ 0x30
 800f834:	d86b      	bhi.n	800f90e <HAL_TIM_ConfigClockSource+0x16c>
 800f836:	2b20      	cmp	r3, #32
 800f838:	d060      	beq.n	800f8fc <HAL_TIM_ConfigClockSource+0x15a>
 800f83a:	2b20      	cmp	r3, #32
 800f83c:	d867      	bhi.n	800f90e <HAL_TIM_ConfigClockSource+0x16c>
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d05c      	beq.n	800f8fc <HAL_TIM_ConfigClockSource+0x15a>
 800f842:	2b10      	cmp	r3, #16
 800f844:	d05a      	beq.n	800f8fc <HAL_TIM_ConfigClockSource+0x15a>
 800f846:	e062      	b.n	800f90e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f858:	f000 f970 	bl	800fb3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	689b      	ldr	r3, [r3, #8]
 800f862:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f86a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	68ba      	ldr	r2, [r7, #8]
 800f872:	609a      	str	r2, [r3, #8]
      break;
 800f874:	e04f      	b.n	800f916 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f87a:	683b      	ldr	r3, [r7, #0]
 800f87c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f886:	f000 f959 	bl	800fb3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	689a      	ldr	r2, [r3, #8]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f898:	609a      	str	r2, [r3, #8]
      break;
 800f89a:	e03c      	b.n	800f916 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	f000 f8cd 	bl	800fa48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	2150      	movs	r1, #80	@ 0x50
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f000 f926 	bl	800fb06 <TIM_ITRx_SetConfig>
      break;
 800f8ba:	e02c      	b.n	800f916 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	f000 f8ec 	bl	800faa6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2160      	movs	r1, #96	@ 0x60
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 f916 	bl	800fb06 <TIM_ITRx_SetConfig>
      break;
 800f8da:	e01c      	b.n	800f916 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	f000 f8ad 	bl	800fa48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2140      	movs	r1, #64	@ 0x40
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f000 f906 	bl	800fb06 <TIM_ITRx_SetConfig>
      break;
 800f8fa:	e00c      	b.n	800f916 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4619      	mov	r1, r3
 800f906:	4610      	mov	r0, r2
 800f908:	f000 f8fd 	bl	800fb06 <TIM_ITRx_SetConfig>
      break;
 800f90c:	e003      	b.n	800f916 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
 800f910:	73fb      	strb	r3, [r7, #15]
      break;
 800f912:	e000      	b.n	800f916 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f914:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2201      	movs	r2, #1
 800f91a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f926:	7bfb      	ldrb	r3, [r7, #15]
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3710      	adds	r7, #16
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f930:	b480      	push	{r7}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	4a3a      	ldr	r2, [pc, #232]	@ (800fa2c <TIM_Base_SetConfig+0xfc>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d00f      	beq.n	800f968 <TIM_Base_SetConfig+0x38>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f94e:	d00b      	beq.n	800f968 <TIM_Base_SetConfig+0x38>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a37      	ldr	r2, [pc, #220]	@ (800fa30 <TIM_Base_SetConfig+0x100>)
 800f954:	4293      	cmp	r3, r2
 800f956:	d007      	beq.n	800f968 <TIM_Base_SetConfig+0x38>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a36      	ldr	r2, [pc, #216]	@ (800fa34 <TIM_Base_SetConfig+0x104>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d003      	beq.n	800f968 <TIM_Base_SetConfig+0x38>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a35      	ldr	r2, [pc, #212]	@ (800fa38 <TIM_Base_SetConfig+0x108>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d108      	bne.n	800f97a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f96e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	4313      	orrs	r3, r2
 800f978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	4a2b      	ldr	r2, [pc, #172]	@ (800fa2c <TIM_Base_SetConfig+0xfc>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d01b      	beq.n	800f9ba <TIM_Base_SetConfig+0x8a>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f988:	d017      	beq.n	800f9ba <TIM_Base_SetConfig+0x8a>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	4a28      	ldr	r2, [pc, #160]	@ (800fa30 <TIM_Base_SetConfig+0x100>)
 800f98e:	4293      	cmp	r3, r2
 800f990:	d013      	beq.n	800f9ba <TIM_Base_SetConfig+0x8a>
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	4a27      	ldr	r2, [pc, #156]	@ (800fa34 <TIM_Base_SetConfig+0x104>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d00f      	beq.n	800f9ba <TIM_Base_SetConfig+0x8a>
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	4a26      	ldr	r2, [pc, #152]	@ (800fa38 <TIM_Base_SetConfig+0x108>)
 800f99e:	4293      	cmp	r3, r2
 800f9a0:	d00b      	beq.n	800f9ba <TIM_Base_SetConfig+0x8a>
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4a25      	ldr	r2, [pc, #148]	@ (800fa3c <TIM_Base_SetConfig+0x10c>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d007      	beq.n	800f9ba <TIM_Base_SetConfig+0x8a>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4a24      	ldr	r2, [pc, #144]	@ (800fa40 <TIM_Base_SetConfig+0x110>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d003      	beq.n	800f9ba <TIM_Base_SetConfig+0x8a>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	4a23      	ldr	r2, [pc, #140]	@ (800fa44 <TIM_Base_SetConfig+0x114>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d108      	bne.n	800f9cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f9c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	68fa      	ldr	r2, [r7, #12]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	695b      	ldr	r3, [r3, #20]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	68fa      	ldr	r2, [r7, #12]
 800f9de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	689a      	ldr	r2, [r3, #8]
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a0e      	ldr	r2, [pc, #56]	@ (800fa2c <TIM_Base_SetConfig+0xfc>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d103      	bne.n	800fa00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	691a      	ldr	r2, [r3, #16]
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2201      	movs	r2, #1
 800fa04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	f003 0301 	and.w	r3, r3, #1
 800fa0e:	2b01      	cmp	r3, #1
 800fa10:	d105      	bne.n	800fa1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	691b      	ldr	r3, [r3, #16]
 800fa16:	f023 0201 	bic.w	r2, r3, #1
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	611a      	str	r2, [r3, #16]
  }
}
 800fa1e:	bf00      	nop
 800fa20:	3714      	adds	r7, #20
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop
 800fa2c:	40010000 	.word	0x40010000
 800fa30:	40000400 	.word	0x40000400
 800fa34:	40000800 	.word	0x40000800
 800fa38:	40000c00 	.word	0x40000c00
 800fa3c:	40014000 	.word	0x40014000
 800fa40:	40014400 	.word	0x40014400
 800fa44:	40014800 	.word	0x40014800

0800fa48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b087      	sub	sp, #28
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6a1b      	ldr	r3, [r3, #32]
 800fa58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	6a1b      	ldr	r3, [r3, #32]
 800fa5e:	f023 0201 	bic.w	r2, r3, #1
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fa72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	011b      	lsls	r3, r3, #4
 800fa78:	693a      	ldr	r2, [r7, #16]
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	f023 030a 	bic.w	r3, r3, #10
 800fa84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	4313      	orrs	r3, r2
 800fa8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	693a      	ldr	r2, [r7, #16]
 800fa92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	697a      	ldr	r2, [r7, #20]
 800fa98:	621a      	str	r2, [r3, #32]
}
 800fa9a:	bf00      	nop
 800fa9c:	371c      	adds	r7, #28
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr

0800faa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800faa6:	b480      	push	{r7}
 800faa8:	b087      	sub	sp, #28
 800faaa:	af00      	add	r7, sp, #0
 800faac:	60f8      	str	r0, [r7, #12]
 800faae:	60b9      	str	r1, [r7, #8]
 800fab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	6a1b      	ldr	r3, [r3, #32]
 800fab6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	6a1b      	ldr	r3, [r3, #32]
 800fabc:	f023 0210 	bic.w	r2, r3, #16
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	699b      	ldr	r3, [r3, #24]
 800fac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	031b      	lsls	r3, r3, #12
 800fad6:	693a      	ldr	r2, [r7, #16]
 800fad8:	4313      	orrs	r3, r2
 800fada:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fae2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	011b      	lsls	r3, r3, #4
 800fae8:	697a      	ldr	r2, [r7, #20]
 800faea:	4313      	orrs	r3, r2
 800faec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	693a      	ldr	r2, [r7, #16]
 800faf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	697a      	ldr	r2, [r7, #20]
 800faf8:	621a      	str	r2, [r3, #32]
}
 800fafa:	bf00      	nop
 800fafc:	371c      	adds	r7, #28
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr

0800fb06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fb06:	b480      	push	{r7}
 800fb08:	b085      	sub	sp, #20
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
 800fb0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	689b      	ldr	r3, [r3, #8]
 800fb14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb1e:	683a      	ldr	r2, [r7, #0]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	4313      	orrs	r3, r2
 800fb24:	f043 0307 	orr.w	r3, r3, #7
 800fb28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	609a      	str	r2, [r3, #8]
}
 800fb30:	bf00      	nop
 800fb32:	3714      	adds	r7, #20
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b087      	sub	sp, #28
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
 800fb48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fb56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	021a      	lsls	r2, r3, #8
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	431a      	orrs	r2, r3
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	4313      	orrs	r3, r2
 800fb64:	697a      	ldr	r2, [r7, #20]
 800fb66:	4313      	orrs	r3, r2
 800fb68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	697a      	ldr	r2, [r7, #20]
 800fb6e:	609a      	str	r2, [r3, #8]
}
 800fb70:	bf00      	nop
 800fb72:	371c      	adds	r7, #28
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b085      	sub	sp, #20
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb8c:	2b01      	cmp	r3, #1
 800fb8e:	d101      	bne.n	800fb94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb90:	2302      	movs	r3, #2
 800fb92:	e050      	b.n	800fc36 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2201      	movs	r2, #1
 800fb98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2202      	movs	r2, #2
 800fba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	689b      	ldr	r3, [r3, #8]
 800fbb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	68fa      	ldr	r2, [r7, #12]
 800fbcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	4a1c      	ldr	r2, [pc, #112]	@ (800fc44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d018      	beq.n	800fc0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fbe0:	d013      	beq.n	800fc0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	4a18      	ldr	r2, [pc, #96]	@ (800fc48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800fbe8:	4293      	cmp	r3, r2
 800fbea:	d00e      	beq.n	800fc0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4a16      	ldr	r2, [pc, #88]	@ (800fc4c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d009      	beq.n	800fc0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4a15      	ldr	r2, [pc, #84]	@ (800fc50 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d004      	beq.n	800fc0a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4a13      	ldr	r2, [pc, #76]	@ (800fc54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d10c      	bne.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	68ba      	ldr	r2, [r7, #8]
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	68ba      	ldr	r2, [r7, #8]
 800fc22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2201      	movs	r2, #1
 800fc28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fc34:	2300      	movs	r3, #0
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3714      	adds	r7, #20
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc40:	4770      	bx	lr
 800fc42:	bf00      	nop
 800fc44:	40010000 	.word	0x40010000
 800fc48:	40000400 	.word	0x40000400
 800fc4c:	40000800 	.word	0x40000800
 800fc50:	40000c00 	.word	0x40000c00
 800fc54:	40014000 	.word	0x40014000

0800fc58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d101      	bne.n	800fc6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fc66:	2301      	movs	r3, #1
 800fc68:	e042      	b.n	800fcf0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d106      	bne.n	800fc84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7fe f8ec 	bl	800de5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2224      	movs	r2, #36	@ 0x24
 800fc88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	68da      	ldr	r2, [r3, #12]
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fc9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f000 fa09 	bl	80100b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	691a      	ldr	r2, [r3, #16]
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fcb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	695a      	ldr	r2, [r3, #20]
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fcc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	68da      	ldr	r2, [r3, #12]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fcd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2220      	movs	r2, #32
 800fcdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2220      	movs	r2, #32
 800fce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2200      	movs	r2, #0
 800fcec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b08a      	sub	sp, #40	@ 0x28
 800fcfc:	af02      	add	r7, sp, #8
 800fcfe:	60f8      	str	r0, [r7, #12]
 800fd00:	60b9      	str	r1, [r7, #8]
 800fd02:	603b      	str	r3, [r7, #0]
 800fd04:	4613      	mov	r3, r2
 800fd06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fd08:	2300      	movs	r3, #0
 800fd0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	2b20      	cmp	r3, #32
 800fd16:	d175      	bne.n	800fe04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d002      	beq.n	800fd24 <HAL_UART_Transmit+0x2c>
 800fd1e:	88fb      	ldrh	r3, [r7, #6]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d101      	bne.n	800fd28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800fd24:	2301      	movs	r3, #1
 800fd26:	e06e      	b.n	800fe06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	2221      	movs	r2, #33	@ 0x21
 800fd32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fd36:	f7fe fa15 	bl	800e164 <HAL_GetTick>
 800fd3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	88fa      	ldrh	r2, [r7, #6]
 800fd40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	88fa      	ldrh	r2, [r7, #6]
 800fd46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	689b      	ldr	r3, [r3, #8]
 800fd4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd50:	d108      	bne.n	800fd64 <HAL_UART_Transmit+0x6c>
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	691b      	ldr	r3, [r3, #16]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d104      	bne.n	800fd64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	61bb      	str	r3, [r7, #24]
 800fd62:	e003      	b.n	800fd6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fd6c:	e02e      	b.n	800fdcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	9300      	str	r3, [sp, #0]
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	2200      	movs	r2, #0
 800fd76:	2180      	movs	r1, #128	@ 0x80
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	f000 f8df 	bl	800ff3c <UART_WaitOnFlagUntilTimeout>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d005      	beq.n	800fd90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2220      	movs	r2, #32
 800fd88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800fd8c:	2303      	movs	r3, #3
 800fd8e:	e03a      	b.n	800fe06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d10b      	bne.n	800fdae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	881b      	ldrh	r3, [r3, #0]
 800fd9a:	461a      	mov	r2, r3
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fda4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	3302      	adds	r3, #2
 800fdaa:	61bb      	str	r3, [r7, #24]
 800fdac:	e007      	b.n	800fdbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fdae:	69fb      	ldr	r3, [r7, #28]
 800fdb0:	781a      	ldrb	r2, [r3, #0]
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	3b01      	subs	r3, #1
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fdd0:	b29b      	uxth	r3, r3
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d1cb      	bne.n	800fd6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	9300      	str	r3, [sp, #0]
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	2200      	movs	r2, #0
 800fdde:	2140      	movs	r1, #64	@ 0x40
 800fde0:	68f8      	ldr	r0, [r7, #12]
 800fde2:	f000 f8ab 	bl	800ff3c <UART_WaitOnFlagUntilTimeout>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d005      	beq.n	800fdf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2220      	movs	r2, #32
 800fdf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800fdf4:	2303      	movs	r3, #3
 800fdf6:	e006      	b.n	800fe06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2220      	movs	r2, #32
 800fdfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800fe00:	2300      	movs	r3, #0
 800fe02:	e000      	b.n	800fe06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800fe04:	2302      	movs	r3, #2
  }
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3720      	adds	r7, #32
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}

0800fe0e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe0e:	b580      	push	{r7, lr}
 800fe10:	b08a      	sub	sp, #40	@ 0x28
 800fe12:	af02      	add	r7, sp, #8
 800fe14:	60f8      	str	r0, [r7, #12]
 800fe16:	60b9      	str	r1, [r7, #8]
 800fe18:	603b      	str	r3, [r7, #0]
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	2b20      	cmp	r3, #32
 800fe2c:	f040 8081 	bne.w	800ff32 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d002      	beq.n	800fe3c <HAL_UART_Receive+0x2e>
 800fe36:	88fb      	ldrh	r3, [r7, #6]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d101      	bne.n	800fe40 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	e079      	b.n	800ff34 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2200      	movs	r2, #0
 800fe44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	2222      	movs	r2, #34	@ 0x22
 800fe4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2200      	movs	r2, #0
 800fe52:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe54:	f7fe f986 	bl	800e164 <HAL_GetTick>
 800fe58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	88fa      	ldrh	r2, [r7, #6]
 800fe5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	88fa      	ldrh	r2, [r7, #6]
 800fe64:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	689b      	ldr	r3, [r3, #8]
 800fe6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe6e:	d108      	bne.n	800fe82 <HAL_UART_Receive+0x74>
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	691b      	ldr	r3, [r3, #16]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d104      	bne.n	800fe82 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	61bb      	str	r3, [r7, #24]
 800fe80:	e003      	b.n	800fe8a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe86:	2300      	movs	r3, #0
 800fe88:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800fe8a:	e047      	b.n	800ff1c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	9300      	str	r3, [sp, #0]
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	2200      	movs	r2, #0
 800fe94:	2120      	movs	r1, #32
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f000 f850 	bl	800ff3c <UART_WaitOnFlagUntilTimeout>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d005      	beq.n	800feae <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	2220      	movs	r2, #32
 800fea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800feaa:	2303      	movs	r3, #3
 800feac:	e042      	b.n	800ff34 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10c      	bne.n	800fece <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	b29b      	uxth	r3, r3
 800febc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fec0:	b29a      	uxth	r2, r3
 800fec2:	69bb      	ldr	r3, [r7, #24]
 800fec4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fec6:	69bb      	ldr	r3, [r7, #24]
 800fec8:	3302      	adds	r3, #2
 800feca:	61bb      	str	r3, [r7, #24]
 800fecc:	e01f      	b.n	800ff0e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	689b      	ldr	r3, [r3, #8]
 800fed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fed6:	d007      	beq.n	800fee8 <HAL_UART_Receive+0xda>
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	689b      	ldr	r3, [r3, #8]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d10a      	bne.n	800fef6 <HAL_UART_Receive+0xe8>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d106      	bne.n	800fef6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	b2da      	uxtb	r2, r3
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	701a      	strb	r2, [r3, #0]
 800fef4:	e008      	b.n	800ff08 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	69fb      	ldr	r3, [r7, #28]
 800ff06:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ff12:	b29b      	uxth	r3, r3
 800ff14:	3b01      	subs	r3, #1
 800ff16:	b29a      	uxth	r2, r3
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d1b2      	bne.n	800fe8c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	2220      	movs	r2, #32
 800ff2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	e000      	b.n	800ff34 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800ff32:	2302      	movs	r3, #2
  }
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3720      	adds	r7, #32
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b086      	sub	sp, #24
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	603b      	str	r3, [r7, #0]
 800ff48:	4613      	mov	r3, r2
 800ff4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ff4c:	e03b      	b.n	800ffc6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ff4e:	6a3b      	ldr	r3, [r7, #32]
 800ff50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff54:	d037      	beq.n	800ffc6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ff56:	f7fe f905 	bl	800e164 <HAL_GetTick>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	6a3a      	ldr	r2, [r7, #32]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d302      	bcc.n	800ff6c <UART_WaitOnFlagUntilTimeout+0x30>
 800ff66:	6a3b      	ldr	r3, [r7, #32]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d101      	bne.n	800ff70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ff6c:	2303      	movs	r3, #3
 800ff6e:	e03a      	b.n	800ffe6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	68db      	ldr	r3, [r3, #12]
 800ff76:	f003 0304 	and.w	r3, r3, #4
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d023      	beq.n	800ffc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	2b80      	cmp	r3, #128	@ 0x80
 800ff82:	d020      	beq.n	800ffc6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	2b40      	cmp	r3, #64	@ 0x40
 800ff88:	d01d      	beq.n	800ffc6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f003 0308 	and.w	r3, r3, #8
 800ff94:	2b08      	cmp	r3, #8
 800ff96:	d116      	bne.n	800ffc6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ff98:	2300      	movs	r3, #0
 800ff9a:	617b      	str	r3, [r7, #20]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	617b      	str	r3, [r7, #20]
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	617b      	str	r3, [r7, #20]
 800ffac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	f000 f81d 	bl	800ffee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	2208      	movs	r2, #8
 800ffb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	e00f      	b.n	800ffe6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	681a      	ldr	r2, [r3, #0]
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	4013      	ands	r3, r2
 800ffd0:	68ba      	ldr	r2, [r7, #8]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	bf0c      	ite	eq
 800ffd6:	2301      	moveq	r3, #1
 800ffd8:	2300      	movne	r3, #0
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	461a      	mov	r2, r3
 800ffde:	79fb      	ldrb	r3, [r7, #7]
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d0b4      	beq.n	800ff4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ffe4:	2300      	movs	r3, #0
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}

0800ffee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ffee:	b480      	push	{r7}
 800fff0:	b095      	sub	sp, #84	@ 0x54
 800fff2:	af00      	add	r7, sp, #0
 800fff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	330c      	adds	r3, #12
 800fffc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010000:	e853 3f00 	ldrex	r3, [r3]
 8010004:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801000c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	330c      	adds	r3, #12
 8010014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010016:	643a      	str	r2, [r7, #64]	@ 0x40
 8010018:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801001a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801001c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801001e:	e841 2300 	strex	r3, r2, [r1]
 8010022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010026:	2b00      	cmp	r3, #0
 8010028:	d1e5      	bne.n	800fff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	3314      	adds	r3, #20
 8010030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010032:	6a3b      	ldr	r3, [r7, #32]
 8010034:	e853 3f00 	ldrex	r3, [r3]
 8010038:	61fb      	str	r3, [r7, #28]
   return(result);
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	f023 0301 	bic.w	r3, r3, #1
 8010040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	3314      	adds	r3, #20
 8010048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801004a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801004c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801004e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010052:	e841 2300 	strex	r3, r2, [r1]
 8010056:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005a:	2b00      	cmp	r3, #0
 801005c:	d1e5      	bne.n	801002a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010062:	2b01      	cmp	r3, #1
 8010064:	d119      	bne.n	801009a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	330c      	adds	r3, #12
 801006c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	e853 3f00 	ldrex	r3, [r3]
 8010074:	60bb      	str	r3, [r7, #8]
   return(result);
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	f023 0310 	bic.w	r3, r3, #16
 801007c:	647b      	str	r3, [r7, #68]	@ 0x44
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	330c      	adds	r3, #12
 8010084:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010086:	61ba      	str	r2, [r7, #24]
 8010088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801008a:	6979      	ldr	r1, [r7, #20]
 801008c:	69ba      	ldr	r2, [r7, #24]
 801008e:	e841 2300 	strex	r3, r2, [r1]
 8010092:	613b      	str	r3, [r7, #16]
   return(result);
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d1e5      	bne.n	8010066 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2220      	movs	r2, #32
 801009e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2200      	movs	r2, #0
 80100a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80100a8:	bf00      	nop
 80100aa:	3754      	adds	r7, #84	@ 0x54
 80100ac:	46bd      	mov	sp, r7
 80100ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b2:	4770      	bx	lr

080100b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80100b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80100b8:	b0c0      	sub	sp, #256	@ 0x100
 80100ba:	af00      	add	r7, sp, #0
 80100bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80100c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	691b      	ldr	r3, [r3, #16]
 80100c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80100cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100d0:	68d9      	ldr	r1, [r3, #12]
 80100d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	ea40 0301 	orr.w	r3, r0, r1
 80100dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80100de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100e2:	689a      	ldr	r2, [r3, #8]
 80100e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100e8:	691b      	ldr	r3, [r3, #16]
 80100ea:	431a      	orrs	r2, r3
 80100ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100f0:	695b      	ldr	r3, [r3, #20]
 80100f2:	431a      	orrs	r2, r3
 80100f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100f8:	69db      	ldr	r3, [r3, #28]
 80100fa:	4313      	orrs	r3, r2
 80100fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 801010c:	f021 010c 	bic.w	r1, r1, #12
 8010110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 801011a:	430b      	orrs	r3, r1
 801011c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801011e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	695b      	ldr	r3, [r3, #20]
 8010126:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801012a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801012e:	6999      	ldr	r1, [r3, #24]
 8010130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010134:	681a      	ldr	r2, [r3, #0]
 8010136:	ea40 0301 	orr.w	r3, r0, r1
 801013a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801013c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	4b8f      	ldr	r3, [pc, #572]	@ (8010380 <UART_SetConfig+0x2cc>)
 8010144:	429a      	cmp	r2, r3
 8010146:	d005      	beq.n	8010154 <UART_SetConfig+0xa0>
 8010148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	4b8d      	ldr	r3, [pc, #564]	@ (8010384 <UART_SetConfig+0x2d0>)
 8010150:	429a      	cmp	r2, r3
 8010152:	d104      	bne.n	801015e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010154:	f7ff fac2 	bl	800f6dc <HAL_RCC_GetPCLK2Freq>
 8010158:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 801015c:	e003      	b.n	8010166 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801015e:	f7ff faa9 	bl	800f6b4 <HAL_RCC_GetPCLK1Freq>
 8010162:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801016a:	69db      	ldr	r3, [r3, #28]
 801016c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010170:	f040 810c 	bne.w	801038c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010174:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010178:	2200      	movs	r2, #0
 801017a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801017e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010182:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8010186:	4622      	mov	r2, r4
 8010188:	462b      	mov	r3, r5
 801018a:	1891      	adds	r1, r2, r2
 801018c:	65b9      	str	r1, [r7, #88]	@ 0x58
 801018e:	415b      	adcs	r3, r3
 8010190:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010192:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010196:	4621      	mov	r1, r4
 8010198:	eb12 0801 	adds.w	r8, r2, r1
 801019c:	4629      	mov	r1, r5
 801019e:	eb43 0901 	adc.w	r9, r3, r1
 80101a2:	f04f 0200 	mov.w	r2, #0
 80101a6:	f04f 0300 	mov.w	r3, #0
 80101aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80101ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80101b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80101b6:	4690      	mov	r8, r2
 80101b8:	4699      	mov	r9, r3
 80101ba:	4623      	mov	r3, r4
 80101bc:	eb18 0303 	adds.w	r3, r8, r3
 80101c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80101c4:	462b      	mov	r3, r5
 80101c6:	eb49 0303 	adc.w	r3, r9, r3
 80101ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80101ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	2200      	movs	r2, #0
 80101d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80101da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80101de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80101e2:	460b      	mov	r3, r1
 80101e4:	18db      	adds	r3, r3, r3
 80101e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80101e8:	4613      	mov	r3, r2
 80101ea:	eb42 0303 	adc.w	r3, r2, r3
 80101ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80101f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80101f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80101f8:	f7fb ff7a 	bl	800c0f0 <__aeabi_uldivmod>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	4b61      	ldr	r3, [pc, #388]	@ (8010388 <UART_SetConfig+0x2d4>)
 8010202:	fba3 2302 	umull	r2, r3, r3, r2
 8010206:	095b      	lsrs	r3, r3, #5
 8010208:	011c      	lsls	r4, r3, #4
 801020a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801020e:	2200      	movs	r2, #0
 8010210:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010214:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8010218:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 801021c:	4642      	mov	r2, r8
 801021e:	464b      	mov	r3, r9
 8010220:	1891      	adds	r1, r2, r2
 8010222:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010224:	415b      	adcs	r3, r3
 8010226:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010228:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 801022c:	4641      	mov	r1, r8
 801022e:	eb12 0a01 	adds.w	sl, r2, r1
 8010232:	4649      	mov	r1, r9
 8010234:	eb43 0b01 	adc.w	fp, r3, r1
 8010238:	f04f 0200 	mov.w	r2, #0
 801023c:	f04f 0300 	mov.w	r3, #0
 8010240:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010244:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801024c:	4692      	mov	sl, r2
 801024e:	469b      	mov	fp, r3
 8010250:	4643      	mov	r3, r8
 8010252:	eb1a 0303 	adds.w	r3, sl, r3
 8010256:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801025a:	464b      	mov	r3, r9
 801025c:	eb4b 0303 	adc.w	r3, fp, r3
 8010260:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	2200      	movs	r2, #0
 801026c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010270:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010274:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010278:	460b      	mov	r3, r1
 801027a:	18db      	adds	r3, r3, r3
 801027c:	643b      	str	r3, [r7, #64]	@ 0x40
 801027e:	4613      	mov	r3, r2
 8010280:	eb42 0303 	adc.w	r3, r2, r3
 8010284:	647b      	str	r3, [r7, #68]	@ 0x44
 8010286:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801028a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801028e:	f7fb ff2f 	bl	800c0f0 <__aeabi_uldivmod>
 8010292:	4602      	mov	r2, r0
 8010294:	460b      	mov	r3, r1
 8010296:	4611      	mov	r1, r2
 8010298:	4b3b      	ldr	r3, [pc, #236]	@ (8010388 <UART_SetConfig+0x2d4>)
 801029a:	fba3 2301 	umull	r2, r3, r3, r1
 801029e:	095b      	lsrs	r3, r3, #5
 80102a0:	2264      	movs	r2, #100	@ 0x64
 80102a2:	fb02 f303 	mul.w	r3, r2, r3
 80102a6:	1acb      	subs	r3, r1, r3
 80102a8:	00db      	lsls	r3, r3, #3
 80102aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80102ae:	4b36      	ldr	r3, [pc, #216]	@ (8010388 <UART_SetConfig+0x2d4>)
 80102b0:	fba3 2302 	umull	r2, r3, r3, r2
 80102b4:	095b      	lsrs	r3, r3, #5
 80102b6:	005b      	lsls	r3, r3, #1
 80102b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80102bc:	441c      	add	r4, r3
 80102be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80102c2:	2200      	movs	r2, #0
 80102c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80102c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80102cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80102d0:	4642      	mov	r2, r8
 80102d2:	464b      	mov	r3, r9
 80102d4:	1891      	adds	r1, r2, r2
 80102d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80102d8:	415b      	adcs	r3, r3
 80102da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80102dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80102e0:	4641      	mov	r1, r8
 80102e2:	1851      	adds	r1, r2, r1
 80102e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80102e6:	4649      	mov	r1, r9
 80102e8:	414b      	adcs	r3, r1
 80102ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80102ec:	f04f 0200 	mov.w	r2, #0
 80102f0:	f04f 0300 	mov.w	r3, #0
 80102f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80102f8:	4659      	mov	r1, fp
 80102fa:	00cb      	lsls	r3, r1, #3
 80102fc:	4651      	mov	r1, sl
 80102fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010302:	4651      	mov	r1, sl
 8010304:	00ca      	lsls	r2, r1, #3
 8010306:	4610      	mov	r0, r2
 8010308:	4619      	mov	r1, r3
 801030a:	4603      	mov	r3, r0
 801030c:	4642      	mov	r2, r8
 801030e:	189b      	adds	r3, r3, r2
 8010310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010314:	464b      	mov	r3, r9
 8010316:	460a      	mov	r2, r1
 8010318:	eb42 0303 	adc.w	r3, r2, r3
 801031c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	2200      	movs	r2, #0
 8010328:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801032c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010330:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010334:	460b      	mov	r3, r1
 8010336:	18db      	adds	r3, r3, r3
 8010338:	62bb      	str	r3, [r7, #40]	@ 0x28
 801033a:	4613      	mov	r3, r2
 801033c:	eb42 0303 	adc.w	r3, r2, r3
 8010340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010342:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010346:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801034a:	f7fb fed1 	bl	800c0f0 <__aeabi_uldivmod>
 801034e:	4602      	mov	r2, r0
 8010350:	460b      	mov	r3, r1
 8010352:	4b0d      	ldr	r3, [pc, #52]	@ (8010388 <UART_SetConfig+0x2d4>)
 8010354:	fba3 1302 	umull	r1, r3, r3, r2
 8010358:	095b      	lsrs	r3, r3, #5
 801035a:	2164      	movs	r1, #100	@ 0x64
 801035c:	fb01 f303 	mul.w	r3, r1, r3
 8010360:	1ad3      	subs	r3, r2, r3
 8010362:	00db      	lsls	r3, r3, #3
 8010364:	3332      	adds	r3, #50	@ 0x32
 8010366:	4a08      	ldr	r2, [pc, #32]	@ (8010388 <UART_SetConfig+0x2d4>)
 8010368:	fba2 2303 	umull	r2, r3, r2, r3
 801036c:	095b      	lsrs	r3, r3, #5
 801036e:	f003 0207 	and.w	r2, r3, #7
 8010372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4422      	add	r2, r4
 801037a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801037c:	e106      	b.n	801058c <UART_SetConfig+0x4d8>
 801037e:	bf00      	nop
 8010380:	40011000 	.word	0x40011000
 8010384:	40011400 	.word	0x40011400
 8010388:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801038c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010390:	2200      	movs	r2, #0
 8010392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010396:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801039a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801039e:	4642      	mov	r2, r8
 80103a0:	464b      	mov	r3, r9
 80103a2:	1891      	adds	r1, r2, r2
 80103a4:	6239      	str	r1, [r7, #32]
 80103a6:	415b      	adcs	r3, r3
 80103a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80103aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80103ae:	4641      	mov	r1, r8
 80103b0:	1854      	adds	r4, r2, r1
 80103b2:	4649      	mov	r1, r9
 80103b4:	eb43 0501 	adc.w	r5, r3, r1
 80103b8:	f04f 0200 	mov.w	r2, #0
 80103bc:	f04f 0300 	mov.w	r3, #0
 80103c0:	00eb      	lsls	r3, r5, #3
 80103c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80103c6:	00e2      	lsls	r2, r4, #3
 80103c8:	4614      	mov	r4, r2
 80103ca:	461d      	mov	r5, r3
 80103cc:	4643      	mov	r3, r8
 80103ce:	18e3      	adds	r3, r4, r3
 80103d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80103d4:	464b      	mov	r3, r9
 80103d6:	eb45 0303 	adc.w	r3, r5, r3
 80103da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80103de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	2200      	movs	r2, #0
 80103e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80103ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80103ee:	f04f 0200 	mov.w	r2, #0
 80103f2:	f04f 0300 	mov.w	r3, #0
 80103f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80103fa:	4629      	mov	r1, r5
 80103fc:	008b      	lsls	r3, r1, #2
 80103fe:	4621      	mov	r1, r4
 8010400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010404:	4621      	mov	r1, r4
 8010406:	008a      	lsls	r2, r1, #2
 8010408:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 801040c:	f7fb fe70 	bl	800c0f0 <__aeabi_uldivmod>
 8010410:	4602      	mov	r2, r0
 8010412:	460b      	mov	r3, r1
 8010414:	4b60      	ldr	r3, [pc, #384]	@ (8010598 <UART_SetConfig+0x4e4>)
 8010416:	fba3 2302 	umull	r2, r3, r3, r2
 801041a:	095b      	lsrs	r3, r3, #5
 801041c:	011c      	lsls	r4, r3, #4
 801041e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010422:	2200      	movs	r2, #0
 8010424:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010428:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801042c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010430:	4642      	mov	r2, r8
 8010432:	464b      	mov	r3, r9
 8010434:	1891      	adds	r1, r2, r2
 8010436:	61b9      	str	r1, [r7, #24]
 8010438:	415b      	adcs	r3, r3
 801043a:	61fb      	str	r3, [r7, #28]
 801043c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010440:	4641      	mov	r1, r8
 8010442:	1851      	adds	r1, r2, r1
 8010444:	6139      	str	r1, [r7, #16]
 8010446:	4649      	mov	r1, r9
 8010448:	414b      	adcs	r3, r1
 801044a:	617b      	str	r3, [r7, #20]
 801044c:	f04f 0200 	mov.w	r2, #0
 8010450:	f04f 0300 	mov.w	r3, #0
 8010454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010458:	4659      	mov	r1, fp
 801045a:	00cb      	lsls	r3, r1, #3
 801045c:	4651      	mov	r1, sl
 801045e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010462:	4651      	mov	r1, sl
 8010464:	00ca      	lsls	r2, r1, #3
 8010466:	4610      	mov	r0, r2
 8010468:	4619      	mov	r1, r3
 801046a:	4603      	mov	r3, r0
 801046c:	4642      	mov	r2, r8
 801046e:	189b      	adds	r3, r3, r2
 8010470:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010474:	464b      	mov	r3, r9
 8010476:	460a      	mov	r2, r1
 8010478:	eb42 0303 	adc.w	r3, r2, r3
 801047c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010484:	685b      	ldr	r3, [r3, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	67bb      	str	r3, [r7, #120]	@ 0x78
 801048a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801048c:	f04f 0200 	mov.w	r2, #0
 8010490:	f04f 0300 	mov.w	r3, #0
 8010494:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010498:	4649      	mov	r1, r9
 801049a:	008b      	lsls	r3, r1, #2
 801049c:	4641      	mov	r1, r8
 801049e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80104a2:	4641      	mov	r1, r8
 80104a4:	008a      	lsls	r2, r1, #2
 80104a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80104aa:	f7fb fe21 	bl	800c0f0 <__aeabi_uldivmod>
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	4611      	mov	r1, r2
 80104b4:	4b38      	ldr	r3, [pc, #224]	@ (8010598 <UART_SetConfig+0x4e4>)
 80104b6:	fba3 2301 	umull	r2, r3, r3, r1
 80104ba:	095b      	lsrs	r3, r3, #5
 80104bc:	2264      	movs	r2, #100	@ 0x64
 80104be:	fb02 f303 	mul.w	r3, r2, r3
 80104c2:	1acb      	subs	r3, r1, r3
 80104c4:	011b      	lsls	r3, r3, #4
 80104c6:	3332      	adds	r3, #50	@ 0x32
 80104c8:	4a33      	ldr	r2, [pc, #204]	@ (8010598 <UART_SetConfig+0x4e4>)
 80104ca:	fba2 2303 	umull	r2, r3, r2, r3
 80104ce:	095b      	lsrs	r3, r3, #5
 80104d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80104d4:	441c      	add	r4, r3
 80104d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80104da:	2200      	movs	r2, #0
 80104dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80104de:	677a      	str	r2, [r7, #116]	@ 0x74
 80104e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80104e4:	4642      	mov	r2, r8
 80104e6:	464b      	mov	r3, r9
 80104e8:	1891      	adds	r1, r2, r2
 80104ea:	60b9      	str	r1, [r7, #8]
 80104ec:	415b      	adcs	r3, r3
 80104ee:	60fb      	str	r3, [r7, #12]
 80104f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80104f4:	4641      	mov	r1, r8
 80104f6:	1851      	adds	r1, r2, r1
 80104f8:	6039      	str	r1, [r7, #0]
 80104fa:	4649      	mov	r1, r9
 80104fc:	414b      	adcs	r3, r1
 80104fe:	607b      	str	r3, [r7, #4]
 8010500:	f04f 0200 	mov.w	r2, #0
 8010504:	f04f 0300 	mov.w	r3, #0
 8010508:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801050c:	4659      	mov	r1, fp
 801050e:	00cb      	lsls	r3, r1, #3
 8010510:	4651      	mov	r1, sl
 8010512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010516:	4651      	mov	r1, sl
 8010518:	00ca      	lsls	r2, r1, #3
 801051a:	4610      	mov	r0, r2
 801051c:	4619      	mov	r1, r3
 801051e:	4603      	mov	r3, r0
 8010520:	4642      	mov	r2, r8
 8010522:	189b      	adds	r3, r3, r2
 8010524:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010526:	464b      	mov	r3, r9
 8010528:	460a      	mov	r2, r1
 801052a:	eb42 0303 	adc.w	r3, r2, r3
 801052e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	2200      	movs	r2, #0
 8010538:	663b      	str	r3, [r7, #96]	@ 0x60
 801053a:	667a      	str	r2, [r7, #100]	@ 0x64
 801053c:	f04f 0200 	mov.w	r2, #0
 8010540:	f04f 0300 	mov.w	r3, #0
 8010544:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010548:	4649      	mov	r1, r9
 801054a:	008b      	lsls	r3, r1, #2
 801054c:	4641      	mov	r1, r8
 801054e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010552:	4641      	mov	r1, r8
 8010554:	008a      	lsls	r2, r1, #2
 8010556:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801055a:	f7fb fdc9 	bl	800c0f0 <__aeabi_uldivmod>
 801055e:	4602      	mov	r2, r0
 8010560:	460b      	mov	r3, r1
 8010562:	4b0d      	ldr	r3, [pc, #52]	@ (8010598 <UART_SetConfig+0x4e4>)
 8010564:	fba3 1302 	umull	r1, r3, r3, r2
 8010568:	095b      	lsrs	r3, r3, #5
 801056a:	2164      	movs	r1, #100	@ 0x64
 801056c:	fb01 f303 	mul.w	r3, r1, r3
 8010570:	1ad3      	subs	r3, r2, r3
 8010572:	011b      	lsls	r3, r3, #4
 8010574:	3332      	adds	r3, #50	@ 0x32
 8010576:	4a08      	ldr	r2, [pc, #32]	@ (8010598 <UART_SetConfig+0x4e4>)
 8010578:	fba2 2303 	umull	r2, r3, r2, r3
 801057c:	095b      	lsrs	r3, r3, #5
 801057e:	f003 020f 	and.w	r2, r3, #15
 8010582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4422      	add	r2, r4
 801058a:	609a      	str	r2, [r3, #8]
}
 801058c:	bf00      	nop
 801058e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010592:	46bd      	mov	sp, r7
 8010594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010598:	51eb851f 	.word	0x51eb851f

0801059c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801059c:	b480      	push	{r7}
 801059e:	b085      	sub	sp, #20
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	4603      	mov	r3, r0
 80105a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80105a6:	2300      	movs	r3, #0
 80105a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80105aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80105ae:	2b84      	cmp	r3, #132	@ 0x84
 80105b0:	d005      	beq.n	80105be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80105b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	4413      	add	r3, r2
 80105ba:	3303      	adds	r3, #3
 80105bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80105be:	68fb      	ldr	r3, [r7, #12]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3714      	adds	r7, #20
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80105d0:	f000 fafc 	bl	8010bcc <vTaskStartScheduler>
  
  return osOK;
 80105d4:	2300      	movs	r3, #0
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	bd80      	pop	{r7, pc}

080105da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80105da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105dc:	b089      	sub	sp, #36	@ 0x24
 80105de:	af04      	add	r7, sp, #16
 80105e0:	6078      	str	r0, [r7, #4]
 80105e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	695b      	ldr	r3, [r3, #20]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d020      	beq.n	801062e <osThreadCreate+0x54>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	699b      	ldr	r3, [r3, #24]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d01c      	beq.n	801062e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	685c      	ldr	r4, [r3, #4]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	691e      	ldr	r6, [r3, #16]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010606:	4618      	mov	r0, r3
 8010608:	f7ff ffc8 	bl	801059c <makeFreeRtosPriority>
 801060c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	695b      	ldr	r3, [r3, #20]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010616:	9202      	str	r2, [sp, #8]
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	9100      	str	r1, [sp, #0]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	4632      	mov	r2, r6
 8010620:	4629      	mov	r1, r5
 8010622:	4620      	mov	r0, r4
 8010624:	f000 f8ed 	bl	8010802 <xTaskCreateStatic>
 8010628:	4603      	mov	r3, r0
 801062a:	60fb      	str	r3, [r7, #12]
 801062c:	e01c      	b.n	8010668 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	685c      	ldr	r4, [r3, #4]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801063a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010642:	4618      	mov	r0, r3
 8010644:	f7ff ffaa 	bl	801059c <makeFreeRtosPriority>
 8010648:	4602      	mov	r2, r0
 801064a:	f107 030c 	add.w	r3, r7, #12
 801064e:	9301      	str	r3, [sp, #4]
 8010650:	9200      	str	r2, [sp, #0]
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	4632      	mov	r2, r6
 8010656:	4629      	mov	r1, r5
 8010658:	4620      	mov	r0, r4
 801065a:	f000 f932 	bl	80108c2 <xTaskCreate>
 801065e:	4603      	mov	r3, r0
 8010660:	2b01      	cmp	r3, #1
 8010662:	d001      	beq.n	8010668 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010664:	2300      	movs	r3, #0
 8010666:	e000      	b.n	801066a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010668:	68fb      	ldr	r3, [r7, #12]
}
 801066a:	4618      	mov	r0, r3
 801066c:	3714      	adds	r7, #20
 801066e:	46bd      	mov	sp, r7
 8010670:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010672 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010672:	b580      	push	{r7, lr}
 8010674:	b084      	sub	sp, #16
 8010676:	af00      	add	r7, sp, #0
 8010678:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d001      	beq.n	8010688 <osDelay+0x16>
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	e000      	b.n	801068a <osDelay+0x18>
 8010688:	2301      	movs	r3, #1
 801068a:	4618      	mov	r0, r3
 801068c:	f000 fa68 	bl	8010b60 <vTaskDelay>
  
  return osOK;
 8010690:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010692:	4618      	mov	r0, r3
 8010694:	3710      	adds	r7, #16
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801069a:	b480      	push	{r7}
 801069c:	b083      	sub	sp, #12
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	f103 0208 	add.w	r2, r3, #8
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f04f 32ff 	mov.w	r2, #4294967295
 80106b2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f103 0208 	add.w	r2, r3, #8
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f103 0208 	add.w	r2, r3, #8
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80106ce:	bf00      	nop
 80106d0:	370c      	adds	r7, #12
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr

080106da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80106da:	b480      	push	{r7}
 80106dc:	b083      	sub	sp, #12
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2200      	movs	r2, #0
 80106e6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80106e8:	bf00      	nop
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
 80106fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	689a      	ldr	r2, [r3, #8]
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	689b      	ldr	r3, [r3, #8]
 8010716:	683a      	ldr	r2, [r7, #0]
 8010718:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	683a      	ldr	r2, [r7, #0]
 801071e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	1c5a      	adds	r2, r3, #1
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	601a      	str	r2, [r3, #0]
}
 8010730:	bf00      	nop
 8010732:	3714      	adds	r7, #20
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801073c:	b480      	push	{r7}
 801073e:	b085      	sub	sp, #20
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010752:	d103      	bne.n	801075c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	691b      	ldr	r3, [r3, #16]
 8010758:	60fb      	str	r3, [r7, #12]
 801075a:	e00c      	b.n	8010776 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	3308      	adds	r3, #8
 8010760:	60fb      	str	r3, [r7, #12]
 8010762:	e002      	b.n	801076a <vListInsert+0x2e>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	60fb      	str	r3, [r7, #12]
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	68ba      	ldr	r2, [r7, #8]
 8010772:	429a      	cmp	r2, r3
 8010774:	d2f6      	bcs.n	8010764 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	685a      	ldr	r2, [r3, #4]
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	683a      	ldr	r2, [r7, #0]
 8010784:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	68fa      	ldr	r2, [r7, #12]
 801078a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	683a      	ldr	r2, [r7, #0]
 8010790:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	687a      	ldr	r2, [r7, #4]
 8010796:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	1c5a      	adds	r2, r3, #1
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	601a      	str	r2, [r3, #0]
}
 80107a2:	bf00      	nop
 80107a4:	3714      	adds	r7, #20
 80107a6:	46bd      	mov	sp, r7
 80107a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ac:	4770      	bx	lr

080107ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80107ae:	b480      	push	{r7}
 80107b0:	b085      	sub	sp, #20
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	691b      	ldr	r3, [r3, #16]
 80107ba:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	687a      	ldr	r2, [r7, #4]
 80107c2:	6892      	ldr	r2, [r2, #8]
 80107c4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	6852      	ldr	r2, [r2, #4]
 80107ce:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d103      	bne.n	80107e2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	689a      	ldr	r2, [r3, #8]
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2200      	movs	r2, #0
 80107e6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	1e5a      	subs	r2, r3, #1
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	3714      	adds	r7, #20
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr

08010802 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010802:	b580      	push	{r7, lr}
 8010804:	b08e      	sub	sp, #56	@ 0x38
 8010806:	af04      	add	r7, sp, #16
 8010808:	60f8      	str	r0, [r7, #12]
 801080a:	60b9      	str	r1, [r7, #8]
 801080c:	607a      	str	r2, [r7, #4]
 801080e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010812:	2b00      	cmp	r3, #0
 8010814:	d10b      	bne.n	801082e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801081a:	f383 8811 	msr	BASEPRI, r3
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f3bf 8f4f 	dsb	sy
 8010826:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010828:	bf00      	nop
 801082a:	bf00      	nop
 801082c:	e7fd      	b.n	801082a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801082e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010830:	2b00      	cmp	r3, #0
 8010832:	d10b      	bne.n	801084c <xTaskCreateStatic+0x4a>
	__asm volatile
 8010834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010838:	f383 8811 	msr	BASEPRI, r3
 801083c:	f3bf 8f6f 	isb	sy
 8010840:	f3bf 8f4f 	dsb	sy
 8010844:	61fb      	str	r3, [r7, #28]
}
 8010846:	bf00      	nop
 8010848:	bf00      	nop
 801084a:	e7fd      	b.n	8010848 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801084c:	23a0      	movs	r3, #160	@ 0xa0
 801084e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	2ba0      	cmp	r3, #160	@ 0xa0
 8010854:	d00b      	beq.n	801086e <xTaskCreateStatic+0x6c>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	61bb      	str	r3, [r7, #24]
}
 8010868:	bf00      	nop
 801086a:	bf00      	nop
 801086c:	e7fd      	b.n	801086a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801086e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010872:	2b00      	cmp	r3, #0
 8010874:	d01e      	beq.n	80108b4 <xTaskCreateStatic+0xb2>
 8010876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010878:	2b00      	cmp	r3, #0
 801087a:	d01b      	beq.n	80108b4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801087c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801087e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010884:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010888:	2202      	movs	r2, #2
 801088a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801088e:	2300      	movs	r3, #0
 8010890:	9303      	str	r3, [sp, #12]
 8010892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010894:	9302      	str	r3, [sp, #8]
 8010896:	f107 0314 	add.w	r3, r7, #20
 801089a:	9301      	str	r3, [sp, #4]
 801089c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801089e:	9300      	str	r3, [sp, #0]
 80108a0:	683b      	ldr	r3, [r7, #0]
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	68b9      	ldr	r1, [r7, #8]
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f000 f850 	bl	801094c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80108ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80108ae:	f000 f8ed 	bl	8010a8c <prvAddNewTaskToReadyList>
 80108b2:	e001      	b.n	80108b8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80108b4:	2300      	movs	r3, #0
 80108b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80108b8:	697b      	ldr	r3, [r7, #20]
	}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3728      	adds	r7, #40	@ 0x28
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80108c2:	b580      	push	{r7, lr}
 80108c4:	b08c      	sub	sp, #48	@ 0x30
 80108c6:	af04      	add	r7, sp, #16
 80108c8:	60f8      	str	r0, [r7, #12]
 80108ca:	60b9      	str	r1, [r7, #8]
 80108cc:	603b      	str	r3, [r7, #0]
 80108ce:	4613      	mov	r3, r2
 80108d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80108d2:	88fb      	ldrh	r3, [r7, #6]
 80108d4:	009b      	lsls	r3, r3, #2
 80108d6:	4618      	mov	r0, r3
 80108d8:	f001 f9b0 	bl	8011c3c <pvPortMalloc>
 80108dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00e      	beq.n	8010902 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80108e4:	20a0      	movs	r0, #160	@ 0xa0
 80108e6:	f001 f9a9 	bl	8011c3c <pvPortMalloc>
 80108ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d003      	beq.n	80108fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80108f2:	69fb      	ldr	r3, [r7, #28]
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80108f8:	e005      	b.n	8010906 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80108fa:	6978      	ldr	r0, [r7, #20]
 80108fc:	f001 fa6c 	bl	8011dd8 <vPortFree>
 8010900:	e001      	b.n	8010906 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010902:	2300      	movs	r3, #0
 8010904:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d017      	beq.n	801093c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801090c:	69fb      	ldr	r3, [r7, #28]
 801090e:	2200      	movs	r2, #0
 8010910:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010914:	88fa      	ldrh	r2, [r7, #6]
 8010916:	2300      	movs	r3, #0
 8010918:	9303      	str	r3, [sp, #12]
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	9302      	str	r3, [sp, #8]
 801091e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010920:	9301      	str	r3, [sp, #4]
 8010922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	68b9      	ldr	r1, [r7, #8]
 801092a:	68f8      	ldr	r0, [r7, #12]
 801092c:	f000 f80e 	bl	801094c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010930:	69f8      	ldr	r0, [r7, #28]
 8010932:	f000 f8ab 	bl	8010a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010936:	2301      	movs	r3, #1
 8010938:	61bb      	str	r3, [r7, #24]
 801093a:	e002      	b.n	8010942 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801093c:	f04f 33ff 	mov.w	r3, #4294967295
 8010940:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010942:	69bb      	ldr	r3, [r7, #24]
	}
 8010944:	4618      	mov	r0, r3
 8010946:	3720      	adds	r7, #32
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b088      	sub	sp, #32
 8010950:	af00      	add	r7, sp, #0
 8010952:	60f8      	str	r0, [r7, #12]
 8010954:	60b9      	str	r1, [r7, #8]
 8010956:	607a      	str	r2, [r7, #4]
 8010958:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801095a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801095c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010964:	3b01      	subs	r3, #1
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	4413      	add	r3, r2
 801096a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801096c:	69bb      	ldr	r3, [r7, #24]
 801096e:	f023 0307 	bic.w	r3, r3, #7
 8010972:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010974:	69bb      	ldr	r3, [r7, #24]
 8010976:	f003 0307 	and.w	r3, r3, #7
 801097a:	2b00      	cmp	r3, #0
 801097c:	d00b      	beq.n	8010996 <prvInitialiseNewTask+0x4a>
	__asm volatile
 801097e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	617b      	str	r3, [r7, #20]
}
 8010990:	bf00      	nop
 8010992:	bf00      	nop
 8010994:	e7fd      	b.n	8010992 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d01f      	beq.n	80109dc <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801099c:	2300      	movs	r3, #0
 801099e:	61fb      	str	r3, [r7, #28]
 80109a0:	e012      	b.n	80109c8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80109a2:	68ba      	ldr	r2, [r7, #8]
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	4413      	add	r3, r2
 80109a8:	7819      	ldrb	r1, [r3, #0]
 80109aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	4413      	add	r3, r2
 80109b0:	3334      	adds	r3, #52	@ 0x34
 80109b2:	460a      	mov	r2, r1
 80109b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80109b6:	68ba      	ldr	r2, [r7, #8]
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	4413      	add	r3, r2
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d006      	beq.n	80109d0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80109c2:	69fb      	ldr	r3, [r7, #28]
 80109c4:	3301      	adds	r3, #1
 80109c6:	61fb      	str	r3, [r7, #28]
 80109c8:	69fb      	ldr	r3, [r7, #28]
 80109ca:	2b0f      	cmp	r3, #15
 80109cc:	d9e9      	bls.n	80109a2 <prvInitialiseNewTask+0x56>
 80109ce:	e000      	b.n	80109d2 <prvInitialiseNewTask+0x86>
			{
				break;
 80109d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80109d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109d4:	2200      	movs	r2, #0
 80109d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80109da:	e003      	b.n	80109e4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80109dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109de:	2200      	movs	r2, #0
 80109e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80109e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109e6:	2b06      	cmp	r3, #6
 80109e8:	d901      	bls.n	80109ee <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80109ea:	2306      	movs	r3, #6
 80109ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80109ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80109f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80109f8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80109fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109fc:	2200      	movs	r2, #0
 80109fe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a02:	3304      	adds	r3, #4
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7ff fe68 	bl	80106da <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a0c:	3318      	adds	r3, #24
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7ff fe63 	bl	80106da <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a1c:	f1c3 0207 	rsb	r2, r3, #7
 8010a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a28:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a34:	2200      	movs	r2, #0
 8010a36:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a3c:	334c      	adds	r3, #76	@ 0x4c
 8010a3e:	224c      	movs	r2, #76	@ 0x4c
 8010a40:	2100      	movs	r1, #0
 8010a42:	4618      	mov	r0, r3
 8010a44:	f001 fe98 	bl	8012778 <memset>
 8010a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8010a80 <prvInitialiseNewTask+0x134>)
 8010a4c:	651a      	str	r2, [r3, #80]	@ 0x50
 8010a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a50:	4a0c      	ldr	r2, [pc, #48]	@ (8010a84 <prvInitialiseNewTask+0x138>)
 8010a52:	655a      	str	r2, [r3, #84]	@ 0x54
 8010a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a56:	4a0c      	ldr	r2, [pc, #48]	@ (8010a88 <prvInitialiseNewTask+0x13c>)
 8010a58:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010a5a:	683a      	ldr	r2, [r7, #0]
 8010a5c:	68f9      	ldr	r1, [r7, #12]
 8010a5e:	69b8      	ldr	r0, [r7, #24]
 8010a60:	f000 fe9c 	bl	801179c <pxPortInitialiseStack>
 8010a64:	4602      	mov	r2, r0
 8010a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d002      	beq.n	8010a76 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a76:	bf00      	nop
 8010a78:	3720      	adds	r7, #32
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}
 8010a7e:	bf00      	nop
 8010a80:	2000420c 	.word	0x2000420c
 8010a84:	20004274 	.word	0x20004274
 8010a88:	200042dc 	.word	0x200042dc

08010a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010a94:	f000 ffb0 	bl	80119f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010a98:	4b2a      	ldr	r3, [pc, #168]	@ (8010b44 <prvAddNewTaskToReadyList+0xb8>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	4a29      	ldr	r2, [pc, #164]	@ (8010b44 <prvAddNewTaskToReadyList+0xb8>)
 8010aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010aa2:	4b29      	ldr	r3, [pc, #164]	@ (8010b48 <prvAddNewTaskToReadyList+0xbc>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d109      	bne.n	8010abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010aaa:	4a27      	ldr	r2, [pc, #156]	@ (8010b48 <prvAddNewTaskToReadyList+0xbc>)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ab0:	4b24      	ldr	r3, [pc, #144]	@ (8010b44 <prvAddNewTaskToReadyList+0xb8>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d110      	bne.n	8010ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010ab8:	f000 fad4 	bl	8011064 <prvInitialiseTaskLists>
 8010abc:	e00d      	b.n	8010ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010abe:	4b23      	ldr	r3, [pc, #140]	@ (8010b4c <prvAddNewTaskToReadyList+0xc0>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d109      	bne.n	8010ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010ac6:	4b20      	ldr	r3, [pc, #128]	@ (8010b48 <prvAddNewTaskToReadyList+0xbc>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d802      	bhi.n	8010ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8010b48 <prvAddNewTaskToReadyList+0xbc>)
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010ada:	4b1d      	ldr	r3, [pc, #116]	@ (8010b50 <prvAddNewTaskToReadyList+0xc4>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	3301      	adds	r3, #1
 8010ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8010b50 <prvAddNewTaskToReadyList+0xc4>)
 8010ae2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ae8:	2201      	movs	r2, #1
 8010aea:	409a      	lsls	r2, r3
 8010aec:	4b19      	ldr	r3, [pc, #100]	@ (8010b54 <prvAddNewTaskToReadyList+0xc8>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	4313      	orrs	r3, r2
 8010af2:	4a18      	ldr	r2, [pc, #96]	@ (8010b54 <prvAddNewTaskToReadyList+0xc8>)
 8010af4:	6013      	str	r3, [r2, #0]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010afa:	4613      	mov	r3, r2
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	4413      	add	r3, r2
 8010b00:	009b      	lsls	r3, r3, #2
 8010b02:	4a15      	ldr	r2, [pc, #84]	@ (8010b58 <prvAddNewTaskToReadyList+0xcc>)
 8010b04:	441a      	add	r2, r3
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	3304      	adds	r3, #4
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	f7ff fdf1 	bl	80106f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010b12:	f000 ffa3 	bl	8011a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010b16:	4b0d      	ldr	r3, [pc, #52]	@ (8010b4c <prvAddNewTaskToReadyList+0xc0>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d00e      	beq.n	8010b3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8010b48 <prvAddNewTaskToReadyList+0xbc>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d207      	bcs.n	8010b3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8010b5c <prvAddNewTaskToReadyList+0xd0>)
 8010b2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b32:	601a      	str	r2, [r3, #0]
 8010b34:	f3bf 8f4f 	dsb	sy
 8010b38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b3c:	bf00      	nop
 8010b3e:	3708      	adds	r7, #8
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	200005b8 	.word	0x200005b8
 8010b48:	200004b8 	.word	0x200004b8
 8010b4c:	200005c4 	.word	0x200005c4
 8010b50:	200005d4 	.word	0x200005d4
 8010b54:	200005c0 	.word	0x200005c0
 8010b58:	200004bc 	.word	0x200004bc
 8010b5c:	e000ed04 	.word	0xe000ed04

08010b60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d018      	beq.n	8010ba4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010b72:	4b14      	ldr	r3, [pc, #80]	@ (8010bc4 <vTaskDelay+0x64>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d00b      	beq.n	8010b92 <vTaskDelay+0x32>
	__asm volatile
 8010b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b7e:	f383 8811 	msr	BASEPRI, r3
 8010b82:	f3bf 8f6f 	isb	sy
 8010b86:	f3bf 8f4f 	dsb	sy
 8010b8a:	60bb      	str	r3, [r7, #8]
}
 8010b8c:	bf00      	nop
 8010b8e:	bf00      	nop
 8010b90:	e7fd      	b.n	8010b8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010b92:	f000 f885 	bl	8010ca0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010b96:	2100      	movs	r1, #0
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 fd99 	bl	80116d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010b9e:	f000 f88d 	bl	8010cbc <xTaskResumeAll>
 8010ba2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d107      	bne.n	8010bba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010baa:	4b07      	ldr	r3, [pc, #28]	@ (8010bc8 <vTaskDelay+0x68>)
 8010bac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bb0:	601a      	str	r2, [r3, #0]
 8010bb2:	f3bf 8f4f 	dsb	sy
 8010bb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010bba:	bf00      	nop
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
 8010bc2:	bf00      	nop
 8010bc4:	200005e0 	.word	0x200005e0
 8010bc8:	e000ed04 	.word	0xe000ed04

08010bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b08a      	sub	sp, #40	@ 0x28
 8010bd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010bda:	463a      	mov	r2, r7
 8010bdc:	1d39      	adds	r1, r7, #4
 8010bde:	f107 0308 	add.w	r3, r7, #8
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fc f828 	bl	800cc38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010be8:	6839      	ldr	r1, [r7, #0]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	68ba      	ldr	r2, [r7, #8]
 8010bee:	9202      	str	r2, [sp, #8]
 8010bf0:	9301      	str	r3, [sp, #4]
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	9300      	str	r3, [sp, #0]
 8010bf6:	2300      	movs	r3, #0
 8010bf8:	460a      	mov	r2, r1
 8010bfa:	4921      	ldr	r1, [pc, #132]	@ (8010c80 <vTaskStartScheduler+0xb4>)
 8010bfc:	4821      	ldr	r0, [pc, #132]	@ (8010c84 <vTaskStartScheduler+0xb8>)
 8010bfe:	f7ff fe00 	bl	8010802 <xTaskCreateStatic>
 8010c02:	4603      	mov	r3, r0
 8010c04:	4a20      	ldr	r2, [pc, #128]	@ (8010c88 <vTaskStartScheduler+0xbc>)
 8010c06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010c08:	4b1f      	ldr	r3, [pc, #124]	@ (8010c88 <vTaskStartScheduler+0xbc>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d002      	beq.n	8010c16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010c10:	2301      	movs	r3, #1
 8010c12:	617b      	str	r3, [r7, #20]
 8010c14:	e001      	b.n	8010c1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	2b01      	cmp	r3, #1
 8010c1e:	d11b      	bne.n	8010c58 <vTaskStartScheduler+0x8c>
	__asm volatile
 8010c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c24:	f383 8811 	msr	BASEPRI, r3
 8010c28:	f3bf 8f6f 	isb	sy
 8010c2c:	f3bf 8f4f 	dsb	sy
 8010c30:	613b      	str	r3, [r7, #16]
}
 8010c32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010c34:	4b15      	ldr	r3, [pc, #84]	@ (8010c8c <vTaskStartScheduler+0xc0>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	334c      	adds	r3, #76	@ 0x4c
 8010c3a:	4a15      	ldr	r2, [pc, #84]	@ (8010c90 <vTaskStartScheduler+0xc4>)
 8010c3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010c3e:	4b15      	ldr	r3, [pc, #84]	@ (8010c94 <vTaskStartScheduler+0xc8>)
 8010c40:	f04f 32ff 	mov.w	r2, #4294967295
 8010c44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010c46:	4b14      	ldr	r3, [pc, #80]	@ (8010c98 <vTaskStartScheduler+0xcc>)
 8010c48:	2201      	movs	r2, #1
 8010c4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010c4c:	4b13      	ldr	r3, [pc, #76]	@ (8010c9c <vTaskStartScheduler+0xd0>)
 8010c4e:	2200      	movs	r2, #0
 8010c50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010c52:	f000 fe2d 	bl	80118b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010c56:	e00f      	b.n	8010c78 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c5e:	d10b      	bne.n	8010c78 <vTaskStartScheduler+0xac>
	__asm volatile
 8010c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c64:	f383 8811 	msr	BASEPRI, r3
 8010c68:	f3bf 8f6f 	isb	sy
 8010c6c:	f3bf 8f4f 	dsb	sy
 8010c70:	60fb      	str	r3, [r7, #12]
}
 8010c72:	bf00      	nop
 8010c74:	bf00      	nop
 8010c76:	e7fd      	b.n	8010c74 <vTaskStartScheduler+0xa8>
}
 8010c78:	bf00      	nop
 8010c7a:	3718      	adds	r7, #24
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	080137c0 	.word	0x080137c0
 8010c84:	08011035 	.word	0x08011035
 8010c88:	200005dc 	.word	0x200005dc
 8010c8c:	200004b8 	.word	0x200004b8
 8010c90:	20000024 	.word	0x20000024
 8010c94:	200005d8 	.word	0x200005d8
 8010c98:	200005c4 	.word	0x200005c4
 8010c9c:	200005bc 	.word	0x200005bc

08010ca0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010ca0:	b480      	push	{r7}
 8010ca2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010ca4:	4b04      	ldr	r3, [pc, #16]	@ (8010cb8 <vTaskSuspendAll+0x18>)
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	4a03      	ldr	r2, [pc, #12]	@ (8010cb8 <vTaskSuspendAll+0x18>)
 8010cac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010cae:	bf00      	nop
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb6:	4770      	bx	lr
 8010cb8:	200005e0 	.word	0x200005e0

08010cbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b084      	sub	sp, #16
 8010cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010cca:	4b42      	ldr	r3, [pc, #264]	@ (8010dd4 <xTaskResumeAll+0x118>)
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d10b      	bne.n	8010cea <xTaskResumeAll+0x2e>
	__asm volatile
 8010cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cd6:	f383 8811 	msr	BASEPRI, r3
 8010cda:	f3bf 8f6f 	isb	sy
 8010cde:	f3bf 8f4f 	dsb	sy
 8010ce2:	603b      	str	r3, [r7, #0]
}
 8010ce4:	bf00      	nop
 8010ce6:	bf00      	nop
 8010ce8:	e7fd      	b.n	8010ce6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010cea:	f000 fe85 	bl	80119f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010cee:	4b39      	ldr	r3, [pc, #228]	@ (8010dd4 <xTaskResumeAll+0x118>)
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	3b01      	subs	r3, #1
 8010cf4:	4a37      	ldr	r2, [pc, #220]	@ (8010dd4 <xTaskResumeAll+0x118>)
 8010cf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cf8:	4b36      	ldr	r3, [pc, #216]	@ (8010dd4 <xTaskResumeAll+0x118>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d161      	bne.n	8010dc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010d00:	4b35      	ldr	r3, [pc, #212]	@ (8010dd8 <xTaskResumeAll+0x11c>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d05d      	beq.n	8010dc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d08:	e02e      	b.n	8010d68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d0a:	4b34      	ldr	r3, [pc, #208]	@ (8010ddc <xTaskResumeAll+0x120>)
 8010d0c:	68db      	ldr	r3, [r3, #12]
 8010d0e:	68db      	ldr	r3, [r3, #12]
 8010d10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	3318      	adds	r3, #24
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff fd49 	bl	80107ae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	3304      	adds	r3, #4
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7ff fd44 	bl	80107ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	409a      	lsls	r2, r3
 8010d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8010de0 <xTaskResumeAll+0x124>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	4313      	orrs	r3, r2
 8010d34:	4a2a      	ldr	r2, [pc, #168]	@ (8010de0 <xTaskResumeAll+0x124>)
 8010d36:	6013      	str	r3, [r2, #0]
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d3c:	4613      	mov	r3, r2
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	4413      	add	r3, r2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	4a27      	ldr	r2, [pc, #156]	@ (8010de4 <xTaskResumeAll+0x128>)
 8010d46:	441a      	add	r2, r3
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	3304      	adds	r3, #4
 8010d4c:	4619      	mov	r1, r3
 8010d4e:	4610      	mov	r0, r2
 8010d50:	f7ff fcd0 	bl	80106f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d58:	4b23      	ldr	r3, [pc, #140]	@ (8010de8 <xTaskResumeAll+0x12c>)
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d302      	bcc.n	8010d68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010d62:	4b22      	ldr	r3, [pc, #136]	@ (8010dec <xTaskResumeAll+0x130>)
 8010d64:	2201      	movs	r2, #1
 8010d66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d68:	4b1c      	ldr	r3, [pc, #112]	@ (8010ddc <xTaskResumeAll+0x120>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d1cc      	bne.n	8010d0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d001      	beq.n	8010d7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010d76:	f000 fa19 	bl	80111ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8010df0 <xTaskResumeAll+0x134>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d010      	beq.n	8010da8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010d86:	f000 f837 	bl	8010df8 <xTaskIncrementTick>
 8010d8a:	4603      	mov	r3, r0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d002      	beq.n	8010d96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010d90:	4b16      	ldr	r3, [pc, #88]	@ (8010dec <xTaskResumeAll+0x130>)
 8010d92:	2201      	movs	r2, #1
 8010d94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	3b01      	subs	r3, #1
 8010d9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d1f1      	bne.n	8010d86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010da2:	4b13      	ldr	r3, [pc, #76]	@ (8010df0 <xTaskResumeAll+0x134>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010da8:	4b10      	ldr	r3, [pc, #64]	@ (8010dec <xTaskResumeAll+0x130>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d009      	beq.n	8010dc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010db0:	2301      	movs	r3, #1
 8010db2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010db4:	4b0f      	ldr	r3, [pc, #60]	@ (8010df4 <xTaskResumeAll+0x138>)
 8010db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010dba:	601a      	str	r2, [r3, #0]
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010dc4:	f000 fe4a 	bl	8011a5c <vPortExitCritical>

	return xAlreadyYielded;
 8010dc8:	68bb      	ldr	r3, [r7, #8]
}
 8010dca:	4618      	mov	r0, r3
 8010dcc:	3710      	adds	r7, #16
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	200005e0 	.word	0x200005e0
 8010dd8:	200005b8 	.word	0x200005b8
 8010ddc:	20000578 	.word	0x20000578
 8010de0:	200005c0 	.word	0x200005c0
 8010de4:	200004bc 	.word	0x200004bc
 8010de8:	200004b8 	.word	0x200004b8
 8010dec:	200005cc 	.word	0x200005cc
 8010df0:	200005c8 	.word	0x200005c8
 8010df4:	e000ed04 	.word	0xe000ed04

08010df8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b086      	sub	sp, #24
 8010dfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010dfe:	2300      	movs	r3, #0
 8010e00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e02:	4b4f      	ldr	r3, [pc, #316]	@ (8010f40 <xTaskIncrementTick+0x148>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f040 808f 	bne.w	8010f2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010e0c:	4b4d      	ldr	r3, [pc, #308]	@ (8010f44 <xTaskIncrementTick+0x14c>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	3301      	adds	r3, #1
 8010e12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010e14:	4a4b      	ldr	r2, [pc, #300]	@ (8010f44 <xTaskIncrementTick+0x14c>)
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d121      	bne.n	8010e64 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010e20:	4b49      	ldr	r3, [pc, #292]	@ (8010f48 <xTaskIncrementTick+0x150>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d00b      	beq.n	8010e42 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e2e:	f383 8811 	msr	BASEPRI, r3
 8010e32:	f3bf 8f6f 	isb	sy
 8010e36:	f3bf 8f4f 	dsb	sy
 8010e3a:	603b      	str	r3, [r7, #0]
}
 8010e3c:	bf00      	nop
 8010e3e:	bf00      	nop
 8010e40:	e7fd      	b.n	8010e3e <xTaskIncrementTick+0x46>
 8010e42:	4b41      	ldr	r3, [pc, #260]	@ (8010f48 <xTaskIncrementTick+0x150>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	60fb      	str	r3, [r7, #12]
 8010e48:	4b40      	ldr	r3, [pc, #256]	@ (8010f4c <xTaskIncrementTick+0x154>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	4a3e      	ldr	r2, [pc, #248]	@ (8010f48 <xTaskIncrementTick+0x150>)
 8010e4e:	6013      	str	r3, [r2, #0]
 8010e50:	4a3e      	ldr	r2, [pc, #248]	@ (8010f4c <xTaskIncrementTick+0x154>)
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	6013      	str	r3, [r2, #0]
 8010e56:	4b3e      	ldr	r3, [pc, #248]	@ (8010f50 <xTaskIncrementTick+0x158>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	4a3c      	ldr	r2, [pc, #240]	@ (8010f50 <xTaskIncrementTick+0x158>)
 8010e5e:	6013      	str	r3, [r2, #0]
 8010e60:	f000 f9a4 	bl	80111ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e64:	4b3b      	ldr	r3, [pc, #236]	@ (8010f54 <xTaskIncrementTick+0x15c>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	693a      	ldr	r2, [r7, #16]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d348      	bcc.n	8010f00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e6e:	4b36      	ldr	r3, [pc, #216]	@ (8010f48 <xTaskIncrementTick+0x150>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d104      	bne.n	8010e82 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e78:	4b36      	ldr	r3, [pc, #216]	@ (8010f54 <xTaskIncrementTick+0x15c>)
 8010e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e7e:	601a      	str	r2, [r3, #0]
					break;
 8010e80:	e03e      	b.n	8010f00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e82:	4b31      	ldr	r3, [pc, #196]	@ (8010f48 <xTaskIncrementTick+0x150>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e92:	693a      	ldr	r2, [r7, #16]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d203      	bcs.n	8010ea2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8010f54 <xTaskIncrementTick+0x15c>)
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010ea0:	e02e      	b.n	8010f00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	3304      	adds	r3, #4
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7ff fc81 	bl	80107ae <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d004      	beq.n	8010ebe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010eb4:	68bb      	ldr	r3, [r7, #8]
 8010eb6:	3318      	adds	r3, #24
 8010eb8:	4618      	mov	r0, r3
 8010eba:	f7ff fc78 	bl	80107ae <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ec2:	2201      	movs	r2, #1
 8010ec4:	409a      	lsls	r2, r3
 8010ec6:	4b24      	ldr	r3, [pc, #144]	@ (8010f58 <xTaskIncrementTick+0x160>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	4a22      	ldr	r2, [pc, #136]	@ (8010f58 <xTaskIncrementTick+0x160>)
 8010ece:	6013      	str	r3, [r2, #0]
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4413      	add	r3, r2
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	4a1f      	ldr	r2, [pc, #124]	@ (8010f5c <xTaskIncrementTick+0x164>)
 8010ede:	441a      	add	r2, r3
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	3304      	adds	r3, #4
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	4610      	mov	r0, r2
 8010ee8:	f7ff fc04 	bl	80106f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8010f60 <xTaskIncrementTick+0x168>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d3b9      	bcc.n	8010e6e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010efa:	2301      	movs	r3, #1
 8010efc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010efe:	e7b6      	b.n	8010e6e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010f00:	4b17      	ldr	r3, [pc, #92]	@ (8010f60 <xTaskIncrementTick+0x168>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f06:	4915      	ldr	r1, [pc, #84]	@ (8010f5c <xTaskIncrementTick+0x164>)
 8010f08:	4613      	mov	r3, r2
 8010f0a:	009b      	lsls	r3, r3, #2
 8010f0c:	4413      	add	r3, r2
 8010f0e:	009b      	lsls	r3, r3, #2
 8010f10:	440b      	add	r3, r1
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d901      	bls.n	8010f1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010f18:	2301      	movs	r3, #1
 8010f1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010f1c:	4b11      	ldr	r3, [pc, #68]	@ (8010f64 <xTaskIncrementTick+0x16c>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d007      	beq.n	8010f34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010f24:	2301      	movs	r3, #1
 8010f26:	617b      	str	r3, [r7, #20]
 8010f28:	e004      	b.n	8010f34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8010f68 <xTaskIncrementTick+0x170>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	3301      	adds	r3, #1
 8010f30:	4a0d      	ldr	r2, [pc, #52]	@ (8010f68 <xTaskIncrementTick+0x170>)
 8010f32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010f34:	697b      	ldr	r3, [r7, #20]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3718      	adds	r7, #24
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
 8010f3e:	bf00      	nop
 8010f40:	200005e0 	.word	0x200005e0
 8010f44:	200005bc 	.word	0x200005bc
 8010f48:	20000570 	.word	0x20000570
 8010f4c:	20000574 	.word	0x20000574
 8010f50:	200005d0 	.word	0x200005d0
 8010f54:	200005d8 	.word	0x200005d8
 8010f58:	200005c0 	.word	0x200005c0
 8010f5c:	200004bc 	.word	0x200004bc
 8010f60:	200004b8 	.word	0x200004b8
 8010f64:	200005cc 	.word	0x200005cc
 8010f68:	200005c8 	.word	0x200005c8

08010f6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b087      	sub	sp, #28
 8010f70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f72:	4b2a      	ldr	r3, [pc, #168]	@ (801101c <vTaskSwitchContext+0xb0>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d003      	beq.n	8010f82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010f7a:	4b29      	ldr	r3, [pc, #164]	@ (8011020 <vTaskSwitchContext+0xb4>)
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010f80:	e045      	b.n	801100e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8010f82:	4b27      	ldr	r3, [pc, #156]	@ (8011020 <vTaskSwitchContext+0xb4>)
 8010f84:	2200      	movs	r2, #0
 8010f86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f88:	4b26      	ldr	r3, [pc, #152]	@ (8011024 <vTaskSwitchContext+0xb8>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	fab3 f383 	clz	r3, r3
 8010f94:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010f96:	7afb      	ldrb	r3, [r7, #11]
 8010f98:	f1c3 031f 	rsb	r3, r3, #31
 8010f9c:	617b      	str	r3, [r7, #20]
 8010f9e:	4922      	ldr	r1, [pc, #136]	@ (8011028 <vTaskSwitchContext+0xbc>)
 8010fa0:	697a      	ldr	r2, [r7, #20]
 8010fa2:	4613      	mov	r3, r2
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	4413      	add	r3, r2
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	440b      	add	r3, r1
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d10b      	bne.n	8010fca <vTaskSwitchContext+0x5e>
	__asm volatile
 8010fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fb6:	f383 8811 	msr	BASEPRI, r3
 8010fba:	f3bf 8f6f 	isb	sy
 8010fbe:	f3bf 8f4f 	dsb	sy
 8010fc2:	607b      	str	r3, [r7, #4]
}
 8010fc4:	bf00      	nop
 8010fc6:	bf00      	nop
 8010fc8:	e7fd      	b.n	8010fc6 <vTaskSwitchContext+0x5a>
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	4613      	mov	r3, r2
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	4413      	add	r3, r2
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	4a14      	ldr	r2, [pc, #80]	@ (8011028 <vTaskSwitchContext+0xbc>)
 8010fd6:	4413      	add	r3, r2
 8010fd8:	613b      	str	r3, [r7, #16]
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	685a      	ldr	r2, [r3, #4]
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	605a      	str	r2, [r3, #4]
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	685a      	ldr	r2, [r3, #4]
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	3308      	adds	r3, #8
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d104      	bne.n	8010ffa <vTaskSwitchContext+0x8e>
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	685a      	ldr	r2, [r3, #4]
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	605a      	str	r2, [r3, #4]
 8010ffa:	693b      	ldr	r3, [r7, #16]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	4a0a      	ldr	r2, [pc, #40]	@ (801102c <vTaskSwitchContext+0xc0>)
 8011002:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011004:	4b09      	ldr	r3, [pc, #36]	@ (801102c <vTaskSwitchContext+0xc0>)
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	334c      	adds	r3, #76	@ 0x4c
 801100a:	4a09      	ldr	r2, [pc, #36]	@ (8011030 <vTaskSwitchContext+0xc4>)
 801100c:	6013      	str	r3, [r2, #0]
}
 801100e:	bf00      	nop
 8011010:	371c      	adds	r7, #28
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	200005e0 	.word	0x200005e0
 8011020:	200005cc 	.word	0x200005cc
 8011024:	200005c0 	.word	0x200005c0
 8011028:	200004bc 	.word	0x200004bc
 801102c:	200004b8 	.word	0x200004b8
 8011030:	20000024 	.word	0x20000024

08011034 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b082      	sub	sp, #8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801103c:	f000 f852 	bl	80110e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011040:	4b06      	ldr	r3, [pc, #24]	@ (801105c <prvIdleTask+0x28>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b01      	cmp	r3, #1
 8011046:	d9f9      	bls.n	801103c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011048:	4b05      	ldr	r3, [pc, #20]	@ (8011060 <prvIdleTask+0x2c>)
 801104a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801104e:	601a      	str	r2, [r3, #0]
 8011050:	f3bf 8f4f 	dsb	sy
 8011054:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011058:	e7f0      	b.n	801103c <prvIdleTask+0x8>
 801105a:	bf00      	nop
 801105c:	200004bc 	.word	0x200004bc
 8011060:	e000ed04 	.word	0xe000ed04

08011064 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801106a:	2300      	movs	r3, #0
 801106c:	607b      	str	r3, [r7, #4]
 801106e:	e00c      	b.n	801108a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	4613      	mov	r3, r2
 8011074:	009b      	lsls	r3, r3, #2
 8011076:	4413      	add	r3, r2
 8011078:	009b      	lsls	r3, r3, #2
 801107a:	4a12      	ldr	r2, [pc, #72]	@ (80110c4 <prvInitialiseTaskLists+0x60>)
 801107c:	4413      	add	r3, r2
 801107e:	4618      	mov	r0, r3
 8011080:	f7ff fb0b 	bl	801069a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	3301      	adds	r3, #1
 8011088:	607b      	str	r3, [r7, #4]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2b06      	cmp	r3, #6
 801108e:	d9ef      	bls.n	8011070 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011090:	480d      	ldr	r0, [pc, #52]	@ (80110c8 <prvInitialiseTaskLists+0x64>)
 8011092:	f7ff fb02 	bl	801069a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011096:	480d      	ldr	r0, [pc, #52]	@ (80110cc <prvInitialiseTaskLists+0x68>)
 8011098:	f7ff faff 	bl	801069a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801109c:	480c      	ldr	r0, [pc, #48]	@ (80110d0 <prvInitialiseTaskLists+0x6c>)
 801109e:	f7ff fafc 	bl	801069a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80110a2:	480c      	ldr	r0, [pc, #48]	@ (80110d4 <prvInitialiseTaskLists+0x70>)
 80110a4:	f7ff faf9 	bl	801069a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80110a8:	480b      	ldr	r0, [pc, #44]	@ (80110d8 <prvInitialiseTaskLists+0x74>)
 80110aa:	f7ff faf6 	bl	801069a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80110ae:	4b0b      	ldr	r3, [pc, #44]	@ (80110dc <prvInitialiseTaskLists+0x78>)
 80110b0:	4a05      	ldr	r2, [pc, #20]	@ (80110c8 <prvInitialiseTaskLists+0x64>)
 80110b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80110b4:	4b0a      	ldr	r3, [pc, #40]	@ (80110e0 <prvInitialiseTaskLists+0x7c>)
 80110b6:	4a05      	ldr	r2, [pc, #20]	@ (80110cc <prvInitialiseTaskLists+0x68>)
 80110b8:	601a      	str	r2, [r3, #0]
}
 80110ba:	bf00      	nop
 80110bc:	3708      	adds	r7, #8
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}
 80110c2:	bf00      	nop
 80110c4:	200004bc 	.word	0x200004bc
 80110c8:	20000548 	.word	0x20000548
 80110cc:	2000055c 	.word	0x2000055c
 80110d0:	20000578 	.word	0x20000578
 80110d4:	2000058c 	.word	0x2000058c
 80110d8:	200005a4 	.word	0x200005a4
 80110dc:	20000570 	.word	0x20000570
 80110e0:	20000574 	.word	0x20000574

080110e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80110ea:	e019      	b.n	8011120 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80110ec:	f000 fc84 	bl	80119f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110f0:	4b10      	ldr	r3, [pc, #64]	@ (8011134 <prvCheckTasksWaitingTermination+0x50>)
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	68db      	ldr	r3, [r3, #12]
 80110f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	3304      	adds	r3, #4
 80110fc:	4618      	mov	r0, r3
 80110fe:	f7ff fb56 	bl	80107ae <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011102:	4b0d      	ldr	r3, [pc, #52]	@ (8011138 <prvCheckTasksWaitingTermination+0x54>)
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	3b01      	subs	r3, #1
 8011108:	4a0b      	ldr	r2, [pc, #44]	@ (8011138 <prvCheckTasksWaitingTermination+0x54>)
 801110a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801110c:	4b0b      	ldr	r3, [pc, #44]	@ (801113c <prvCheckTasksWaitingTermination+0x58>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	3b01      	subs	r3, #1
 8011112:	4a0a      	ldr	r2, [pc, #40]	@ (801113c <prvCheckTasksWaitingTermination+0x58>)
 8011114:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011116:	f000 fca1 	bl	8011a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f000 f810 	bl	8011140 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011120:	4b06      	ldr	r3, [pc, #24]	@ (801113c <prvCheckTasksWaitingTermination+0x58>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d1e1      	bne.n	80110ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011128:	bf00      	nop
 801112a:	bf00      	nop
 801112c:	3708      	adds	r7, #8
 801112e:	46bd      	mov	sp, r7
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	2000058c 	.word	0x2000058c
 8011138:	200005b8 	.word	0x200005b8
 801113c:	200005a0 	.word	0x200005a0

08011140 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011140:	b580      	push	{r7, lr}
 8011142:	b084      	sub	sp, #16
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	334c      	adds	r3, #76	@ 0x4c
 801114c:	4618      	mov	r0, r3
 801114e:	f001 fb2b 	bl	80127a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011158:	2b00      	cmp	r3, #0
 801115a:	d108      	bne.n	801116e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011160:	4618      	mov	r0, r3
 8011162:	f000 fe39 	bl	8011dd8 <vPortFree>
				vPortFree( pxTCB );
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f000 fe36 	bl	8011dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801116c:	e019      	b.n	80111a2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011174:	2b01      	cmp	r3, #1
 8011176:	d103      	bne.n	8011180 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011178:	6878      	ldr	r0, [r7, #4]
 801117a:	f000 fe2d 	bl	8011dd8 <vPortFree>
	}
 801117e:	e010      	b.n	80111a2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011186:	2b02      	cmp	r3, #2
 8011188:	d00b      	beq.n	80111a2 <prvDeleteTCB+0x62>
	__asm volatile
 801118a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801118e:	f383 8811 	msr	BASEPRI, r3
 8011192:	f3bf 8f6f 	isb	sy
 8011196:	f3bf 8f4f 	dsb	sy
 801119a:	60fb      	str	r3, [r7, #12]
}
 801119c:	bf00      	nop
 801119e:	bf00      	nop
 80111a0:	e7fd      	b.n	801119e <prvDeleteTCB+0x5e>
	}
 80111a2:	bf00      	nop
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
	...

080111ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111b2:	4b0c      	ldr	r3, [pc, #48]	@ (80111e4 <prvResetNextTaskUnblockTime+0x38>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d104      	bne.n	80111c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80111bc:	4b0a      	ldr	r3, [pc, #40]	@ (80111e8 <prvResetNextTaskUnblockTime+0x3c>)
 80111be:	f04f 32ff 	mov.w	r2, #4294967295
 80111c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80111c4:	e008      	b.n	80111d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111c6:	4b07      	ldr	r3, [pc, #28]	@ (80111e4 <prvResetNextTaskUnblockTime+0x38>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	4a04      	ldr	r2, [pc, #16]	@ (80111e8 <prvResetNextTaskUnblockTime+0x3c>)
 80111d6:	6013      	str	r3, [r2, #0]
}
 80111d8:	bf00      	nop
 80111da:	370c      	adds	r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr
 80111e4:	20000570 	.word	0x20000570
 80111e8:	200005d8 	.word	0x200005d8

080111ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80111ec:	b480      	push	{r7}
 80111ee:	b083      	sub	sp, #12
 80111f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80111f2:	4b0b      	ldr	r3, [pc, #44]	@ (8011220 <xTaskGetSchedulerState+0x34>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d102      	bne.n	8011200 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80111fa:	2301      	movs	r3, #1
 80111fc:	607b      	str	r3, [r7, #4]
 80111fe:	e008      	b.n	8011212 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011200:	4b08      	ldr	r3, [pc, #32]	@ (8011224 <xTaskGetSchedulerState+0x38>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d102      	bne.n	801120e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011208:	2302      	movs	r3, #2
 801120a:	607b      	str	r3, [r7, #4]
 801120c:	e001      	b.n	8011212 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801120e:	2300      	movs	r3, #0
 8011210:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011212:	687b      	ldr	r3, [r7, #4]
	}
 8011214:	4618      	mov	r0, r3
 8011216:	370c      	adds	r7, #12
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	200005c4 	.word	0x200005c4
 8011224:	200005e0 	.word	0x200005e0

08011228 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8011232:	f000 fbe1 	bl	80119f8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8011236:	4b20      	ldr	r3, [pc, #128]	@ (80112b8 <ulTaskNotifyTake+0x90>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801123e:	2b00      	cmp	r3, #0
 8011240:	d113      	bne.n	801126a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011242:	4b1d      	ldr	r3, [pc, #116]	@ (80112b8 <ulTaskNotifyTake+0x90>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2201      	movs	r2, #1
 8011248:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00b      	beq.n	801126a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011252:	2101      	movs	r1, #1
 8011254:	6838      	ldr	r0, [r7, #0]
 8011256:	f000 fa3b 	bl	80116d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801125a:	4b18      	ldr	r3, [pc, #96]	@ (80112bc <ulTaskNotifyTake+0x94>)
 801125c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011260:	601a      	str	r2, [r3, #0]
 8011262:	f3bf 8f4f 	dsb	sy
 8011266:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801126a:	f000 fbf7 	bl	8011a5c <vPortExitCritical>

		taskENTER_CRITICAL();
 801126e:	f000 fbc3 	bl	80119f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8011272:	4b11      	ldr	r3, [pc, #68]	@ (80112b8 <ulTaskNotifyTake+0x90>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801127a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d00e      	beq.n	80112a0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d005      	beq.n	8011294 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011288:	4b0b      	ldr	r3, [pc, #44]	@ (80112b8 <ulTaskNotifyTake+0x90>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	2200      	movs	r2, #0
 801128e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8011292:	e005      	b.n	80112a0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8011294:	4b08      	ldr	r3, [pc, #32]	@ (80112b8 <ulTaskNotifyTake+0x90>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	68fa      	ldr	r2, [r7, #12]
 801129a:	3a01      	subs	r2, #1
 801129c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80112a0:	4b05      	ldr	r3, [pc, #20]	@ (80112b8 <ulTaskNotifyTake+0x90>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	2200      	movs	r2, #0
 80112a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 80112aa:	f000 fbd7 	bl	8011a5c <vPortExitCritical>

		return ulReturn;
 80112ae:	68fb      	ldr	r3, [r7, #12]
	}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3710      	adds	r7, #16
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	200004b8 	.word	0x200004b8
 80112bc:	e000ed04 	.word	0xe000ed04

080112c0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60f8      	str	r0, [r7, #12]
 80112c8:	60b9      	str	r1, [r7, #8]
 80112ca:	607a      	str	r2, [r7, #4]
 80112cc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80112ce:	f000 fb93 	bl	80119f8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80112d2:	4b29      	ldr	r3, [pc, #164]	@ (8011378 <xTaskNotifyWait+0xb8>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80112da:	b2db      	uxtb	r3, r3
 80112dc:	2b02      	cmp	r3, #2
 80112de:	d01c      	beq.n	801131a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80112e0:	4b25      	ldr	r3, [pc, #148]	@ (8011378 <xTaskNotifyWait+0xb8>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80112e8:	68fa      	ldr	r2, [r7, #12]
 80112ea:	43d2      	mvns	r2, r2
 80112ec:	400a      	ands	r2, r1
 80112ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80112f2:	4b21      	ldr	r3, [pc, #132]	@ (8011378 <xTaskNotifyWait+0xb8>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	2201      	movs	r2, #1
 80112f8:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d00b      	beq.n	801131a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011302:	2101      	movs	r1, #1
 8011304:	6838      	ldr	r0, [r7, #0]
 8011306:	f000 f9e3 	bl	80116d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801130a:	4b1c      	ldr	r3, [pc, #112]	@ (801137c <xTaskNotifyWait+0xbc>)
 801130c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011310:	601a      	str	r2, [r3, #0]
 8011312:	f3bf 8f4f 	dsb	sy
 8011316:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801131a:	f000 fb9f 	bl	8011a5c <vPortExitCritical>

		taskENTER_CRITICAL();
 801131e:	f000 fb6b 	bl	80119f8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d005      	beq.n	8011334 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011328:	4b13      	ldr	r3, [pc, #76]	@ (8011378 <xTaskNotifyWait+0xb8>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011334:	4b10      	ldr	r3, [pc, #64]	@ (8011378 <xTaskNotifyWait+0xb8>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 801133c:	b2db      	uxtb	r3, r3
 801133e:	2b02      	cmp	r3, #2
 8011340:	d002      	beq.n	8011348 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011342:	2300      	movs	r3, #0
 8011344:	617b      	str	r3, [r7, #20]
 8011346:	e00a      	b.n	801135e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011348:	4b0b      	ldr	r3, [pc, #44]	@ (8011378 <xTaskNotifyWait+0xb8>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	43d2      	mvns	r2, r2
 8011354:	400a      	ands	r2, r1
 8011356:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 801135a:	2301      	movs	r3, #1
 801135c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801135e:	4b06      	ldr	r3, [pc, #24]	@ (8011378 <xTaskNotifyWait+0xb8>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	2200      	movs	r2, #0
 8011364:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8011368:	f000 fb78 	bl	8011a5c <vPortExitCritical>

		return xReturn;
 801136c:	697b      	ldr	r3, [r7, #20]
	}
 801136e:	4618      	mov	r0, r3
 8011370:	3718      	adds	r7, #24
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	200004b8 	.word	0x200004b8
 801137c:	e000ed04 	.word	0xe000ed04

08011380 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011380:	b580      	push	{r7, lr}
 8011382:	b08a      	sub	sp, #40	@ 0x28
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	60b9      	str	r1, [r7, #8]
 801138a:	603b      	str	r3, [r7, #0]
 801138c:	4613      	mov	r3, r2
 801138e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011390:	2301      	movs	r3, #1
 8011392:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10b      	bne.n	80113b2 <xTaskGenericNotify+0x32>
	__asm volatile
 801139a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801139e:	f383 8811 	msr	BASEPRI, r3
 80113a2:	f3bf 8f6f 	isb	sy
 80113a6:	f3bf 8f4f 	dsb	sy
 80113aa:	61bb      	str	r3, [r7, #24]
}
 80113ac:	bf00      	nop
 80113ae:	bf00      	nop
 80113b0:	e7fd      	b.n	80113ae <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80113b6:	f000 fb1f 	bl	80119f8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80113ba:	683b      	ldr	r3, [r7, #0]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d004      	beq.n	80113ca <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80113c0:	6a3b      	ldr	r3, [r7, #32]
 80113c2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80113ca:	6a3b      	ldr	r3, [r7, #32]
 80113cc:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80113d0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80113d2:	6a3b      	ldr	r3, [r7, #32]
 80113d4:	2202      	movs	r2, #2
 80113d6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80113da:	79fb      	ldrb	r3, [r7, #7]
 80113dc:	2b04      	cmp	r3, #4
 80113de:	d82e      	bhi.n	801143e <xTaskGenericNotify+0xbe>
 80113e0:	a201      	add	r2, pc, #4	@ (adr r2, 80113e8 <xTaskGenericNotify+0x68>)
 80113e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e6:	bf00      	nop
 80113e8:	08011463 	.word	0x08011463
 80113ec:	080113fd 	.word	0x080113fd
 80113f0:	0801140f 	.word	0x0801140f
 80113f4:	0801141f 	.word	0x0801141f
 80113f8:	08011429 	.word	0x08011429
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80113fc:	6a3b      	ldr	r3, [r7, #32]
 80113fe:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	431a      	orrs	r2, r3
 8011406:	6a3b      	ldr	r3, [r7, #32]
 8011408:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801140c:	e02c      	b.n	8011468 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801140e:	6a3b      	ldr	r3, [r7, #32]
 8011410:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011414:	1c5a      	adds	r2, r3, #1
 8011416:	6a3b      	ldr	r3, [r7, #32]
 8011418:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801141c:	e024      	b.n	8011468 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801141e:	6a3b      	ldr	r3, [r7, #32]
 8011420:	68ba      	ldr	r2, [r7, #8]
 8011422:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8011426:	e01f      	b.n	8011468 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011428:	7ffb      	ldrb	r3, [r7, #31]
 801142a:	2b02      	cmp	r3, #2
 801142c:	d004      	beq.n	8011438 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801142e:	6a3b      	ldr	r3, [r7, #32]
 8011430:	68ba      	ldr	r2, [r7, #8]
 8011432:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011436:	e017      	b.n	8011468 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8011438:	2300      	movs	r3, #0
 801143a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801143c:	e014      	b.n	8011468 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801143e:	6a3b      	ldr	r3, [r7, #32]
 8011440:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011448:	d00d      	beq.n	8011466 <xTaskGenericNotify+0xe6>
	__asm volatile
 801144a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801144e:	f383 8811 	msr	BASEPRI, r3
 8011452:	f3bf 8f6f 	isb	sy
 8011456:	f3bf 8f4f 	dsb	sy
 801145a:	617b      	str	r3, [r7, #20]
}
 801145c:	bf00      	nop
 801145e:	bf00      	nop
 8011460:	e7fd      	b.n	801145e <xTaskGenericNotify+0xde>
					break;
 8011462:	bf00      	nop
 8011464:	e000      	b.n	8011468 <xTaskGenericNotify+0xe8>

					break;
 8011466:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011468:	7ffb      	ldrb	r3, [r7, #31]
 801146a:	2b01      	cmp	r3, #1
 801146c:	d13a      	bne.n	80114e4 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801146e:	6a3b      	ldr	r3, [r7, #32]
 8011470:	3304      	adds	r3, #4
 8011472:	4618      	mov	r0, r3
 8011474:	f7ff f99b 	bl	80107ae <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011478:	6a3b      	ldr	r3, [r7, #32]
 801147a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801147c:	2201      	movs	r2, #1
 801147e:	409a      	lsls	r2, r3
 8011480:	4b1c      	ldr	r3, [pc, #112]	@ (80114f4 <xTaskGenericNotify+0x174>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	4313      	orrs	r3, r2
 8011486:	4a1b      	ldr	r2, [pc, #108]	@ (80114f4 <xTaskGenericNotify+0x174>)
 8011488:	6013      	str	r3, [r2, #0]
 801148a:	6a3b      	ldr	r3, [r7, #32]
 801148c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801148e:	4613      	mov	r3, r2
 8011490:	009b      	lsls	r3, r3, #2
 8011492:	4413      	add	r3, r2
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	4a18      	ldr	r2, [pc, #96]	@ (80114f8 <xTaskGenericNotify+0x178>)
 8011498:	441a      	add	r2, r3
 801149a:	6a3b      	ldr	r3, [r7, #32]
 801149c:	3304      	adds	r3, #4
 801149e:	4619      	mov	r1, r3
 80114a0:	4610      	mov	r0, r2
 80114a2:	f7ff f927 	bl	80106f4 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80114a6:	6a3b      	ldr	r3, [r7, #32]
 80114a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d00b      	beq.n	80114c6 <xTaskGenericNotify+0x146>
	__asm volatile
 80114ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	613b      	str	r3, [r7, #16]
}
 80114c0:	bf00      	nop
 80114c2:	bf00      	nop
 80114c4:	e7fd      	b.n	80114c2 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80114c6:	6a3b      	ldr	r3, [r7, #32]
 80114c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114ca:	4b0c      	ldr	r3, [pc, #48]	@ (80114fc <xTaskGenericNotify+0x17c>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d907      	bls.n	80114e4 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80114d4:	4b0a      	ldr	r3, [pc, #40]	@ (8011500 <xTaskGenericNotify+0x180>)
 80114d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114da:	601a      	str	r2, [r3, #0]
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80114e4:	f000 faba 	bl	8011a5c <vPortExitCritical>

		return xReturn;
 80114e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3728      	adds	r7, #40	@ 0x28
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	200005c0 	.word	0x200005c0
 80114f8:	200004bc 	.word	0x200004bc
 80114fc:	200004b8 	.word	0x200004b8
 8011500:	e000ed04 	.word	0xe000ed04

08011504 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011504:	b580      	push	{r7, lr}
 8011506:	b08e      	sub	sp, #56	@ 0x38
 8011508:	af00      	add	r7, sp, #0
 801150a:	60f8      	str	r0, [r7, #12]
 801150c:	60b9      	str	r1, [r7, #8]
 801150e:	603b      	str	r3, [r7, #0]
 8011510:	4613      	mov	r3, r2
 8011512:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011514:	2301      	movs	r3, #1
 8011516:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d10b      	bne.n	8011536 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801151e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011522:	f383 8811 	msr	BASEPRI, r3
 8011526:	f3bf 8f6f 	isb	sy
 801152a:	f3bf 8f4f 	dsb	sy
 801152e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011530:	bf00      	nop
 8011532:	bf00      	nop
 8011534:	e7fd      	b.n	8011532 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011536:	f000 fb3f 	bl	8011bb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801153e:	f3ef 8211 	mrs	r2, BASEPRI
 8011542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011546:	f383 8811 	msr	BASEPRI, r3
 801154a:	f3bf 8f6f 	isb	sy
 801154e:	f3bf 8f4f 	dsb	sy
 8011552:	623a      	str	r2, [r7, #32]
 8011554:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011556:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011558:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d004      	beq.n	801156a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011562:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801156a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801156c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8011570:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011576:	2202      	movs	r2, #2
 8011578:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 801157c:	79fb      	ldrb	r3, [r7, #7]
 801157e:	2b04      	cmp	r3, #4
 8011580:	d82e      	bhi.n	80115e0 <xTaskGenericNotifyFromISR+0xdc>
 8011582:	a201      	add	r2, pc, #4	@ (adr r2, 8011588 <xTaskGenericNotifyFromISR+0x84>)
 8011584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011588:	08011605 	.word	0x08011605
 801158c:	0801159d 	.word	0x0801159d
 8011590:	080115af 	.word	0x080115af
 8011594:	080115bf 	.word	0x080115bf
 8011598:	080115c9 	.word	0x080115c9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801159c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801159e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80115a2:	68bb      	ldr	r3, [r7, #8]
 80115a4:	431a      	orrs	r2, r3
 80115a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115a8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80115ac:	e02d      	b.n	801160a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80115ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80115b4:	1c5a      	adds	r2, r3, #1
 80115b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80115bc:	e025      	b.n	801160a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80115be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115c0:	68ba      	ldr	r2, [r7, #8]
 80115c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80115c6:	e020      	b.n	801160a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80115c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80115cc:	2b02      	cmp	r3, #2
 80115ce:	d004      	beq.n	80115da <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80115d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115d2:	68ba      	ldr	r2, [r7, #8]
 80115d4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80115d8:	e017      	b.n	801160a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80115da:	2300      	movs	r3, #0
 80115dc:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80115de:	e014      	b.n	801160a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80115e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80115e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80115e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ea:	d00d      	beq.n	8011608 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80115ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115f0:	f383 8811 	msr	BASEPRI, r3
 80115f4:	f3bf 8f6f 	isb	sy
 80115f8:	f3bf 8f4f 	dsb	sy
 80115fc:	61bb      	str	r3, [r7, #24]
}
 80115fe:	bf00      	nop
 8011600:	bf00      	nop
 8011602:	e7fd      	b.n	8011600 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8011604:	bf00      	nop
 8011606:	e000      	b.n	801160a <xTaskGenericNotifyFromISR+0x106>
					break;
 8011608:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801160a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801160e:	2b01      	cmp	r3, #1
 8011610:	d146      	bne.n	80116a0 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011616:	2b00      	cmp	r3, #0
 8011618:	d00b      	beq.n	8011632 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 801161a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801161e:	f383 8811 	msr	BASEPRI, r3
 8011622:	f3bf 8f6f 	isb	sy
 8011626:	f3bf 8f4f 	dsb	sy
 801162a:	617b      	str	r3, [r7, #20]
}
 801162c:	bf00      	nop
 801162e:	bf00      	nop
 8011630:	e7fd      	b.n	801162e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011632:	4b21      	ldr	r3, [pc, #132]	@ (80116b8 <xTaskGenericNotifyFromISR+0x1b4>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d11c      	bne.n	8011674 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801163a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801163c:	3304      	adds	r3, #4
 801163e:	4618      	mov	r0, r3
 8011640:	f7ff f8b5 	bl	80107ae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011648:	2201      	movs	r2, #1
 801164a:	409a      	lsls	r2, r3
 801164c:	4b1b      	ldr	r3, [pc, #108]	@ (80116bc <xTaskGenericNotifyFromISR+0x1b8>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	4313      	orrs	r3, r2
 8011652:	4a1a      	ldr	r2, [pc, #104]	@ (80116bc <xTaskGenericNotifyFromISR+0x1b8>)
 8011654:	6013      	str	r3, [r2, #0]
 8011656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801165a:	4613      	mov	r3, r2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	4413      	add	r3, r2
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	4a17      	ldr	r2, [pc, #92]	@ (80116c0 <xTaskGenericNotifyFromISR+0x1bc>)
 8011664:	441a      	add	r2, r3
 8011666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011668:	3304      	adds	r3, #4
 801166a:	4619      	mov	r1, r3
 801166c:	4610      	mov	r0, r2
 801166e:	f7ff f841 	bl	80106f4 <vListInsertEnd>
 8011672:	e005      	b.n	8011680 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011676:	3318      	adds	r3, #24
 8011678:	4619      	mov	r1, r3
 801167a:	4812      	ldr	r0, [pc, #72]	@ (80116c4 <xTaskGenericNotifyFromISR+0x1c0>)
 801167c:	f7ff f83a 	bl	80106f4 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011682:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011684:	4b10      	ldr	r3, [pc, #64]	@ (80116c8 <xTaskGenericNotifyFromISR+0x1c4>)
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801168a:	429a      	cmp	r2, r3
 801168c:	d908      	bls.n	80116a0 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801168e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011690:	2b00      	cmp	r3, #0
 8011692:	d002      	beq.n	801169a <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011696:	2201      	movs	r2, #1
 8011698:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801169a:	4b0c      	ldr	r3, [pc, #48]	@ (80116cc <xTaskGenericNotifyFromISR+0x1c8>)
 801169c:	2201      	movs	r2, #1
 801169e:	601a      	str	r2, [r3, #0]
 80116a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116a2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80116aa:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80116ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3738      	adds	r7, #56	@ 0x38
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	200005e0 	.word	0x200005e0
 80116bc:	200005c0 	.word	0x200005c0
 80116c0:	200004bc 	.word	0x200004bc
 80116c4:	20000578 	.word	0x20000578
 80116c8:	200004b8 	.word	0x200004b8
 80116cc:	200005cc 	.word	0x200005cc

080116d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80116da:	4b29      	ldr	r3, [pc, #164]	@ (8011780 <prvAddCurrentTaskToDelayedList+0xb0>)
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116e0:	4b28      	ldr	r3, [pc, #160]	@ (8011784 <prvAddCurrentTaskToDelayedList+0xb4>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	3304      	adds	r3, #4
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7ff f861 	bl	80107ae <uxListRemove>
 80116ec:	4603      	mov	r3, r0
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d10b      	bne.n	801170a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80116f2:	4b24      	ldr	r3, [pc, #144]	@ (8011784 <prvAddCurrentTaskToDelayedList+0xb4>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116f8:	2201      	movs	r2, #1
 80116fa:	fa02 f303 	lsl.w	r3, r2, r3
 80116fe:	43da      	mvns	r2, r3
 8011700:	4b21      	ldr	r3, [pc, #132]	@ (8011788 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	4013      	ands	r3, r2
 8011706:	4a20      	ldr	r2, [pc, #128]	@ (8011788 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011708:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011710:	d10a      	bne.n	8011728 <prvAddCurrentTaskToDelayedList+0x58>
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d007      	beq.n	8011728 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011718:	4b1a      	ldr	r3, [pc, #104]	@ (8011784 <prvAddCurrentTaskToDelayedList+0xb4>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	3304      	adds	r3, #4
 801171e:	4619      	mov	r1, r3
 8011720:	481a      	ldr	r0, [pc, #104]	@ (801178c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011722:	f7fe ffe7 	bl	80106f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011726:	e026      	b.n	8011776 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011728:	68fa      	ldr	r2, [r7, #12]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	4413      	add	r3, r2
 801172e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011730:	4b14      	ldr	r3, [pc, #80]	@ (8011784 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	68ba      	ldr	r2, [r7, #8]
 8011736:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011738:	68ba      	ldr	r2, [r7, #8]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	429a      	cmp	r2, r3
 801173e:	d209      	bcs.n	8011754 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011740:	4b13      	ldr	r3, [pc, #76]	@ (8011790 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	4b0f      	ldr	r3, [pc, #60]	@ (8011784 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	3304      	adds	r3, #4
 801174a:	4619      	mov	r1, r3
 801174c:	4610      	mov	r0, r2
 801174e:	f7fe fff5 	bl	801073c <vListInsert>
}
 8011752:	e010      	b.n	8011776 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011754:	4b0f      	ldr	r3, [pc, #60]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	4b0a      	ldr	r3, [pc, #40]	@ (8011784 <prvAddCurrentTaskToDelayedList+0xb4>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	3304      	adds	r3, #4
 801175e:	4619      	mov	r1, r3
 8011760:	4610      	mov	r0, r2
 8011762:	f7fe ffeb 	bl	801073c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011766:	4b0c      	ldr	r3, [pc, #48]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	68ba      	ldr	r2, [r7, #8]
 801176c:	429a      	cmp	r2, r3
 801176e:	d202      	bcs.n	8011776 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011770:	4a09      	ldr	r2, [pc, #36]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	6013      	str	r3, [r2, #0]
}
 8011776:	bf00      	nop
 8011778:	3710      	adds	r7, #16
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	200005bc 	.word	0x200005bc
 8011784:	200004b8 	.word	0x200004b8
 8011788:	200005c0 	.word	0x200005c0
 801178c:	200005a4 	.word	0x200005a4
 8011790:	20000574 	.word	0x20000574
 8011794:	20000570 	.word	0x20000570
 8011798:	200005d8 	.word	0x200005d8

0801179c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801179c:	b480      	push	{r7}
 801179e:	b085      	sub	sp, #20
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	60b9      	str	r1, [r7, #8]
 80117a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	3b04      	subs	r3, #4
 80117ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80117b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	3b04      	subs	r3, #4
 80117ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	f023 0201 	bic.w	r2, r3, #1
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3b04      	subs	r3, #4
 80117ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80117cc:	4a0c      	ldr	r2, [pc, #48]	@ (8011800 <pxPortInitialiseStack+0x64>)
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	3b14      	subs	r3, #20
 80117d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	3b04      	subs	r3, #4
 80117e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f06f 0202 	mvn.w	r2, #2
 80117ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	3b20      	subs	r3, #32
 80117f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80117f2:	68fb      	ldr	r3, [r7, #12]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3714      	adds	r7, #20
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr
 8011800:	08011805 	.word	0x08011805

08011804 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011804:	b480      	push	{r7}
 8011806:	b085      	sub	sp, #20
 8011808:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801180a:	2300      	movs	r3, #0
 801180c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801180e:	4b13      	ldr	r3, [pc, #76]	@ (801185c <prvTaskExitError+0x58>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011816:	d00b      	beq.n	8011830 <prvTaskExitError+0x2c>
	__asm volatile
 8011818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801181c:	f383 8811 	msr	BASEPRI, r3
 8011820:	f3bf 8f6f 	isb	sy
 8011824:	f3bf 8f4f 	dsb	sy
 8011828:	60fb      	str	r3, [r7, #12]
}
 801182a:	bf00      	nop
 801182c:	bf00      	nop
 801182e:	e7fd      	b.n	801182c <prvTaskExitError+0x28>
	__asm volatile
 8011830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011834:	f383 8811 	msr	BASEPRI, r3
 8011838:	f3bf 8f6f 	isb	sy
 801183c:	f3bf 8f4f 	dsb	sy
 8011840:	60bb      	str	r3, [r7, #8]
}
 8011842:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011844:	bf00      	nop
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d0fc      	beq.n	8011846 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801184c:	bf00      	nop
 801184e:	bf00      	nop
 8011850:	3714      	adds	r7, #20
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop
 801185c:	20000014 	.word	0x20000014

08011860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011860:	4b07      	ldr	r3, [pc, #28]	@ (8011880 <pxCurrentTCBConst2>)
 8011862:	6819      	ldr	r1, [r3, #0]
 8011864:	6808      	ldr	r0, [r1, #0]
 8011866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801186a:	f380 8809 	msr	PSP, r0
 801186e:	f3bf 8f6f 	isb	sy
 8011872:	f04f 0000 	mov.w	r0, #0
 8011876:	f380 8811 	msr	BASEPRI, r0
 801187a:	4770      	bx	lr
 801187c:	f3af 8000 	nop.w

08011880 <pxCurrentTCBConst2>:
 8011880:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011884:	bf00      	nop
 8011886:	bf00      	nop

08011888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011888:	4808      	ldr	r0, [pc, #32]	@ (80118ac <prvPortStartFirstTask+0x24>)
 801188a:	6800      	ldr	r0, [r0, #0]
 801188c:	6800      	ldr	r0, [r0, #0]
 801188e:	f380 8808 	msr	MSP, r0
 8011892:	f04f 0000 	mov.w	r0, #0
 8011896:	f380 8814 	msr	CONTROL, r0
 801189a:	b662      	cpsie	i
 801189c:	b661      	cpsie	f
 801189e:	f3bf 8f4f 	dsb	sy
 80118a2:	f3bf 8f6f 	isb	sy
 80118a6:	df00      	svc	0
 80118a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80118aa:	bf00      	nop
 80118ac:	e000ed08 	.word	0xe000ed08

080118b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b086      	sub	sp, #24
 80118b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80118b6:	4b47      	ldr	r3, [pc, #284]	@ (80119d4 <xPortStartScheduler+0x124>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a47      	ldr	r2, [pc, #284]	@ (80119d8 <xPortStartScheduler+0x128>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d10b      	bne.n	80118d8 <xPortStartScheduler+0x28>
	__asm volatile
 80118c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118c4:	f383 8811 	msr	BASEPRI, r3
 80118c8:	f3bf 8f6f 	isb	sy
 80118cc:	f3bf 8f4f 	dsb	sy
 80118d0:	613b      	str	r3, [r7, #16]
}
 80118d2:	bf00      	nop
 80118d4:	bf00      	nop
 80118d6:	e7fd      	b.n	80118d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80118d8:	4b3e      	ldr	r3, [pc, #248]	@ (80119d4 <xPortStartScheduler+0x124>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	4a3f      	ldr	r2, [pc, #252]	@ (80119dc <xPortStartScheduler+0x12c>)
 80118de:	4293      	cmp	r3, r2
 80118e0:	d10b      	bne.n	80118fa <xPortStartScheduler+0x4a>
	__asm volatile
 80118e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118e6:	f383 8811 	msr	BASEPRI, r3
 80118ea:	f3bf 8f6f 	isb	sy
 80118ee:	f3bf 8f4f 	dsb	sy
 80118f2:	60fb      	str	r3, [r7, #12]
}
 80118f4:	bf00      	nop
 80118f6:	bf00      	nop
 80118f8:	e7fd      	b.n	80118f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80118fa:	4b39      	ldr	r3, [pc, #228]	@ (80119e0 <xPortStartScheduler+0x130>)
 80118fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	781b      	ldrb	r3, [r3, #0]
 8011902:	b2db      	uxtb	r3, r3
 8011904:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	22ff      	movs	r2, #255	@ 0xff
 801190a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	b2db      	uxtb	r3, r3
 8011912:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011914:	78fb      	ldrb	r3, [r7, #3]
 8011916:	b2db      	uxtb	r3, r3
 8011918:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801191c:	b2da      	uxtb	r2, r3
 801191e:	4b31      	ldr	r3, [pc, #196]	@ (80119e4 <xPortStartScheduler+0x134>)
 8011920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011922:	4b31      	ldr	r3, [pc, #196]	@ (80119e8 <xPortStartScheduler+0x138>)
 8011924:	2207      	movs	r2, #7
 8011926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011928:	e009      	b.n	801193e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801192a:	4b2f      	ldr	r3, [pc, #188]	@ (80119e8 <xPortStartScheduler+0x138>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	3b01      	subs	r3, #1
 8011930:	4a2d      	ldr	r2, [pc, #180]	@ (80119e8 <xPortStartScheduler+0x138>)
 8011932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011934:	78fb      	ldrb	r3, [r7, #3]
 8011936:	b2db      	uxtb	r3, r3
 8011938:	005b      	lsls	r3, r3, #1
 801193a:	b2db      	uxtb	r3, r3
 801193c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801193e:	78fb      	ldrb	r3, [r7, #3]
 8011940:	b2db      	uxtb	r3, r3
 8011942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011946:	2b80      	cmp	r3, #128	@ 0x80
 8011948:	d0ef      	beq.n	801192a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801194a:	4b27      	ldr	r3, [pc, #156]	@ (80119e8 <xPortStartScheduler+0x138>)
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	f1c3 0307 	rsb	r3, r3, #7
 8011952:	2b04      	cmp	r3, #4
 8011954:	d00b      	beq.n	801196e <xPortStartScheduler+0xbe>
	__asm volatile
 8011956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801195a:	f383 8811 	msr	BASEPRI, r3
 801195e:	f3bf 8f6f 	isb	sy
 8011962:	f3bf 8f4f 	dsb	sy
 8011966:	60bb      	str	r3, [r7, #8]
}
 8011968:	bf00      	nop
 801196a:	bf00      	nop
 801196c:	e7fd      	b.n	801196a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801196e:	4b1e      	ldr	r3, [pc, #120]	@ (80119e8 <xPortStartScheduler+0x138>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	021b      	lsls	r3, r3, #8
 8011974:	4a1c      	ldr	r2, [pc, #112]	@ (80119e8 <xPortStartScheduler+0x138>)
 8011976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011978:	4b1b      	ldr	r3, [pc, #108]	@ (80119e8 <xPortStartScheduler+0x138>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011980:	4a19      	ldr	r2, [pc, #100]	@ (80119e8 <xPortStartScheduler+0x138>)
 8011982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	b2da      	uxtb	r2, r3
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801198c:	4b17      	ldr	r3, [pc, #92]	@ (80119ec <xPortStartScheduler+0x13c>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	4a16      	ldr	r2, [pc, #88]	@ (80119ec <xPortStartScheduler+0x13c>)
 8011992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011998:	4b14      	ldr	r3, [pc, #80]	@ (80119ec <xPortStartScheduler+0x13c>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	4a13      	ldr	r2, [pc, #76]	@ (80119ec <xPortStartScheduler+0x13c>)
 801199e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80119a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80119a4:	f000 f8da 	bl	8011b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80119a8:	4b11      	ldr	r3, [pc, #68]	@ (80119f0 <xPortStartScheduler+0x140>)
 80119aa:	2200      	movs	r2, #0
 80119ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80119ae:	f000 f8f9 	bl	8011ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80119b2:	4b10      	ldr	r3, [pc, #64]	@ (80119f4 <xPortStartScheduler+0x144>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	4a0f      	ldr	r2, [pc, #60]	@ (80119f4 <xPortStartScheduler+0x144>)
 80119b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80119bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80119be:	f7ff ff63 	bl	8011888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80119c2:	f7ff fad3 	bl	8010f6c <vTaskSwitchContext>
	prvTaskExitError();
 80119c6:	f7ff ff1d 	bl	8011804 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80119ca:	2300      	movs	r3, #0
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3718      	adds	r7, #24
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	e000ed00 	.word	0xe000ed00
 80119d8:	410fc271 	.word	0x410fc271
 80119dc:	410fc270 	.word	0x410fc270
 80119e0:	e000e400 	.word	0xe000e400
 80119e4:	200005e4 	.word	0x200005e4
 80119e8:	200005e8 	.word	0x200005e8
 80119ec:	e000ed20 	.word	0xe000ed20
 80119f0:	20000014 	.word	0x20000014
 80119f4:	e000ef34 	.word	0xe000ef34

080119f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80119f8:	b480      	push	{r7}
 80119fa:	b083      	sub	sp, #12
 80119fc:	af00      	add	r7, sp, #0
	__asm volatile
 80119fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a02:	f383 8811 	msr	BASEPRI, r3
 8011a06:	f3bf 8f6f 	isb	sy
 8011a0a:	f3bf 8f4f 	dsb	sy
 8011a0e:	607b      	str	r3, [r7, #4]
}
 8011a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011a12:	4b10      	ldr	r3, [pc, #64]	@ (8011a54 <vPortEnterCritical+0x5c>)
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	3301      	adds	r3, #1
 8011a18:	4a0e      	ldr	r2, [pc, #56]	@ (8011a54 <vPortEnterCritical+0x5c>)
 8011a1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8011a54 <vPortEnterCritical+0x5c>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2b01      	cmp	r3, #1
 8011a22:	d110      	bne.n	8011a46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011a24:	4b0c      	ldr	r3, [pc, #48]	@ (8011a58 <vPortEnterCritical+0x60>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	b2db      	uxtb	r3, r3
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d00b      	beq.n	8011a46 <vPortEnterCritical+0x4e>
	__asm volatile
 8011a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a32:	f383 8811 	msr	BASEPRI, r3
 8011a36:	f3bf 8f6f 	isb	sy
 8011a3a:	f3bf 8f4f 	dsb	sy
 8011a3e:	603b      	str	r3, [r7, #0]
}
 8011a40:	bf00      	nop
 8011a42:	bf00      	nop
 8011a44:	e7fd      	b.n	8011a42 <vPortEnterCritical+0x4a>
	}
}
 8011a46:	bf00      	nop
 8011a48:	370c      	adds	r7, #12
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a50:	4770      	bx	lr
 8011a52:	bf00      	nop
 8011a54:	20000014 	.word	0x20000014
 8011a58:	e000ed04 	.word	0xe000ed04

08011a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b083      	sub	sp, #12
 8011a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a62:	4b12      	ldr	r3, [pc, #72]	@ (8011aac <vPortExitCritical+0x50>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d10b      	bne.n	8011a82 <vPortExitCritical+0x26>
	__asm volatile
 8011a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a6e:	f383 8811 	msr	BASEPRI, r3
 8011a72:	f3bf 8f6f 	isb	sy
 8011a76:	f3bf 8f4f 	dsb	sy
 8011a7a:	607b      	str	r3, [r7, #4]
}
 8011a7c:	bf00      	nop
 8011a7e:	bf00      	nop
 8011a80:	e7fd      	b.n	8011a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011a82:	4b0a      	ldr	r3, [pc, #40]	@ (8011aac <vPortExitCritical+0x50>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	3b01      	subs	r3, #1
 8011a88:	4a08      	ldr	r2, [pc, #32]	@ (8011aac <vPortExitCritical+0x50>)
 8011a8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a8c:	4b07      	ldr	r3, [pc, #28]	@ (8011aac <vPortExitCritical+0x50>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d105      	bne.n	8011aa0 <vPortExitCritical+0x44>
 8011a94:	2300      	movs	r3, #0
 8011a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	f383 8811 	msr	BASEPRI, r3
}
 8011a9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011aa0:	bf00      	nop
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr
 8011aac:	20000014 	.word	0x20000014

08011ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ab0:	f3ef 8009 	mrs	r0, PSP
 8011ab4:	f3bf 8f6f 	isb	sy
 8011ab8:	4b15      	ldr	r3, [pc, #84]	@ (8011b10 <pxCurrentTCBConst>)
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	f01e 0f10 	tst.w	lr, #16
 8011ac0:	bf08      	it	eq
 8011ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aca:	6010      	str	r0, [r2, #0]
 8011acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011ad4:	f380 8811 	msr	BASEPRI, r0
 8011ad8:	f3bf 8f4f 	dsb	sy
 8011adc:	f3bf 8f6f 	isb	sy
 8011ae0:	f7ff fa44 	bl	8010f6c <vTaskSwitchContext>
 8011ae4:	f04f 0000 	mov.w	r0, #0
 8011ae8:	f380 8811 	msr	BASEPRI, r0
 8011aec:	bc09      	pop	{r0, r3}
 8011aee:	6819      	ldr	r1, [r3, #0]
 8011af0:	6808      	ldr	r0, [r1, #0]
 8011af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af6:	f01e 0f10 	tst.w	lr, #16
 8011afa:	bf08      	it	eq
 8011afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011b00:	f380 8809 	msr	PSP, r0
 8011b04:	f3bf 8f6f 	isb	sy
 8011b08:	4770      	bx	lr
 8011b0a:	bf00      	nop
 8011b0c:	f3af 8000 	nop.w

08011b10 <pxCurrentTCBConst>:
 8011b10:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011b14:	bf00      	nop
 8011b16:	bf00      	nop

08011b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8011b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b22:	f383 8811 	msr	BASEPRI, r3
 8011b26:	f3bf 8f6f 	isb	sy
 8011b2a:	f3bf 8f4f 	dsb	sy
 8011b2e:	607b      	str	r3, [r7, #4]
}
 8011b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b32:	f7ff f961 	bl	8010df8 <xTaskIncrementTick>
 8011b36:	4603      	mov	r3, r0
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d003      	beq.n	8011b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b3c:	4b06      	ldr	r3, [pc, #24]	@ (8011b58 <xPortSysTickHandler+0x40>)
 8011b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b42:	601a      	str	r2, [r3, #0]
 8011b44:	2300      	movs	r3, #0
 8011b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	f383 8811 	msr	BASEPRI, r3
}
 8011b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b50:	bf00      	nop
 8011b52:	3708      	adds	r7, #8
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	e000ed04 	.word	0xe000ed04

08011b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b60:	4b0b      	ldr	r3, [pc, #44]	@ (8011b90 <vPortSetupTimerInterrupt+0x34>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b66:	4b0b      	ldr	r3, [pc, #44]	@ (8011b94 <vPortSetupTimerInterrupt+0x38>)
 8011b68:	2200      	movs	r2, #0
 8011b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8011b98 <vPortSetupTimerInterrupt+0x3c>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4a0a      	ldr	r2, [pc, #40]	@ (8011b9c <vPortSetupTimerInterrupt+0x40>)
 8011b72:	fba2 2303 	umull	r2, r3, r2, r3
 8011b76:	099b      	lsrs	r3, r3, #6
 8011b78:	4a09      	ldr	r2, [pc, #36]	@ (8011ba0 <vPortSetupTimerInterrupt+0x44>)
 8011b7a:	3b01      	subs	r3, #1
 8011b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b7e:	4b04      	ldr	r3, [pc, #16]	@ (8011b90 <vPortSetupTimerInterrupt+0x34>)
 8011b80:	2207      	movs	r2, #7
 8011b82:	601a      	str	r2, [r3, #0]
}
 8011b84:	bf00      	nop
 8011b86:	46bd      	mov	sp, r7
 8011b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8c:	4770      	bx	lr
 8011b8e:	bf00      	nop
 8011b90:	e000e010 	.word	0xe000e010
 8011b94:	e000e018 	.word	0xe000e018
 8011b98:	20000008 	.word	0x20000008
 8011b9c:	10624dd3 	.word	0x10624dd3
 8011ba0:	e000e014 	.word	0xe000e014

08011ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011bb4 <vPortEnableVFP+0x10>
 8011ba8:	6801      	ldr	r1, [r0, #0]
 8011baa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011bae:	6001      	str	r1, [r0, #0]
 8011bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011bb2:	bf00      	nop
 8011bb4:	e000ed88 	.word	0xe000ed88

08011bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011bb8:	b480      	push	{r7}
 8011bba:	b085      	sub	sp, #20
 8011bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011bbe:	f3ef 8305 	mrs	r3, IPSR
 8011bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2b0f      	cmp	r3, #15
 8011bc8:	d915      	bls.n	8011bf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011bca:	4a18      	ldr	r2, [pc, #96]	@ (8011c2c <vPortValidateInterruptPriority+0x74>)
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	4413      	add	r3, r2
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011bd4:	4b16      	ldr	r3, [pc, #88]	@ (8011c30 <vPortValidateInterruptPriority+0x78>)
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	7afa      	ldrb	r2, [r7, #11]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d20b      	bcs.n	8011bf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011be2:	f383 8811 	msr	BASEPRI, r3
 8011be6:	f3bf 8f6f 	isb	sy
 8011bea:	f3bf 8f4f 	dsb	sy
 8011bee:	607b      	str	r3, [r7, #4]
}
 8011bf0:	bf00      	nop
 8011bf2:	bf00      	nop
 8011bf4:	e7fd      	b.n	8011bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8011c34 <vPortValidateInterruptPriority+0x7c>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8011c38 <vPortValidateInterruptPriority+0x80>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d90b      	bls.n	8011c1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c0a:	f383 8811 	msr	BASEPRI, r3
 8011c0e:	f3bf 8f6f 	isb	sy
 8011c12:	f3bf 8f4f 	dsb	sy
 8011c16:	603b      	str	r3, [r7, #0]
}
 8011c18:	bf00      	nop
 8011c1a:	bf00      	nop
 8011c1c:	e7fd      	b.n	8011c1a <vPortValidateInterruptPriority+0x62>
	}
 8011c1e:	bf00      	nop
 8011c20:	3714      	adds	r7, #20
 8011c22:	46bd      	mov	sp, r7
 8011c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c28:	4770      	bx	lr
 8011c2a:	bf00      	nop
 8011c2c:	e000e3f0 	.word	0xe000e3f0
 8011c30:	200005e4 	.word	0x200005e4
 8011c34:	e000ed0c 	.word	0xe000ed0c
 8011c38:	200005e8 	.word	0x200005e8

08011c3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b08a      	sub	sp, #40	@ 0x28
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c44:	2300      	movs	r3, #0
 8011c46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c48:	f7ff f82a 	bl	8010ca0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8011dc0 <pvPortMalloc+0x184>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d101      	bne.n	8011c58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c54:	f000 f924 	bl	8011ea0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c58:	4b5a      	ldr	r3, [pc, #360]	@ (8011dc4 <pvPortMalloc+0x188>)
 8011c5a:	681a      	ldr	r2, [r3, #0]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	4013      	ands	r3, r2
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f040 8095 	bne.w	8011d90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d01e      	beq.n	8011caa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011c6c:	2208      	movs	r2, #8
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	4413      	add	r3, r2
 8011c72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f003 0307 	and.w	r3, r3, #7
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d015      	beq.n	8011caa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f023 0307 	bic.w	r3, r3, #7
 8011c84:	3308      	adds	r3, #8
 8011c86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f003 0307 	and.w	r3, r3, #7
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d00b      	beq.n	8011caa <pvPortMalloc+0x6e>
	__asm volatile
 8011c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c96:	f383 8811 	msr	BASEPRI, r3
 8011c9a:	f3bf 8f6f 	isb	sy
 8011c9e:	f3bf 8f4f 	dsb	sy
 8011ca2:	617b      	str	r3, [r7, #20]
}
 8011ca4:	bf00      	nop
 8011ca6:	bf00      	nop
 8011ca8:	e7fd      	b.n	8011ca6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d06f      	beq.n	8011d90 <pvPortMalloc+0x154>
 8011cb0:	4b45      	ldr	r3, [pc, #276]	@ (8011dc8 <pvPortMalloc+0x18c>)
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d86a      	bhi.n	8011d90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011cba:	4b44      	ldr	r3, [pc, #272]	@ (8011dcc <pvPortMalloc+0x190>)
 8011cbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011cbe:	4b43      	ldr	r3, [pc, #268]	@ (8011dcc <pvPortMalloc+0x190>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cc4:	e004      	b.n	8011cd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d903      	bls.n	8011ce2 <pvPortMalloc+0xa6>
 8011cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d1f1      	bne.n	8011cc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011ce2:	4b37      	ldr	r3, [pc, #220]	@ (8011dc0 <pvPortMalloc+0x184>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d051      	beq.n	8011d90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011cec:	6a3b      	ldr	r3, [r7, #32]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	2208      	movs	r2, #8
 8011cf2:	4413      	add	r3, r2
 8011cf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf8:	681a      	ldr	r2, [r3, #0]
 8011cfa:	6a3b      	ldr	r3, [r7, #32]
 8011cfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d00:	685a      	ldr	r2, [r3, #4]
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	1ad2      	subs	r2, r2, r3
 8011d06:	2308      	movs	r3, #8
 8011d08:	005b      	lsls	r3, r3, #1
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d920      	bls.n	8011d50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	4413      	add	r3, r2
 8011d14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	f003 0307 	and.w	r3, r3, #7
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00b      	beq.n	8011d38 <pvPortMalloc+0xfc>
	__asm volatile
 8011d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d24:	f383 8811 	msr	BASEPRI, r3
 8011d28:	f3bf 8f6f 	isb	sy
 8011d2c:	f3bf 8f4f 	dsb	sy
 8011d30:	613b      	str	r3, [r7, #16]
}
 8011d32:	bf00      	nop
 8011d34:	bf00      	nop
 8011d36:	e7fd      	b.n	8011d34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d3a:	685a      	ldr	r2, [r3, #4]
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	1ad2      	subs	r2, r2, r3
 8011d40:	69bb      	ldr	r3, [r7, #24]
 8011d42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d46:	687a      	ldr	r2, [r7, #4]
 8011d48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d4a:	69b8      	ldr	r0, [r7, #24]
 8011d4c:	f000 f90a 	bl	8011f64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d50:	4b1d      	ldr	r3, [pc, #116]	@ (8011dc8 <pvPortMalloc+0x18c>)
 8011d52:	681a      	ldr	r2, [r3, #0]
 8011d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	1ad3      	subs	r3, r2, r3
 8011d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8011dc8 <pvPortMalloc+0x18c>)
 8011d5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8011dc8 <pvPortMalloc+0x18c>)
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	4b1b      	ldr	r3, [pc, #108]	@ (8011dd0 <pvPortMalloc+0x194>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d203      	bcs.n	8011d72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d6a:	4b17      	ldr	r3, [pc, #92]	@ (8011dc8 <pvPortMalloc+0x18c>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4a18      	ldr	r2, [pc, #96]	@ (8011dd0 <pvPortMalloc+0x194>)
 8011d70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d74:	685a      	ldr	r2, [r3, #4]
 8011d76:	4b13      	ldr	r3, [pc, #76]	@ (8011dc4 <pvPortMalloc+0x188>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	431a      	orrs	r2, r3
 8011d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d82:	2200      	movs	r2, #0
 8011d84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011d86:	4b13      	ldr	r3, [pc, #76]	@ (8011dd4 <pvPortMalloc+0x198>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	3301      	adds	r3, #1
 8011d8c:	4a11      	ldr	r2, [pc, #68]	@ (8011dd4 <pvPortMalloc+0x198>)
 8011d8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d90:	f7fe ff94 	bl	8010cbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d94:	69fb      	ldr	r3, [r7, #28]
 8011d96:	f003 0307 	and.w	r3, r3, #7
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d00b      	beq.n	8011db6 <pvPortMalloc+0x17a>
	__asm volatile
 8011d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011da2:	f383 8811 	msr	BASEPRI, r3
 8011da6:	f3bf 8f6f 	isb	sy
 8011daa:	f3bf 8f4f 	dsb	sy
 8011dae:	60fb      	str	r3, [r7, #12]
}
 8011db0:	bf00      	nop
 8011db2:	bf00      	nop
 8011db4:	e7fd      	b.n	8011db2 <pvPortMalloc+0x176>
	return pvReturn;
 8011db6:	69fb      	ldr	r3, [r7, #28]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3728      	adds	r7, #40	@ 0x28
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}
 8011dc0:	200041f4 	.word	0x200041f4
 8011dc4:	20004208 	.word	0x20004208
 8011dc8:	200041f8 	.word	0x200041f8
 8011dcc:	200041ec 	.word	0x200041ec
 8011dd0:	200041fc 	.word	0x200041fc
 8011dd4:	20004200 	.word	0x20004200

08011dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011dd8:	b580      	push	{r7, lr}
 8011dda:	b086      	sub	sp, #24
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d04f      	beq.n	8011e8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011dea:	2308      	movs	r3, #8
 8011dec:	425b      	negs	r3, r3
 8011dee:	697a      	ldr	r2, [r7, #20]
 8011df0:	4413      	add	r3, r2
 8011df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	685a      	ldr	r2, [r3, #4]
 8011dfc:	4b25      	ldr	r3, [pc, #148]	@ (8011e94 <vPortFree+0xbc>)
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	4013      	ands	r3, r2
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d10b      	bne.n	8011e1e <vPortFree+0x46>
	__asm volatile
 8011e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e0a:	f383 8811 	msr	BASEPRI, r3
 8011e0e:	f3bf 8f6f 	isb	sy
 8011e12:	f3bf 8f4f 	dsb	sy
 8011e16:	60fb      	str	r3, [r7, #12]
}
 8011e18:	bf00      	nop
 8011e1a:	bf00      	nop
 8011e1c:	e7fd      	b.n	8011e1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011e1e:	693b      	ldr	r3, [r7, #16]
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00b      	beq.n	8011e3e <vPortFree+0x66>
	__asm volatile
 8011e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e2a:	f383 8811 	msr	BASEPRI, r3
 8011e2e:	f3bf 8f6f 	isb	sy
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	60bb      	str	r3, [r7, #8]
}
 8011e38:	bf00      	nop
 8011e3a:	bf00      	nop
 8011e3c:	e7fd      	b.n	8011e3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	685a      	ldr	r2, [r3, #4]
 8011e42:	4b14      	ldr	r3, [pc, #80]	@ (8011e94 <vPortFree+0xbc>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	4013      	ands	r3, r2
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d01e      	beq.n	8011e8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d11a      	bne.n	8011e8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	685a      	ldr	r2, [r3, #4]
 8011e58:	4b0e      	ldr	r3, [pc, #56]	@ (8011e94 <vPortFree+0xbc>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	43db      	mvns	r3, r3
 8011e5e:	401a      	ands	r2, r3
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e64:	f7fe ff1c 	bl	8010ca0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	685a      	ldr	r2, [r3, #4]
 8011e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8011e98 <vPortFree+0xc0>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	4413      	add	r3, r2
 8011e72:	4a09      	ldr	r2, [pc, #36]	@ (8011e98 <vPortFree+0xc0>)
 8011e74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e76:	6938      	ldr	r0, [r7, #16]
 8011e78:	f000 f874 	bl	8011f64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011e7c:	4b07      	ldr	r3, [pc, #28]	@ (8011e9c <vPortFree+0xc4>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	3301      	adds	r3, #1
 8011e82:	4a06      	ldr	r2, [pc, #24]	@ (8011e9c <vPortFree+0xc4>)
 8011e84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011e86:	f7fe ff19 	bl	8010cbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011e8a:	bf00      	nop
 8011e8c:	3718      	adds	r7, #24
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}
 8011e92:	bf00      	nop
 8011e94:	20004208 	.word	0x20004208
 8011e98:	200041f8 	.word	0x200041f8
 8011e9c:	20004204 	.word	0x20004204

08011ea0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b085      	sub	sp, #20
 8011ea4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011ea6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8011eaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011eac:	4b27      	ldr	r3, [pc, #156]	@ (8011f4c <prvHeapInit+0xac>)
 8011eae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	f003 0307 	and.w	r3, r3, #7
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d00c      	beq.n	8011ed4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	3307      	adds	r3, #7
 8011ebe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	f023 0307 	bic.w	r3, r3, #7
 8011ec6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011ec8:	68ba      	ldr	r2, [r7, #8]
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	1ad3      	subs	r3, r2, r3
 8011ece:	4a1f      	ldr	r2, [pc, #124]	@ (8011f4c <prvHeapInit+0xac>)
 8011ed0:	4413      	add	r3, r2
 8011ed2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8011f50 <prvHeapInit+0xb0>)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011ede:	4b1c      	ldr	r3, [pc, #112]	@ (8011f50 <prvHeapInit+0xb0>)
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	68ba      	ldr	r2, [r7, #8]
 8011ee8:	4413      	add	r3, r2
 8011eea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011eec:	2208      	movs	r2, #8
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	1a9b      	subs	r3, r3, r2
 8011ef2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f023 0307 	bic.w	r3, r3, #7
 8011efa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	4a15      	ldr	r2, [pc, #84]	@ (8011f54 <prvHeapInit+0xb4>)
 8011f00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011f02:	4b14      	ldr	r3, [pc, #80]	@ (8011f54 <prvHeapInit+0xb4>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	2200      	movs	r2, #0
 8011f08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011f0a:	4b12      	ldr	r3, [pc, #72]	@ (8011f54 <prvHeapInit+0xb4>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	68fa      	ldr	r2, [r7, #12]
 8011f1a:	1ad2      	subs	r2, r2, r3
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011f20:	4b0c      	ldr	r3, [pc, #48]	@ (8011f54 <prvHeapInit+0xb4>)
 8011f22:	681a      	ldr	r2, [r3, #0]
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	685b      	ldr	r3, [r3, #4]
 8011f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8011f58 <prvHeapInit+0xb8>)
 8011f2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	4a09      	ldr	r2, [pc, #36]	@ (8011f5c <prvHeapInit+0xbc>)
 8011f36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011f38:	4b09      	ldr	r3, [pc, #36]	@ (8011f60 <prvHeapInit+0xc0>)
 8011f3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011f3e:	601a      	str	r2, [r3, #0]
}
 8011f40:	bf00      	nop
 8011f42:	3714      	adds	r7, #20
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr
 8011f4c:	200005ec 	.word	0x200005ec
 8011f50:	200041ec 	.word	0x200041ec
 8011f54:	200041f4 	.word	0x200041f4
 8011f58:	200041fc 	.word	0x200041fc
 8011f5c:	200041f8 	.word	0x200041f8
 8011f60:	20004208 	.word	0x20004208

08011f64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f64:	b480      	push	{r7}
 8011f66:	b085      	sub	sp, #20
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f6c:	4b28      	ldr	r3, [pc, #160]	@ (8012010 <prvInsertBlockIntoFreeList+0xac>)
 8011f6e:	60fb      	str	r3, [r7, #12]
 8011f70:	e002      	b.n	8011f78 <prvInsertBlockIntoFreeList+0x14>
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	60fb      	str	r3, [r7, #12]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	687a      	ldr	r2, [r7, #4]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d8f7      	bhi.n	8011f72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	685b      	ldr	r3, [r3, #4]
 8011f8a:	68ba      	ldr	r2, [r7, #8]
 8011f8c:	4413      	add	r3, r2
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d108      	bne.n	8011fa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	685a      	ldr	r2, [r3, #4]
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	441a      	add	r2, r3
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685b      	ldr	r3, [r3, #4]
 8011fae:	68ba      	ldr	r2, [r7, #8]
 8011fb0:	441a      	add	r2, r3
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	d118      	bne.n	8011fec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	4b15      	ldr	r3, [pc, #84]	@ (8012014 <prvInsertBlockIntoFreeList+0xb0>)
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	429a      	cmp	r2, r3
 8011fc4:	d00d      	beq.n	8011fe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	685a      	ldr	r2, [r3, #4]
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	441a      	add	r2, r3
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	601a      	str	r2, [r3, #0]
 8011fe0:	e008      	b.n	8011ff4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8012014 <prvInsertBlockIntoFreeList+0xb0>)
 8011fe4:	681a      	ldr	r2, [r3, #0]
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	601a      	str	r2, [r3, #0]
 8011fea:	e003      	b.n	8011ff4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011ff4:	68fa      	ldr	r2, [r7, #12]
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d002      	beq.n	8012002 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012002:	bf00      	nop
 8012004:	3714      	adds	r7, #20
 8012006:	46bd      	mov	sp, r7
 8012008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200c:	4770      	bx	lr
 801200e:	bf00      	nop
 8012010:	200041ec 	.word	0x200041ec
 8012014:	200041f4 	.word	0x200041f4

08012018 <_fgets_r>:
 8012018:	2a01      	cmp	r2, #1
 801201a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801201e:	4681      	mov	r9, r0
 8012020:	460e      	mov	r6, r1
 8012022:	4615      	mov	r5, r2
 8012024:	461c      	mov	r4, r3
 8012026:	dd21      	ble.n	801206c <_fgets_r+0x54>
 8012028:	b118      	cbz	r0, 8012032 <_fgets_r+0x1a>
 801202a:	6a03      	ldr	r3, [r0, #32]
 801202c:	b90b      	cbnz	r3, 8012032 <_fgets_r+0x1a>
 801202e:	f000 f8ef 	bl	8012210 <__sinit>
 8012032:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012034:	07db      	lsls	r3, r3, #31
 8012036:	d405      	bmi.n	8012044 <_fgets_r+0x2c>
 8012038:	89a3      	ldrh	r3, [r4, #12]
 801203a:	059f      	lsls	r7, r3, #22
 801203c:	d402      	bmi.n	8012044 <_fgets_r+0x2c>
 801203e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012040:	f000 fc69 	bl	8012916 <__retarget_lock_acquire_recursive>
 8012044:	3d01      	subs	r5, #1
 8012046:	4637      	mov	r7, r6
 8012048:	6863      	ldr	r3, [r4, #4]
 801204a:	b99b      	cbnz	r3, 8012074 <_fgets_r+0x5c>
 801204c:	4621      	mov	r1, r4
 801204e:	4648      	mov	r0, r9
 8012050:	f000 f992 	bl	8012378 <__srefill_r>
 8012054:	b168      	cbz	r0, 8012072 <_fgets_r+0x5a>
 8012056:	42b7      	cmp	r7, r6
 8012058:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801205a:	d139      	bne.n	80120d0 <_fgets_r+0xb8>
 801205c:	07d8      	lsls	r0, r3, #31
 801205e:	d405      	bmi.n	801206c <_fgets_r+0x54>
 8012060:	89a3      	ldrh	r3, [r4, #12]
 8012062:	0599      	lsls	r1, r3, #22
 8012064:	d402      	bmi.n	801206c <_fgets_r+0x54>
 8012066:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012068:	f000 fc56 	bl	8012918 <__retarget_lock_release_recursive>
 801206c:	2000      	movs	r0, #0
 801206e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012072:	6863      	ldr	r3, [r4, #4]
 8012074:	f8d4 a000 	ldr.w	sl, [r4]
 8012078:	42ab      	cmp	r3, r5
 801207a:	bf28      	it	cs
 801207c:	462b      	movcs	r3, r5
 801207e:	461a      	mov	r2, r3
 8012080:	210a      	movs	r1, #10
 8012082:	4650      	mov	r0, sl
 8012084:	4698      	mov	r8, r3
 8012086:	f7f9 ffdb 	bl	800c040 <memchr>
 801208a:	6863      	ldr	r3, [r4, #4]
 801208c:	b188      	cbz	r0, 80120b2 <_fgets_r+0x9a>
 801208e:	3001      	adds	r0, #1
 8012090:	eba0 050a 	sub.w	r5, r0, sl
 8012094:	1b5b      	subs	r3, r3, r5
 8012096:	e9c4 0300 	strd	r0, r3, [r4]
 801209a:	462a      	mov	r2, r5
 801209c:	4651      	mov	r1, sl
 801209e:	4638      	mov	r0, r7
 80120a0:	f000 fc3b 	bl	801291a <memcpy>
 80120a4:	2300      	movs	r3, #0
 80120a6:	557b      	strb	r3, [r7, r5]
 80120a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80120aa:	07da      	lsls	r2, r3, #31
 80120ac:	d513      	bpl.n	80120d6 <_fgets_r+0xbe>
 80120ae:	4630      	mov	r0, r6
 80120b0:	e7dd      	b.n	801206e <_fgets_r+0x56>
 80120b2:	eba3 0308 	sub.w	r3, r3, r8
 80120b6:	6063      	str	r3, [r4, #4]
 80120b8:	6823      	ldr	r3, [r4, #0]
 80120ba:	4443      	add	r3, r8
 80120bc:	4638      	mov	r0, r7
 80120be:	6023      	str	r3, [r4, #0]
 80120c0:	4642      	mov	r2, r8
 80120c2:	4651      	mov	r1, sl
 80120c4:	f000 fc29 	bl	801291a <memcpy>
 80120c8:	ebb5 0508 	subs.w	r5, r5, r8
 80120cc:	4447      	add	r7, r8
 80120ce:	d1bb      	bne.n	8012048 <_fgets_r+0x30>
 80120d0:	2300      	movs	r3, #0
 80120d2:	703b      	strb	r3, [r7, #0]
 80120d4:	e7e8      	b.n	80120a8 <_fgets_r+0x90>
 80120d6:	89a3      	ldrh	r3, [r4, #12]
 80120d8:	059b      	lsls	r3, r3, #22
 80120da:	d4e8      	bmi.n	80120ae <_fgets_r+0x96>
 80120dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120de:	f000 fc1b 	bl	8012918 <__retarget_lock_release_recursive>
 80120e2:	e7e4      	b.n	80120ae <_fgets_r+0x96>

080120e4 <fgets>:
 80120e4:	4613      	mov	r3, r2
 80120e6:	460a      	mov	r2, r1
 80120e8:	4601      	mov	r1, r0
 80120ea:	4802      	ldr	r0, [pc, #8]	@ (80120f4 <fgets+0x10>)
 80120ec:	6800      	ldr	r0, [r0, #0]
 80120ee:	f7ff bf93 	b.w	8012018 <_fgets_r>
 80120f2:	bf00      	nop
 80120f4:	20000024 	.word	0x20000024

080120f8 <std>:
 80120f8:	2300      	movs	r3, #0
 80120fa:	b510      	push	{r4, lr}
 80120fc:	4604      	mov	r4, r0
 80120fe:	e9c0 3300 	strd	r3, r3, [r0]
 8012102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012106:	6083      	str	r3, [r0, #8]
 8012108:	8181      	strh	r1, [r0, #12]
 801210a:	6643      	str	r3, [r0, #100]	@ 0x64
 801210c:	81c2      	strh	r2, [r0, #14]
 801210e:	6183      	str	r3, [r0, #24]
 8012110:	4619      	mov	r1, r3
 8012112:	2208      	movs	r2, #8
 8012114:	305c      	adds	r0, #92	@ 0x5c
 8012116:	f000 fb2f 	bl	8012778 <memset>
 801211a:	4b0d      	ldr	r3, [pc, #52]	@ (8012150 <std+0x58>)
 801211c:	6263      	str	r3, [r4, #36]	@ 0x24
 801211e:	4b0d      	ldr	r3, [pc, #52]	@ (8012154 <std+0x5c>)
 8012120:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012122:	4b0d      	ldr	r3, [pc, #52]	@ (8012158 <std+0x60>)
 8012124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012126:	4b0d      	ldr	r3, [pc, #52]	@ (801215c <std+0x64>)
 8012128:	6323      	str	r3, [r4, #48]	@ 0x30
 801212a:	4b0d      	ldr	r3, [pc, #52]	@ (8012160 <std+0x68>)
 801212c:	6224      	str	r4, [r4, #32]
 801212e:	429c      	cmp	r4, r3
 8012130:	d006      	beq.n	8012140 <std+0x48>
 8012132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012136:	4294      	cmp	r4, r2
 8012138:	d002      	beq.n	8012140 <std+0x48>
 801213a:	33d0      	adds	r3, #208	@ 0xd0
 801213c:	429c      	cmp	r4, r3
 801213e:	d105      	bne.n	801214c <std+0x54>
 8012140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012148:	f000 bbe4 	b.w	8012914 <__retarget_lock_init_recursive>
 801214c:	bd10      	pop	{r4, pc}
 801214e:	bf00      	nop
 8012150:	080125c9 	.word	0x080125c9
 8012154:	080125eb 	.word	0x080125eb
 8012158:	08012623 	.word	0x08012623
 801215c:	08012647 	.word	0x08012647
 8012160:	2000420c 	.word	0x2000420c

08012164 <stdio_exit_handler>:
 8012164:	4a02      	ldr	r2, [pc, #8]	@ (8012170 <stdio_exit_handler+0xc>)
 8012166:	4903      	ldr	r1, [pc, #12]	@ (8012174 <stdio_exit_handler+0x10>)
 8012168:	4803      	ldr	r0, [pc, #12]	@ (8012178 <stdio_exit_handler+0x14>)
 801216a:	f000 b869 	b.w	8012240 <_fwalk_sglue>
 801216e:	bf00      	nop
 8012170:	20000018 	.word	0x20000018
 8012174:	080131e1 	.word	0x080131e1
 8012178:	20000028 	.word	0x20000028

0801217c <cleanup_stdio>:
 801217c:	6841      	ldr	r1, [r0, #4]
 801217e:	4b0c      	ldr	r3, [pc, #48]	@ (80121b0 <cleanup_stdio+0x34>)
 8012180:	4299      	cmp	r1, r3
 8012182:	b510      	push	{r4, lr}
 8012184:	4604      	mov	r4, r0
 8012186:	d001      	beq.n	801218c <cleanup_stdio+0x10>
 8012188:	f001 f82a 	bl	80131e0 <_fflush_r>
 801218c:	68a1      	ldr	r1, [r4, #8]
 801218e:	4b09      	ldr	r3, [pc, #36]	@ (80121b4 <cleanup_stdio+0x38>)
 8012190:	4299      	cmp	r1, r3
 8012192:	d002      	beq.n	801219a <cleanup_stdio+0x1e>
 8012194:	4620      	mov	r0, r4
 8012196:	f001 f823 	bl	80131e0 <_fflush_r>
 801219a:	68e1      	ldr	r1, [r4, #12]
 801219c:	4b06      	ldr	r3, [pc, #24]	@ (80121b8 <cleanup_stdio+0x3c>)
 801219e:	4299      	cmp	r1, r3
 80121a0:	d004      	beq.n	80121ac <cleanup_stdio+0x30>
 80121a2:	4620      	mov	r0, r4
 80121a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121a8:	f001 b81a 	b.w	80131e0 <_fflush_r>
 80121ac:	bd10      	pop	{r4, pc}
 80121ae:	bf00      	nop
 80121b0:	2000420c 	.word	0x2000420c
 80121b4:	20004274 	.word	0x20004274
 80121b8:	200042dc 	.word	0x200042dc

080121bc <global_stdio_init.part.0>:
 80121bc:	b510      	push	{r4, lr}
 80121be:	4b0b      	ldr	r3, [pc, #44]	@ (80121ec <global_stdio_init.part.0+0x30>)
 80121c0:	4c0b      	ldr	r4, [pc, #44]	@ (80121f0 <global_stdio_init.part.0+0x34>)
 80121c2:	4a0c      	ldr	r2, [pc, #48]	@ (80121f4 <global_stdio_init.part.0+0x38>)
 80121c4:	601a      	str	r2, [r3, #0]
 80121c6:	4620      	mov	r0, r4
 80121c8:	2200      	movs	r2, #0
 80121ca:	2104      	movs	r1, #4
 80121cc:	f7ff ff94 	bl	80120f8 <std>
 80121d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80121d4:	2201      	movs	r2, #1
 80121d6:	2109      	movs	r1, #9
 80121d8:	f7ff ff8e 	bl	80120f8 <std>
 80121dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80121e0:	2202      	movs	r2, #2
 80121e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121e6:	2112      	movs	r1, #18
 80121e8:	f7ff bf86 	b.w	80120f8 <std>
 80121ec:	20004344 	.word	0x20004344
 80121f0:	2000420c 	.word	0x2000420c
 80121f4:	08012165 	.word	0x08012165

080121f8 <__sfp_lock_acquire>:
 80121f8:	4801      	ldr	r0, [pc, #4]	@ (8012200 <__sfp_lock_acquire+0x8>)
 80121fa:	f000 bb8c 	b.w	8012916 <__retarget_lock_acquire_recursive>
 80121fe:	bf00      	nop
 8012200:	2000434d 	.word	0x2000434d

08012204 <__sfp_lock_release>:
 8012204:	4801      	ldr	r0, [pc, #4]	@ (801220c <__sfp_lock_release+0x8>)
 8012206:	f000 bb87 	b.w	8012918 <__retarget_lock_release_recursive>
 801220a:	bf00      	nop
 801220c:	2000434d 	.word	0x2000434d

08012210 <__sinit>:
 8012210:	b510      	push	{r4, lr}
 8012212:	4604      	mov	r4, r0
 8012214:	f7ff fff0 	bl	80121f8 <__sfp_lock_acquire>
 8012218:	6a23      	ldr	r3, [r4, #32]
 801221a:	b11b      	cbz	r3, 8012224 <__sinit+0x14>
 801221c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012220:	f7ff bff0 	b.w	8012204 <__sfp_lock_release>
 8012224:	4b04      	ldr	r3, [pc, #16]	@ (8012238 <__sinit+0x28>)
 8012226:	6223      	str	r3, [r4, #32]
 8012228:	4b04      	ldr	r3, [pc, #16]	@ (801223c <__sinit+0x2c>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d1f5      	bne.n	801221c <__sinit+0xc>
 8012230:	f7ff ffc4 	bl	80121bc <global_stdio_init.part.0>
 8012234:	e7f2      	b.n	801221c <__sinit+0xc>
 8012236:	bf00      	nop
 8012238:	0801217d 	.word	0x0801217d
 801223c:	20004344 	.word	0x20004344

08012240 <_fwalk_sglue>:
 8012240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012244:	4607      	mov	r7, r0
 8012246:	4688      	mov	r8, r1
 8012248:	4614      	mov	r4, r2
 801224a:	2600      	movs	r6, #0
 801224c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012250:	f1b9 0901 	subs.w	r9, r9, #1
 8012254:	d505      	bpl.n	8012262 <_fwalk_sglue+0x22>
 8012256:	6824      	ldr	r4, [r4, #0]
 8012258:	2c00      	cmp	r4, #0
 801225a:	d1f7      	bne.n	801224c <_fwalk_sglue+0xc>
 801225c:	4630      	mov	r0, r6
 801225e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012262:	89ab      	ldrh	r3, [r5, #12]
 8012264:	2b01      	cmp	r3, #1
 8012266:	d907      	bls.n	8012278 <_fwalk_sglue+0x38>
 8012268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801226c:	3301      	adds	r3, #1
 801226e:	d003      	beq.n	8012278 <_fwalk_sglue+0x38>
 8012270:	4629      	mov	r1, r5
 8012272:	4638      	mov	r0, r7
 8012274:	47c0      	blx	r8
 8012276:	4306      	orrs	r6, r0
 8012278:	3568      	adds	r5, #104	@ 0x68
 801227a:	e7e9      	b.n	8012250 <_fwalk_sglue+0x10>

0801227c <iprintf>:
 801227c:	b40f      	push	{r0, r1, r2, r3}
 801227e:	b507      	push	{r0, r1, r2, lr}
 8012280:	4906      	ldr	r1, [pc, #24]	@ (801229c <iprintf+0x20>)
 8012282:	ab04      	add	r3, sp, #16
 8012284:	6808      	ldr	r0, [r1, #0]
 8012286:	f853 2b04 	ldr.w	r2, [r3], #4
 801228a:	6881      	ldr	r1, [r0, #8]
 801228c:	9301      	str	r3, [sp, #4]
 801228e:	f000 fc7d 	bl	8012b8c <_vfiprintf_r>
 8012292:	b003      	add	sp, #12
 8012294:	f85d eb04 	ldr.w	lr, [sp], #4
 8012298:	b004      	add	sp, #16
 801229a:	4770      	bx	lr
 801229c:	20000024 	.word	0x20000024

080122a0 <_puts_r>:
 80122a0:	6a03      	ldr	r3, [r0, #32]
 80122a2:	b570      	push	{r4, r5, r6, lr}
 80122a4:	6884      	ldr	r4, [r0, #8]
 80122a6:	4605      	mov	r5, r0
 80122a8:	460e      	mov	r6, r1
 80122aa:	b90b      	cbnz	r3, 80122b0 <_puts_r+0x10>
 80122ac:	f7ff ffb0 	bl	8012210 <__sinit>
 80122b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80122b2:	07db      	lsls	r3, r3, #31
 80122b4:	d405      	bmi.n	80122c2 <_puts_r+0x22>
 80122b6:	89a3      	ldrh	r3, [r4, #12]
 80122b8:	0598      	lsls	r0, r3, #22
 80122ba:	d402      	bmi.n	80122c2 <_puts_r+0x22>
 80122bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122be:	f000 fb2a 	bl	8012916 <__retarget_lock_acquire_recursive>
 80122c2:	89a3      	ldrh	r3, [r4, #12]
 80122c4:	0719      	lsls	r1, r3, #28
 80122c6:	d502      	bpl.n	80122ce <_puts_r+0x2e>
 80122c8:	6923      	ldr	r3, [r4, #16]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d135      	bne.n	801233a <_puts_r+0x9a>
 80122ce:	4621      	mov	r1, r4
 80122d0:	4628      	mov	r0, r5
 80122d2:	f000 f9fb 	bl	80126cc <__swsetup_r>
 80122d6:	b380      	cbz	r0, 801233a <_puts_r+0x9a>
 80122d8:	f04f 35ff 	mov.w	r5, #4294967295
 80122dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80122de:	07da      	lsls	r2, r3, #31
 80122e0:	d405      	bmi.n	80122ee <_puts_r+0x4e>
 80122e2:	89a3      	ldrh	r3, [r4, #12]
 80122e4:	059b      	lsls	r3, r3, #22
 80122e6:	d402      	bmi.n	80122ee <_puts_r+0x4e>
 80122e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80122ea:	f000 fb15 	bl	8012918 <__retarget_lock_release_recursive>
 80122ee:	4628      	mov	r0, r5
 80122f0:	bd70      	pop	{r4, r5, r6, pc}
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	da04      	bge.n	8012300 <_puts_r+0x60>
 80122f6:	69a2      	ldr	r2, [r4, #24]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	dc17      	bgt.n	801232c <_puts_r+0x8c>
 80122fc:	290a      	cmp	r1, #10
 80122fe:	d015      	beq.n	801232c <_puts_r+0x8c>
 8012300:	6823      	ldr	r3, [r4, #0]
 8012302:	1c5a      	adds	r2, r3, #1
 8012304:	6022      	str	r2, [r4, #0]
 8012306:	7019      	strb	r1, [r3, #0]
 8012308:	68a3      	ldr	r3, [r4, #8]
 801230a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801230e:	3b01      	subs	r3, #1
 8012310:	60a3      	str	r3, [r4, #8]
 8012312:	2900      	cmp	r1, #0
 8012314:	d1ed      	bne.n	80122f2 <_puts_r+0x52>
 8012316:	2b00      	cmp	r3, #0
 8012318:	da11      	bge.n	801233e <_puts_r+0x9e>
 801231a:	4622      	mov	r2, r4
 801231c:	210a      	movs	r1, #10
 801231e:	4628      	mov	r0, r5
 8012320:	f000 f995 	bl	801264e <__swbuf_r>
 8012324:	3001      	adds	r0, #1
 8012326:	d0d7      	beq.n	80122d8 <_puts_r+0x38>
 8012328:	250a      	movs	r5, #10
 801232a:	e7d7      	b.n	80122dc <_puts_r+0x3c>
 801232c:	4622      	mov	r2, r4
 801232e:	4628      	mov	r0, r5
 8012330:	f000 f98d 	bl	801264e <__swbuf_r>
 8012334:	3001      	adds	r0, #1
 8012336:	d1e7      	bne.n	8012308 <_puts_r+0x68>
 8012338:	e7ce      	b.n	80122d8 <_puts_r+0x38>
 801233a:	3e01      	subs	r6, #1
 801233c:	e7e4      	b.n	8012308 <_puts_r+0x68>
 801233e:	6823      	ldr	r3, [r4, #0]
 8012340:	1c5a      	adds	r2, r3, #1
 8012342:	6022      	str	r2, [r4, #0]
 8012344:	220a      	movs	r2, #10
 8012346:	701a      	strb	r2, [r3, #0]
 8012348:	e7ee      	b.n	8012328 <_puts_r+0x88>
	...

0801234c <puts>:
 801234c:	4b02      	ldr	r3, [pc, #8]	@ (8012358 <puts+0xc>)
 801234e:	4601      	mov	r1, r0
 8012350:	6818      	ldr	r0, [r3, #0]
 8012352:	f7ff bfa5 	b.w	80122a0 <_puts_r>
 8012356:	bf00      	nop
 8012358:	20000024 	.word	0x20000024

0801235c <lflush>:
 801235c:	898b      	ldrh	r3, [r1, #12]
 801235e:	f003 0309 	and.w	r3, r3, #9
 8012362:	2b09      	cmp	r3, #9
 8012364:	d103      	bne.n	801236e <lflush+0x12>
 8012366:	4b03      	ldr	r3, [pc, #12]	@ (8012374 <lflush+0x18>)
 8012368:	6818      	ldr	r0, [r3, #0]
 801236a:	f000 bf39 	b.w	80131e0 <_fflush_r>
 801236e:	2000      	movs	r0, #0
 8012370:	4770      	bx	lr
 8012372:	bf00      	nop
 8012374:	20000024 	.word	0x20000024

08012378 <__srefill_r>:
 8012378:	b570      	push	{r4, r5, r6, lr}
 801237a:	460c      	mov	r4, r1
 801237c:	4605      	mov	r5, r0
 801237e:	b118      	cbz	r0, 8012388 <__srefill_r+0x10>
 8012380:	6a03      	ldr	r3, [r0, #32]
 8012382:	b90b      	cbnz	r3, 8012388 <__srefill_r+0x10>
 8012384:	f7ff ff44 	bl	8012210 <__sinit>
 8012388:	2300      	movs	r3, #0
 801238a:	6063      	str	r3, [r4, #4]
 801238c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012390:	069e      	lsls	r6, r3, #26
 8012392:	d408      	bmi.n	80123a6 <__srefill_r+0x2e>
 8012394:	0758      	lsls	r0, r3, #29
 8012396:	d445      	bmi.n	8012424 <__srefill_r+0xac>
 8012398:	06d9      	lsls	r1, r3, #27
 801239a:	d407      	bmi.n	80123ac <__srefill_r+0x34>
 801239c:	2209      	movs	r2, #9
 801239e:	602a      	str	r2, [r5, #0]
 80123a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123a4:	81a3      	strh	r3, [r4, #12]
 80123a6:	f04f 30ff 	mov.w	r0, #4294967295
 80123aa:	bd70      	pop	{r4, r5, r6, pc}
 80123ac:	071a      	lsls	r2, r3, #28
 80123ae:	d50b      	bpl.n	80123c8 <__srefill_r+0x50>
 80123b0:	4621      	mov	r1, r4
 80123b2:	4628      	mov	r0, r5
 80123b4:	f000 ff14 	bl	80131e0 <_fflush_r>
 80123b8:	2800      	cmp	r0, #0
 80123ba:	d1f4      	bne.n	80123a6 <__srefill_r+0x2e>
 80123bc:	89a3      	ldrh	r3, [r4, #12]
 80123be:	60a0      	str	r0, [r4, #8]
 80123c0:	f023 0308 	bic.w	r3, r3, #8
 80123c4:	81a3      	strh	r3, [r4, #12]
 80123c6:	61a0      	str	r0, [r4, #24]
 80123c8:	89a3      	ldrh	r3, [r4, #12]
 80123ca:	f043 0304 	orr.w	r3, r3, #4
 80123ce:	81a3      	strh	r3, [r4, #12]
 80123d0:	6923      	ldr	r3, [r4, #16]
 80123d2:	b91b      	cbnz	r3, 80123dc <__srefill_r+0x64>
 80123d4:	4621      	mov	r1, r4
 80123d6:	4628      	mov	r0, r5
 80123d8:	f000 ff50 	bl	801327c <__smakebuf_r>
 80123dc:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80123e0:	07b3      	lsls	r3, r6, #30
 80123e2:	d00f      	beq.n	8012404 <__srefill_r+0x8c>
 80123e4:	2301      	movs	r3, #1
 80123e6:	4a1b      	ldr	r2, [pc, #108]	@ (8012454 <__srefill_r+0xdc>)
 80123e8:	491b      	ldr	r1, [pc, #108]	@ (8012458 <__srefill_r+0xe0>)
 80123ea:	481c      	ldr	r0, [pc, #112]	@ (801245c <__srefill_r+0xe4>)
 80123ec:	81a3      	strh	r3, [r4, #12]
 80123ee:	f7ff ff27 	bl	8012240 <_fwalk_sglue>
 80123f2:	81a6      	strh	r6, [r4, #12]
 80123f4:	f006 0609 	and.w	r6, r6, #9
 80123f8:	2e09      	cmp	r6, #9
 80123fa:	d103      	bne.n	8012404 <__srefill_r+0x8c>
 80123fc:	4621      	mov	r1, r4
 80123fe:	4628      	mov	r0, r5
 8012400:	f000 fe6a 	bl	80130d8 <__sflush_r>
 8012404:	6922      	ldr	r2, [r4, #16]
 8012406:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8012408:	6963      	ldr	r3, [r4, #20]
 801240a:	6a21      	ldr	r1, [r4, #32]
 801240c:	6022      	str	r2, [r4, #0]
 801240e:	4628      	mov	r0, r5
 8012410:	47b0      	blx	r6
 8012412:	2800      	cmp	r0, #0
 8012414:	6060      	str	r0, [r4, #4]
 8012416:	dc17      	bgt.n	8012448 <__srefill_r+0xd0>
 8012418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801241c:	d116      	bne.n	801244c <__srefill_r+0xd4>
 801241e:	f043 0320 	orr.w	r3, r3, #32
 8012422:	e7bf      	b.n	80123a4 <__srefill_r+0x2c>
 8012424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012426:	2900      	cmp	r1, #0
 8012428:	d0d2      	beq.n	80123d0 <__srefill_r+0x58>
 801242a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801242e:	4299      	cmp	r1, r3
 8012430:	d002      	beq.n	8012438 <__srefill_r+0xc0>
 8012432:	4628      	mov	r0, r5
 8012434:	f000 fa80 	bl	8012938 <_free_r>
 8012438:	2300      	movs	r3, #0
 801243a:	6363      	str	r3, [r4, #52]	@ 0x34
 801243c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801243e:	6063      	str	r3, [r4, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d0c5      	beq.n	80123d0 <__srefill_r+0x58>
 8012444:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012446:	6023      	str	r3, [r4, #0]
 8012448:	2000      	movs	r0, #0
 801244a:	e7ae      	b.n	80123aa <__srefill_r+0x32>
 801244c:	2200      	movs	r2, #0
 801244e:	6062      	str	r2, [r4, #4]
 8012450:	e7a6      	b.n	80123a0 <__srefill_r+0x28>
 8012452:	bf00      	nop
 8012454:	20000018 	.word	0x20000018
 8012458:	0801235d 	.word	0x0801235d
 801245c:	20000028 	.word	0x20000028

08012460 <setvbuf>:
 8012460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012464:	461d      	mov	r5, r3
 8012466:	4b57      	ldr	r3, [pc, #348]	@ (80125c4 <setvbuf+0x164>)
 8012468:	681f      	ldr	r7, [r3, #0]
 801246a:	4604      	mov	r4, r0
 801246c:	460e      	mov	r6, r1
 801246e:	4690      	mov	r8, r2
 8012470:	b127      	cbz	r7, 801247c <setvbuf+0x1c>
 8012472:	6a3b      	ldr	r3, [r7, #32]
 8012474:	b913      	cbnz	r3, 801247c <setvbuf+0x1c>
 8012476:	4638      	mov	r0, r7
 8012478:	f7ff feca 	bl	8012210 <__sinit>
 801247c:	f1b8 0f02 	cmp.w	r8, #2
 8012480:	d006      	beq.n	8012490 <setvbuf+0x30>
 8012482:	f1b8 0f01 	cmp.w	r8, #1
 8012486:	f200 809a 	bhi.w	80125be <setvbuf+0x15e>
 801248a:	2d00      	cmp	r5, #0
 801248c:	f2c0 8097 	blt.w	80125be <setvbuf+0x15e>
 8012490:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012492:	07d9      	lsls	r1, r3, #31
 8012494:	d405      	bmi.n	80124a2 <setvbuf+0x42>
 8012496:	89a3      	ldrh	r3, [r4, #12]
 8012498:	059a      	lsls	r2, r3, #22
 801249a:	d402      	bmi.n	80124a2 <setvbuf+0x42>
 801249c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801249e:	f000 fa3a 	bl	8012916 <__retarget_lock_acquire_recursive>
 80124a2:	4621      	mov	r1, r4
 80124a4:	4638      	mov	r0, r7
 80124a6:	f000 fe9b 	bl	80131e0 <_fflush_r>
 80124aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80124ac:	b141      	cbz	r1, 80124c0 <setvbuf+0x60>
 80124ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80124b2:	4299      	cmp	r1, r3
 80124b4:	d002      	beq.n	80124bc <setvbuf+0x5c>
 80124b6:	4638      	mov	r0, r7
 80124b8:	f000 fa3e 	bl	8012938 <_free_r>
 80124bc:	2300      	movs	r3, #0
 80124be:	6363      	str	r3, [r4, #52]	@ 0x34
 80124c0:	2300      	movs	r3, #0
 80124c2:	61a3      	str	r3, [r4, #24]
 80124c4:	6063      	str	r3, [r4, #4]
 80124c6:	89a3      	ldrh	r3, [r4, #12]
 80124c8:	061b      	lsls	r3, r3, #24
 80124ca:	d503      	bpl.n	80124d4 <setvbuf+0x74>
 80124cc:	6921      	ldr	r1, [r4, #16]
 80124ce:	4638      	mov	r0, r7
 80124d0:	f000 fa32 	bl	8012938 <_free_r>
 80124d4:	89a3      	ldrh	r3, [r4, #12]
 80124d6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80124da:	f023 0303 	bic.w	r3, r3, #3
 80124de:	f1b8 0f02 	cmp.w	r8, #2
 80124e2:	81a3      	strh	r3, [r4, #12]
 80124e4:	d061      	beq.n	80125aa <setvbuf+0x14a>
 80124e6:	ab01      	add	r3, sp, #4
 80124e8:	466a      	mov	r2, sp
 80124ea:	4621      	mov	r1, r4
 80124ec:	4638      	mov	r0, r7
 80124ee:	f000 fe9f 	bl	8013230 <__swhatbuf_r>
 80124f2:	89a3      	ldrh	r3, [r4, #12]
 80124f4:	4318      	orrs	r0, r3
 80124f6:	81a0      	strh	r0, [r4, #12]
 80124f8:	bb2d      	cbnz	r5, 8012546 <setvbuf+0xe6>
 80124fa:	9d00      	ldr	r5, [sp, #0]
 80124fc:	4628      	mov	r0, r5
 80124fe:	f000 fa65 	bl	80129cc <malloc>
 8012502:	4606      	mov	r6, r0
 8012504:	2800      	cmp	r0, #0
 8012506:	d152      	bne.n	80125ae <setvbuf+0x14e>
 8012508:	f8dd 9000 	ldr.w	r9, [sp]
 801250c:	45a9      	cmp	r9, r5
 801250e:	d140      	bne.n	8012592 <setvbuf+0x132>
 8012510:	f04f 35ff 	mov.w	r5, #4294967295
 8012514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012518:	f043 0202 	orr.w	r2, r3, #2
 801251c:	81a2      	strh	r2, [r4, #12]
 801251e:	2200      	movs	r2, #0
 8012520:	60a2      	str	r2, [r4, #8]
 8012522:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8012526:	6022      	str	r2, [r4, #0]
 8012528:	6122      	str	r2, [r4, #16]
 801252a:	2201      	movs	r2, #1
 801252c:	6162      	str	r2, [r4, #20]
 801252e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012530:	07d6      	lsls	r6, r2, #31
 8012532:	d404      	bmi.n	801253e <setvbuf+0xde>
 8012534:	0598      	lsls	r0, r3, #22
 8012536:	d402      	bmi.n	801253e <setvbuf+0xde>
 8012538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801253a:	f000 f9ed 	bl	8012918 <__retarget_lock_release_recursive>
 801253e:	4628      	mov	r0, r5
 8012540:	b003      	add	sp, #12
 8012542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012546:	2e00      	cmp	r6, #0
 8012548:	d0d8      	beq.n	80124fc <setvbuf+0x9c>
 801254a:	6a3b      	ldr	r3, [r7, #32]
 801254c:	b913      	cbnz	r3, 8012554 <setvbuf+0xf4>
 801254e:	4638      	mov	r0, r7
 8012550:	f7ff fe5e 	bl	8012210 <__sinit>
 8012554:	f1b8 0f01 	cmp.w	r8, #1
 8012558:	bf08      	it	eq
 801255a:	89a3      	ldrheq	r3, [r4, #12]
 801255c:	6026      	str	r6, [r4, #0]
 801255e:	bf04      	itt	eq
 8012560:	f043 0301 	orreq.w	r3, r3, #1
 8012564:	81a3      	strheq	r3, [r4, #12]
 8012566:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801256a:	f013 0208 	ands.w	r2, r3, #8
 801256e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8012572:	d01e      	beq.n	80125b2 <setvbuf+0x152>
 8012574:	07d9      	lsls	r1, r3, #31
 8012576:	bf41      	itttt	mi
 8012578:	2200      	movmi	r2, #0
 801257a:	426d      	negmi	r5, r5
 801257c:	60a2      	strmi	r2, [r4, #8]
 801257e:	61a5      	strmi	r5, [r4, #24]
 8012580:	bf58      	it	pl
 8012582:	60a5      	strpl	r5, [r4, #8]
 8012584:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012586:	07d2      	lsls	r2, r2, #31
 8012588:	d401      	bmi.n	801258e <setvbuf+0x12e>
 801258a:	059b      	lsls	r3, r3, #22
 801258c:	d513      	bpl.n	80125b6 <setvbuf+0x156>
 801258e:	2500      	movs	r5, #0
 8012590:	e7d5      	b.n	801253e <setvbuf+0xde>
 8012592:	4648      	mov	r0, r9
 8012594:	f000 fa1a 	bl	80129cc <malloc>
 8012598:	4606      	mov	r6, r0
 801259a:	2800      	cmp	r0, #0
 801259c:	d0b8      	beq.n	8012510 <setvbuf+0xb0>
 801259e:	89a3      	ldrh	r3, [r4, #12]
 80125a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80125a4:	81a3      	strh	r3, [r4, #12]
 80125a6:	464d      	mov	r5, r9
 80125a8:	e7cf      	b.n	801254a <setvbuf+0xea>
 80125aa:	2500      	movs	r5, #0
 80125ac:	e7b2      	b.n	8012514 <setvbuf+0xb4>
 80125ae:	46a9      	mov	r9, r5
 80125b0:	e7f5      	b.n	801259e <setvbuf+0x13e>
 80125b2:	60a2      	str	r2, [r4, #8]
 80125b4:	e7e6      	b.n	8012584 <setvbuf+0x124>
 80125b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80125b8:	f000 f9ae 	bl	8012918 <__retarget_lock_release_recursive>
 80125bc:	e7e7      	b.n	801258e <setvbuf+0x12e>
 80125be:	f04f 35ff 	mov.w	r5, #4294967295
 80125c2:	e7bc      	b.n	801253e <setvbuf+0xde>
 80125c4:	20000024 	.word	0x20000024

080125c8 <__sread>:
 80125c8:	b510      	push	{r4, lr}
 80125ca:	460c      	mov	r4, r1
 80125cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125d0:	f000 f952 	bl	8012878 <_read_r>
 80125d4:	2800      	cmp	r0, #0
 80125d6:	bfab      	itete	ge
 80125d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80125da:	89a3      	ldrhlt	r3, [r4, #12]
 80125dc:	181b      	addge	r3, r3, r0
 80125de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80125e2:	bfac      	ite	ge
 80125e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80125e6:	81a3      	strhlt	r3, [r4, #12]
 80125e8:	bd10      	pop	{r4, pc}

080125ea <__swrite>:
 80125ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125ee:	461f      	mov	r7, r3
 80125f0:	898b      	ldrh	r3, [r1, #12]
 80125f2:	05db      	lsls	r3, r3, #23
 80125f4:	4605      	mov	r5, r0
 80125f6:	460c      	mov	r4, r1
 80125f8:	4616      	mov	r6, r2
 80125fa:	d505      	bpl.n	8012608 <__swrite+0x1e>
 80125fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012600:	2302      	movs	r3, #2
 8012602:	2200      	movs	r2, #0
 8012604:	f000 f926 	bl	8012854 <_lseek_r>
 8012608:	89a3      	ldrh	r3, [r4, #12]
 801260a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801260e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012612:	81a3      	strh	r3, [r4, #12]
 8012614:	4632      	mov	r2, r6
 8012616:	463b      	mov	r3, r7
 8012618:	4628      	mov	r0, r5
 801261a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801261e:	f000 b93d 	b.w	801289c <_write_r>

08012622 <__sseek>:
 8012622:	b510      	push	{r4, lr}
 8012624:	460c      	mov	r4, r1
 8012626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801262a:	f000 f913 	bl	8012854 <_lseek_r>
 801262e:	1c43      	adds	r3, r0, #1
 8012630:	89a3      	ldrh	r3, [r4, #12]
 8012632:	bf15      	itete	ne
 8012634:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012636:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801263a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801263e:	81a3      	strheq	r3, [r4, #12]
 8012640:	bf18      	it	ne
 8012642:	81a3      	strhne	r3, [r4, #12]
 8012644:	bd10      	pop	{r4, pc}

08012646 <__sclose>:
 8012646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801264a:	f000 b89d 	b.w	8012788 <_close_r>

0801264e <__swbuf_r>:
 801264e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012650:	460e      	mov	r6, r1
 8012652:	4614      	mov	r4, r2
 8012654:	4605      	mov	r5, r0
 8012656:	b118      	cbz	r0, 8012660 <__swbuf_r+0x12>
 8012658:	6a03      	ldr	r3, [r0, #32]
 801265a:	b90b      	cbnz	r3, 8012660 <__swbuf_r+0x12>
 801265c:	f7ff fdd8 	bl	8012210 <__sinit>
 8012660:	69a3      	ldr	r3, [r4, #24]
 8012662:	60a3      	str	r3, [r4, #8]
 8012664:	89a3      	ldrh	r3, [r4, #12]
 8012666:	071a      	lsls	r2, r3, #28
 8012668:	d501      	bpl.n	801266e <__swbuf_r+0x20>
 801266a:	6923      	ldr	r3, [r4, #16]
 801266c:	b943      	cbnz	r3, 8012680 <__swbuf_r+0x32>
 801266e:	4621      	mov	r1, r4
 8012670:	4628      	mov	r0, r5
 8012672:	f000 f82b 	bl	80126cc <__swsetup_r>
 8012676:	b118      	cbz	r0, 8012680 <__swbuf_r+0x32>
 8012678:	f04f 37ff 	mov.w	r7, #4294967295
 801267c:	4638      	mov	r0, r7
 801267e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012680:	6823      	ldr	r3, [r4, #0]
 8012682:	6922      	ldr	r2, [r4, #16]
 8012684:	1a98      	subs	r0, r3, r2
 8012686:	6963      	ldr	r3, [r4, #20]
 8012688:	b2f6      	uxtb	r6, r6
 801268a:	4283      	cmp	r3, r0
 801268c:	4637      	mov	r7, r6
 801268e:	dc05      	bgt.n	801269c <__swbuf_r+0x4e>
 8012690:	4621      	mov	r1, r4
 8012692:	4628      	mov	r0, r5
 8012694:	f000 fda4 	bl	80131e0 <_fflush_r>
 8012698:	2800      	cmp	r0, #0
 801269a:	d1ed      	bne.n	8012678 <__swbuf_r+0x2a>
 801269c:	68a3      	ldr	r3, [r4, #8]
 801269e:	3b01      	subs	r3, #1
 80126a0:	60a3      	str	r3, [r4, #8]
 80126a2:	6823      	ldr	r3, [r4, #0]
 80126a4:	1c5a      	adds	r2, r3, #1
 80126a6:	6022      	str	r2, [r4, #0]
 80126a8:	701e      	strb	r6, [r3, #0]
 80126aa:	6962      	ldr	r2, [r4, #20]
 80126ac:	1c43      	adds	r3, r0, #1
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d004      	beq.n	80126bc <__swbuf_r+0x6e>
 80126b2:	89a3      	ldrh	r3, [r4, #12]
 80126b4:	07db      	lsls	r3, r3, #31
 80126b6:	d5e1      	bpl.n	801267c <__swbuf_r+0x2e>
 80126b8:	2e0a      	cmp	r6, #10
 80126ba:	d1df      	bne.n	801267c <__swbuf_r+0x2e>
 80126bc:	4621      	mov	r1, r4
 80126be:	4628      	mov	r0, r5
 80126c0:	f000 fd8e 	bl	80131e0 <_fflush_r>
 80126c4:	2800      	cmp	r0, #0
 80126c6:	d0d9      	beq.n	801267c <__swbuf_r+0x2e>
 80126c8:	e7d6      	b.n	8012678 <__swbuf_r+0x2a>
	...

080126cc <__swsetup_r>:
 80126cc:	b538      	push	{r3, r4, r5, lr}
 80126ce:	4b29      	ldr	r3, [pc, #164]	@ (8012774 <__swsetup_r+0xa8>)
 80126d0:	4605      	mov	r5, r0
 80126d2:	6818      	ldr	r0, [r3, #0]
 80126d4:	460c      	mov	r4, r1
 80126d6:	b118      	cbz	r0, 80126e0 <__swsetup_r+0x14>
 80126d8:	6a03      	ldr	r3, [r0, #32]
 80126da:	b90b      	cbnz	r3, 80126e0 <__swsetup_r+0x14>
 80126dc:	f7ff fd98 	bl	8012210 <__sinit>
 80126e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80126e4:	0719      	lsls	r1, r3, #28
 80126e6:	d422      	bmi.n	801272e <__swsetup_r+0x62>
 80126e8:	06da      	lsls	r2, r3, #27
 80126ea:	d407      	bmi.n	80126fc <__swsetup_r+0x30>
 80126ec:	2209      	movs	r2, #9
 80126ee:	602a      	str	r2, [r5, #0]
 80126f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80126f4:	81a3      	strh	r3, [r4, #12]
 80126f6:	f04f 30ff 	mov.w	r0, #4294967295
 80126fa:	e033      	b.n	8012764 <__swsetup_r+0x98>
 80126fc:	0758      	lsls	r0, r3, #29
 80126fe:	d512      	bpl.n	8012726 <__swsetup_r+0x5a>
 8012700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012702:	b141      	cbz	r1, 8012716 <__swsetup_r+0x4a>
 8012704:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012708:	4299      	cmp	r1, r3
 801270a:	d002      	beq.n	8012712 <__swsetup_r+0x46>
 801270c:	4628      	mov	r0, r5
 801270e:	f000 f913 	bl	8012938 <_free_r>
 8012712:	2300      	movs	r3, #0
 8012714:	6363      	str	r3, [r4, #52]	@ 0x34
 8012716:	89a3      	ldrh	r3, [r4, #12]
 8012718:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801271c:	81a3      	strh	r3, [r4, #12]
 801271e:	2300      	movs	r3, #0
 8012720:	6063      	str	r3, [r4, #4]
 8012722:	6923      	ldr	r3, [r4, #16]
 8012724:	6023      	str	r3, [r4, #0]
 8012726:	89a3      	ldrh	r3, [r4, #12]
 8012728:	f043 0308 	orr.w	r3, r3, #8
 801272c:	81a3      	strh	r3, [r4, #12]
 801272e:	6923      	ldr	r3, [r4, #16]
 8012730:	b94b      	cbnz	r3, 8012746 <__swsetup_r+0x7a>
 8012732:	89a3      	ldrh	r3, [r4, #12]
 8012734:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801273c:	d003      	beq.n	8012746 <__swsetup_r+0x7a>
 801273e:	4621      	mov	r1, r4
 8012740:	4628      	mov	r0, r5
 8012742:	f000 fd9b 	bl	801327c <__smakebuf_r>
 8012746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801274a:	f013 0201 	ands.w	r2, r3, #1
 801274e:	d00a      	beq.n	8012766 <__swsetup_r+0x9a>
 8012750:	2200      	movs	r2, #0
 8012752:	60a2      	str	r2, [r4, #8]
 8012754:	6962      	ldr	r2, [r4, #20]
 8012756:	4252      	negs	r2, r2
 8012758:	61a2      	str	r2, [r4, #24]
 801275a:	6922      	ldr	r2, [r4, #16]
 801275c:	b942      	cbnz	r2, 8012770 <__swsetup_r+0xa4>
 801275e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012762:	d1c5      	bne.n	80126f0 <__swsetup_r+0x24>
 8012764:	bd38      	pop	{r3, r4, r5, pc}
 8012766:	0799      	lsls	r1, r3, #30
 8012768:	bf58      	it	pl
 801276a:	6962      	ldrpl	r2, [r4, #20]
 801276c:	60a2      	str	r2, [r4, #8]
 801276e:	e7f4      	b.n	801275a <__swsetup_r+0x8e>
 8012770:	2000      	movs	r0, #0
 8012772:	e7f7      	b.n	8012764 <__swsetup_r+0x98>
 8012774:	20000024 	.word	0x20000024

08012778 <memset>:
 8012778:	4402      	add	r2, r0
 801277a:	4603      	mov	r3, r0
 801277c:	4293      	cmp	r3, r2
 801277e:	d100      	bne.n	8012782 <memset+0xa>
 8012780:	4770      	bx	lr
 8012782:	f803 1b01 	strb.w	r1, [r3], #1
 8012786:	e7f9      	b.n	801277c <memset+0x4>

08012788 <_close_r>:
 8012788:	b538      	push	{r3, r4, r5, lr}
 801278a:	4d06      	ldr	r5, [pc, #24]	@ (80127a4 <_close_r+0x1c>)
 801278c:	2300      	movs	r3, #0
 801278e:	4604      	mov	r4, r0
 8012790:	4608      	mov	r0, r1
 8012792:	602b      	str	r3, [r5, #0]
 8012794:	f7fb fa86 	bl	800dca4 <_close>
 8012798:	1c43      	adds	r3, r0, #1
 801279a:	d102      	bne.n	80127a2 <_close_r+0x1a>
 801279c:	682b      	ldr	r3, [r5, #0]
 801279e:	b103      	cbz	r3, 80127a2 <_close_r+0x1a>
 80127a0:	6023      	str	r3, [r4, #0]
 80127a2:	bd38      	pop	{r3, r4, r5, pc}
 80127a4:	20004348 	.word	0x20004348

080127a8 <_reclaim_reent>:
 80127a8:	4b29      	ldr	r3, [pc, #164]	@ (8012850 <_reclaim_reent+0xa8>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	4283      	cmp	r3, r0
 80127ae:	b570      	push	{r4, r5, r6, lr}
 80127b0:	4604      	mov	r4, r0
 80127b2:	d04b      	beq.n	801284c <_reclaim_reent+0xa4>
 80127b4:	69c3      	ldr	r3, [r0, #28]
 80127b6:	b1ab      	cbz	r3, 80127e4 <_reclaim_reent+0x3c>
 80127b8:	68db      	ldr	r3, [r3, #12]
 80127ba:	b16b      	cbz	r3, 80127d8 <_reclaim_reent+0x30>
 80127bc:	2500      	movs	r5, #0
 80127be:	69e3      	ldr	r3, [r4, #28]
 80127c0:	68db      	ldr	r3, [r3, #12]
 80127c2:	5959      	ldr	r1, [r3, r5]
 80127c4:	2900      	cmp	r1, #0
 80127c6:	d13b      	bne.n	8012840 <_reclaim_reent+0x98>
 80127c8:	3504      	adds	r5, #4
 80127ca:	2d80      	cmp	r5, #128	@ 0x80
 80127cc:	d1f7      	bne.n	80127be <_reclaim_reent+0x16>
 80127ce:	69e3      	ldr	r3, [r4, #28]
 80127d0:	4620      	mov	r0, r4
 80127d2:	68d9      	ldr	r1, [r3, #12]
 80127d4:	f000 f8b0 	bl	8012938 <_free_r>
 80127d8:	69e3      	ldr	r3, [r4, #28]
 80127da:	6819      	ldr	r1, [r3, #0]
 80127dc:	b111      	cbz	r1, 80127e4 <_reclaim_reent+0x3c>
 80127de:	4620      	mov	r0, r4
 80127e0:	f000 f8aa 	bl	8012938 <_free_r>
 80127e4:	6961      	ldr	r1, [r4, #20]
 80127e6:	b111      	cbz	r1, 80127ee <_reclaim_reent+0x46>
 80127e8:	4620      	mov	r0, r4
 80127ea:	f000 f8a5 	bl	8012938 <_free_r>
 80127ee:	69e1      	ldr	r1, [r4, #28]
 80127f0:	b111      	cbz	r1, 80127f8 <_reclaim_reent+0x50>
 80127f2:	4620      	mov	r0, r4
 80127f4:	f000 f8a0 	bl	8012938 <_free_r>
 80127f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80127fa:	b111      	cbz	r1, 8012802 <_reclaim_reent+0x5a>
 80127fc:	4620      	mov	r0, r4
 80127fe:	f000 f89b 	bl	8012938 <_free_r>
 8012802:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012804:	b111      	cbz	r1, 801280c <_reclaim_reent+0x64>
 8012806:	4620      	mov	r0, r4
 8012808:	f000 f896 	bl	8012938 <_free_r>
 801280c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801280e:	b111      	cbz	r1, 8012816 <_reclaim_reent+0x6e>
 8012810:	4620      	mov	r0, r4
 8012812:	f000 f891 	bl	8012938 <_free_r>
 8012816:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012818:	b111      	cbz	r1, 8012820 <_reclaim_reent+0x78>
 801281a:	4620      	mov	r0, r4
 801281c:	f000 f88c 	bl	8012938 <_free_r>
 8012820:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012822:	b111      	cbz	r1, 801282a <_reclaim_reent+0x82>
 8012824:	4620      	mov	r0, r4
 8012826:	f000 f887 	bl	8012938 <_free_r>
 801282a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801282c:	b111      	cbz	r1, 8012834 <_reclaim_reent+0x8c>
 801282e:	4620      	mov	r0, r4
 8012830:	f000 f882 	bl	8012938 <_free_r>
 8012834:	6a23      	ldr	r3, [r4, #32]
 8012836:	b14b      	cbz	r3, 801284c <_reclaim_reent+0xa4>
 8012838:	4620      	mov	r0, r4
 801283a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801283e:	4718      	bx	r3
 8012840:	680e      	ldr	r6, [r1, #0]
 8012842:	4620      	mov	r0, r4
 8012844:	f000 f878 	bl	8012938 <_free_r>
 8012848:	4631      	mov	r1, r6
 801284a:	e7bb      	b.n	80127c4 <_reclaim_reent+0x1c>
 801284c:	bd70      	pop	{r4, r5, r6, pc}
 801284e:	bf00      	nop
 8012850:	20000024 	.word	0x20000024

08012854 <_lseek_r>:
 8012854:	b538      	push	{r3, r4, r5, lr}
 8012856:	4d07      	ldr	r5, [pc, #28]	@ (8012874 <_lseek_r+0x20>)
 8012858:	4604      	mov	r4, r0
 801285a:	4608      	mov	r0, r1
 801285c:	4611      	mov	r1, r2
 801285e:	2200      	movs	r2, #0
 8012860:	602a      	str	r2, [r5, #0]
 8012862:	461a      	mov	r2, r3
 8012864:	f7fb fa35 	bl	800dcd2 <_lseek>
 8012868:	1c43      	adds	r3, r0, #1
 801286a:	d102      	bne.n	8012872 <_lseek_r+0x1e>
 801286c:	682b      	ldr	r3, [r5, #0]
 801286e:	b103      	cbz	r3, 8012872 <_lseek_r+0x1e>
 8012870:	6023      	str	r3, [r4, #0]
 8012872:	bd38      	pop	{r3, r4, r5, pc}
 8012874:	20004348 	.word	0x20004348

08012878 <_read_r>:
 8012878:	b538      	push	{r3, r4, r5, lr}
 801287a:	4d07      	ldr	r5, [pc, #28]	@ (8012898 <_read_r+0x20>)
 801287c:	4604      	mov	r4, r0
 801287e:	4608      	mov	r0, r1
 8012880:	4611      	mov	r1, r2
 8012882:	2200      	movs	r2, #0
 8012884:	602a      	str	r2, [r5, #0]
 8012886:	461a      	mov	r2, r3
 8012888:	f7fb fa34 	bl	800dcf4 <_read>
 801288c:	1c43      	adds	r3, r0, #1
 801288e:	d102      	bne.n	8012896 <_read_r+0x1e>
 8012890:	682b      	ldr	r3, [r5, #0]
 8012892:	b103      	cbz	r3, 8012896 <_read_r+0x1e>
 8012894:	6023      	str	r3, [r4, #0]
 8012896:	bd38      	pop	{r3, r4, r5, pc}
 8012898:	20004348 	.word	0x20004348

0801289c <_write_r>:
 801289c:	b538      	push	{r3, r4, r5, lr}
 801289e:	4d07      	ldr	r5, [pc, #28]	@ (80128bc <_write_r+0x20>)
 80128a0:	4604      	mov	r4, r0
 80128a2:	4608      	mov	r0, r1
 80128a4:	4611      	mov	r1, r2
 80128a6:	2200      	movs	r2, #0
 80128a8:	602a      	str	r2, [r5, #0]
 80128aa:	461a      	mov	r2, r3
 80128ac:	f7fb f9ce 	bl	800dc4c <_write>
 80128b0:	1c43      	adds	r3, r0, #1
 80128b2:	d102      	bne.n	80128ba <_write_r+0x1e>
 80128b4:	682b      	ldr	r3, [r5, #0]
 80128b6:	b103      	cbz	r3, 80128ba <_write_r+0x1e>
 80128b8:	6023      	str	r3, [r4, #0]
 80128ba:	bd38      	pop	{r3, r4, r5, pc}
 80128bc:	20004348 	.word	0x20004348

080128c0 <__errno>:
 80128c0:	4b01      	ldr	r3, [pc, #4]	@ (80128c8 <__errno+0x8>)
 80128c2:	6818      	ldr	r0, [r3, #0]
 80128c4:	4770      	bx	lr
 80128c6:	bf00      	nop
 80128c8:	20000024 	.word	0x20000024

080128cc <__libc_init_array>:
 80128cc:	b570      	push	{r4, r5, r6, lr}
 80128ce:	4d0d      	ldr	r5, [pc, #52]	@ (8012904 <__libc_init_array+0x38>)
 80128d0:	4c0d      	ldr	r4, [pc, #52]	@ (8012908 <__libc_init_array+0x3c>)
 80128d2:	1b64      	subs	r4, r4, r5
 80128d4:	10a4      	asrs	r4, r4, #2
 80128d6:	2600      	movs	r6, #0
 80128d8:	42a6      	cmp	r6, r4
 80128da:	d109      	bne.n	80128f0 <__libc_init_array+0x24>
 80128dc:	4d0b      	ldr	r5, [pc, #44]	@ (801290c <__libc_init_array+0x40>)
 80128de:	4c0c      	ldr	r4, [pc, #48]	@ (8012910 <__libc_init_array+0x44>)
 80128e0:	f000 fd3a 	bl	8013358 <_init>
 80128e4:	1b64      	subs	r4, r4, r5
 80128e6:	10a4      	asrs	r4, r4, #2
 80128e8:	2600      	movs	r6, #0
 80128ea:	42a6      	cmp	r6, r4
 80128ec:	d105      	bne.n	80128fa <__libc_init_array+0x2e>
 80128ee:	bd70      	pop	{r4, r5, r6, pc}
 80128f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80128f4:	4798      	blx	r3
 80128f6:	3601      	adds	r6, #1
 80128f8:	e7ee      	b.n	80128d8 <__libc_init_array+0xc>
 80128fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80128fe:	4798      	blx	r3
 8012900:	3601      	adds	r6, #1
 8012902:	e7f2      	b.n	80128ea <__libc_init_array+0x1e>
 8012904:	0801381c 	.word	0x0801381c
 8012908:	0801381c 	.word	0x0801381c
 801290c:	0801381c 	.word	0x0801381c
 8012910:	08013820 	.word	0x08013820

08012914 <__retarget_lock_init_recursive>:
 8012914:	4770      	bx	lr

08012916 <__retarget_lock_acquire_recursive>:
 8012916:	4770      	bx	lr

08012918 <__retarget_lock_release_recursive>:
 8012918:	4770      	bx	lr

0801291a <memcpy>:
 801291a:	440a      	add	r2, r1
 801291c:	4291      	cmp	r1, r2
 801291e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012922:	d100      	bne.n	8012926 <memcpy+0xc>
 8012924:	4770      	bx	lr
 8012926:	b510      	push	{r4, lr}
 8012928:	f811 4b01 	ldrb.w	r4, [r1], #1
 801292c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012930:	4291      	cmp	r1, r2
 8012932:	d1f9      	bne.n	8012928 <memcpy+0xe>
 8012934:	bd10      	pop	{r4, pc}
	...

08012938 <_free_r>:
 8012938:	b538      	push	{r3, r4, r5, lr}
 801293a:	4605      	mov	r5, r0
 801293c:	2900      	cmp	r1, #0
 801293e:	d041      	beq.n	80129c4 <_free_r+0x8c>
 8012940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012944:	1f0c      	subs	r4, r1, #4
 8012946:	2b00      	cmp	r3, #0
 8012948:	bfb8      	it	lt
 801294a:	18e4      	addlt	r4, r4, r3
 801294c:	f000 f8e8 	bl	8012b20 <__malloc_lock>
 8012950:	4a1d      	ldr	r2, [pc, #116]	@ (80129c8 <_free_r+0x90>)
 8012952:	6813      	ldr	r3, [r2, #0]
 8012954:	b933      	cbnz	r3, 8012964 <_free_r+0x2c>
 8012956:	6063      	str	r3, [r4, #4]
 8012958:	6014      	str	r4, [r2, #0]
 801295a:	4628      	mov	r0, r5
 801295c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012960:	f000 b8e4 	b.w	8012b2c <__malloc_unlock>
 8012964:	42a3      	cmp	r3, r4
 8012966:	d908      	bls.n	801297a <_free_r+0x42>
 8012968:	6820      	ldr	r0, [r4, #0]
 801296a:	1821      	adds	r1, r4, r0
 801296c:	428b      	cmp	r3, r1
 801296e:	bf01      	itttt	eq
 8012970:	6819      	ldreq	r1, [r3, #0]
 8012972:	685b      	ldreq	r3, [r3, #4]
 8012974:	1809      	addeq	r1, r1, r0
 8012976:	6021      	streq	r1, [r4, #0]
 8012978:	e7ed      	b.n	8012956 <_free_r+0x1e>
 801297a:	461a      	mov	r2, r3
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	b10b      	cbz	r3, 8012984 <_free_r+0x4c>
 8012980:	42a3      	cmp	r3, r4
 8012982:	d9fa      	bls.n	801297a <_free_r+0x42>
 8012984:	6811      	ldr	r1, [r2, #0]
 8012986:	1850      	adds	r0, r2, r1
 8012988:	42a0      	cmp	r0, r4
 801298a:	d10b      	bne.n	80129a4 <_free_r+0x6c>
 801298c:	6820      	ldr	r0, [r4, #0]
 801298e:	4401      	add	r1, r0
 8012990:	1850      	adds	r0, r2, r1
 8012992:	4283      	cmp	r3, r0
 8012994:	6011      	str	r1, [r2, #0]
 8012996:	d1e0      	bne.n	801295a <_free_r+0x22>
 8012998:	6818      	ldr	r0, [r3, #0]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	6053      	str	r3, [r2, #4]
 801299e:	4408      	add	r0, r1
 80129a0:	6010      	str	r0, [r2, #0]
 80129a2:	e7da      	b.n	801295a <_free_r+0x22>
 80129a4:	d902      	bls.n	80129ac <_free_r+0x74>
 80129a6:	230c      	movs	r3, #12
 80129a8:	602b      	str	r3, [r5, #0]
 80129aa:	e7d6      	b.n	801295a <_free_r+0x22>
 80129ac:	6820      	ldr	r0, [r4, #0]
 80129ae:	1821      	adds	r1, r4, r0
 80129b0:	428b      	cmp	r3, r1
 80129b2:	bf04      	itt	eq
 80129b4:	6819      	ldreq	r1, [r3, #0]
 80129b6:	685b      	ldreq	r3, [r3, #4]
 80129b8:	6063      	str	r3, [r4, #4]
 80129ba:	bf04      	itt	eq
 80129bc:	1809      	addeq	r1, r1, r0
 80129be:	6021      	streq	r1, [r4, #0]
 80129c0:	6054      	str	r4, [r2, #4]
 80129c2:	e7ca      	b.n	801295a <_free_r+0x22>
 80129c4:	bd38      	pop	{r3, r4, r5, pc}
 80129c6:	bf00      	nop
 80129c8:	20004354 	.word	0x20004354

080129cc <malloc>:
 80129cc:	4b02      	ldr	r3, [pc, #8]	@ (80129d8 <malloc+0xc>)
 80129ce:	4601      	mov	r1, r0
 80129d0:	6818      	ldr	r0, [r3, #0]
 80129d2:	f000 b825 	b.w	8012a20 <_malloc_r>
 80129d6:	bf00      	nop
 80129d8:	20000024 	.word	0x20000024

080129dc <sbrk_aligned>:
 80129dc:	b570      	push	{r4, r5, r6, lr}
 80129de:	4e0f      	ldr	r6, [pc, #60]	@ (8012a1c <sbrk_aligned+0x40>)
 80129e0:	460c      	mov	r4, r1
 80129e2:	6831      	ldr	r1, [r6, #0]
 80129e4:	4605      	mov	r5, r0
 80129e6:	b911      	cbnz	r1, 80129ee <sbrk_aligned+0x12>
 80129e8:	f000 fca6 	bl	8013338 <_sbrk_r>
 80129ec:	6030      	str	r0, [r6, #0]
 80129ee:	4621      	mov	r1, r4
 80129f0:	4628      	mov	r0, r5
 80129f2:	f000 fca1 	bl	8013338 <_sbrk_r>
 80129f6:	1c43      	adds	r3, r0, #1
 80129f8:	d103      	bne.n	8012a02 <sbrk_aligned+0x26>
 80129fa:	f04f 34ff 	mov.w	r4, #4294967295
 80129fe:	4620      	mov	r0, r4
 8012a00:	bd70      	pop	{r4, r5, r6, pc}
 8012a02:	1cc4      	adds	r4, r0, #3
 8012a04:	f024 0403 	bic.w	r4, r4, #3
 8012a08:	42a0      	cmp	r0, r4
 8012a0a:	d0f8      	beq.n	80129fe <sbrk_aligned+0x22>
 8012a0c:	1a21      	subs	r1, r4, r0
 8012a0e:	4628      	mov	r0, r5
 8012a10:	f000 fc92 	bl	8013338 <_sbrk_r>
 8012a14:	3001      	adds	r0, #1
 8012a16:	d1f2      	bne.n	80129fe <sbrk_aligned+0x22>
 8012a18:	e7ef      	b.n	80129fa <sbrk_aligned+0x1e>
 8012a1a:	bf00      	nop
 8012a1c:	20004350 	.word	0x20004350

08012a20 <_malloc_r>:
 8012a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a24:	1ccd      	adds	r5, r1, #3
 8012a26:	f025 0503 	bic.w	r5, r5, #3
 8012a2a:	3508      	adds	r5, #8
 8012a2c:	2d0c      	cmp	r5, #12
 8012a2e:	bf38      	it	cc
 8012a30:	250c      	movcc	r5, #12
 8012a32:	2d00      	cmp	r5, #0
 8012a34:	4606      	mov	r6, r0
 8012a36:	db01      	blt.n	8012a3c <_malloc_r+0x1c>
 8012a38:	42a9      	cmp	r1, r5
 8012a3a:	d904      	bls.n	8012a46 <_malloc_r+0x26>
 8012a3c:	230c      	movs	r3, #12
 8012a3e:	6033      	str	r3, [r6, #0]
 8012a40:	2000      	movs	r0, #0
 8012a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012b1c <_malloc_r+0xfc>
 8012a4a:	f000 f869 	bl	8012b20 <__malloc_lock>
 8012a4e:	f8d8 3000 	ldr.w	r3, [r8]
 8012a52:	461c      	mov	r4, r3
 8012a54:	bb44      	cbnz	r4, 8012aa8 <_malloc_r+0x88>
 8012a56:	4629      	mov	r1, r5
 8012a58:	4630      	mov	r0, r6
 8012a5a:	f7ff ffbf 	bl	80129dc <sbrk_aligned>
 8012a5e:	1c43      	adds	r3, r0, #1
 8012a60:	4604      	mov	r4, r0
 8012a62:	d158      	bne.n	8012b16 <_malloc_r+0xf6>
 8012a64:	f8d8 4000 	ldr.w	r4, [r8]
 8012a68:	4627      	mov	r7, r4
 8012a6a:	2f00      	cmp	r7, #0
 8012a6c:	d143      	bne.n	8012af6 <_malloc_r+0xd6>
 8012a6e:	2c00      	cmp	r4, #0
 8012a70:	d04b      	beq.n	8012b0a <_malloc_r+0xea>
 8012a72:	6823      	ldr	r3, [r4, #0]
 8012a74:	4639      	mov	r1, r7
 8012a76:	4630      	mov	r0, r6
 8012a78:	eb04 0903 	add.w	r9, r4, r3
 8012a7c:	f000 fc5c 	bl	8013338 <_sbrk_r>
 8012a80:	4581      	cmp	r9, r0
 8012a82:	d142      	bne.n	8012b0a <_malloc_r+0xea>
 8012a84:	6821      	ldr	r1, [r4, #0]
 8012a86:	1a6d      	subs	r5, r5, r1
 8012a88:	4629      	mov	r1, r5
 8012a8a:	4630      	mov	r0, r6
 8012a8c:	f7ff ffa6 	bl	80129dc <sbrk_aligned>
 8012a90:	3001      	adds	r0, #1
 8012a92:	d03a      	beq.n	8012b0a <_malloc_r+0xea>
 8012a94:	6823      	ldr	r3, [r4, #0]
 8012a96:	442b      	add	r3, r5
 8012a98:	6023      	str	r3, [r4, #0]
 8012a9a:	f8d8 3000 	ldr.w	r3, [r8]
 8012a9e:	685a      	ldr	r2, [r3, #4]
 8012aa0:	bb62      	cbnz	r2, 8012afc <_malloc_r+0xdc>
 8012aa2:	f8c8 7000 	str.w	r7, [r8]
 8012aa6:	e00f      	b.n	8012ac8 <_malloc_r+0xa8>
 8012aa8:	6822      	ldr	r2, [r4, #0]
 8012aaa:	1b52      	subs	r2, r2, r5
 8012aac:	d420      	bmi.n	8012af0 <_malloc_r+0xd0>
 8012aae:	2a0b      	cmp	r2, #11
 8012ab0:	d917      	bls.n	8012ae2 <_malloc_r+0xc2>
 8012ab2:	1961      	adds	r1, r4, r5
 8012ab4:	42a3      	cmp	r3, r4
 8012ab6:	6025      	str	r5, [r4, #0]
 8012ab8:	bf18      	it	ne
 8012aba:	6059      	strne	r1, [r3, #4]
 8012abc:	6863      	ldr	r3, [r4, #4]
 8012abe:	bf08      	it	eq
 8012ac0:	f8c8 1000 	streq.w	r1, [r8]
 8012ac4:	5162      	str	r2, [r4, r5]
 8012ac6:	604b      	str	r3, [r1, #4]
 8012ac8:	4630      	mov	r0, r6
 8012aca:	f000 f82f 	bl	8012b2c <__malloc_unlock>
 8012ace:	f104 000b 	add.w	r0, r4, #11
 8012ad2:	1d23      	adds	r3, r4, #4
 8012ad4:	f020 0007 	bic.w	r0, r0, #7
 8012ad8:	1ac2      	subs	r2, r0, r3
 8012ada:	bf1c      	itt	ne
 8012adc:	1a1b      	subne	r3, r3, r0
 8012ade:	50a3      	strne	r3, [r4, r2]
 8012ae0:	e7af      	b.n	8012a42 <_malloc_r+0x22>
 8012ae2:	6862      	ldr	r2, [r4, #4]
 8012ae4:	42a3      	cmp	r3, r4
 8012ae6:	bf0c      	ite	eq
 8012ae8:	f8c8 2000 	streq.w	r2, [r8]
 8012aec:	605a      	strne	r2, [r3, #4]
 8012aee:	e7eb      	b.n	8012ac8 <_malloc_r+0xa8>
 8012af0:	4623      	mov	r3, r4
 8012af2:	6864      	ldr	r4, [r4, #4]
 8012af4:	e7ae      	b.n	8012a54 <_malloc_r+0x34>
 8012af6:	463c      	mov	r4, r7
 8012af8:	687f      	ldr	r7, [r7, #4]
 8012afa:	e7b6      	b.n	8012a6a <_malloc_r+0x4a>
 8012afc:	461a      	mov	r2, r3
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	42a3      	cmp	r3, r4
 8012b02:	d1fb      	bne.n	8012afc <_malloc_r+0xdc>
 8012b04:	2300      	movs	r3, #0
 8012b06:	6053      	str	r3, [r2, #4]
 8012b08:	e7de      	b.n	8012ac8 <_malloc_r+0xa8>
 8012b0a:	230c      	movs	r3, #12
 8012b0c:	6033      	str	r3, [r6, #0]
 8012b0e:	4630      	mov	r0, r6
 8012b10:	f000 f80c 	bl	8012b2c <__malloc_unlock>
 8012b14:	e794      	b.n	8012a40 <_malloc_r+0x20>
 8012b16:	6005      	str	r5, [r0, #0]
 8012b18:	e7d6      	b.n	8012ac8 <_malloc_r+0xa8>
 8012b1a:	bf00      	nop
 8012b1c:	20004354 	.word	0x20004354

08012b20 <__malloc_lock>:
 8012b20:	4801      	ldr	r0, [pc, #4]	@ (8012b28 <__malloc_lock+0x8>)
 8012b22:	f7ff bef8 	b.w	8012916 <__retarget_lock_acquire_recursive>
 8012b26:	bf00      	nop
 8012b28:	2000434c 	.word	0x2000434c

08012b2c <__malloc_unlock>:
 8012b2c:	4801      	ldr	r0, [pc, #4]	@ (8012b34 <__malloc_unlock+0x8>)
 8012b2e:	f7ff bef3 	b.w	8012918 <__retarget_lock_release_recursive>
 8012b32:	bf00      	nop
 8012b34:	2000434c 	.word	0x2000434c

08012b38 <__sfputc_r>:
 8012b38:	6893      	ldr	r3, [r2, #8]
 8012b3a:	3b01      	subs	r3, #1
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	b410      	push	{r4}
 8012b40:	6093      	str	r3, [r2, #8]
 8012b42:	da08      	bge.n	8012b56 <__sfputc_r+0x1e>
 8012b44:	6994      	ldr	r4, [r2, #24]
 8012b46:	42a3      	cmp	r3, r4
 8012b48:	db01      	blt.n	8012b4e <__sfputc_r+0x16>
 8012b4a:	290a      	cmp	r1, #10
 8012b4c:	d103      	bne.n	8012b56 <__sfputc_r+0x1e>
 8012b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b52:	f7ff bd7c 	b.w	801264e <__swbuf_r>
 8012b56:	6813      	ldr	r3, [r2, #0]
 8012b58:	1c58      	adds	r0, r3, #1
 8012b5a:	6010      	str	r0, [r2, #0]
 8012b5c:	7019      	strb	r1, [r3, #0]
 8012b5e:	4608      	mov	r0, r1
 8012b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b64:	4770      	bx	lr

08012b66 <__sfputs_r>:
 8012b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b68:	4606      	mov	r6, r0
 8012b6a:	460f      	mov	r7, r1
 8012b6c:	4614      	mov	r4, r2
 8012b6e:	18d5      	adds	r5, r2, r3
 8012b70:	42ac      	cmp	r4, r5
 8012b72:	d101      	bne.n	8012b78 <__sfputs_r+0x12>
 8012b74:	2000      	movs	r0, #0
 8012b76:	e007      	b.n	8012b88 <__sfputs_r+0x22>
 8012b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b7c:	463a      	mov	r2, r7
 8012b7e:	4630      	mov	r0, r6
 8012b80:	f7ff ffda 	bl	8012b38 <__sfputc_r>
 8012b84:	1c43      	adds	r3, r0, #1
 8012b86:	d1f3      	bne.n	8012b70 <__sfputs_r+0xa>
 8012b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b8c <_vfiprintf_r>:
 8012b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b90:	460d      	mov	r5, r1
 8012b92:	b09d      	sub	sp, #116	@ 0x74
 8012b94:	4614      	mov	r4, r2
 8012b96:	4698      	mov	r8, r3
 8012b98:	4606      	mov	r6, r0
 8012b9a:	b118      	cbz	r0, 8012ba4 <_vfiprintf_r+0x18>
 8012b9c:	6a03      	ldr	r3, [r0, #32]
 8012b9e:	b90b      	cbnz	r3, 8012ba4 <_vfiprintf_r+0x18>
 8012ba0:	f7ff fb36 	bl	8012210 <__sinit>
 8012ba4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ba6:	07d9      	lsls	r1, r3, #31
 8012ba8:	d405      	bmi.n	8012bb6 <_vfiprintf_r+0x2a>
 8012baa:	89ab      	ldrh	r3, [r5, #12]
 8012bac:	059a      	lsls	r2, r3, #22
 8012bae:	d402      	bmi.n	8012bb6 <_vfiprintf_r+0x2a>
 8012bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012bb2:	f7ff feb0 	bl	8012916 <__retarget_lock_acquire_recursive>
 8012bb6:	89ab      	ldrh	r3, [r5, #12]
 8012bb8:	071b      	lsls	r3, r3, #28
 8012bba:	d501      	bpl.n	8012bc0 <_vfiprintf_r+0x34>
 8012bbc:	692b      	ldr	r3, [r5, #16]
 8012bbe:	b99b      	cbnz	r3, 8012be8 <_vfiprintf_r+0x5c>
 8012bc0:	4629      	mov	r1, r5
 8012bc2:	4630      	mov	r0, r6
 8012bc4:	f7ff fd82 	bl	80126cc <__swsetup_r>
 8012bc8:	b170      	cbz	r0, 8012be8 <_vfiprintf_r+0x5c>
 8012bca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012bcc:	07dc      	lsls	r4, r3, #31
 8012bce:	d504      	bpl.n	8012bda <_vfiprintf_r+0x4e>
 8012bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd4:	b01d      	add	sp, #116	@ 0x74
 8012bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bda:	89ab      	ldrh	r3, [r5, #12]
 8012bdc:	0598      	lsls	r0, r3, #22
 8012bde:	d4f7      	bmi.n	8012bd0 <_vfiprintf_r+0x44>
 8012be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012be2:	f7ff fe99 	bl	8012918 <__retarget_lock_release_recursive>
 8012be6:	e7f3      	b.n	8012bd0 <_vfiprintf_r+0x44>
 8012be8:	2300      	movs	r3, #0
 8012bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bec:	2320      	movs	r3, #32
 8012bee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012bf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bf6:	2330      	movs	r3, #48	@ 0x30
 8012bf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012da8 <_vfiprintf_r+0x21c>
 8012bfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012c00:	f04f 0901 	mov.w	r9, #1
 8012c04:	4623      	mov	r3, r4
 8012c06:	469a      	mov	sl, r3
 8012c08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012c0c:	b10a      	cbz	r2, 8012c12 <_vfiprintf_r+0x86>
 8012c0e:	2a25      	cmp	r2, #37	@ 0x25
 8012c10:	d1f9      	bne.n	8012c06 <_vfiprintf_r+0x7a>
 8012c12:	ebba 0b04 	subs.w	fp, sl, r4
 8012c16:	d00b      	beq.n	8012c30 <_vfiprintf_r+0xa4>
 8012c18:	465b      	mov	r3, fp
 8012c1a:	4622      	mov	r2, r4
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	4630      	mov	r0, r6
 8012c20:	f7ff ffa1 	bl	8012b66 <__sfputs_r>
 8012c24:	3001      	adds	r0, #1
 8012c26:	f000 80a7 	beq.w	8012d78 <_vfiprintf_r+0x1ec>
 8012c2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c2c:	445a      	add	r2, fp
 8012c2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012c30:	f89a 3000 	ldrb.w	r3, [sl]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	f000 809f 	beq.w	8012d78 <_vfiprintf_r+0x1ec>
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8012c40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c44:	f10a 0a01 	add.w	sl, sl, #1
 8012c48:	9304      	str	r3, [sp, #16]
 8012c4a:	9307      	str	r3, [sp, #28]
 8012c4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c50:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c52:	4654      	mov	r4, sl
 8012c54:	2205      	movs	r2, #5
 8012c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c5a:	4853      	ldr	r0, [pc, #332]	@ (8012da8 <_vfiprintf_r+0x21c>)
 8012c5c:	f7f9 f9f0 	bl	800c040 <memchr>
 8012c60:	9a04      	ldr	r2, [sp, #16]
 8012c62:	b9d8      	cbnz	r0, 8012c9c <_vfiprintf_r+0x110>
 8012c64:	06d1      	lsls	r1, r2, #27
 8012c66:	bf44      	itt	mi
 8012c68:	2320      	movmi	r3, #32
 8012c6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c6e:	0713      	lsls	r3, r2, #28
 8012c70:	bf44      	itt	mi
 8012c72:	232b      	movmi	r3, #43	@ 0x2b
 8012c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c78:	f89a 3000 	ldrb.w	r3, [sl]
 8012c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c7e:	d015      	beq.n	8012cac <_vfiprintf_r+0x120>
 8012c80:	9a07      	ldr	r2, [sp, #28]
 8012c82:	4654      	mov	r4, sl
 8012c84:	2000      	movs	r0, #0
 8012c86:	f04f 0c0a 	mov.w	ip, #10
 8012c8a:	4621      	mov	r1, r4
 8012c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c90:	3b30      	subs	r3, #48	@ 0x30
 8012c92:	2b09      	cmp	r3, #9
 8012c94:	d94b      	bls.n	8012d2e <_vfiprintf_r+0x1a2>
 8012c96:	b1b0      	cbz	r0, 8012cc6 <_vfiprintf_r+0x13a>
 8012c98:	9207      	str	r2, [sp, #28]
 8012c9a:	e014      	b.n	8012cc6 <_vfiprintf_r+0x13a>
 8012c9c:	eba0 0308 	sub.w	r3, r0, r8
 8012ca0:	fa09 f303 	lsl.w	r3, r9, r3
 8012ca4:	4313      	orrs	r3, r2
 8012ca6:	9304      	str	r3, [sp, #16]
 8012ca8:	46a2      	mov	sl, r4
 8012caa:	e7d2      	b.n	8012c52 <_vfiprintf_r+0xc6>
 8012cac:	9b03      	ldr	r3, [sp, #12]
 8012cae:	1d19      	adds	r1, r3, #4
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	9103      	str	r1, [sp, #12]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	bfbb      	ittet	lt
 8012cb8:	425b      	neglt	r3, r3
 8012cba:	f042 0202 	orrlt.w	r2, r2, #2
 8012cbe:	9307      	strge	r3, [sp, #28]
 8012cc0:	9307      	strlt	r3, [sp, #28]
 8012cc2:	bfb8      	it	lt
 8012cc4:	9204      	strlt	r2, [sp, #16]
 8012cc6:	7823      	ldrb	r3, [r4, #0]
 8012cc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8012cca:	d10a      	bne.n	8012ce2 <_vfiprintf_r+0x156>
 8012ccc:	7863      	ldrb	r3, [r4, #1]
 8012cce:	2b2a      	cmp	r3, #42	@ 0x2a
 8012cd0:	d132      	bne.n	8012d38 <_vfiprintf_r+0x1ac>
 8012cd2:	9b03      	ldr	r3, [sp, #12]
 8012cd4:	1d1a      	adds	r2, r3, #4
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	9203      	str	r2, [sp, #12]
 8012cda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012cde:	3402      	adds	r4, #2
 8012ce0:	9305      	str	r3, [sp, #20]
 8012ce2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012db8 <_vfiprintf_r+0x22c>
 8012ce6:	7821      	ldrb	r1, [r4, #0]
 8012ce8:	2203      	movs	r2, #3
 8012cea:	4650      	mov	r0, sl
 8012cec:	f7f9 f9a8 	bl	800c040 <memchr>
 8012cf0:	b138      	cbz	r0, 8012d02 <_vfiprintf_r+0x176>
 8012cf2:	9b04      	ldr	r3, [sp, #16]
 8012cf4:	eba0 000a 	sub.w	r0, r0, sl
 8012cf8:	2240      	movs	r2, #64	@ 0x40
 8012cfa:	4082      	lsls	r2, r0
 8012cfc:	4313      	orrs	r3, r2
 8012cfe:	3401      	adds	r4, #1
 8012d00:	9304      	str	r3, [sp, #16]
 8012d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d06:	4829      	ldr	r0, [pc, #164]	@ (8012dac <_vfiprintf_r+0x220>)
 8012d08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012d0c:	2206      	movs	r2, #6
 8012d0e:	f7f9 f997 	bl	800c040 <memchr>
 8012d12:	2800      	cmp	r0, #0
 8012d14:	d03f      	beq.n	8012d96 <_vfiprintf_r+0x20a>
 8012d16:	4b26      	ldr	r3, [pc, #152]	@ (8012db0 <_vfiprintf_r+0x224>)
 8012d18:	bb1b      	cbnz	r3, 8012d62 <_vfiprintf_r+0x1d6>
 8012d1a:	9b03      	ldr	r3, [sp, #12]
 8012d1c:	3307      	adds	r3, #7
 8012d1e:	f023 0307 	bic.w	r3, r3, #7
 8012d22:	3308      	adds	r3, #8
 8012d24:	9303      	str	r3, [sp, #12]
 8012d26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012d28:	443b      	add	r3, r7
 8012d2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d2c:	e76a      	b.n	8012c04 <_vfiprintf_r+0x78>
 8012d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012d32:	460c      	mov	r4, r1
 8012d34:	2001      	movs	r0, #1
 8012d36:	e7a8      	b.n	8012c8a <_vfiprintf_r+0xfe>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	3401      	adds	r4, #1
 8012d3c:	9305      	str	r3, [sp, #20]
 8012d3e:	4619      	mov	r1, r3
 8012d40:	f04f 0c0a 	mov.w	ip, #10
 8012d44:	4620      	mov	r0, r4
 8012d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d4a:	3a30      	subs	r2, #48	@ 0x30
 8012d4c:	2a09      	cmp	r2, #9
 8012d4e:	d903      	bls.n	8012d58 <_vfiprintf_r+0x1cc>
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d0c6      	beq.n	8012ce2 <_vfiprintf_r+0x156>
 8012d54:	9105      	str	r1, [sp, #20]
 8012d56:	e7c4      	b.n	8012ce2 <_vfiprintf_r+0x156>
 8012d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	2301      	movs	r3, #1
 8012d60:	e7f0      	b.n	8012d44 <_vfiprintf_r+0x1b8>
 8012d62:	ab03      	add	r3, sp, #12
 8012d64:	9300      	str	r3, [sp, #0]
 8012d66:	462a      	mov	r2, r5
 8012d68:	4b12      	ldr	r3, [pc, #72]	@ (8012db4 <_vfiprintf_r+0x228>)
 8012d6a:	a904      	add	r1, sp, #16
 8012d6c:	4630      	mov	r0, r6
 8012d6e:	f3af 8000 	nop.w
 8012d72:	4607      	mov	r7, r0
 8012d74:	1c78      	adds	r0, r7, #1
 8012d76:	d1d6      	bne.n	8012d26 <_vfiprintf_r+0x19a>
 8012d78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d7a:	07d9      	lsls	r1, r3, #31
 8012d7c:	d405      	bmi.n	8012d8a <_vfiprintf_r+0x1fe>
 8012d7e:	89ab      	ldrh	r3, [r5, #12]
 8012d80:	059a      	lsls	r2, r3, #22
 8012d82:	d402      	bmi.n	8012d8a <_vfiprintf_r+0x1fe>
 8012d84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d86:	f7ff fdc7 	bl	8012918 <__retarget_lock_release_recursive>
 8012d8a:	89ab      	ldrh	r3, [r5, #12]
 8012d8c:	065b      	lsls	r3, r3, #25
 8012d8e:	f53f af1f 	bmi.w	8012bd0 <_vfiprintf_r+0x44>
 8012d92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d94:	e71e      	b.n	8012bd4 <_vfiprintf_r+0x48>
 8012d96:	ab03      	add	r3, sp, #12
 8012d98:	9300      	str	r3, [sp, #0]
 8012d9a:	462a      	mov	r2, r5
 8012d9c:	4b05      	ldr	r3, [pc, #20]	@ (8012db4 <_vfiprintf_r+0x228>)
 8012d9e:	a904      	add	r1, sp, #16
 8012da0:	4630      	mov	r0, r6
 8012da2:	f000 f879 	bl	8012e98 <_printf_i>
 8012da6:	e7e4      	b.n	8012d72 <_vfiprintf_r+0x1e6>
 8012da8:	080137e0 	.word	0x080137e0
 8012dac:	080137ea 	.word	0x080137ea
 8012db0:	00000000 	.word	0x00000000
 8012db4:	08012b67 	.word	0x08012b67
 8012db8:	080137e6 	.word	0x080137e6

08012dbc <_printf_common>:
 8012dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc0:	4616      	mov	r6, r2
 8012dc2:	4698      	mov	r8, r3
 8012dc4:	688a      	ldr	r2, [r1, #8]
 8012dc6:	690b      	ldr	r3, [r1, #16]
 8012dc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	bfb8      	it	lt
 8012dd0:	4613      	movlt	r3, r2
 8012dd2:	6033      	str	r3, [r6, #0]
 8012dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012dd8:	4607      	mov	r7, r0
 8012dda:	460c      	mov	r4, r1
 8012ddc:	b10a      	cbz	r2, 8012de2 <_printf_common+0x26>
 8012dde:	3301      	adds	r3, #1
 8012de0:	6033      	str	r3, [r6, #0]
 8012de2:	6823      	ldr	r3, [r4, #0]
 8012de4:	0699      	lsls	r1, r3, #26
 8012de6:	bf42      	ittt	mi
 8012de8:	6833      	ldrmi	r3, [r6, #0]
 8012dea:	3302      	addmi	r3, #2
 8012dec:	6033      	strmi	r3, [r6, #0]
 8012dee:	6825      	ldr	r5, [r4, #0]
 8012df0:	f015 0506 	ands.w	r5, r5, #6
 8012df4:	d106      	bne.n	8012e04 <_printf_common+0x48>
 8012df6:	f104 0a19 	add.w	sl, r4, #25
 8012dfa:	68e3      	ldr	r3, [r4, #12]
 8012dfc:	6832      	ldr	r2, [r6, #0]
 8012dfe:	1a9b      	subs	r3, r3, r2
 8012e00:	42ab      	cmp	r3, r5
 8012e02:	dc26      	bgt.n	8012e52 <_printf_common+0x96>
 8012e04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012e08:	6822      	ldr	r2, [r4, #0]
 8012e0a:	3b00      	subs	r3, #0
 8012e0c:	bf18      	it	ne
 8012e0e:	2301      	movne	r3, #1
 8012e10:	0692      	lsls	r2, r2, #26
 8012e12:	d42b      	bmi.n	8012e6c <_printf_common+0xb0>
 8012e14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012e18:	4641      	mov	r1, r8
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	47c8      	blx	r9
 8012e1e:	3001      	adds	r0, #1
 8012e20:	d01e      	beq.n	8012e60 <_printf_common+0xa4>
 8012e22:	6823      	ldr	r3, [r4, #0]
 8012e24:	6922      	ldr	r2, [r4, #16]
 8012e26:	f003 0306 	and.w	r3, r3, #6
 8012e2a:	2b04      	cmp	r3, #4
 8012e2c:	bf02      	ittt	eq
 8012e2e:	68e5      	ldreq	r5, [r4, #12]
 8012e30:	6833      	ldreq	r3, [r6, #0]
 8012e32:	1aed      	subeq	r5, r5, r3
 8012e34:	68a3      	ldr	r3, [r4, #8]
 8012e36:	bf0c      	ite	eq
 8012e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e3c:	2500      	movne	r5, #0
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	bfc4      	itt	gt
 8012e42:	1a9b      	subgt	r3, r3, r2
 8012e44:	18ed      	addgt	r5, r5, r3
 8012e46:	2600      	movs	r6, #0
 8012e48:	341a      	adds	r4, #26
 8012e4a:	42b5      	cmp	r5, r6
 8012e4c:	d11a      	bne.n	8012e84 <_printf_common+0xc8>
 8012e4e:	2000      	movs	r0, #0
 8012e50:	e008      	b.n	8012e64 <_printf_common+0xa8>
 8012e52:	2301      	movs	r3, #1
 8012e54:	4652      	mov	r2, sl
 8012e56:	4641      	mov	r1, r8
 8012e58:	4638      	mov	r0, r7
 8012e5a:	47c8      	blx	r9
 8012e5c:	3001      	adds	r0, #1
 8012e5e:	d103      	bne.n	8012e68 <_printf_common+0xac>
 8012e60:	f04f 30ff 	mov.w	r0, #4294967295
 8012e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e68:	3501      	adds	r5, #1
 8012e6a:	e7c6      	b.n	8012dfa <_printf_common+0x3e>
 8012e6c:	18e1      	adds	r1, r4, r3
 8012e6e:	1c5a      	adds	r2, r3, #1
 8012e70:	2030      	movs	r0, #48	@ 0x30
 8012e72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012e76:	4422      	add	r2, r4
 8012e78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012e7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012e80:	3302      	adds	r3, #2
 8012e82:	e7c7      	b.n	8012e14 <_printf_common+0x58>
 8012e84:	2301      	movs	r3, #1
 8012e86:	4622      	mov	r2, r4
 8012e88:	4641      	mov	r1, r8
 8012e8a:	4638      	mov	r0, r7
 8012e8c:	47c8      	blx	r9
 8012e8e:	3001      	adds	r0, #1
 8012e90:	d0e6      	beq.n	8012e60 <_printf_common+0xa4>
 8012e92:	3601      	adds	r6, #1
 8012e94:	e7d9      	b.n	8012e4a <_printf_common+0x8e>
	...

08012e98 <_printf_i>:
 8012e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e9c:	7e0f      	ldrb	r7, [r1, #24]
 8012e9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012ea0:	2f78      	cmp	r7, #120	@ 0x78
 8012ea2:	4691      	mov	r9, r2
 8012ea4:	4680      	mov	r8, r0
 8012ea6:	460c      	mov	r4, r1
 8012ea8:	469a      	mov	sl, r3
 8012eaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012eae:	d807      	bhi.n	8012ec0 <_printf_i+0x28>
 8012eb0:	2f62      	cmp	r7, #98	@ 0x62
 8012eb2:	d80a      	bhi.n	8012eca <_printf_i+0x32>
 8012eb4:	2f00      	cmp	r7, #0
 8012eb6:	f000 80d2 	beq.w	801305e <_printf_i+0x1c6>
 8012eba:	2f58      	cmp	r7, #88	@ 0x58
 8012ebc:	f000 80b9 	beq.w	8013032 <_printf_i+0x19a>
 8012ec0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012ec4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012ec8:	e03a      	b.n	8012f40 <_printf_i+0xa8>
 8012eca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012ece:	2b15      	cmp	r3, #21
 8012ed0:	d8f6      	bhi.n	8012ec0 <_printf_i+0x28>
 8012ed2:	a101      	add	r1, pc, #4	@ (adr r1, 8012ed8 <_printf_i+0x40>)
 8012ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ed8:	08012f31 	.word	0x08012f31
 8012edc:	08012f45 	.word	0x08012f45
 8012ee0:	08012ec1 	.word	0x08012ec1
 8012ee4:	08012ec1 	.word	0x08012ec1
 8012ee8:	08012ec1 	.word	0x08012ec1
 8012eec:	08012ec1 	.word	0x08012ec1
 8012ef0:	08012f45 	.word	0x08012f45
 8012ef4:	08012ec1 	.word	0x08012ec1
 8012ef8:	08012ec1 	.word	0x08012ec1
 8012efc:	08012ec1 	.word	0x08012ec1
 8012f00:	08012ec1 	.word	0x08012ec1
 8012f04:	08013045 	.word	0x08013045
 8012f08:	08012f6f 	.word	0x08012f6f
 8012f0c:	08012fff 	.word	0x08012fff
 8012f10:	08012ec1 	.word	0x08012ec1
 8012f14:	08012ec1 	.word	0x08012ec1
 8012f18:	08013067 	.word	0x08013067
 8012f1c:	08012ec1 	.word	0x08012ec1
 8012f20:	08012f6f 	.word	0x08012f6f
 8012f24:	08012ec1 	.word	0x08012ec1
 8012f28:	08012ec1 	.word	0x08012ec1
 8012f2c:	08013007 	.word	0x08013007
 8012f30:	6833      	ldr	r3, [r6, #0]
 8012f32:	1d1a      	adds	r2, r3, #4
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	6032      	str	r2, [r6, #0]
 8012f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012f40:	2301      	movs	r3, #1
 8012f42:	e09d      	b.n	8013080 <_printf_i+0x1e8>
 8012f44:	6833      	ldr	r3, [r6, #0]
 8012f46:	6820      	ldr	r0, [r4, #0]
 8012f48:	1d19      	adds	r1, r3, #4
 8012f4a:	6031      	str	r1, [r6, #0]
 8012f4c:	0606      	lsls	r6, r0, #24
 8012f4e:	d501      	bpl.n	8012f54 <_printf_i+0xbc>
 8012f50:	681d      	ldr	r5, [r3, #0]
 8012f52:	e003      	b.n	8012f5c <_printf_i+0xc4>
 8012f54:	0645      	lsls	r5, r0, #25
 8012f56:	d5fb      	bpl.n	8012f50 <_printf_i+0xb8>
 8012f58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012f5c:	2d00      	cmp	r5, #0
 8012f5e:	da03      	bge.n	8012f68 <_printf_i+0xd0>
 8012f60:	232d      	movs	r3, #45	@ 0x2d
 8012f62:	426d      	negs	r5, r5
 8012f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f68:	4859      	ldr	r0, [pc, #356]	@ (80130d0 <_printf_i+0x238>)
 8012f6a:	230a      	movs	r3, #10
 8012f6c:	e011      	b.n	8012f92 <_printf_i+0xfa>
 8012f6e:	6821      	ldr	r1, [r4, #0]
 8012f70:	6833      	ldr	r3, [r6, #0]
 8012f72:	0608      	lsls	r0, r1, #24
 8012f74:	f853 5b04 	ldr.w	r5, [r3], #4
 8012f78:	d402      	bmi.n	8012f80 <_printf_i+0xe8>
 8012f7a:	0649      	lsls	r1, r1, #25
 8012f7c:	bf48      	it	mi
 8012f7e:	b2ad      	uxthmi	r5, r5
 8012f80:	2f6f      	cmp	r7, #111	@ 0x6f
 8012f82:	4853      	ldr	r0, [pc, #332]	@ (80130d0 <_printf_i+0x238>)
 8012f84:	6033      	str	r3, [r6, #0]
 8012f86:	bf14      	ite	ne
 8012f88:	230a      	movne	r3, #10
 8012f8a:	2308      	moveq	r3, #8
 8012f8c:	2100      	movs	r1, #0
 8012f8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012f92:	6866      	ldr	r6, [r4, #4]
 8012f94:	60a6      	str	r6, [r4, #8]
 8012f96:	2e00      	cmp	r6, #0
 8012f98:	bfa2      	ittt	ge
 8012f9a:	6821      	ldrge	r1, [r4, #0]
 8012f9c:	f021 0104 	bicge.w	r1, r1, #4
 8012fa0:	6021      	strge	r1, [r4, #0]
 8012fa2:	b90d      	cbnz	r5, 8012fa8 <_printf_i+0x110>
 8012fa4:	2e00      	cmp	r6, #0
 8012fa6:	d04b      	beq.n	8013040 <_printf_i+0x1a8>
 8012fa8:	4616      	mov	r6, r2
 8012faa:	fbb5 f1f3 	udiv	r1, r5, r3
 8012fae:	fb03 5711 	mls	r7, r3, r1, r5
 8012fb2:	5dc7      	ldrb	r7, [r0, r7]
 8012fb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012fb8:	462f      	mov	r7, r5
 8012fba:	42bb      	cmp	r3, r7
 8012fbc:	460d      	mov	r5, r1
 8012fbe:	d9f4      	bls.n	8012faa <_printf_i+0x112>
 8012fc0:	2b08      	cmp	r3, #8
 8012fc2:	d10b      	bne.n	8012fdc <_printf_i+0x144>
 8012fc4:	6823      	ldr	r3, [r4, #0]
 8012fc6:	07df      	lsls	r7, r3, #31
 8012fc8:	d508      	bpl.n	8012fdc <_printf_i+0x144>
 8012fca:	6923      	ldr	r3, [r4, #16]
 8012fcc:	6861      	ldr	r1, [r4, #4]
 8012fce:	4299      	cmp	r1, r3
 8012fd0:	bfde      	ittt	le
 8012fd2:	2330      	movle	r3, #48	@ 0x30
 8012fd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012fd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012fdc:	1b92      	subs	r2, r2, r6
 8012fde:	6122      	str	r2, [r4, #16]
 8012fe0:	f8cd a000 	str.w	sl, [sp]
 8012fe4:	464b      	mov	r3, r9
 8012fe6:	aa03      	add	r2, sp, #12
 8012fe8:	4621      	mov	r1, r4
 8012fea:	4640      	mov	r0, r8
 8012fec:	f7ff fee6 	bl	8012dbc <_printf_common>
 8012ff0:	3001      	adds	r0, #1
 8012ff2:	d14a      	bne.n	801308a <_printf_i+0x1f2>
 8012ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ff8:	b004      	add	sp, #16
 8012ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ffe:	6823      	ldr	r3, [r4, #0]
 8013000:	f043 0320 	orr.w	r3, r3, #32
 8013004:	6023      	str	r3, [r4, #0]
 8013006:	4833      	ldr	r0, [pc, #204]	@ (80130d4 <_printf_i+0x23c>)
 8013008:	2778      	movs	r7, #120	@ 0x78
 801300a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801300e:	6823      	ldr	r3, [r4, #0]
 8013010:	6831      	ldr	r1, [r6, #0]
 8013012:	061f      	lsls	r7, r3, #24
 8013014:	f851 5b04 	ldr.w	r5, [r1], #4
 8013018:	d402      	bmi.n	8013020 <_printf_i+0x188>
 801301a:	065f      	lsls	r7, r3, #25
 801301c:	bf48      	it	mi
 801301e:	b2ad      	uxthmi	r5, r5
 8013020:	6031      	str	r1, [r6, #0]
 8013022:	07d9      	lsls	r1, r3, #31
 8013024:	bf44      	itt	mi
 8013026:	f043 0320 	orrmi.w	r3, r3, #32
 801302a:	6023      	strmi	r3, [r4, #0]
 801302c:	b11d      	cbz	r5, 8013036 <_printf_i+0x19e>
 801302e:	2310      	movs	r3, #16
 8013030:	e7ac      	b.n	8012f8c <_printf_i+0xf4>
 8013032:	4827      	ldr	r0, [pc, #156]	@ (80130d0 <_printf_i+0x238>)
 8013034:	e7e9      	b.n	801300a <_printf_i+0x172>
 8013036:	6823      	ldr	r3, [r4, #0]
 8013038:	f023 0320 	bic.w	r3, r3, #32
 801303c:	6023      	str	r3, [r4, #0]
 801303e:	e7f6      	b.n	801302e <_printf_i+0x196>
 8013040:	4616      	mov	r6, r2
 8013042:	e7bd      	b.n	8012fc0 <_printf_i+0x128>
 8013044:	6833      	ldr	r3, [r6, #0]
 8013046:	6825      	ldr	r5, [r4, #0]
 8013048:	6961      	ldr	r1, [r4, #20]
 801304a:	1d18      	adds	r0, r3, #4
 801304c:	6030      	str	r0, [r6, #0]
 801304e:	062e      	lsls	r6, r5, #24
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	d501      	bpl.n	8013058 <_printf_i+0x1c0>
 8013054:	6019      	str	r1, [r3, #0]
 8013056:	e002      	b.n	801305e <_printf_i+0x1c6>
 8013058:	0668      	lsls	r0, r5, #25
 801305a:	d5fb      	bpl.n	8013054 <_printf_i+0x1bc>
 801305c:	8019      	strh	r1, [r3, #0]
 801305e:	2300      	movs	r3, #0
 8013060:	6123      	str	r3, [r4, #16]
 8013062:	4616      	mov	r6, r2
 8013064:	e7bc      	b.n	8012fe0 <_printf_i+0x148>
 8013066:	6833      	ldr	r3, [r6, #0]
 8013068:	1d1a      	adds	r2, r3, #4
 801306a:	6032      	str	r2, [r6, #0]
 801306c:	681e      	ldr	r6, [r3, #0]
 801306e:	6862      	ldr	r2, [r4, #4]
 8013070:	2100      	movs	r1, #0
 8013072:	4630      	mov	r0, r6
 8013074:	f7f8 ffe4 	bl	800c040 <memchr>
 8013078:	b108      	cbz	r0, 801307e <_printf_i+0x1e6>
 801307a:	1b80      	subs	r0, r0, r6
 801307c:	6060      	str	r0, [r4, #4]
 801307e:	6863      	ldr	r3, [r4, #4]
 8013080:	6123      	str	r3, [r4, #16]
 8013082:	2300      	movs	r3, #0
 8013084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013088:	e7aa      	b.n	8012fe0 <_printf_i+0x148>
 801308a:	6923      	ldr	r3, [r4, #16]
 801308c:	4632      	mov	r2, r6
 801308e:	4649      	mov	r1, r9
 8013090:	4640      	mov	r0, r8
 8013092:	47d0      	blx	sl
 8013094:	3001      	adds	r0, #1
 8013096:	d0ad      	beq.n	8012ff4 <_printf_i+0x15c>
 8013098:	6823      	ldr	r3, [r4, #0]
 801309a:	079b      	lsls	r3, r3, #30
 801309c:	d413      	bmi.n	80130c6 <_printf_i+0x22e>
 801309e:	68e0      	ldr	r0, [r4, #12]
 80130a0:	9b03      	ldr	r3, [sp, #12]
 80130a2:	4298      	cmp	r0, r3
 80130a4:	bfb8      	it	lt
 80130a6:	4618      	movlt	r0, r3
 80130a8:	e7a6      	b.n	8012ff8 <_printf_i+0x160>
 80130aa:	2301      	movs	r3, #1
 80130ac:	4632      	mov	r2, r6
 80130ae:	4649      	mov	r1, r9
 80130b0:	4640      	mov	r0, r8
 80130b2:	47d0      	blx	sl
 80130b4:	3001      	adds	r0, #1
 80130b6:	d09d      	beq.n	8012ff4 <_printf_i+0x15c>
 80130b8:	3501      	adds	r5, #1
 80130ba:	68e3      	ldr	r3, [r4, #12]
 80130bc:	9903      	ldr	r1, [sp, #12]
 80130be:	1a5b      	subs	r3, r3, r1
 80130c0:	42ab      	cmp	r3, r5
 80130c2:	dcf2      	bgt.n	80130aa <_printf_i+0x212>
 80130c4:	e7eb      	b.n	801309e <_printf_i+0x206>
 80130c6:	2500      	movs	r5, #0
 80130c8:	f104 0619 	add.w	r6, r4, #25
 80130cc:	e7f5      	b.n	80130ba <_printf_i+0x222>
 80130ce:	bf00      	nop
 80130d0:	080137f1 	.word	0x080137f1
 80130d4:	08013802 	.word	0x08013802

080130d8 <__sflush_r>:
 80130d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80130dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130e0:	0716      	lsls	r6, r2, #28
 80130e2:	4605      	mov	r5, r0
 80130e4:	460c      	mov	r4, r1
 80130e6:	d454      	bmi.n	8013192 <__sflush_r+0xba>
 80130e8:	684b      	ldr	r3, [r1, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	dc02      	bgt.n	80130f4 <__sflush_r+0x1c>
 80130ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	dd48      	ble.n	8013186 <__sflush_r+0xae>
 80130f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80130f6:	2e00      	cmp	r6, #0
 80130f8:	d045      	beq.n	8013186 <__sflush_r+0xae>
 80130fa:	2300      	movs	r3, #0
 80130fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013100:	682f      	ldr	r7, [r5, #0]
 8013102:	6a21      	ldr	r1, [r4, #32]
 8013104:	602b      	str	r3, [r5, #0]
 8013106:	d030      	beq.n	801316a <__sflush_r+0x92>
 8013108:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801310a:	89a3      	ldrh	r3, [r4, #12]
 801310c:	0759      	lsls	r1, r3, #29
 801310e:	d505      	bpl.n	801311c <__sflush_r+0x44>
 8013110:	6863      	ldr	r3, [r4, #4]
 8013112:	1ad2      	subs	r2, r2, r3
 8013114:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013116:	b10b      	cbz	r3, 801311c <__sflush_r+0x44>
 8013118:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801311a:	1ad2      	subs	r2, r2, r3
 801311c:	2300      	movs	r3, #0
 801311e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013120:	6a21      	ldr	r1, [r4, #32]
 8013122:	4628      	mov	r0, r5
 8013124:	47b0      	blx	r6
 8013126:	1c43      	adds	r3, r0, #1
 8013128:	89a3      	ldrh	r3, [r4, #12]
 801312a:	d106      	bne.n	801313a <__sflush_r+0x62>
 801312c:	6829      	ldr	r1, [r5, #0]
 801312e:	291d      	cmp	r1, #29
 8013130:	d82b      	bhi.n	801318a <__sflush_r+0xb2>
 8013132:	4a2a      	ldr	r2, [pc, #168]	@ (80131dc <__sflush_r+0x104>)
 8013134:	410a      	asrs	r2, r1
 8013136:	07d6      	lsls	r6, r2, #31
 8013138:	d427      	bmi.n	801318a <__sflush_r+0xb2>
 801313a:	2200      	movs	r2, #0
 801313c:	6062      	str	r2, [r4, #4]
 801313e:	04d9      	lsls	r1, r3, #19
 8013140:	6922      	ldr	r2, [r4, #16]
 8013142:	6022      	str	r2, [r4, #0]
 8013144:	d504      	bpl.n	8013150 <__sflush_r+0x78>
 8013146:	1c42      	adds	r2, r0, #1
 8013148:	d101      	bne.n	801314e <__sflush_r+0x76>
 801314a:	682b      	ldr	r3, [r5, #0]
 801314c:	b903      	cbnz	r3, 8013150 <__sflush_r+0x78>
 801314e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013150:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013152:	602f      	str	r7, [r5, #0]
 8013154:	b1b9      	cbz	r1, 8013186 <__sflush_r+0xae>
 8013156:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801315a:	4299      	cmp	r1, r3
 801315c:	d002      	beq.n	8013164 <__sflush_r+0x8c>
 801315e:	4628      	mov	r0, r5
 8013160:	f7ff fbea 	bl	8012938 <_free_r>
 8013164:	2300      	movs	r3, #0
 8013166:	6363      	str	r3, [r4, #52]	@ 0x34
 8013168:	e00d      	b.n	8013186 <__sflush_r+0xae>
 801316a:	2301      	movs	r3, #1
 801316c:	4628      	mov	r0, r5
 801316e:	47b0      	blx	r6
 8013170:	4602      	mov	r2, r0
 8013172:	1c50      	adds	r0, r2, #1
 8013174:	d1c9      	bne.n	801310a <__sflush_r+0x32>
 8013176:	682b      	ldr	r3, [r5, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d0c6      	beq.n	801310a <__sflush_r+0x32>
 801317c:	2b1d      	cmp	r3, #29
 801317e:	d001      	beq.n	8013184 <__sflush_r+0xac>
 8013180:	2b16      	cmp	r3, #22
 8013182:	d11e      	bne.n	80131c2 <__sflush_r+0xea>
 8013184:	602f      	str	r7, [r5, #0]
 8013186:	2000      	movs	r0, #0
 8013188:	e022      	b.n	80131d0 <__sflush_r+0xf8>
 801318a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801318e:	b21b      	sxth	r3, r3
 8013190:	e01b      	b.n	80131ca <__sflush_r+0xf2>
 8013192:	690f      	ldr	r7, [r1, #16]
 8013194:	2f00      	cmp	r7, #0
 8013196:	d0f6      	beq.n	8013186 <__sflush_r+0xae>
 8013198:	0793      	lsls	r3, r2, #30
 801319a:	680e      	ldr	r6, [r1, #0]
 801319c:	bf08      	it	eq
 801319e:	694b      	ldreq	r3, [r1, #20]
 80131a0:	600f      	str	r7, [r1, #0]
 80131a2:	bf18      	it	ne
 80131a4:	2300      	movne	r3, #0
 80131a6:	eba6 0807 	sub.w	r8, r6, r7
 80131aa:	608b      	str	r3, [r1, #8]
 80131ac:	f1b8 0f00 	cmp.w	r8, #0
 80131b0:	dde9      	ble.n	8013186 <__sflush_r+0xae>
 80131b2:	6a21      	ldr	r1, [r4, #32]
 80131b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80131b6:	4643      	mov	r3, r8
 80131b8:	463a      	mov	r2, r7
 80131ba:	4628      	mov	r0, r5
 80131bc:	47b0      	blx	r6
 80131be:	2800      	cmp	r0, #0
 80131c0:	dc08      	bgt.n	80131d4 <__sflush_r+0xfc>
 80131c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80131ca:	81a3      	strh	r3, [r4, #12]
 80131cc:	f04f 30ff 	mov.w	r0, #4294967295
 80131d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131d4:	4407      	add	r7, r0
 80131d6:	eba8 0800 	sub.w	r8, r8, r0
 80131da:	e7e7      	b.n	80131ac <__sflush_r+0xd4>
 80131dc:	dfbffffe 	.word	0xdfbffffe

080131e0 <_fflush_r>:
 80131e0:	b538      	push	{r3, r4, r5, lr}
 80131e2:	690b      	ldr	r3, [r1, #16]
 80131e4:	4605      	mov	r5, r0
 80131e6:	460c      	mov	r4, r1
 80131e8:	b913      	cbnz	r3, 80131f0 <_fflush_r+0x10>
 80131ea:	2500      	movs	r5, #0
 80131ec:	4628      	mov	r0, r5
 80131ee:	bd38      	pop	{r3, r4, r5, pc}
 80131f0:	b118      	cbz	r0, 80131fa <_fflush_r+0x1a>
 80131f2:	6a03      	ldr	r3, [r0, #32]
 80131f4:	b90b      	cbnz	r3, 80131fa <_fflush_r+0x1a>
 80131f6:	f7ff f80b 	bl	8012210 <__sinit>
 80131fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d0f3      	beq.n	80131ea <_fflush_r+0xa>
 8013202:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013204:	07d0      	lsls	r0, r2, #31
 8013206:	d404      	bmi.n	8013212 <_fflush_r+0x32>
 8013208:	0599      	lsls	r1, r3, #22
 801320a:	d402      	bmi.n	8013212 <_fflush_r+0x32>
 801320c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801320e:	f7ff fb82 	bl	8012916 <__retarget_lock_acquire_recursive>
 8013212:	4628      	mov	r0, r5
 8013214:	4621      	mov	r1, r4
 8013216:	f7ff ff5f 	bl	80130d8 <__sflush_r>
 801321a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801321c:	07da      	lsls	r2, r3, #31
 801321e:	4605      	mov	r5, r0
 8013220:	d4e4      	bmi.n	80131ec <_fflush_r+0xc>
 8013222:	89a3      	ldrh	r3, [r4, #12]
 8013224:	059b      	lsls	r3, r3, #22
 8013226:	d4e1      	bmi.n	80131ec <_fflush_r+0xc>
 8013228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801322a:	f7ff fb75 	bl	8012918 <__retarget_lock_release_recursive>
 801322e:	e7dd      	b.n	80131ec <_fflush_r+0xc>

08013230 <__swhatbuf_r>:
 8013230:	b570      	push	{r4, r5, r6, lr}
 8013232:	460c      	mov	r4, r1
 8013234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013238:	2900      	cmp	r1, #0
 801323a:	b096      	sub	sp, #88	@ 0x58
 801323c:	4615      	mov	r5, r2
 801323e:	461e      	mov	r6, r3
 8013240:	da0d      	bge.n	801325e <__swhatbuf_r+0x2e>
 8013242:	89a3      	ldrh	r3, [r4, #12]
 8013244:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013248:	f04f 0100 	mov.w	r1, #0
 801324c:	bf14      	ite	ne
 801324e:	2340      	movne	r3, #64	@ 0x40
 8013250:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013254:	2000      	movs	r0, #0
 8013256:	6031      	str	r1, [r6, #0]
 8013258:	602b      	str	r3, [r5, #0]
 801325a:	b016      	add	sp, #88	@ 0x58
 801325c:	bd70      	pop	{r4, r5, r6, pc}
 801325e:	466a      	mov	r2, sp
 8013260:	f000 f848 	bl	80132f4 <_fstat_r>
 8013264:	2800      	cmp	r0, #0
 8013266:	dbec      	blt.n	8013242 <__swhatbuf_r+0x12>
 8013268:	9901      	ldr	r1, [sp, #4]
 801326a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801326e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013272:	4259      	negs	r1, r3
 8013274:	4159      	adcs	r1, r3
 8013276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801327a:	e7eb      	b.n	8013254 <__swhatbuf_r+0x24>

0801327c <__smakebuf_r>:
 801327c:	898b      	ldrh	r3, [r1, #12]
 801327e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013280:	079d      	lsls	r5, r3, #30
 8013282:	4606      	mov	r6, r0
 8013284:	460c      	mov	r4, r1
 8013286:	d507      	bpl.n	8013298 <__smakebuf_r+0x1c>
 8013288:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801328c:	6023      	str	r3, [r4, #0]
 801328e:	6123      	str	r3, [r4, #16]
 8013290:	2301      	movs	r3, #1
 8013292:	6163      	str	r3, [r4, #20]
 8013294:	b003      	add	sp, #12
 8013296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013298:	ab01      	add	r3, sp, #4
 801329a:	466a      	mov	r2, sp
 801329c:	f7ff ffc8 	bl	8013230 <__swhatbuf_r>
 80132a0:	9f00      	ldr	r7, [sp, #0]
 80132a2:	4605      	mov	r5, r0
 80132a4:	4639      	mov	r1, r7
 80132a6:	4630      	mov	r0, r6
 80132a8:	f7ff fbba 	bl	8012a20 <_malloc_r>
 80132ac:	b948      	cbnz	r0, 80132c2 <__smakebuf_r+0x46>
 80132ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b2:	059a      	lsls	r2, r3, #22
 80132b4:	d4ee      	bmi.n	8013294 <__smakebuf_r+0x18>
 80132b6:	f023 0303 	bic.w	r3, r3, #3
 80132ba:	f043 0302 	orr.w	r3, r3, #2
 80132be:	81a3      	strh	r3, [r4, #12]
 80132c0:	e7e2      	b.n	8013288 <__smakebuf_r+0xc>
 80132c2:	89a3      	ldrh	r3, [r4, #12]
 80132c4:	6020      	str	r0, [r4, #0]
 80132c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132ca:	81a3      	strh	r3, [r4, #12]
 80132cc:	9b01      	ldr	r3, [sp, #4]
 80132ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80132d2:	b15b      	cbz	r3, 80132ec <__smakebuf_r+0x70>
 80132d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132d8:	4630      	mov	r0, r6
 80132da:	f000 f81d 	bl	8013318 <_isatty_r>
 80132de:	b128      	cbz	r0, 80132ec <__smakebuf_r+0x70>
 80132e0:	89a3      	ldrh	r3, [r4, #12]
 80132e2:	f023 0303 	bic.w	r3, r3, #3
 80132e6:	f043 0301 	orr.w	r3, r3, #1
 80132ea:	81a3      	strh	r3, [r4, #12]
 80132ec:	89a3      	ldrh	r3, [r4, #12]
 80132ee:	431d      	orrs	r5, r3
 80132f0:	81a5      	strh	r5, [r4, #12]
 80132f2:	e7cf      	b.n	8013294 <__smakebuf_r+0x18>

080132f4 <_fstat_r>:
 80132f4:	b538      	push	{r3, r4, r5, lr}
 80132f6:	4d07      	ldr	r5, [pc, #28]	@ (8013314 <_fstat_r+0x20>)
 80132f8:	2300      	movs	r3, #0
 80132fa:	4604      	mov	r4, r0
 80132fc:	4608      	mov	r0, r1
 80132fe:	4611      	mov	r1, r2
 8013300:	602b      	str	r3, [r5, #0]
 8013302:	f7fa fd1f 	bl	800dd44 <_fstat>
 8013306:	1c43      	adds	r3, r0, #1
 8013308:	d102      	bne.n	8013310 <_fstat_r+0x1c>
 801330a:	682b      	ldr	r3, [r5, #0]
 801330c:	b103      	cbz	r3, 8013310 <_fstat_r+0x1c>
 801330e:	6023      	str	r3, [r4, #0]
 8013310:	bd38      	pop	{r3, r4, r5, pc}
 8013312:	bf00      	nop
 8013314:	20004348 	.word	0x20004348

08013318 <_isatty_r>:
 8013318:	b538      	push	{r3, r4, r5, lr}
 801331a:	4d06      	ldr	r5, [pc, #24]	@ (8013334 <_isatty_r+0x1c>)
 801331c:	2300      	movs	r3, #0
 801331e:	4604      	mov	r4, r0
 8013320:	4608      	mov	r0, r1
 8013322:	602b      	str	r3, [r5, #0]
 8013324:	f7fa fc7c 	bl	800dc20 <_isatty>
 8013328:	1c43      	adds	r3, r0, #1
 801332a:	d102      	bne.n	8013332 <_isatty_r+0x1a>
 801332c:	682b      	ldr	r3, [r5, #0]
 801332e:	b103      	cbz	r3, 8013332 <_isatty_r+0x1a>
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	bd38      	pop	{r3, r4, r5, pc}
 8013334:	20004348 	.word	0x20004348

08013338 <_sbrk_r>:
 8013338:	b538      	push	{r3, r4, r5, lr}
 801333a:	4d06      	ldr	r5, [pc, #24]	@ (8013354 <_sbrk_r+0x1c>)
 801333c:	2300      	movs	r3, #0
 801333e:	4604      	mov	r4, r0
 8013340:	4608      	mov	r0, r1
 8013342:	602b      	str	r3, [r5, #0]
 8013344:	f7fa fe36 	bl	800dfb4 <_sbrk>
 8013348:	1c43      	adds	r3, r0, #1
 801334a:	d102      	bne.n	8013352 <_sbrk_r+0x1a>
 801334c:	682b      	ldr	r3, [r5, #0]
 801334e:	b103      	cbz	r3, 8013352 <_sbrk_r+0x1a>
 8013350:	6023      	str	r3, [r4, #0]
 8013352:	bd38      	pop	{r3, r4, r5, pc}
 8013354:	20004348 	.word	0x20004348

08013358 <_init>:
 8013358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801335a:	bf00      	nop
 801335c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801335e:	bc08      	pop	{r3}
 8013360:	469e      	mov	lr, r3
 8013362:	4770      	bx	lr

08013364 <_fini>:
 8013364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013366:	bf00      	nop
 8013368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801336a:	bc08      	pop	{r3}
 801336c:	469e      	mov	lr, r3
 801336e:	4770      	bx	lr
