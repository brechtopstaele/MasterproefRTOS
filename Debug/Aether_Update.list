
Aether_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006108  08006108  00007108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006234  08006234  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006234  08006234  00007234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800623c  0800623c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800623c  0800623c  0000723c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006240  08006240  00007240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006244  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004314  2000006c  080062b0  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000718  20004380  080062b0  00008380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016437  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003883  00000000  00000000  0001e4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00021d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed1  00000000  00000000  00023090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a065  00000000  00000000  00023f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017093  00000000  00000000  0003dfc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000990cd  00000000  00000000  00055059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee126  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000557c  00000000  00000000  000ee16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f36e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060f0 	.word	0x080060f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080060f0 	.word	0x080060f0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	@ 0x28
 80004e4:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80004e6:	2306      	movs	r3, #6
 80004e8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80004ea:	2306      	movs	r3, #6
 80004ec:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	83fb      	strh	r3, [r7, #30]
 80004f6:	2300      	movs	r3, #0
 80004f8:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80004fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000504:	4ba1      	ldr	r3, [pc, #644]	@ (800078c <EE_Init+0x2ac>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800050a:	4ba1      	ldr	r3, [pc, #644]	@ (8000790 <EE_Init+0x2b0>)
 800050c:	881b      	ldrh	r3, [r3, #0]
 800050e:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000510:	2300      	movs	r3, #0
 8000512:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8000514:	2302      	movs	r3, #2
 8000516:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8000518:	2301      	movs	r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800051c:	2302      	movs	r3, #2
 800051e:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000520:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000522:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000526:	4293      	cmp	r3, r2
 8000528:	d00b      	beq.n	8000542 <EE_Init+0x62>
 800052a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800052e:	f280 8196 	bge.w	800085e <EE_Init+0x37e>
 8000532:	2b00      	cmp	r3, #0
 8000534:	f000 80f8 	beq.w	8000728 <EE_Init+0x248>
 8000538:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800053c:	4293      	cmp	r3, r2
 800053e:	d050      	beq.n	80005e2 <EE_Init+0x102>
 8000540:	e18d      	b.n	800085e <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000542:	8c3b      	ldrh	r3, [r7, #32]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d116      	bne.n	8000576 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000548:	4890      	ldr	r0, [pc, #576]	@ (800078c <EE_Init+0x2ac>)
 800054a:	f000 f9a9 	bl	80008a0 <EE_VerifyPageFullyErased>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	f040 818e 	bne.w	8000872 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000556:	f107 0214 	add.w	r2, r7, #20
 800055a:	463b      	mov	r3, r7
 800055c:	4611      	mov	r1, r2
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fcf8 	bl	8001f54 <HAL_FLASHEx_Erase>
 8000564:	4603      	mov	r3, r0
 8000566:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000568:	7efb      	ldrb	r3, [r7, #27]
 800056a:	2b00      	cmp	r3, #0
 800056c:	f000 8181 	beq.w	8000872 <EE_Init+0x392>
          {
            return FlashStatus;
 8000570:	7efb      	ldrb	r3, [r7, #27]
 8000572:	b29b      	uxth	r3, r3
 8000574:	e185      	b.n	8000882 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000576:	8c3b      	ldrh	r3, [r7, #32]
 8000578:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800057c:	4293      	cmp	r3, r2
 800057e:	d125      	bne.n	80005cc <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000580:	4882      	ldr	r0, [pc, #520]	@ (800078c <EE_Init+0x2ac>)
 8000582:	f000 f98d 	bl	80008a0 <EE_VerifyPageFullyErased>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d10e      	bne.n	80005aa <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800058c:	f107 0214 	add.w	r2, r7, #20
 8000590:	463b      	mov	r3, r7
 8000592:	4611      	mov	r1, r2
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fcdd 	bl	8001f54 <HAL_FLASHEx_Erase>
 800059a:	4603      	mov	r3, r0
 800059c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800059e:	7efb      	ldrb	r3, [r7, #27]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <EE_Init+0xca>
          {
            return FlashStatus;
 80005a4:	7efb      	ldrb	r3, [r7, #27]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	e16b      	b.n	8000882 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 80005aa:	f04f 0200 	mov.w	r2, #0
 80005ae:	f04f 0300 	mov.w	r3, #0
 80005b2:	4977      	ldr	r1, [pc, #476]	@ (8000790 <EE_Init+0x2b0>)
 80005b4:	2001      	movs	r0, #1
 80005b6:	f001 fb17 	bl	8001be8 <HAL_FLASH_Program>
 80005ba:	4603      	mov	r3, r0
 80005bc:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80005be:	7efb      	ldrb	r3, [r7, #27]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	f000 8156 	beq.w	8000872 <EE_Init+0x392>
        {
          return FlashStatus;
 80005c6:	7efb      	ldrb	r3, [r7, #27]
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	e15a      	b.n	8000882 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80005cc:	f000 f9fe 	bl	80009cc <EE_Format>
 80005d0:	4603      	mov	r3, r0
 80005d2:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80005d4:	7efb      	ldrb	r3, [r7, #27]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 814b 	beq.w	8000872 <EE_Init+0x392>
        {
          return FlashStatus;
 80005dc:	7efb      	ldrb	r3, [r7, #27]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	e14f      	b.n	8000882 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80005e2:	8c3b      	ldrh	r3, [r7, #32]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d163      	bne.n	80006b0 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80005ec:	e030      	b.n	8000650 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80005ee:	4b69      	ldr	r3, [pc, #420]	@ (8000794 <EE_Init+0x2b4>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80005f6:	4968      	ldr	r1, [pc, #416]	@ (8000798 <EE_Init+0x2b8>)
 80005f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d101      	bne.n	8000604 <EE_Init+0x124>
          {
            x = VarIdx;
 8000600:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000602:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 8000604:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000606:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800060a:	429a      	cmp	r2, r3
 800060c:	d01d      	beq.n	800064a <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800060e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000610:	4a61      	ldr	r2, [pc, #388]	@ (8000798 <EE_Init+0x2b8>)
 8000612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000616:	4961      	ldr	r1, [pc, #388]	@ (800079c <EE_Init+0x2bc>)
 8000618:	4618      	mov	r0, r3
 800061a:	f000 f96b 	bl	80008f4 <EE_ReadVariable>
 800061e:	4603      	mov	r3, r0
 8000620:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000622:	8bbb      	ldrh	r3, [r7, #28]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d010      	beq.n	800064a <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000628:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800062a:	4a5b      	ldr	r2, [pc, #364]	@ (8000798 <EE_Init+0x2b8>)
 800062c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000630:	4a5a      	ldr	r2, [pc, #360]	@ (800079c <EE_Init+0x2bc>)
 8000632:	8812      	ldrh	r2, [r2, #0]
 8000634:	4611      	mov	r1, r2
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fa60 	bl	8000afc <EE_VerifyPageFullWriteVariable>
 800063c:	4603      	mov	r3, r0
 800063e:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8000640:	8bfb      	ldrh	r3, [r7, #30]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <EE_Init+0x16a>
              {
                return EepromStatus;
 8000646:	8bfb      	ldrh	r3, [r7, #30]
 8000648:	e11b      	b.n	8000882 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800064a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800064c:	3301      	adds	r3, #1
 800064e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000650:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000652:	2b1a      	cmp	r3, #26
 8000654:	d9cb      	bls.n	80005ee <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000656:	f04f 0200 	mov.w	r2, #0
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	494b      	ldr	r1, [pc, #300]	@ (800078c <EE_Init+0x2ac>)
 8000660:	2001      	movs	r0, #1
 8000662:	f001 fac1 	bl	8001be8 <HAL_FLASH_Program>
 8000666:	4603      	mov	r3, r0
 8000668:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800066a:	7efb      	ldrb	r3, [r7, #27]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <EE_Init+0x196>
        {
          return FlashStatus;
 8000670:	7efb      	ldrb	r3, [r7, #27]
 8000672:	b29b      	uxth	r3, r3
 8000674:	e105      	b.n	8000882 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8000676:	2303      	movs	r3, #3
 8000678:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800067e:	2302      	movs	r3, #2
 8000680:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000682:	4843      	ldr	r0, [pc, #268]	@ (8000790 <EE_Init+0x2b0>)
 8000684:	f000 f90c 	bl	80008a0 <EE_VerifyPageFullyErased>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	f040 80f3 	bne.w	8000876 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000690:	f107 0214 	add.w	r2, r7, #20
 8000694:	463b      	mov	r3, r7
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f001 fc5b 	bl	8001f54 <HAL_FLASHEx_Erase>
 800069e:	4603      	mov	r3, r0
 80006a0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80006a2:	7efb      	ldrb	r3, [r7, #27]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	f000 80e6 	beq.w	8000876 <EE_Init+0x396>
          {
            return FlashStatus;
 80006aa:	7efb      	ldrb	r3, [r7, #27]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	e0e8      	b.n	8000882 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 80006b0:	8c3b      	ldrh	r3, [r7, #32]
 80006b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d12b      	bne.n	8000712 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 80006ba:	2303      	movs	r3, #3
 80006bc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80006c2:	2302      	movs	r3, #2
 80006c4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80006c6:	4832      	ldr	r0, [pc, #200]	@ (8000790 <EE_Init+0x2b0>)
 80006c8:	f000 f8ea 	bl	80008a0 <EE_VerifyPageFullyErased>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10e      	bne.n	80006f0 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80006d2:	f107 0214 	add.w	r2, r7, #20
 80006d6:	463b      	mov	r3, r7
 80006d8:	4611      	mov	r1, r2
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fc3a 	bl	8001f54 <HAL_FLASHEx_Erase>
 80006e0:	4603      	mov	r3, r0
 80006e2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80006e4:	7efb      	ldrb	r3, [r7, #27]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d002      	beq.n	80006f0 <EE_Init+0x210>
          {
            return FlashStatus;
 80006ea:	7efb      	ldrb	r3, [r7, #27]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	e0c8      	b.n	8000882 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80006f0:	f04f 0200 	mov.w	r2, #0
 80006f4:	f04f 0300 	mov.w	r3, #0
 80006f8:	4924      	ldr	r1, [pc, #144]	@ (800078c <EE_Init+0x2ac>)
 80006fa:	2001      	movs	r0, #1
 80006fc:	f001 fa74 	bl	8001be8 <HAL_FLASH_Program>
 8000700:	4603      	mov	r3, r0
 8000702:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000704:	7efb      	ldrb	r3, [r7, #27]
 8000706:	2b00      	cmp	r3, #0
 8000708:	f000 80b5 	beq.w	8000876 <EE_Init+0x396>
        {
          return FlashStatus;
 800070c:	7efb      	ldrb	r3, [r7, #27]
 800070e:	b29b      	uxth	r3, r3
 8000710:	e0b7      	b.n	8000882 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8000712:	f000 f95b 	bl	80009cc <EE_Format>
 8000716:	4603      	mov	r3, r0
 8000718:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800071a:	7efb      	ldrb	r3, [r7, #27]
 800071c:	2b00      	cmp	r3, #0
 800071e:	f000 80aa 	beq.w	8000876 <EE_Init+0x396>
        {
          return FlashStatus;
 8000722:	7efb      	ldrb	r3, [r7, #27]
 8000724:	b29b      	uxth	r3, r3
 8000726:	e0ac      	b.n	8000882 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000728:	8c3b      	ldrh	r3, [r7, #32]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d10a      	bne.n	8000744 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800072e:	f000 f94d 	bl	80009cc <EE_Format>
 8000732:	4603      	mov	r3, r0
 8000734:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000736:	7efb      	ldrb	r3, [r7, #27]
 8000738:	2b00      	cmp	r3, #0
 800073a:	f000 809e 	beq.w	800087a <EE_Init+0x39a>
        {
          return FlashStatus;
 800073e:	7efb      	ldrb	r3, [r7, #27]
 8000740:	b29b      	uxth	r3, r3
 8000742:	e09e      	b.n	8000882 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000744:	8c3b      	ldrh	r3, [r7, #32]
 8000746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800074a:	4293      	cmp	r3, r2
 800074c:	d11b      	bne.n	8000786 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800074e:	2303      	movs	r3, #3
 8000750:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000756:	2302      	movs	r3, #2
 8000758:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800075a:	480d      	ldr	r0, [pc, #52]	@ (8000790 <EE_Init+0x2b0>)
 800075c:	f000 f8a0 	bl	80008a0 <EE_VerifyPageFullyErased>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	f040 8089 	bne.w	800087a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000768:	f107 0214 	add.w	r2, r7, #20
 800076c:	463b      	mov	r3, r7
 800076e:	4611      	mov	r1, r2
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fbef 	bl	8001f54 <HAL_FLASHEx_Erase>
 8000776:	4603      	mov	r3, r0
 8000778:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800077a:	7efb      	ldrb	r3, [r7, #27]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d07c      	beq.n	800087a <EE_Init+0x39a>
          {
            return FlashStatus;
 8000780:	7efb      	ldrb	r3, [r7, #27]
 8000782:	b29b      	uxth	r3, r3
 8000784:	e07d      	b.n	8000882 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000786:	2300      	movs	r3, #0
 8000788:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800078a:	e03a      	b.n	8000802 <EE_Init+0x322>
 800078c:	08060000 	.word	0x08060000
 8000790:	08064000 	.word	0x08064000
 8000794:	08060006 	.word	0x08060006
 8000798:	20000418 	.word	0x20000418
 800079c:	20000088 	.word	0x20000088
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80007a0:	4b3a      	ldr	r3, [pc, #232]	@ (800088c <EE_Init+0x3ac>)
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007a8:	4939      	ldr	r1, [pc, #228]	@ (8000890 <EE_Init+0x3b0>)
 80007aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d101      	bne.n	80007b6 <EE_Init+0x2d6>
          {
            x = VarIdx;
 80007b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 80007b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80007b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80007bc:	429a      	cmp	r2, r3
 80007be:	d01d      	beq.n	80007fc <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007c2:	4a33      	ldr	r2, [pc, #204]	@ (8000890 <EE_Init+0x3b0>)
 80007c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c8:	4932      	ldr	r1, [pc, #200]	@ (8000894 <EE_Init+0x3b4>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f892 	bl	80008f4 <EE_ReadVariable>
 80007d0:	4603      	mov	r3, r0
 80007d2:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80007d4:	8bbb      	ldrh	r3, [r7, #28]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d010      	beq.n	80007fc <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80007da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000890 <EE_Init+0x3b0>)
 80007de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000894 <EE_Init+0x3b4>)
 80007e4:	8812      	ldrh	r2, [r2, #0]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 f987 	bl	8000afc <EE_VerifyPageFullWriteVariable>
 80007ee:	4603      	mov	r3, r0
 80007f0:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80007f2:	8bfb      	ldrh	r3, [r7, #30]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <EE_Init+0x31c>
              {
                return EepromStatus;
 80007f8:	8bfb      	ldrh	r3, [r7, #30]
 80007fa:	e042      	b.n	8000882 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80007fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80007fe:	3301      	adds	r3, #1
 8000800:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000802:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000804:	2b1a      	cmp	r3, #26
 8000806:	d9cb      	bls.n	80007a0 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 8000808:	f04f 0200 	mov.w	r2, #0
 800080c:	f04f 0300 	mov.w	r3, #0
 8000810:	4921      	ldr	r1, [pc, #132]	@ (8000898 <EE_Init+0x3b8>)
 8000812:	2001      	movs	r0, #1
 8000814:	f001 f9e8 	bl	8001be8 <HAL_FLASH_Program>
 8000818:	4603      	mov	r3, r0
 800081a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800081c:	7efb      	ldrb	r3, [r7, #27]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <EE_Init+0x348>
        {
          return FlashStatus;
 8000822:	7efb      	ldrb	r3, [r7, #27]
 8000824:	b29b      	uxth	r3, r3
 8000826:	e02c      	b.n	8000882 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8000828:	2302      	movs	r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800082c:	2301      	movs	r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000830:	2302      	movs	r3, #2
 8000832:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000834:	4819      	ldr	r0, [pc, #100]	@ (800089c <EE_Init+0x3bc>)
 8000836:	f000 f833 	bl	80008a0 <EE_VerifyPageFullyErased>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d11c      	bne.n	800087a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000840:	f107 0214 	add.w	r2, r7, #20
 8000844:	463b      	mov	r3, r7
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fb83 	bl	8001f54 <HAL_FLASHEx_Erase>
 800084e:	4603      	mov	r3, r0
 8000850:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000852:	7efb      	ldrb	r3, [r7, #27]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d010      	beq.n	800087a <EE_Init+0x39a>
          {
            return FlashStatus;
 8000858:	7efb      	ldrb	r3, [r7, #27]
 800085a:	b29b      	uxth	r3, r3
 800085c:	e011      	b.n	8000882 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800085e:	f000 f8b5 	bl	80009cc <EE_Format>
 8000862:	4603      	mov	r3, r0
 8000864:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000866:	7efb      	ldrb	r3, [r7, #27]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d008      	beq.n	800087e <EE_Init+0x39e>
      {
        return FlashStatus;
 800086c:	7efb      	ldrb	r3, [r7, #27]
 800086e:	b29b      	uxth	r3, r3
 8000870:	e007      	b.n	8000882 <EE_Init+0x3a2>
      break;
 8000872:	bf00      	nop
 8000874:	e004      	b.n	8000880 <EE_Init+0x3a0>
      break;
 8000876:	bf00      	nop
 8000878:	e002      	b.n	8000880 <EE_Init+0x3a0>
      break;
 800087a:	bf00      	nop
 800087c:	e000      	b.n	8000880 <EE_Init+0x3a0>
      }
      break;
 800087e:	bf00      	nop
  }

  return HAL_OK;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3728      	adds	r7, #40	@ 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08064006 	.word	0x08064006
 8000890:	20000418 	.word	0x20000418
 8000894:	20000088 	.word	0x20000088
 8000898:	08064000 	.word	0x08064000
 800089c:	08060000 	.word	0x08060000

080008a0 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 80008a8:	2301      	movs	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 80008b0:	f245 5355 	movw	r3, #21845	@ 0x5555
 80008b4:	81fb      	strh	r3, [r7, #14]
    
  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 80008b6:	e00d      	b.n	80008d4 <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80008be:	89fb      	ldrh	r3, [r7, #14]
 80008c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d002      	beq.n	80008ce <EE_VerifyPageFullyErased+0x2e>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

      break;
 80008cc:	e009      	b.n	80008e2 <EE_VerifyPageFullyErased+0x42>
    }
    /* Next address location */
    Address = Address + 4;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3304      	adds	r3, #4
 80008d2:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 80008da:	333f      	adds	r3, #63	@ 0x3f
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d9ea      	bls.n	80008b8 <EE_VerifyPageFullyErased+0x18>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	b29b      	uxth	r3, r3
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	371c      	adds	r7, #28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	6039      	str	r1, [r7, #0]
 80008fe:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8000900:	2300      	movs	r3, #0
 8000902:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8000904:	f245 5355 	movw	r3, #21845	@ 0x5555
 8000908:	81bb      	strh	r3, [r7, #12]
 800090a:	2301      	movs	r3, #1
 800090c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <EE_ReadVariable+0x8c>)
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b1b      	ldr	r3, [pc, #108]	@ (8000980 <EE_ReadVariable+0x8c>)
 8000914:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000916:	2000      	movs	r0, #0
 8000918:	f000 f8aa 	bl	8000a70 <EE_FindValidPage>
 800091c:	4603      	mov	r3, r0
 800091e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000920:	89fb      	ldrh	r3, [r7, #14]
 8000922:	2bab      	cmp	r3, #171	@ 0xab
 8000924:	d101      	bne.n	800092a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000926:	23ab      	movs	r3, #171	@ 0xab
 8000928:	e025      	b.n	8000976 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800092a:	89fb      	ldrh	r3, [r7, #14]
 800092c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000930:	3318      	adds	r3, #24
 8000932:	039b      	lsls	r3, r3, #14
 8000934:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8000936:	89fb      	ldrh	r3, [r7, #14]
 8000938:	3301      	adds	r3, #1
 800093a:	039a      	lsls	r2, r3, #14
 800093c:	4b11      	ldr	r3, [pc, #68]	@ (8000984 <EE_ReadVariable+0x90>)
 800093e:	4413      	add	r3, r2
 8000940:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8000942:	e012      	b.n	800096a <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800094a:	89ba      	ldrh	r2, [r7, #12]
 800094c:	88fb      	ldrh	r3, [r7, #6]
 800094e:	429a      	cmp	r2, r3
 8000950:	d108      	bne.n	8000964 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	3b02      	subs	r3, #2
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	b29a      	uxth	r2, r3
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	82fb      	strh	r3, [r7, #22]

      break;
 8000962:	e007      	b.n	8000974 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	3b04      	subs	r3, #4
 8000968:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	3302      	adds	r3, #2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d8e7      	bhi.n	8000944 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000974:	8afb      	ldrh	r3, [r7, #22]
}
 8000976:	4618      	mov	r0, r3
 8000978:	3718      	adds	r7, #24
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	08060000 	.word	0x08060000
 8000984:	0805fffe 	.word	0x0805fffe

08000988 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	460a      	mov	r2, r1
 8000992:	80fb      	strh	r3, [r7, #6]
 8000994:	4613      	mov	r3, r2
 8000996:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800099c:	88ba      	ldrh	r2, [r7, #4]
 800099e:	88fb      	ldrh	r3, [r7, #6]
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f8aa 	bl	8000afc <EE_VerifyPageFullWriteVariable>
 80009a8:	4603      	mov	r3, r0
 80009aa:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80009ac:	89fb      	ldrh	r3, [r7, #14]
 80009ae:	2b80      	cmp	r3, #128	@ 0x80
 80009b0:	d107      	bne.n	80009c2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80009b2:	88ba      	ldrh	r2, [r7, #4]
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 f901 	bl	8000bc0 <EE_PageTransfer>
 80009be:	4603      	mov	r3, r0
 80009c0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80009c2:	89fb      	ldrh	r3, [r7, #14]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 80009de:	2302      	movs	r3, #2
 80009e0:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80009e6:	2302      	movs	r3, #2
 80009e8:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80009ea:	481f      	ldr	r0, [pc, #124]	@ (8000a68 <EE_Format+0x9c>)
 80009ec:	f7ff ff58 	bl	80008a0 <EE_VerifyPageFullyErased>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d10d      	bne.n	8000a12 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80009f6:	f107 0218 	add.w	r2, r7, #24
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 faa8 	bl	8001f54 <HAL_FLASHEx_Erase>
 8000a04:	4603      	mov	r3, r0
 8000a06:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000a08:	7ffb      	ldrb	r3, [r7, #31]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <EE_Format+0x46>
    {
      return FlashStatus;
 8000a0e:	7ffb      	ldrb	r3, [r7, #31]
 8000a10:	e025      	b.n	8000a5e <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	f04f 0300 	mov.w	r3, #0
 8000a1a:	4913      	ldr	r1, [pc, #76]	@ (8000a68 <EE_Format+0x9c>)
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f001 f8e3 	bl	8001be8 <HAL_FLASH_Program>
 8000a22:	4603      	mov	r3, r0
 8000a24:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000a26:	7ffb      	ldrb	r3, [r7, #31]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <EE_Format+0x64>
  {
    return FlashStatus;
 8000a2c:	7ffb      	ldrb	r3, [r7, #31]
 8000a2e:	e016      	b.n	8000a5e <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000a30:	2303      	movs	r3, #3
 8000a32:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000a34:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <EE_Format+0xa0>)
 8000a36:	f7ff ff33 	bl	80008a0 <EE_VerifyPageFullyErased>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10d      	bne.n	8000a5c <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000a40:	f107 0218 	add.w	r2, r7, #24
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fa83 	bl	8001f54 <HAL_FLASHEx_Erase>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000a52:	7ffb      	ldrb	r3, [r7, #31]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <EE_Format+0x90>
    {
      return FlashStatus;
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	e000      	b.n	8000a5e <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3720      	adds	r7, #32
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	08060000 	.word	0x08060000
 8000a6c:	08064000 	.word	0x08064000

08000a70 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	81fb      	strh	r3, [r7, #14]
 8000a7e:	2306      	movs	r3, #6
 8000a80:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000a82:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <EE_FindValidPage+0x84>)
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <EE_FindValidPage+0x88>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d01b      	beq.n	8000acc <EE_FindValidPage+0x5c>
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d125      	bne.n	8000ae4 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000a98:	89bb      	ldrh	r3, [r7, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d108      	bne.n	8000ab0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000a9e:	89fb      	ldrh	r3, [r7, #14]
 8000aa0:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d101      	bne.n	8000aac <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e01c      	b.n	8000ae6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000aac:	2301      	movs	r3, #1
 8000aae:	e01a      	b.n	8000ae6 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d108      	bne.n	8000ac8 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000ab6:	89bb      	ldrh	r3, [r7, #12]
 8000ab8:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d101      	bne.n	8000ac4 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e010      	b.n	8000ae6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e00e      	b.n	8000ae6 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000ac8:	23ab      	movs	r3, #171	@ 0xab
 8000aca:	e00c      	b.n	8000ae6 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000acc:	89fb      	ldrh	r3, [r7, #14]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e007      	b.n	8000ae6 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000ad6:	89bb      	ldrh	r3, [r7, #12]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d101      	bne.n	8000ae0 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000adc:	2301      	movs	r3, #1
 8000ade:	e002      	b.n	8000ae6 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000ae0:	23ab      	movs	r3, #171	@ 0xab
 8000ae2:	e000      	b.n	8000ae6 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000ae4:	2300      	movs	r3, #0
  }
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3714      	adds	r7, #20
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	08060000 	.word	0x08060000
 8000af8:	08064000 	.word	0x08064000

08000afc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000afc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	460a      	mov	r2, r1
 8000b08:	80fb      	strh	r3, [r7, #6]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000b16:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <EE_VerifyPageFullWriteVariable+0xb8>)
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <EE_VerifyPageFullWriteVariable+0xbc>)
 8000b1c:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff ffa6 	bl	8000a70 <EE_FindValidPage>
 8000b24:	4603      	mov	r3, r0
 8000b26:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000b28:	8a3b      	ldrh	r3, [r7, #16]
 8000b2a:	2bab      	cmp	r3, #171	@ 0xab
 8000b2c:	d101      	bne.n	8000b32 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000b2e:	23ab      	movs	r3, #171	@ 0xab
 8000b30:	e03b      	b.n	8000baa <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000b32:	8a3b      	ldrh	r3, [r7, #16]
 8000b34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000b38:	3318      	adds	r3, #24
 8000b3a:	039b      	lsls	r3, r3, #14
 8000b3c:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000b3e:	8a3b      	ldrh	r3, [r7, #16]
 8000b40:	3301      	adds	r3, #1
 8000b42:	039a      	lsls	r2, r3, #14
 8000b44:	4b1d      	ldr	r3, [pc, #116]	@ (8000bbc <EE_VerifyPageFullWriteVariable+0xc0>)
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000b4a:	e029      	b.n	8000ba0 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d121      	bne.n	8000b9a <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000b56:	88bb      	ldrh	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	461c      	mov	r4, r3
 8000b5c:	4615      	mov	r5, r2
 8000b5e:	4622      	mov	r2, r4
 8000b60:	462b      	mov	r3, r5
 8000b62:	6979      	ldr	r1, [r7, #20]
 8000b64:	2001      	movs	r0, #1
 8000b66:	f001 f83f 	bl	8001be8 <HAL_FLASH_Program>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000b6e:	7cfb      	ldrb	r3, [r7, #19]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 8000b74:	7cfb      	ldrb	r3, [r7, #19]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	e017      	b.n	8000baa <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	1c99      	adds	r1, r3, #2
 8000b7e:	88fb      	ldrh	r3, [r7, #6]
 8000b80:	2200      	movs	r2, #0
 8000b82:	4698      	mov	r8, r3
 8000b84:	4691      	mov	r9, r2
 8000b86:	4642      	mov	r2, r8
 8000b88:	464b      	mov	r3, r9
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f001 f82c 	bl	8001be8 <HAL_FLASH_Program>
 8000b90:	4603      	mov	r3, r0
 8000b92:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000b94:	7cfb      	ldrb	r3, [r7, #19]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	e007      	b.n	8000baa <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d3d1      	bcc.n	8000b4c <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000ba8:	2380      	movs	r3, #128	@ 0x80
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000bb4:	08060000 	.word	0x08060000
 8000bb8:	08064000 	.word	0x08064000
 8000bbc:	0805ffff 	.word	0x0805ffff

08000bc0 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	@ 0x30
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	460a      	mov	r2, r1
 8000bca:	80fb      	strh	r3, [r7, #6]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000bd6:	4b54      	ldr	r3, [pc, #336]	@ (8000d28 <EE_PageTransfer+0x168>)
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t OldPageId=0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000be2:	2300      	movs	r3, #0
 8000be4:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000bea:	2300      	movs	r3, #0
 8000bec:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff ff3c 	bl	8000a70 <EE_FindValidPage>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000bfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d104      	bne.n	8000c0c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000c02:	4b49      	ldr	r3, [pc, #292]	@ (8000d28 <EE_PageTransfer+0x168>)
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000c06:	2303      	movs	r3, #3
 8000c08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000c0a:	e009      	b.n	8000c20 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000c0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d104      	bne.n	8000c1c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000c12:	4b46      	ldr	r3, [pc, #280]	@ (8000d2c <EE_PageTransfer+0x16c>)
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000c16:	2302      	movs	r3, #2
 8000c18:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000c1a:	e001      	b.n	8000c20 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000c1c:	23ab      	movs	r3, #171	@ 0xab
 8000c1e:	e07e      	b.n	8000d1e <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000c20:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f000 ffdc 	bl	8001be8 <HAL_FLASH_Program>
 8000c30:	4603      	mov	r3, r0
 8000c32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8000c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	e06b      	b.n	8000d1e <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000c46:	88ba      	ldrh	r2, [r7, #4]
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff55 	bl	8000afc <EE_VerifyPageFullWriteVariable>
 8000c52:	4603      	mov	r3, r0
 8000c54:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000c56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8000c5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000c5e:	e05e      	b.n	8000d1e <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000c64:	e027      	b.n	8000cb6 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000c66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c68:	4a31      	ldr	r2, [pc, #196]	@ (8000d30 <EE_PageTransfer+0x170>)
 8000c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6e:	88fa      	ldrh	r2, [r7, #6]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d01d      	beq.n	8000cb0 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000c74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c76:	4a2e      	ldr	r2, [pc, #184]	@ (8000d30 <EE_PageTransfer+0x170>)
 8000c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7c:	492d      	ldr	r1, [pc, #180]	@ (8000d34 <EE_PageTransfer+0x174>)
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fe38 	bl	80008f4 <EE_ReadVariable>
 8000c84:	4603      	mov	r3, r0
 8000c86:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000c88:	8c3b      	ldrh	r3, [r7, #32]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d010      	beq.n	8000cb0 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000c8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000c90:	4a27      	ldr	r2, [pc, #156]	@ (8000d30 <EE_PageTransfer+0x170>)
 8000c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c96:	4a27      	ldr	r2, [pc, #156]	@ (8000d34 <EE_PageTransfer+0x174>)
 8000c98:	8812      	ldrh	r2, [r2, #0]
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff2d 	bl	8000afc <EE_VerifyPageFullWriteVariable>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000ca6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000cac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000cae:	e036      	b.n	8000d1e <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000cb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000cb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000cb8:	2b1a      	cmp	r3, #26
 8000cba:	d9d4      	bls.n	8000c66 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000cc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000cc2:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000ccc:	f107 021c 	add.w	r2, r7, #28
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 f93c 	bl	8001f54 <HAL_FLASHEx_Erase>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8000cea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	e015      	b.n	8000d1e <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	f04f 0300 	mov.w	r3, #0
 8000cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f000 ff73 	bl	8001be8 <HAL_FLASH_Program>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d003      	beq.n	8000d18 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8000d10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	e002      	b.n	8000d1e <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000d18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d1c:	b29b      	uxth	r3, r3
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3730      	adds	r7, #48	@ 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	08060000 	.word	0x08060000
 8000d2c:	08064000 	.word	0x08064000
 8000d30:	20000418 	.word	0x20000418
 8000d34:	20000088 	.word	0x20000088

08000d38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4a07      	ldr	r2, [pc, #28]	@ (8000d64 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <vApplicationGetIdleTaskMemory+0x30>)
 8000d4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2280      	movs	r2, #128	@ 0x80
 8000d54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	2000008c 	.word	0x2000008c
 8000d68:	2000012c 	.word	0x2000012c

08000d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	b0bf      	sub	sp, #252	@ 0xfc
 8000d70:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d72:	f000 fdd5 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d76:	f000 f887 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7a:	f000 f9ab 	bl	80010d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d7e:	f000 f97f 	bl	8001080 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d82:	f000 f901 	bl	8000f88 <MX_TIM1_Init>
  MX_CRC_Init();
 8000d86:	f000 f8eb 	bl	8000f60 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000d8a:	f000 f94f 	bl	800102c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8000d8e:	4835      	ldr	r0, [pc, #212]	@ (8000e64 <main+0xf8>)
 8000d90:	f000 fb00 	bl	8001394 <RetargetInit>
  printf("F401: Starting up.....\n");
 8000d94:	4834      	ldr	r0, [pc, #208]	@ (8000e68 <main+0xfc>)
 8000d96:	f004 fd05 	bl	80057a4 <puts>

  // Write initial data to EEPROM
  char data[100] = "This is the original data";
 8000d9a:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <main+0x100>)
 8000d9c:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000da0:	461d      	mov	r5, r3
 8000da2:	6828      	ldr	r0, [r5, #0]
 8000da4:	6869      	ldr	r1, [r5, #4]
 8000da6:	68aa      	ldr	r2, [r5, #8]
 8000da8:	68eb      	ldr	r3, [r5, #12]
 8000daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dac:	6928      	ldr	r0, [r5, #16]
 8000dae:	6969      	ldr	r1, [r5, #20]
 8000db0:	c403      	stmia	r4!, {r0, r1}
 8000db2:	8b2b      	ldrh	r3, [r5, #24]
 8000db4:	8023      	strh	r3, [r4, #0]
 8000db6:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8000dba:	224a      	movs	r2, #74	@ 0x4a
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f004 fe84 	bl	8005acc <memset>
  writeToFlash(huart2, data);
 8000dc4:	4e27      	ldr	r6, [pc, #156]	@ (8000e64 <main+0xf8>)
 8000dc6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dca:	930e      	str	r3, [sp, #56]	@ 0x38
 8000dcc:	466d      	mov	r5, sp
 8000dce:	f106 0410 	add.w	r4, r6, #16
 8000dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000de2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000de6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dea:	f000 fa37 	bl	800125c <writeToFlash>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000dee:	4b20      	ldr	r3, [pc, #128]	@ (8000e70 <main+0x104>)
 8000df0:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000df4:	461d      	mov	r5, r3
 8000df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 f942 	bl	8004092 <osThreadCreate>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <main+0x108>)
 8000e12:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 128);
 8000e14:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <main+0x10c>)
 8000e16:	f107 041c 	add.w	r4, r7, #28
 8000e1a:	461d      	mov	r5, r3
 8000e1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 f92f 	bl	8004092 <osThreadCreate>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a11      	ldr	r2, [pc, #68]	@ (8000e7c <main+0x110>)
 8000e38:	6013      	str	r3, [r2, #0]

  /* definition and creation of statusTask */
  osThreadDef(statusTask, StartStatusTask, osPriorityNormal, 0, 128);
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <main+0x114>)
 8000e3c:	463c      	mov	r4, r7
 8000e3e:	461d      	mov	r5, r3
 8000e40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  statusTaskHandle = osThreadCreate(osThread(statusTask), NULL);
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 f91e 	bl	8004092 <osThreadCreate>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <main+0x118>)
 8000e5a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e5c:	f003 f912 	bl	8004084 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <main+0xf4>
 8000e64:	200003c4 	.word	0x200003c4
 8000e68:	08006108 	.word	0x08006108
 8000e6c:	08006120 	.word	0x08006120
 8000e70:	08006148 	.word	0x08006148
 8000e74:	2000040c 	.word	0x2000040c
 8000e78:	08006170 	.word	0x08006170
 8000e7c:	20000410 	.word	0x20000410
 8000e80:	08006198 	.word	0x08006198
 8000e84:	20000414 	.word	0x20000414

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b094      	sub	sp, #80	@ 0x50
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	f107 0320 	add.w	r3, r7, #32
 8000e92:	2230      	movs	r2, #48	@ 0x30
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f004 fe18 	bl	8005acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	4b29      	ldr	r3, [pc, #164]	@ (8000f58 <SystemClock_Config+0xd0>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	4a28      	ldr	r2, [pc, #160]	@ (8000f58 <SystemClock_Config+0xd0>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ebc:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <SystemClock_Config+0xd0>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b23      	ldr	r3, [pc, #140]	@ (8000f5c <SystemClock_Config+0xd4>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ed4:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <SystemClock_Config+0xd4>)
 8000ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <SystemClock_Config+0xd4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000efc:	2310      	movs	r3, #16
 8000efe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f00:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f06:	2304      	movs	r3, #4
 8000f08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	4618      	mov	r0, r3
 8000f14:	f001 faf8 	bl	8002508 <HAL_RCC_OscConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f1e:	f000 f997 	bl	8001250 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f22:	230f      	movs	r3, #15
 8000f24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f26:	2302      	movs	r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fd5a 	bl	80029f8 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f4a:	f000 f981 	bl	8001250 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	@ 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_CRC_Init+0x20>)
 8000f66:	4a07      	ldr	r2, [pc, #28]	@ (8000f84 <MX_CRC_Init+0x24>)
 8000f68:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_CRC_Init+0x20>)
 8000f6c:	f000 fe20 	bl	8001bb0 <HAL_CRC_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f76:	f000 f96b 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000032c 	.word	0x2000032c
 8000f84:	40023000 	.word	0x40023000

08000f88 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <MX_TIM1_Init+0x9c>)
 8000fa6:	4a20      	ldr	r2, [pc, #128]	@ (8001028 <MX_TIM1_Init+0xa0>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8000faa:	4b1e      	ldr	r3, [pc, #120]	@ (8001024 <MX_TIM1_Init+0x9c>)
 8000fac:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000fb0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <MX_TIM1_Init+0x9c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8001024 <MX_TIM1_Init+0x9c>)
 8000fba:	f245 2207 	movw	r2, #20999	@ 0x5207
 8000fbe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <MX_TIM1_Init+0x9c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <MX_TIM1_Init+0x9c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fcc:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <MX_TIM1_Init+0x9c>)
 8000fce:	2280      	movs	r2, #128	@ 0x80
 8000fd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd2:	4814      	ldr	r0, [pc, #80]	@ (8001024 <MX_TIM1_Init+0x9c>)
 8000fd4:	f001 ff62 	bl	8002e9c <HAL_TIM_Base_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fde:	f000 f937 	bl	8001250 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4619      	mov	r1, r3
 8000fee:	480d      	ldr	r0, [pc, #52]	@ (8001024 <MX_TIM1_Init+0x9c>)
 8000ff0:	f002 f8f6 	bl	80031e0 <HAL_TIM_ConfigClockSource>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ffa:	f000 f929 	bl	8001250 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	4806      	ldr	r0, [pc, #24]	@ (8001024 <MX_TIM1_Init+0x9c>)
 800100c:	f002 fafe 	bl	800360c <HAL_TIMEx_MasterConfigSynchronization>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001016:	f000 f91b 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000334 	.word	0x20000334
 8001028:	40010000 	.word	0x40010000

0800102c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_USART1_UART_Init+0x4c>)
 8001032:	4a12      	ldr	r2, [pc, #72]	@ (800107c <MX_USART1_UART_Init+0x50>)
 8001034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <MX_USART1_UART_Init+0x4c>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <MX_USART1_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_USART1_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <MX_USART1_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_USART1_UART_Init+0x4c>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <MX_USART1_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <MX_USART1_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_USART1_UART_Init+0x4c>)
 8001064:	f002 fb54 	bl	8003710 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800106e:	f000 f8ef 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000037c 	.word	0x2000037c
 800107c:	40011000 	.word	0x40011000

08001080 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <MX_USART2_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108a:	4b10      	ldr	r3, [pc, #64]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	@ (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b8:	f002 fb2a 	bl	8003710 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f000 f8c5 	bl	8001250 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200003c4 	.word	0x200003c4
 80010d0:	40004400 	.word	0x40004400

080010d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	@ 0x28
 80010d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	4a2c      	ldr	r2, [pc, #176]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fa:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b26      	ldr	r3, [pc, #152]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800110e:	4a25      	ldr	r2, [pc, #148]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 8001110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001114:	6313      	str	r3, [r2, #48]	@ 0x30
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800111a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112a:	4a1e      	ldr	r2, [pc, #120]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	@ 0x30
 8001132:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a17      	ldr	r2, [pc, #92]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	4812      	ldr	r0, [pc, #72]	@ (80011a8 <MX_GPIO_Init+0xd4>)
 8001160:	f001 f99e 	bl	80024a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001164:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800116a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800116e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	480c      	ldr	r0, [pc, #48]	@ (80011ac <MX_GPIO_Init+0xd8>)
 800117c:	f001 f80c 	bl	8002198 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001180:	2320      	movs	r3, #32
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001184:	2301      	movs	r3, #1
 8001186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	4804      	ldr	r0, [pc, #16]	@ (80011a8 <MX_GPIO_Init+0xd4>)
 8001198:	f000 fffe 	bl	8002198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40020000 	.word	0x40020000
 80011ac:	40020800 	.word	0x40020800

080011b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011b8:	2120      	movs	r1, #32
 80011ba:	4804      	ldr	r0, [pc, #16]	@ (80011cc <StartDefaultTask+0x1c>)
 80011bc:	f001 f989 	bl	80024d2 <HAL_GPIO_TogglePin>
	  osDelay(200);
 80011c0:	20c8      	movs	r0, #200	@ 0xc8
 80011c2:	f002 ffb2 	bl	800412a <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80011c6:	bf00      	nop
 80011c8:	e7f6      	b.n	80011b8 <StartDefaultTask+0x8>
 80011ca:	bf00      	nop
 80011cc:	40020000 	.word	0x40020000

080011d0 <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b09c      	sub	sp, #112	@ 0x70
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
	uint16_t has_written = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		//CRC
		uint32_t crcValue = HAL_CRC_Calculate(&hcrc, input, sizeof(input));
		printf("CRC Value: %u \r\n", crcValue);

		*/
		osDelay(1000);
 80011de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011e2:	f002 ffa2 	bl	800412a <osDelay>
 80011e6:	e7fa      	b.n	80011de <StartReceiveTask+0xe>

080011e8 <StartStatusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusTask */
void StartStatusTask(void const * argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusTask */
  /* Infinite loop */
  for(;;)
  {
	  printf("F401: Starting transmission \r\n");
 80011f0:	480b      	ldr	r0, [pc, #44]	@ (8001220 <StartStatusTask+0x38>)
 80011f2:	f004 fad7 	bl	80057a4 <puts>
	  uint8_t tx_buff[]={0,1,2,3,4,5,6,7,8,9};
 80011f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001224 <StartStatusTask+0x3c>)
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011fe:	c303      	stmia	r3!, {r0, r1}
 8001200:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, tx_buff, 10, 1000);
 8001202:	f107 010c 	add.w	r1, r7, #12
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	220a      	movs	r2, #10
 800120c:	4806      	ldr	r0, [pc, #24]	@ (8001228 <StartStatusTask+0x40>)
 800120e:	f002 facf 	bl	80037b0 <HAL_UART_Transmit>
	  HAL_Delay(10000);
 8001212:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001216:	f000 fbc5 	bl	80019a4 <HAL_Delay>
  {
 800121a:	bf00      	nop
 800121c:	e7e8      	b.n	80011f0 <StartStatusTask+0x8>
 800121e:	bf00      	nop
 8001220:	080061b4 	.word	0x080061b4
 8001224:	080061d4 	.word	0x080061d4
 8001228:	2000037c 	.word	0x2000037c

0800122c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a04      	ldr	r2, [pc, #16]	@ (800124c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800123e:	f000 fb91 	bl	8001964 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40000c00 	.word	0x40000c00

08001250 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <Error_Handler+0x8>

0800125c <writeToFlash>:
		'n', '.', 'p', 'l' };
uint8_t VarDataTabRead[NB_OF_VAR];
uint16_t VarDataTmp = 0;


void writeToFlash(UART_HandleTypeDef huart2, char data[100]){
 800125c:	b084      	sub	sp, #16
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	f107 0c10 	add.w	ip, r7, #16
 8001268:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t dataLength = strlen(data);
 800126c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800126e:	f7fe ffb7 	bl	80001e0 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	707b      	strb	r3, [r7, #1]

	// Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 8001276:	f000 fd0b 	bl	8001c90 <HAL_FLASH_Unlock>
	// Turn LED on
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800127a:	2201      	movs	r2, #1
 800127c:	2120      	movs	r1, #32
 800127e:	483e      	ldr	r0, [pc, #248]	@ (8001378 <writeToFlash+0x11c>)
 8001280:	f001 f90e 	bl	80024a0 <HAL_GPIO_WritePin>

	/* EEPROM Init */
	if (EE_Init() != EE_OK) {
 8001284:	f7ff f92c 	bl	80004e0 <EE_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <writeToFlash+0x36>
		Error_Handler();
 800128e:	f7ff ffdf 	bl	8001250 <Error_Handler>
	}

	// Fill EEPROM variables addresses
	for (uint16_t i = 1; i <= dataLength; i++) {
 8001292:	2301      	movs	r3, #1
 8001294:	80fb      	strh	r3, [r7, #6]
 8001296:	e008      	b.n	80012aa <writeToFlash+0x4e>
		VirtAddVarTab[i - 1] = i;
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	3b01      	subs	r3, #1
 800129c:	4937      	ldr	r1, [pc, #220]	@ (800137c <writeToFlash+0x120>)
 800129e:	88fa      	ldrh	r2, [r7, #6]
 80012a0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (uint16_t i = 1; i <= dataLength; i++) {
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	3301      	adds	r3, #1
 80012a8:	80fb      	strh	r3, [r7, #6]
 80012aa:	787b      	ldrb	r3, [r7, #1]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	88fa      	ldrh	r2, [r7, #6]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d9f1      	bls.n	8001298 <writeToFlash+0x3c>
	}

	// Store Values in EEPROM emulation
	HAL_UART_Transmit(&huart2, "Store values\n\r", 14, 100);
 80012b4:	2364      	movs	r3, #100	@ 0x64
 80012b6:	220e      	movs	r2, #14
 80012b8:	4931      	ldr	r1, [pc, #196]	@ (8001380 <writeToFlash+0x124>)
 80012ba:	f107 0010 	add.w	r0, r7, #16
 80012be:	f002 fa77 	bl	80037b0 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < dataLength; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	80bb      	strh	r3, [r7, #4]
 80012c6:	e012      	b.n	80012ee <writeToFlash+0x92>
		/* Sequence 1 */
		if ((EE_WriteVariable(VirtAddVarTab[i], data[i]))
 80012c8:	88bb      	ldrh	r3, [r7, #4]
 80012ca:	4a2c      	ldr	r2, [pc, #176]	@ (800137c <writeToFlash+0x120>)
 80012cc:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80012d0:	88bb      	ldrh	r3, [r7, #4]
 80012d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4619      	mov	r1, r3
 80012da:	f7ff fb55 	bl	8000988 <EE_WriteVariable>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <writeToFlash+0x8c>
				!= HAL_OK) {
			Error_Handler();
 80012e4:	f7ff ffb4 	bl	8001250 <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	3301      	adds	r3, #1
 80012ec:	80bb      	strh	r3, [r7, #4]
 80012ee:	787b      	ldrb	r3, [r7, #1]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	88ba      	ldrh	r2, [r7, #4]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d3e7      	bcc.n	80012c8 <writeToFlash+0x6c>
		}
	}

	// Read values
	HAL_UART_Transmit(&huart2, "Read values\n\r", 13, 100);
 80012f8:	2364      	movs	r3, #100	@ 0x64
 80012fa:	220d      	movs	r2, #13
 80012fc:	4921      	ldr	r1, [pc, #132]	@ (8001384 <writeToFlash+0x128>)
 80012fe:	f107 0010 	add.w	r0, r7, #16
 8001302:	f002 fa55 	bl	80037b0 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < dataLength; i++) {
 8001306:	2300      	movs	r3, #0
 8001308:	807b      	strh	r3, [r7, #2]
 800130a:	e012      	b.n	8001332 <writeToFlash+0xd6>
		if ((EE_ReadVariable(VirtAddVarTab[i],
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	4a1b      	ldr	r2, [pc, #108]	@ (800137c <writeToFlash+0x120>)
 8001310:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
				&VarDataTabRead[i])) != HAL_OK) {
 8001314:	887b      	ldrh	r3, [r7, #2]
 8001316:	491c      	ldr	r1, [pc, #112]	@ (8001388 <writeToFlash+0x12c>)
 8001318:	440b      	add	r3, r1
		if ((EE_ReadVariable(VirtAddVarTab[i],
 800131a:	4619      	mov	r1, r3
 800131c:	4610      	mov	r0, r2
 800131e:	f7ff fae9 	bl	80008f4 <EE_ReadVariable>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <writeToFlash+0xd0>
			Error_Handler();
 8001328:	f7ff ff92 	bl	8001250 <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	3301      	adds	r3, #1
 8001330:	807b      	strh	r3, [r7, #2]
 8001332:	787b      	ldrb	r3, [r7, #1]
 8001334:	b29b      	uxth	r3, r3
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3e7      	bcc.n	800130c <writeToFlash+0xb0>
		}
	}

	HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 800133c:	2364      	movs	r3, #100	@ 0x64
 800133e:	220c      	movs	r2, #12
 8001340:	4912      	ldr	r1, [pc, #72]	@ (800138c <writeToFlash+0x130>)
 8001342:	f107 0010 	add.w	r0, r7, #16
 8001346:	f002 fa33 	bl	80037b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, VarDataTabRead, dataLength, 1000);
 800134a:	787b      	ldrb	r3, [r7, #1]
 800134c:	b29a      	uxth	r2, r3
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <writeToFlash+0x12c>)
 8001354:	f107 0010 	add.w	r0, r7, #16
 8001358:	f002 fa2a 	bl	80037b0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800135c:	2364      	movs	r3, #100	@ 0x64
 800135e:	2202      	movs	r2, #2
 8001360:	490b      	ldr	r1, [pc, #44]	@ (8001390 <writeToFlash+0x134>)
 8001362:	f107 0010 	add.w	r0, r7, #16
 8001366:	f002 fa23 	bl	80037b0 <HAL_UART_Transmit>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001374:	b004      	add	sp, #16
 8001376:	4770      	bx	lr
 8001378:	40020000 	.word	0x40020000
 800137c:	20000418 	.word	0x20000418
 8001380:	080061e0 	.word	0x080061e0
 8001384:	080061f0 	.word	0x080061f0
 8001388:	20000450 	.word	0x20000450
 800138c:	08006200 	.word	0x08006200
 8001390:	08006210 	.word	0x08006210

08001394 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800139c:	4a07      	ldr	r2, [pc, #28]	@ (80013bc <RetargetInit+0x28>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80013a2:	4b07      	ldr	r3, [pc, #28]	@ (80013c0 <RetargetInit+0x2c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6898      	ldr	r0, [r3, #8]
 80013a8:	2300      	movs	r3, #0
 80013aa:	2202      	movs	r2, #2
 80013ac:	2100      	movs	r1, #0
 80013ae:	f004 fa01 	bl	80057b4 <setvbuf>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000046c 	.word	0x2000046c
 80013c0:	2000001c 	.word	0x2000001c

080013c4 <_isatty>:

int _isatty(int fd) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	db04      	blt.n	80013dc <_isatty+0x18>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	dc01      	bgt.n	80013dc <_isatty+0x18>
    return 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	e005      	b.n	80013e8 <_isatty+0x24>

  errno = EBADF;
 80013dc:	f004 fc1a 	bl	8005c14 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2209      	movs	r2, #9
 80013e4:	601a      	str	r2, [r3, #0]
  return 0;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <_write>:

int _write(int fd, char* ptr, int len) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d002      	beq.n	8001408 <_write+0x18>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d111      	bne.n	800142c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001408:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <_write+0x54>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	b29a      	uxth	r2, r3
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	f002 f9cb 	bl	80037b0 <HAL_UART_Transmit>
 800141a:	4603      	mov	r3, r0
 800141c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <_write+0x38>
      return len;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	e008      	b.n	800143a <_write+0x4a>
    else
      return EIO;
 8001428:	2305      	movs	r3, #5
 800142a:	e006      	b.n	800143a <_write+0x4a>
  }
  errno = EBADF;
 800142c:	f004 fbf2 	bl	8005c14 <__errno>
 8001430:	4603      	mov	r3, r0
 8001432:	2209      	movs	r2, #9
 8001434:	601a      	str	r2, [r3, #0]
  return -1;
 8001436:	f04f 33ff 	mov.w	r3, #4294967295
}
 800143a:	4618      	mov	r0, r3
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000046c 	.word	0x2000046c

08001448 <_close>:

int _close(int fd) {
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db04      	blt.n	8001460 <_close+0x18>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	dc01      	bgt.n	8001460 <_close+0x18>
    return 0;
 800145c:	2300      	movs	r3, #0
 800145e:	e006      	b.n	800146e <_close+0x26>

  errno = EBADF;
 8001460:	f004 fbd8 	bl	8005c14 <__errno>
 8001464:	4603      	mov	r3, r0
 8001466:	2209      	movs	r2, #9
 8001468:	601a      	str	r2, [r3, #0]
  return -1;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001482:	f004 fbc7 	bl	8005c14 <__errno>
 8001486:	4603      	mov	r3, r0
 8001488:	2209      	movs	r2, #9
 800148a:	601a      	str	r2, [r3, #0]
  return -1;
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <_read>:

int _read(int fd, char* ptr, int len) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d110      	bne.n	80014cc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <_read+0x4c>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
 80014b2:	2201      	movs	r2, #1
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	f002 fa06 	bl	80038c6 <HAL_UART_Receive>
 80014ba:	4603      	mov	r3, r0
 80014bc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80014be:	7dfb      	ldrb	r3, [r7, #23]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <_read+0x30>
      return 1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e008      	b.n	80014da <_read+0x42>
    else
      return EIO;
 80014c8:	2305      	movs	r3, #5
 80014ca:	e006      	b.n	80014da <_read+0x42>
  }
  errno = EBADF;
 80014cc:	f004 fba2 	bl	8005c14 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2209      	movs	r2, #9
 80014d4:	601a      	str	r2, [r3, #0]
  return -1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000046c 	.word	0x2000046c

080014e8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db08      	blt.n	800150a <_fstat+0x22>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	dc05      	bgt.n	800150a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001504:	605a      	str	r2, [r3, #4]
    return 0;
 8001506:	2300      	movs	r3, #0
 8001508:	e005      	b.n	8001516 <_fstat+0x2e>
  }

  errno = EBADF;
 800150a:	f004 fb83 	bl	8005c14 <__errno>
 800150e:	4603      	mov	r3, r0
 8001510:	2209      	movs	r2, #9
 8001512:	601a      	str	r2, [r3, #0]
  return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <HAL_MspInit+0x54>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152e:	4a11      	ldr	r2, [pc, #68]	@ (8001574 <HAL_MspInit+0x54>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001534:	6453      	str	r3, [r2, #68]	@ 0x44
 8001536:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <HAL_MspInit+0x54>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <HAL_MspInit+0x54>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <HAL_MspInit+0x54>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	@ 0x40
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <HAL_MspInit+0x54>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	210f      	movs	r1, #15
 8001562:	f06f 0001 	mvn.w	r0, #1
 8001566:	f000 faf9 	bl	8001b5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0b      	ldr	r2, [pc, #44]	@ (80015b4 <HAL_CRC_MspInit+0x3c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d10d      	bne.n	80015a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_CRC_MspInit+0x40>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a09      	ldr	r2, [pc, #36]	@ (80015b8 <HAL_CRC_MspInit+0x40>)
 8001594:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <HAL_CRC_MspInit+0x40>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40023000 	.word	0x40023000
 80015b8:	40023800 	.word	0x40023800

080015bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a0b      	ldr	r2, [pc, #44]	@ (80015f8 <HAL_TIM_Base_MspInit+0x3c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d10d      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b0a      	ldr	r3, [pc, #40]	@ (80015fc <HAL_TIM_Base_MspInit+0x40>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	4a09      	ldr	r2, [pc, #36]	@ (80015fc <HAL_TIM_Base_MspInit+0x40>)
 80015d8:	f043 0301 	orr.w	r3, r3, #1
 80015dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <HAL_TIM_Base_MspInit+0x40>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40010000 	.word	0x40010000
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	@ 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a32      	ldr	r2, [pc, #200]	@ (80016e8 <HAL_UART_MspInit+0xe8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d12d      	bne.n	800167e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <HAL_UART_MspInit+0xec>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162a:	4a30      	ldr	r2, [pc, #192]	@ (80016ec <HAL_UART_MspInit+0xec>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	6453      	str	r3, [r2, #68]	@ 0x44
 8001632:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <HAL_UART_MspInit+0xec>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	61bb      	str	r3, [r7, #24]
 800163c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	4b2a      	ldr	r3, [pc, #168]	@ (80016ec <HAL_UART_MspInit+0xec>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	4a29      	ldr	r2, [pc, #164]	@ (80016ec <HAL_UART_MspInit+0xec>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	@ 0x30
 800164e:	4b27      	ldr	r3, [pc, #156]	@ (80016ec <HAL_UART_MspInit+0xec>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800165a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800166c:	2307      	movs	r3, #7
 800166e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4619      	mov	r1, r3
 8001676:	481e      	ldr	r0, [pc, #120]	@ (80016f0 <HAL_UART_MspInit+0xf0>)
 8001678:	f000 fd8e 	bl	8002198 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800167c:	e030      	b.n	80016e0 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a1c      	ldr	r2, [pc, #112]	@ (80016f4 <HAL_UART_MspInit+0xf4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d12b      	bne.n	80016e0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <HAL_UART_MspInit+0xec>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001690:	4a16      	ldr	r2, [pc, #88]	@ (80016ec <HAL_UART_MspInit+0xec>)
 8001692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001696:	6413      	str	r3, [r2, #64]	@ 0x40
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <HAL_UART_MspInit+0xec>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <HAL_UART_MspInit+0xec>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	4a0f      	ldr	r2, [pc, #60]	@ (80016ec <HAL_UART_MspInit+0xec>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b4:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <HAL_UART_MspInit+0xec>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c0:	230c      	movs	r3, #12
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d0:	2307      	movs	r3, #7
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 031c 	add.w	r3, r7, #28
 80016d8:	4619      	mov	r1, r3
 80016da:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <HAL_UART_MspInit+0xf0>)
 80016dc:	f000 fd5c 	bl	8002198 <HAL_GPIO_Init>
}
 80016e0:	bf00      	nop
 80016e2:	3730      	adds	r7, #48	@ 0x30
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40011000 	.word	0x40011000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40004400 	.word	0x40004400

080016f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	@ 0x38
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	4b33      	ldr	r3, [pc, #204]	@ (80017dc <HAL_InitTick+0xe4>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001710:	4a32      	ldr	r2, [pc, #200]	@ (80017dc <HAL_InitTick+0xe4>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6413      	str	r3, [r2, #64]	@ 0x40
 8001718:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <HAL_InitTick+0xe4>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001724:	f107 0210 	add.w	r2, r7, #16
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f001 fb82 	bl	8002e38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d103      	bne.n	8001746 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800173e:	f001 fb53 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8001742:	6378      	str	r0, [r7, #52]	@ 0x34
 8001744:	e004      	b.n	8001750 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001746:	f001 fb4f 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 800174a:	4603      	mov	r3, r0
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001752:	4a23      	ldr	r2, [pc, #140]	@ (80017e0 <HAL_InitTick+0xe8>)
 8001754:	fba2 2303 	umull	r2, r3, r2, r3
 8001758:	0c9b      	lsrs	r3, r3, #18
 800175a:	3b01      	subs	r3, #1
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <HAL_InitTick+0xec>)
 8001760:	4a21      	ldr	r2, [pc, #132]	@ (80017e8 <HAL_InitTick+0xf0>)
 8001762:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <HAL_InitTick+0xec>)
 8001766:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800176a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800176c:	4a1d      	ldr	r2, [pc, #116]	@ (80017e4 <HAL_InitTick+0xec>)
 800176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001770:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <HAL_InitTick+0xec>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <HAL_InitTick+0xec>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_InitTick+0xec>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001784:	4817      	ldr	r0, [pc, #92]	@ (80017e4 <HAL_InitTick+0xec>)
 8001786:	f001 fb89 	bl	8002e9c <HAL_TIM_Base_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001790:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001794:	2b00      	cmp	r3, #0
 8001796:	d11b      	bne.n	80017d0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001798:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <HAL_InitTick+0xec>)
 800179a:	f001 fbcf 	bl	8002f3c <HAL_TIM_Base_Start_IT>
 800179e:	4603      	mov	r3, r0
 80017a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d111      	bne.n	80017d0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80017ac:	2032      	movs	r0, #50	@ 0x32
 80017ae:	f000 f9f1 	bl	8001b94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b0f      	cmp	r3, #15
 80017b6:	d808      	bhi.n	80017ca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80017b8:	2200      	movs	r2, #0
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	2032      	movs	r0, #50	@ 0x32
 80017be:	f000 f9cd 	bl	8001b5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_InitTick+0xf4>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	e002      	b.n	80017d0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3738      	adds	r7, #56	@ 0x38
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	431bde83 	.word	0x431bde83
 80017e4:	20000470 	.word	0x20000470
 80017e8:	40000c00 	.word	0x40000c00
 80017ec:	20000004 	.word	0x20000004

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <NMI_Handler+0x4>

080017f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <MemManage_Handler+0x4>

08001808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <BusFault_Handler+0x4>

08001810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <UsageFault_Handler+0x4>

08001818 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <TIM5_IRQHandler+0x10>)
 800182e:	f001 fbe7 	bl	8003000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000470 	.word	0x20000470

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	@ (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f004 f9d2 	bl	8005c14 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20018000 	.word	0x20018000
 800189c:	00000512 	.word	0x00000512
 80018a0:	200004b8 	.word	0x200004b8
 80018a4:	20004380 	.word	0x20004380

080018a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d0:	f7ff ffea 	bl	80018a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	@ (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80018fa:	f004 f991 	bl	8005c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff fa35 	bl	8000d6c <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001904:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001910:	08006244 	.word	0x08006244
  ldr r2, =_sbss
 8001914:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001918:	20004380 	.word	0x20004380

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001924:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <HAL_Init+0x40>)
 800192a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_Init+0x40>)
 8001936:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <HAL_Init+0x40>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f8fc 	bl	8001b46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	200f      	movs	r0, #15
 8001950:	f7ff fed2 	bl	80016f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fde4 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008
 8001988:	200004bc 	.word	0x200004bc

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	@ (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	200004bc 	.word	0x200004bc

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_Delay+0x44>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000008 	.word	0x20000008

080019ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a02:	68ba      	ldr	r2, [r7, #8]
 8001a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1e:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <__NVIC_SetPriorityGrouping+0x44>)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	60d3      	str	r3, [r2, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a38:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <__NVIC_GetPriorityGrouping+0x18>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	0a1b      	lsrs	r3, r3, #8
 8001a3e:	f003 0307 	and.w	r3, r3, #7
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db0b      	blt.n	8001a7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	f003 021f 	and.w	r2, r3, #31
 8001a68:	4907      	ldr	r1, [pc, #28]	@ (8001a88 <__NVIC_EnableIRQ+0x38>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	2001      	movs	r0, #1
 8001a72:	fa00 f202 	lsl.w	r2, r0, r2
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	e000e100 	.word	0xe000e100

08001a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	6039      	str	r1, [r7, #0]
 8001a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	db0a      	blt.n	8001ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	490c      	ldr	r1, [pc, #48]	@ (8001ad8 <__NVIC_SetPriority+0x4c>)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	0112      	lsls	r2, r2, #4
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab4:	e00a      	b.n	8001acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4908      	ldr	r1, [pc, #32]	@ (8001adc <__NVIC_SetPriority+0x50>)
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	3b04      	subs	r3, #4
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	440b      	add	r3, r1
 8001aca:	761a      	strb	r2, [r3, #24]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	@ 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	f1c3 0307 	rsb	r3, r3, #7
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	bf28      	it	cs
 8001afe:	2304      	movcs	r3, #4
 8001b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3304      	adds	r3, #4
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d902      	bls.n	8001b10 <NVIC_EncodePriority+0x30>
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3b03      	subs	r3, #3
 8001b0e:	e000      	b.n	8001b12 <NVIC_EncodePriority+0x32>
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	401a      	ands	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b28:	f04f 31ff 	mov.w	r1, #4294967295
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	43d9      	mvns	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	4313      	orrs	r3, r2
         );
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3724      	adds	r7, #36	@ 0x24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ff4c 	bl	80019ec <__NVIC_SetPriorityGrouping>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
 8001b68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6e:	f7ff ff61 	bl	8001a34 <__NVIC_GetPriorityGrouping>
 8001b72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	6978      	ldr	r0, [r7, #20]
 8001b7a:	f7ff ffb1 	bl	8001ae0 <NVIC_EncodePriority>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff80 	bl	8001a8c <__NVIC_SetPriority>
}
 8001b8c:	bf00      	nop
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff54 	bl	8001a50 <__NVIC_EnableIRQ>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00e      	b.n	8001be0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	795b      	ldrb	r3, [r3, #5]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fcd0 	bl	8001578 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bfa:	4b23      	ldr	r3, [pc, #140]	@ (8001c88 <HAL_FLASH_Program+0xa0>)
 8001bfc:	7e1b      	ldrb	r3, [r3, #24]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d101      	bne.n	8001c06 <HAL_FLASH_Program+0x1e>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e03b      	b.n	8001c7e <HAL_FLASH_Program+0x96>
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <HAL_FLASH_Program+0xa0>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c10:	f000 f860 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001c14:	4603      	mov	r3, r0
 8001c16:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d12b      	bne.n	8001c76 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001c24:	783b      	ldrb	r3, [r7, #0]
 8001c26:	4619      	mov	r1, r3
 8001c28:	68b8      	ldr	r0, [r7, #8]
 8001c2a:	f000 f90b 	bl	8001e44 <FLASH_Program_Byte>
 8001c2e:	e016      	b.n	8001c5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d105      	bne.n	8001c42 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001c36:	883b      	ldrh	r3, [r7, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	68b8      	ldr	r0, [r7, #8]
 8001c3c:	f000 f8de 	bl	8001dfc <FLASH_Program_HalfWord>
 8001c40:	e00d      	b.n	8001c5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d105      	bne.n	8001c54 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	68b8      	ldr	r0, [r7, #8]
 8001c4e:	f000 f8b3 	bl	8001db8 <FLASH_Program_Word>
 8001c52:	e004      	b.n	8001c5e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001c54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c58:	68b8      	ldr	r0, [r7, #8]
 8001c5a:	f000 f87b 	bl	8001d54 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c5e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001c62:	f000 f837 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001c66:	4603      	mov	r3, r0
 8001c68:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001c6a:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <HAL_FLASH_Program+0xa4>)
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	4a07      	ldr	r2, [pc, #28]	@ (8001c8c <HAL_FLASH_Program+0xa4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <HAL_FLASH_Program+0xa0>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200004c0 	.word	0x200004c0
 8001c8c:	40023c00 	.word	0x40023c00

08001c90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <HAL_FLASH_Unlock+0x38>)
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	da0b      	bge.n	8001cba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ca2:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <HAL_FLASH_Unlock+0x38>)
 8001ca4:	4a09      	ldr	r2, [pc, #36]	@ (8001ccc <HAL_FLASH_Unlock+0x3c>)
 8001ca6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ca8:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <HAL_FLASH_Unlock+0x38>)
 8001caa:	4a09      	ldr	r2, [pc, #36]	@ (8001cd0 <HAL_FLASH_Unlock+0x40>)
 8001cac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_FLASH_Unlock+0x38>)
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	da01      	bge.n	8001cba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001cba:	79fb      	ldrb	r3, [r7, #7]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	40023c00 	.word	0x40023c00
 8001ccc:	45670123 	.word	0x45670123
 8001cd0:	cdef89ab 	.word	0xcdef89ab

08001cd4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <FLASH_WaitForLastOperation+0x78>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce6:	f7ff fe51 	bl	800198c <HAL_GetTick>
 8001cea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001cec:	e010      	b.n	8001d10 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d00c      	beq.n	8001d10 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d007      	beq.n	8001d0c <FLASH_WaitForLastOperation+0x38>
 8001cfc:	f7ff fe46 	bl	800198c <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d201      	bcs.n	8001d10 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e019      	b.n	8001d44 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001d10:	4b0f      	ldr	r3, [pc, #60]	@ (8001d50 <FLASH_WaitForLastOperation+0x7c>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1e8      	bne.n	8001cee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d50 <FLASH_WaitForLastOperation+0x7c>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d28:	4b09      	ldr	r3, [pc, #36]	@ (8001d50 <FLASH_WaitForLastOperation+0x7c>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <FLASH_WaitForLastOperation+0x7c>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001d3a:	f000 f8a5 	bl	8001e88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
  
}  
 8001d44:	4618      	mov	r0, r3
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200004c0 	.word	0x200004c0
 8001d50:	40023c00 	.word	0x40023c00

08001d54 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d60:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4a13      	ldr	r2, [pc, #76]	@ (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	4a10      	ldr	r2, [pc, #64]	@ (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d72:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001d76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <FLASH_Program_DoubleWord+0x60>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001d8a:	f3bf 8f6f 	isb	sy
}
 8001d8e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001d90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	2300      	movs	r3, #0
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	3104      	adds	r1, #4
 8001da4:	4613      	mov	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001df8 <FLASH_Program_Word+0x40>)
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8001df8 <FLASH_Program_Word+0x40>)
 8001dc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dcc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001dce:	4b0a      	ldr	r3, [pc, #40]	@ (8001df8 <FLASH_Program_Word+0x40>)
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	4a09      	ldr	r2, [pc, #36]	@ (8001df8 <FLASH_Program_Word+0x40>)
 8001dd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001dda:	4b07      	ldr	r3, [pc, #28]	@ (8001df8 <FLASH_Program_Word+0x40>)
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	4a06      	ldr	r2, [pc, #24]	@ (8001df8 <FLASH_Program_Word+0x40>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	40023c00 	.word	0x40023c00

08001dfc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	460b      	mov	r3, r1
 8001e06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	4a09      	ldr	r2, [pc, #36]	@ (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4a06      	ldr	r2, [pc, #24]	@ (8001e40 <FLASH_Program_HalfWord+0x44>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	801a      	strh	r2, [r3, #0]
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <FLASH_Program_Byte+0x40>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	4a0b      	ldr	r2, [pc, #44]	@ (8001e84 <FLASH_Program_Byte+0x40>)
 8001e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <FLASH_Program_Byte+0x40>)
 8001e5e:	4a09      	ldr	r2, [pc, #36]	@ (8001e84 <FLASH_Program_Byte+0x40>)
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e64:	4b07      	ldr	r3, [pc, #28]	@ (8001e84 <FLASH_Program_Byte+0x40>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4a06      	ldr	r2, [pc, #24]	@ (8001e84 <FLASH_Program_Byte+0x40>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	701a      	strb	r2, [r3, #0]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40023c00 	.word	0x40023c00

08001e88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d008      	beq.n	8001eaa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	f043 0310 	orr.w	r3, r3, #16
 8001ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ea2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001ea4:	4b29      	ldr	r3, [pc, #164]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001eaa:	4b28      	ldr	r3, [pc, #160]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d008      	beq.n	8001ec8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001eb6:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f043 0308 	orr.w	r3, r3, #8
 8001ebe:	4a24      	ldr	r2, [pc, #144]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ec0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001ec2:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ec8:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d008      	beq.n	8001ee6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f043 0304 	orr.w	r3, r3, #4
 8001edc:	4a1c      	ldr	r2, [pc, #112]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ede:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001ee2:	2240      	movs	r2, #64	@ 0x40
 8001ee4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d008      	beq.n	8001f04 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001ef2:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	4a15      	ldr	r2, [pc, #84]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001efc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f00:	2280      	movs	r2, #128	@ 0x80
 8001f02:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001f04:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d009      	beq.n	8001f24 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	4a0d      	ldr	r2, [pc, #52]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001f1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f22:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001f24:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d008      	beq.n	8001f42 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001f30:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f043 0320 	orr.w	r3, r3, #32
 8001f38:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <FLASH_SetErrorCode+0xc8>)
 8001f3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001f3c:	4b03      	ldr	r3, [pc, #12]	@ (8001f4c <FLASH_SetErrorCode+0xc4>)
 8001f3e:	2202      	movs	r2, #2
 8001f40:	60da      	str	r2, [r3, #12]
  }
}
 8001f42:	bf00      	nop
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40023c00 	.word	0x40023c00
 8001f50:	200004c0 	.word	0x200004c0

08001f54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f66:	4b31      	ldr	r3, [pc, #196]	@ (800202c <HAL_FLASHEx_Erase+0xd8>)
 8001f68:	7e1b      	ldrb	r3, [r3, #24]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_FLASHEx_Erase+0x1e>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e058      	b.n	8002024 <HAL_FLASHEx_Erase+0xd0>
 8001f72:	4b2e      	ldr	r3, [pc, #184]	@ (800202c <HAL_FLASHEx_Erase+0xd8>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f78:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f7c:	f7ff feaa 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001f80:	4603      	mov	r3, r0
 8001f82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d148      	bne.n	800201c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d115      	bne.n	8001fc6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	f000 f844 	bl	8002034 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001fb0:	f7ff fe90 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <HAL_FLASHEx_Erase+0xdc>)
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8002030 <HAL_FLASHEx_Erase+0xdc>)
 8001fbe:	f023 0304 	bic.w	r3, r3, #4
 8001fc2:	6113      	str	r3, [r2, #16]
 8001fc4:	e028      	b.n	8002018 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	e01c      	b.n	8002008 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	68b8      	ldr	r0, [r7, #8]
 8001fd8:	f000 f850 	bl	800207c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fdc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001fe0:	f7ff fe78 	bl	8001cd4 <FLASH_WaitForLastOperation>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001fe8:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HAL_FLASHEx_Erase+0xdc>)
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	4a10      	ldr	r2, [pc, #64]	@ (8002030 <HAL_FLASHEx_Erase+0xdc>)
 8001fee:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001ff2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	601a      	str	r2, [r3, #0]
          break;
 8002000:	e00a      	b.n	8002018 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4413      	add	r3, r2
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3da      	bcc.n	8001fce <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002018:	f000 f878 	bl	800210c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800201c:	4b03      	ldr	r3, [pc, #12]	@ (800202c <HAL_FLASHEx_Erase+0xd8>)
 800201e:	2200      	movs	r2, #0
 8002020:	761a      	strb	r2, [r3, #24]

  return status;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200004c0 	.word	0x200004c0
 8002030:	40023c00 	.word	0x40023c00

08002034 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002040:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <FLASH_MassErase+0x44>)
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	4a0c      	ldr	r2, [pc, #48]	@ (8002078 <FLASH_MassErase+0x44>)
 8002046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800204a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800204c:	4b0a      	ldr	r3, [pc, #40]	@ (8002078 <FLASH_MassErase+0x44>)
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	4a09      	ldr	r2, [pc, #36]	@ (8002078 <FLASH_MassErase+0x44>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002058:	4b07      	ldr	r3, [pc, #28]	@ (8002078 <FLASH_MassErase+0x44>)
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	021b      	lsls	r3, r3, #8
 8002060:	4313      	orrs	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <FLASH_MassErase+0x44>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002068:	6113      	str	r3, [r2, #16]
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023c00 	.word	0x40023c00

0800207c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	e010      	b.n	80020ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d103      	bne.n	80020a6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800209e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e009      	b.n	80020ba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d103      	bne.n	80020b4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80020ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	e002      	b.n	80020ba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80020b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020ba:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	4a12      	ldr	r2, [pc, #72]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80020c6:	4b10      	ldr	r3, [pc, #64]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020c8:	691a      	ldr	r2, [r3, #16]
 80020ca:	490f      	ldr	r1, [pc, #60]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80020d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80020dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80020de:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	4a07      	ldr	r2, [pc, #28]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80020f0:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4a04      	ldr	r2, [pc, #16]	@ (8002108 <FLASH_Erase_Sector+0x8c>)
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020fa:	6113      	str	r3, [r2, #16]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40023c00 	.word	0x40023c00

0800210c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002110:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <FLASH_FlushCaches+0x88>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002118:	2b00      	cmp	r3, #0
 800211a:	d017      	beq.n	800214c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800211c:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <FLASH_FlushCaches+0x88>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1c      	ldr	r2, [pc, #112]	@ (8002194 <FLASH_FlushCaches+0x88>)
 8002122:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002126:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002128:	4b1a      	ldr	r3, [pc, #104]	@ (8002194 <FLASH_FlushCaches+0x88>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a19      	ldr	r2, [pc, #100]	@ (8002194 <FLASH_FlushCaches+0x88>)
 800212e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <FLASH_FlushCaches+0x88>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a16      	ldr	r2, [pc, #88]	@ (8002194 <FLASH_FlushCaches+0x88>)
 800213a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800213e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002140:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <FLASH_FlushCaches+0x88>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a13      	ldr	r2, [pc, #76]	@ (8002194 <FLASH_FlushCaches+0x88>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800214a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <FLASH_FlushCaches+0x88>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d017      	beq.n	8002188 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002158:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <FLASH_FlushCaches+0x88>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <FLASH_FlushCaches+0x88>)
 800215e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002162:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <FLASH_FlushCaches+0x88>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	@ (8002194 <FLASH_FlushCaches+0x88>)
 800216a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <FLASH_FlushCaches+0x88>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <FLASH_FlushCaches+0x88>)
 8002176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800217a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <FLASH_FlushCaches+0x88>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <FLASH_FlushCaches+0x88>)
 8002182:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002186:	6013      	str	r3, [r2, #0]
  }
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00

08002198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	@ 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	e159      	b.n	8002468 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b4:	2201      	movs	r2, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	f040 8148 	bne.w	8002462 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d005      	beq.n	80021ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d130      	bne.n	800224c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d017      	beq.n	8002288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d123      	bne.n	80022dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	08da      	lsrs	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3208      	adds	r2, #8
 800229c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	220f      	movs	r2, #15
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	08da      	lsrs	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3208      	adds	r2, #8
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 0203 	and.w	r2, r3, #3
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80a2 	beq.w	8002462 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	4b57      	ldr	r3, [pc, #348]	@ (8002480 <HAL_GPIO_Init+0x2e8>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	4a56      	ldr	r2, [pc, #344]	@ (8002480 <HAL_GPIO_Init+0x2e8>)
 8002328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800232c:	6453      	str	r3, [r2, #68]	@ 0x44
 800232e:	4b54      	ldr	r3, [pc, #336]	@ (8002480 <HAL_GPIO_Init+0x2e8>)
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800233a:	4a52      	ldr	r2, [pc, #328]	@ (8002484 <HAL_GPIO_Init+0x2ec>)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	220f      	movs	r2, #15
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a49      	ldr	r2, [pc, #292]	@ (8002488 <HAL_GPIO_Init+0x2f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x202>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a48      	ldr	r2, [pc, #288]	@ (800248c <HAL_GPIO_Init+0x2f4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x1fe>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a47      	ldr	r2, [pc, #284]	@ (8002490 <HAL_GPIO_Init+0x2f8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x1fa>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a46      	ldr	r2, [pc, #280]	@ (8002494 <HAL_GPIO_Init+0x2fc>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x1f6>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a45      	ldr	r2, [pc, #276]	@ (8002498 <HAL_GPIO_Init+0x300>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x1f2>
 8002386:	2304      	movs	r3, #4
 8002388:	e008      	b.n	800239c <HAL_GPIO_Init+0x204>
 800238a:	2307      	movs	r3, #7
 800238c:	e006      	b.n	800239c <HAL_GPIO_Init+0x204>
 800238e:	2303      	movs	r3, #3
 8002390:	e004      	b.n	800239c <HAL_GPIO_Init+0x204>
 8002392:	2302      	movs	r3, #2
 8002394:	e002      	b.n	800239c <HAL_GPIO_Init+0x204>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_GPIO_Init+0x204>
 800239a:	2300      	movs	r3, #0
 800239c:	69fa      	ldr	r2, [r7, #28]
 800239e:	f002 0203 	and.w	r2, r2, #3
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	4093      	lsls	r3, r2
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023ac:	4935      	ldr	r1, [pc, #212]	@ (8002484 <HAL_GPIO_Init+0x2ec>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	089b      	lsrs	r3, r3, #2
 80023b2:	3302      	adds	r3, #2
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ba:	4b38      	ldr	r3, [pc, #224]	@ (800249c <HAL_GPIO_Init+0x304>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023de:	4a2f      	ldr	r2, [pc, #188]	@ (800249c <HAL_GPIO_Init+0x304>)
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023e4:	4b2d      	ldr	r3, [pc, #180]	@ (800249c <HAL_GPIO_Init+0x304>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	43db      	mvns	r3, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4013      	ands	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002408:	4a24      	ldr	r2, [pc, #144]	@ (800249c <HAL_GPIO_Init+0x304>)
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800240e:	4b23      	ldr	r3, [pc, #140]	@ (800249c <HAL_GPIO_Init+0x304>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	43db      	mvns	r3, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4013      	ands	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002432:	4a1a      	ldr	r2, [pc, #104]	@ (800249c <HAL_GPIO_Init+0x304>)
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002438:	4b18      	ldr	r3, [pc, #96]	@ (800249c <HAL_GPIO_Init+0x304>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d003      	beq.n	800245c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800245c:	4a0f      	ldr	r2, [pc, #60]	@ (800249c <HAL_GPIO_Init+0x304>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	2b0f      	cmp	r3, #15
 800246c:	f67f aea2 	bls.w	80021b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	3724      	adds	r7, #36	@ 0x24
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40023800 	.word	0x40023800
 8002484:	40013800 	.word	0x40013800
 8002488:	40020000 	.word	0x40020000
 800248c:	40020400 	.word	0x40020400
 8002490:	40020800 	.word	0x40020800
 8002494:	40020c00 	.word	0x40020c00
 8002498:	40021000 	.word	0x40021000
 800249c:	40013c00 	.word	0x40013c00

080024a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
 80024ac:	4613      	mov	r3, r2
 80024ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024b0:	787b      	ldrb	r3, [r7, #1]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024b6:	887a      	ldrh	r2, [r7, #2]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024bc:	e003      	b.n	80024c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024be:	887b      	ldrh	r3, [r7, #2]
 80024c0:	041a      	lsls	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	619a      	str	r2, [r3, #24]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024e4:	887a      	ldrh	r2, [r7, #2]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4013      	ands	r3, r2
 80024ea:	041a      	lsls	r2, r3, #16
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	43d9      	mvns	r1, r3
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	400b      	ands	r3, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	619a      	str	r2, [r3, #24]
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e267      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d075      	beq.n	8002612 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002526:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
 800252e:	2b04      	cmp	r3, #4
 8002530:	d00c      	beq.n	800254c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002532:	4b85      	ldr	r3, [pc, #532]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800253a:	2b08      	cmp	r3, #8
 800253c:	d112      	bne.n	8002564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253e:	4b82      	ldr	r3, [pc, #520]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002546:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800254a:	d10b      	bne.n	8002564 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	4b7e      	ldr	r3, [pc, #504]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d05b      	beq.n	8002610 <HAL_RCC_OscConfig+0x108>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d157      	bne.n	8002610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e242      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256c:	d106      	bne.n	800257c <HAL_RCC_OscConfig+0x74>
 800256e:	4b76      	ldr	r3, [pc, #472]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a75      	ldr	r2, [pc, #468]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e01d      	b.n	80025b8 <HAL_RCC_OscConfig+0xb0>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x98>
 8002586:	4b70      	ldr	r3, [pc, #448]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6f      	ldr	r2, [pc, #444]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800258c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b6d      	ldr	r3, [pc, #436]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6c      	ldr	r2, [pc, #432]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e00b      	b.n	80025b8 <HAL_RCC_OscConfig+0xb0>
 80025a0:	4b69      	ldr	r3, [pc, #420]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a68      	ldr	r2, [pc, #416]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b66      	ldr	r3, [pc, #408]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a65      	ldr	r2, [pc, #404]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d013      	beq.n	80025e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7ff f9e4 	bl	800198c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7ff f9e0 	bl	800198c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	@ 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e207      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b5b      	ldr	r3, [pc, #364]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0xc0>
 80025e6:	e014      	b.n	8002612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7ff f9d0 	bl	800198c <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025f0:	f7ff f9cc 	bl	800198c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	@ 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e1f3      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002602:	4b51      	ldr	r3, [pc, #324]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0xe8>
 800260e:	e000      	b.n	8002612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d063      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800261e:	4b4a      	ldr	r3, [pc, #296]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262a:	4b47      	ldr	r3, [pc, #284]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002632:	2b08      	cmp	r3, #8
 8002634:	d11c      	bne.n	8002670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002636:	4b44      	ldr	r3, [pc, #272]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d116      	bne.n	8002670 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_RCC_OscConfig+0x152>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d001      	beq.n	800265a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e1c7      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	4b3b      	ldr	r3, [pc, #236]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4937      	ldr	r1, [pc, #220]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266e:	e03a      	b.n	80026e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d020      	beq.n	80026ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002678:	4b34      	ldr	r3, [pc, #208]	@ (800274c <HAL_RCC_OscConfig+0x244>)
 800267a:	2201      	movs	r2, #1
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267e:	f7ff f985 	bl	800198c <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002686:	f7ff f981 	bl	800198c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e1a8      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002698:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4925      	ldr	r1, [pc, #148]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]
 80026b8:	e015      	b.n	80026e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026ba:	4b24      	ldr	r3, [pc, #144]	@ (800274c <HAL_RCC_OscConfig+0x244>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7ff f964 	bl	800198c <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c8:	f7ff f960 	bl	800198c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e187      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	4b1b      	ldr	r3, [pc, #108]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d036      	beq.n	8002760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d016      	beq.n	8002728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_RCC_OscConfig+0x248>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002700:	f7ff f944 	bl	800198c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002708:	f7ff f940 	bl	800198c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e167      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800271a:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_RCC_OscConfig+0x240>)
 800271c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x200>
 8002726:	e01b      	b.n	8002760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002728:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <HAL_RCC_OscConfig+0x248>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7ff f92d 	bl	800198c <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002734:	e00e      	b.n	8002754 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002736:	f7ff f929 	bl	800198c <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d907      	bls.n	8002754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e150      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
 8002748:	40023800 	.word	0x40023800
 800274c:	42470000 	.word	0x42470000
 8002750:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b88      	ldr	r3, [pc, #544]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ea      	bne.n	8002736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8097 	beq.w	800289c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b81      	ldr	r3, [pc, #516]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	4b7d      	ldr	r3, [pc, #500]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	4a7c      	ldr	r2, [pc, #496]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800278c:	6413      	str	r3, [r2, #64]	@ 0x40
 800278e:	4b7a      	ldr	r3, [pc, #488]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279e:	4b77      	ldr	r3, [pc, #476]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027aa:	4b74      	ldr	r3, [pc, #464]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a73      	ldr	r2, [pc, #460]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b6:	f7ff f8e9 	bl	800198c <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027be:	f7ff f8e5 	bl	800198c <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e10c      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d0:	4b6a      	ldr	r3, [pc, #424]	@ (800297c <HAL_RCC_OscConfig+0x474>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x2ea>
 80027e4:	4b64      	ldr	r3, [pc, #400]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	4a63      	ldr	r2, [pc, #396]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f0:	e01c      	b.n	800282c <HAL_RCC_OscConfig+0x324>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2b05      	cmp	r3, #5
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x30c>
 80027fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	6713      	str	r3, [r2, #112]	@ 0x70
 8002806:	4b5c      	ldr	r3, [pc, #368]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280a:	4a5b      	ldr	r2, [pc, #364]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	@ 0x70
 8002812:	e00b      	b.n	800282c <HAL_RCC_OscConfig+0x324>
 8002814:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a57      	ldr	r2, [pc, #348]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002820:	4b55      	ldr	r3, [pc, #340]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002824:	4a54      	ldr	r2, [pc, #336]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002826:	f023 0304 	bic.w	r3, r3, #4
 800282a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff f8aa 	bl	800198c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7ff f8a6 	bl	800198c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0cb      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0ee      	beq.n	800283c <HAL_RCC_OscConfig+0x334>
 800285e:	e014      	b.n	800288a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002860:	f7ff f894 	bl	800198c <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002866:	e00a      	b.n	800287e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7ff f890 	bl	800198c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0b5      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	4b3e      	ldr	r3, [pc, #248]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ee      	bne.n	8002868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002890:	4b39      	ldr	r3, [pc, #228]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	4a38      	ldr	r2, [pc, #224]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002896:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800289a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a1 	beq.w	80029e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a6:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d05c      	beq.n	800296c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d141      	bne.n	800293e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ba:	4b31      	ldr	r3, [pc, #196]	@ (8002980 <HAL_RCC_OscConfig+0x478>)
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7ff f864 	bl	800198c <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c8:	f7ff f860 	bl	800198c <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e087      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028da:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	019b      	lsls	r3, r3, #6
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	3b01      	subs	r3, #1
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	061b      	lsls	r3, r3, #24
 800290a:	491b      	ldr	r1, [pc, #108]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002910:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <HAL_RCC_OscConfig+0x478>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002916:	f7ff f839 	bl	800198c <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291e:	f7ff f835 	bl	800198c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e05c      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x416>
 800293c:	e054      	b.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_RCC_OscConfig+0x478>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002944:	f7ff f822 	bl	800198c <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7ff f81e 	bl	800198c <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e045      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_OscConfig+0x470>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x444>
 800296a:	e03d      	b.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d107      	bne.n	8002984 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e038      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000
 8002980:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_RCC_OscConfig+0x4ec>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d028      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d121      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d11a      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80029b4:	4013      	ands	r3, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029bc:	4293      	cmp	r3, r2
 80029be:	d111      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	085b      	lsrs	r3, r3, #1
 80029cc:	3b01      	subs	r3, #1
 80029ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d107      	bne.n	80029e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800

080029f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0cc      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b68      	ldr	r3, [pc, #416]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d90c      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b65      	ldr	r3, [pc, #404]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b63      	ldr	r3, [pc, #396]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b8      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a4c:	4b59      	ldr	r3, [pc, #356]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4a58      	ldr	r2, [pc, #352]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a64:	4b53      	ldr	r3, [pc, #332]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a52      	ldr	r2, [pc, #328]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b50      	ldr	r3, [pc, #320]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	494d      	ldr	r1, [pc, #308]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d044      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d107      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a96:	4b47      	ldr	r3, [pc, #284]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d119      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e07f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e067      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b37      	ldr	r3, [pc, #220]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4934      	ldr	r1, [pc, #208]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae8:	f7fe ff50 	bl	800198c <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7fe ff4c 	bl	800198c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e04f      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d20c      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e032      	b.n	8002ba6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4c:	4b19      	ldr	r3, [pc, #100]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4916      	ldr	r1, [pc, #88]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6a:	4b12      	ldr	r3, [pc, #72]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	490e      	ldr	r1, [pc, #56]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b7e:	f000 f821 	bl	8002bc4 <HAL_RCC_GetSysClockFreq>
 8002b82:	4602      	mov	r2, r0
 8002b84:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	490a      	ldr	r1, [pc, #40]	@ (8002bb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	5ccb      	ldrb	r3, [r1, r3]
 8002b92:	fa22 f303 	lsr.w	r3, r2, r3
 8002b96:	4a09      	ldr	r2, [pc, #36]	@ (8002bbc <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b9a:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fdaa 	bl	80016f8 <HAL_InitTick>

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	0800621c 	.word	0x0800621c
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc8:	b094      	sub	sp, #80	@ 0x50
 8002bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bdc:	4b79      	ldr	r3, [pc, #484]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 030c 	and.w	r3, r3, #12
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d00d      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x40>
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	f200 80e1 	bhi.w	8002db0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8002bf6:	e0db      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b73      	ldr	r3, [pc, #460]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002bfc:	e0db      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bfe:	4b73      	ldr	r3, [pc, #460]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x208>)
 8002c00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c02:	e0d8      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c04:	4b6f      	ldr	r3, [pc, #444]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d063      	beq.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c2e:	2300      	movs	r3, #0
 8002c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002c36:	4622      	mov	r2, r4
 8002c38:	462b      	mov	r3, r5
 8002c3a:	f04f 0000 	mov.w	r0, #0
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	0159      	lsls	r1, r3, #5
 8002c44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c48:	0150      	lsls	r0, r2, #5
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	4621      	mov	r1, r4
 8002c50:	1a51      	subs	r1, r2, r1
 8002c52:	6139      	str	r1, [r7, #16]
 8002c54:	4629      	mov	r1, r5
 8002c56:	eb63 0301 	sbc.w	r3, r3, r1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c68:	4659      	mov	r1, fp
 8002c6a:	018b      	lsls	r3, r1, #6
 8002c6c:	4651      	mov	r1, sl
 8002c6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c72:	4651      	mov	r1, sl
 8002c74:	018a      	lsls	r2, r1, #6
 8002c76:	4651      	mov	r1, sl
 8002c78:	ebb2 0801 	subs.w	r8, r2, r1
 8002c7c:	4659      	mov	r1, fp
 8002c7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c96:	4690      	mov	r8, r2
 8002c98:	4699      	mov	r9, r3
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	eb18 0303 	adds.w	r3, r8, r3
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	462b      	mov	r3, r5
 8002ca4:	eb49 0303 	adc.w	r3, r9, r3
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	f04f 0200 	mov.w	r2, #0
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002cb6:	4629      	mov	r1, r5
 8002cb8:	024b      	lsls	r3, r1, #9
 8002cba:	4621      	mov	r1, r4
 8002cbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	024a      	lsls	r2, r1, #9
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cca:	2200      	movs	r2, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cd4:	f7fd fa8c 	bl	80001f0 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ce0:	e058      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce2:	4b38      	ldr	r3, [pc, #224]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	4611      	mov	r1, r2
 8002cee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cf2:	623b      	str	r3, [r7, #32]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cfc:	4642      	mov	r2, r8
 8002cfe:	464b      	mov	r3, r9
 8002d00:	f04f 0000 	mov.w	r0, #0
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	0159      	lsls	r1, r3, #5
 8002d0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0e:	0150      	lsls	r0, r2, #5
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4641      	mov	r1, r8
 8002d16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d34:	ebb2 040a 	subs.w	r4, r2, sl
 8002d38:	eb63 050b 	sbc.w	r5, r3, fp
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	00eb      	lsls	r3, r5, #3
 8002d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4a:	00e2      	lsls	r2, r4, #3
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	461d      	mov	r5, r3
 8002d50:	4643      	mov	r3, r8
 8002d52:	18e3      	adds	r3, r4, r3
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	464b      	mov	r3, r9
 8002d58:	eb45 0303 	adc.w	r3, r5, r3
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6a:	4629      	mov	r1, r5
 8002d6c:	028b      	lsls	r3, r1, #10
 8002d6e:	4621      	mov	r1, r4
 8002d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d74:	4621      	mov	r1, r4
 8002d76:	028a      	lsls	r2, r1, #10
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	61fa      	str	r2, [r7, #28]
 8002d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d88:	f7fd fa32 	bl	80001f0 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002da4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3750      	adds	r7, #80	@ 0x50
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400
 8002dcc:	007a1200 	.word	0x007a1200

08002dd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002dec:	f7ff fff0 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0a9b      	lsrs	r3, r3, #10
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	@ (8002e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	0800622c 	.word	0x0800622c

08002e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e14:	f7ff ffdc 	bl	8002dd0 <HAL_RCC_GetHCLKFreq>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	0b5b      	lsrs	r3, r3, #13
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	4903      	ldr	r1, [pc, #12]	@ (8002e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e26:	5ccb      	ldrb	r3, [r1, r3]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	0800622c 	.word	0x0800622c

08002e38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	220f      	movs	r2, #15
 8002e46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_RCC_GetClockConfig+0x5c>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e54:	4b0f      	ldr	r3, [pc, #60]	@ (8002e94 <HAL_RCC_GetClockConfig+0x5c>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e60:	4b0c      	ldr	r3, [pc, #48]	@ (8002e94 <HAL_RCC_GetClockConfig+0x5c>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e6c:	4b09      	ldr	r3, [pc, #36]	@ (8002e94 <HAL_RCC_GetClockConfig+0x5c>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	08db      	lsrs	r3, r3, #3
 8002e72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e7a:	4b07      	ldr	r3, [pc, #28]	@ (8002e98 <HAL_RCC_GetClockConfig+0x60>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0207 	and.w	r2, r3, #7
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	601a      	str	r2, [r3, #0]
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40023c00 	.word	0x40023c00

08002e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e041      	b.n	8002f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe fb7a 	bl	80015bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3304      	adds	r3, #4
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f000 fa70 	bl	80033c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d001      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e044      	b.n	8002fde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2202      	movs	r2, #2
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1e      	ldr	r2, [pc, #120]	@ (8002fec <HAL_TIM_Base_Start_IT+0xb0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d018      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7e:	d013      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00e      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a19      	ldr	r2, [pc, #100]	@ (8002ff4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d009      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a17      	ldr	r2, [pc, #92]	@ (8002ff8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_TIM_Base_Start_IT+0x6c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a16      	ldr	r2, [pc, #88]	@ (8002ffc <HAL_TIM_Base_Start_IT+0xc0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d111      	bne.n	8002fcc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b06      	cmp	r3, #6
 8002fb8:	d010      	beq.n	8002fdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0201 	orr.w	r2, r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fca:	e007      	b.n	8002fdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40010000 	.word	0x40010000
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00
 8002ffc:	40014000 	.word	0x40014000

08003000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d020      	beq.n	8003064 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0202 	mvn.w	r2, #2
 8003034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f999 	bl	8003382 <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f98b 	bl	800336e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f99c 	bl	8003396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d020      	beq.n	80030b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0204 	mvn.w	r2, #4
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2202      	movs	r2, #2
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f973 	bl	8003382 <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f965 	bl	800336e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f976 	bl	8003396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d020      	beq.n	80030fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0208 	mvn.w	r2, #8
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2204      	movs	r2, #4
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f94d 	bl	8003382 <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f93f 	bl	800336e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f950 	bl	8003396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d020      	beq.n	8003148 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0210 	mvn.w	r2, #16
 8003118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2208      	movs	r2, #8
 800311e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f927 	bl	8003382 <HAL_TIM_IC_CaptureCallback>
 8003134:	e005      	b.n	8003142 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f919 	bl	800336e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f92a 	bl	8003396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0201 	mvn.w	r2, #1
 8003164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fe f860 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00c      	beq.n	8003190 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fab6 	bl	80036fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00c      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f8fb 	bl	80033aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0320 	and.w	r3, r3, #32
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0220 	mvn.w	r2, #32
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 fa88 	bl	80036e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_ConfigClockSource+0x1c>
 80031f8:	2302      	movs	r3, #2
 80031fa:	e0b4      	b.n	8003366 <HAL_TIM_ConfigClockSource+0x186>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800321a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003234:	d03e      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0xd4>
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800323a:	f200 8087 	bhi.w	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800323e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003242:	f000 8086 	beq.w	8003352 <HAL_TIM_ConfigClockSource+0x172>
 8003246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800324a:	d87f      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800324c:	2b70      	cmp	r3, #112	@ 0x70
 800324e:	d01a      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0xa6>
 8003250:	2b70      	cmp	r3, #112	@ 0x70
 8003252:	d87b      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b60      	cmp	r3, #96	@ 0x60
 8003256:	d050      	beq.n	80032fa <HAL_TIM_ConfigClockSource+0x11a>
 8003258:	2b60      	cmp	r3, #96	@ 0x60
 800325a:	d877      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b50      	cmp	r3, #80	@ 0x50
 800325e:	d03c      	beq.n	80032da <HAL_TIM_ConfigClockSource+0xfa>
 8003260:	2b50      	cmp	r3, #80	@ 0x50
 8003262:	d873      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b40      	cmp	r3, #64	@ 0x40
 8003266:	d058      	beq.n	800331a <HAL_TIM_ConfigClockSource+0x13a>
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d86f      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b30      	cmp	r3, #48	@ 0x30
 800326e:	d064      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x15a>
 8003270:	2b30      	cmp	r3, #48	@ 0x30
 8003272:	d86b      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b20      	cmp	r3, #32
 8003276:	d060      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x15a>
 8003278:	2b20      	cmp	r3, #32
 800327a:	d867      	bhi.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b00      	cmp	r3, #0
 800327e:	d05c      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x15a>
 8003280:	2b10      	cmp	r3, #16
 8003282:	d05a      	beq.n	800333a <HAL_TIM_ConfigClockSource+0x15a>
 8003284:	e062      	b.n	800334c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003296:	f000 f999 	bl	80035cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	609a      	str	r2, [r3, #8]
      break;
 80032b2:	e04f      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032c4:	f000 f982 	bl	80035cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032d6:	609a      	str	r2, [r3, #8]
      break;
 80032d8:	e03c      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032e6:	461a      	mov	r2, r3
 80032e8:	f000 f8f6 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2150      	movs	r1, #80	@ 0x50
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f94f 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 80032f8:	e02c      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003306:	461a      	mov	r2, r3
 8003308:	f000 f915 	bl	8003536 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2160      	movs	r1, #96	@ 0x60
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f93f 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8003318:	e01c      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003326:	461a      	mov	r2, r3
 8003328:	f000 f8d6 	bl	80034d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2140      	movs	r1, #64	@ 0x40
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f92f 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 8003338:	e00c      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f000 f926 	bl	8003596 <TIM_ITRx_SetConfig>
      break;
 800334a:	e003      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      break;
 8003350:	e000      	b.n	8003354 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003382:	b480      	push	{r7}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3a      	ldr	r2, [pc, #232]	@ (80034bc <TIM_Base_SetConfig+0xfc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00f      	beq.n	80033f8 <TIM_Base_SetConfig+0x38>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033de:	d00b      	beq.n	80033f8 <TIM_Base_SetConfig+0x38>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a37      	ldr	r2, [pc, #220]	@ (80034c0 <TIM_Base_SetConfig+0x100>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d007      	beq.n	80033f8 <TIM_Base_SetConfig+0x38>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a36      	ldr	r2, [pc, #216]	@ (80034c4 <TIM_Base_SetConfig+0x104>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d003      	beq.n	80033f8 <TIM_Base_SetConfig+0x38>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a35      	ldr	r2, [pc, #212]	@ (80034c8 <TIM_Base_SetConfig+0x108>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d108      	bne.n	800340a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a2b      	ldr	r2, [pc, #172]	@ (80034bc <TIM_Base_SetConfig+0xfc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01b      	beq.n	800344a <TIM_Base_SetConfig+0x8a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d017      	beq.n	800344a <TIM_Base_SetConfig+0x8a>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a28      	ldr	r2, [pc, #160]	@ (80034c0 <TIM_Base_SetConfig+0x100>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <TIM_Base_SetConfig+0x8a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a27      	ldr	r2, [pc, #156]	@ (80034c4 <TIM_Base_SetConfig+0x104>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00f      	beq.n	800344a <TIM_Base_SetConfig+0x8a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a26      	ldr	r2, [pc, #152]	@ (80034c8 <TIM_Base_SetConfig+0x108>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d00b      	beq.n	800344a <TIM_Base_SetConfig+0x8a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a25      	ldr	r2, [pc, #148]	@ (80034cc <TIM_Base_SetConfig+0x10c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d007      	beq.n	800344a <TIM_Base_SetConfig+0x8a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a24      	ldr	r2, [pc, #144]	@ (80034d0 <TIM_Base_SetConfig+0x110>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d003      	beq.n	800344a <TIM_Base_SetConfig+0x8a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a23      	ldr	r2, [pc, #140]	@ (80034d4 <TIM_Base_SetConfig+0x114>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d108      	bne.n	800345c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a0e      	ldr	r2, [pc, #56]	@ (80034bc <TIM_Base_SetConfig+0xfc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d103      	bne.n	8003490 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f023 0201 	bic.w	r2, r3, #1
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	611a      	str	r2, [r3, #16]
  }
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40014400 	.word	0x40014400
 80034d4:	40014800 	.word	0x40014800

080034d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	693a      	ldr	r2, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f023 030a 	bic.w	r3, r3, #10
 8003514:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	621a      	str	r2, [r3, #32]
}
 800352a:	bf00      	nop
 800352c:	371c      	adds	r7, #28
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003536:	b480      	push	{r7}
 8003538:	b087      	sub	sp, #28
 800353a:	af00      	add	r7, sp, #0
 800353c:	60f8      	str	r0, [r7, #12]
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f023 0210 	bic.w	r2, r3, #16
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003560:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	031b      	lsls	r3, r3, #12
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003572:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	621a      	str	r2, [r3, #32]
}
 800358a:	bf00      	nop
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003596:	b480      	push	{r7}
 8003598:	b085      	sub	sp, #20
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f043 0307 	orr.w	r3, r3, #7
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	609a      	str	r2, [r3, #8]
}
 80035c0:	bf00      	nop
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	021a      	lsls	r2, r3, #8
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003620:	2302      	movs	r3, #2
 8003622:	e050      	b.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1c      	ldr	r2, [pc, #112]	@ (80036d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d018      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003670:	d013      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a18      	ldr	r2, [pc, #96]	@ (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00e      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a16      	ldr	r2, [pc, #88]	@ (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d009      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a15      	ldr	r2, [pc, #84]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10c      	bne.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40000400 	.word	0x40000400
 80036dc:	40000800 	.word	0x40000800
 80036e0:	40000c00 	.word	0x40000c00
 80036e4:	40014000 	.word	0x40014000

080036e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e042      	b.n	80037a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd ff62 	bl	8001600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	@ 0x24
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fa09 	bl	8003b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68da      	ldr	r2, [r3, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	@ 0x28
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	4613      	mov	r3, r2
 80037be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d175      	bne.n	80038bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <HAL_UART_Transmit+0x2c>
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e06e      	b.n	80038be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2221      	movs	r2, #33	@ 0x21
 80037ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ee:	f7fe f8cd 	bl	800198c <HAL_GetTick>
 80037f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	88fa      	ldrh	r2, [r7, #6]
 80037f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	88fa      	ldrh	r2, [r7, #6]
 80037fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003808:	d108      	bne.n	800381c <HAL_UART_Transmit+0x6c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d104      	bne.n	800381c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	e003      	b.n	8003824 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003824:	e02e      	b.n	8003884 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2200      	movs	r2, #0
 800382e:	2180      	movs	r1, #128	@ 0x80
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f8df 	bl	80039f4 <UART_WaitOnFlagUntilTimeout>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d005      	beq.n	8003848 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e03a      	b.n	80038be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10b      	bne.n	8003866 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800385c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	3302      	adds	r3, #2
 8003862:	61bb      	str	r3, [r7, #24]
 8003864:	e007      	b.n	8003876 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	3301      	adds	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1cb      	bne.n	8003826 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2200      	movs	r2, #0
 8003896:	2140      	movs	r1, #64	@ 0x40
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f8ab 	bl	80039f4 <UART_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e006      	b.n	80038be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
  }
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b08a      	sub	sp, #40	@ 0x28
 80038ca:	af02      	add	r7, sp, #8
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	603b      	str	r3, [r7, #0]
 80038d2:	4613      	mov	r3, r2
 80038d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	f040 8081 	bne.w	80039ea <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_UART_Receive+0x2e>
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e079      	b.n	80039ec <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2222      	movs	r2, #34	@ 0x22
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800390c:	f7fe f83e 	bl	800198c <HAL_GetTick>
 8003910:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	88fa      	ldrh	r2, [r7, #6]
 8003916:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003926:	d108      	bne.n	800393a <HAL_UART_Receive+0x74>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d104      	bne.n	800393a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003930:	2300      	movs	r3, #0
 8003932:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e003      	b.n	8003942 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003942:	e047      	b.n	80039d4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2200      	movs	r2, #0
 800394c:	2120      	movs	r1, #32
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f850 	bl	80039f4 <UART_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e042      	b.n	80039ec <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10c      	bne.n	8003986 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	b29b      	uxth	r3, r3
 8003974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003978:	b29a      	uxth	r2, r3
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	3302      	adds	r3, #2
 8003982:	61bb      	str	r3, [r7, #24]
 8003984:	e01f      	b.n	80039c6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398e:	d007      	beq.n	80039a0 <HAL_UART_Receive+0xda>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <HAL_UART_Receive+0xe8>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e008      	b.n	80039c0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	3301      	adds	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1b2      	bne.n	8003944 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	e000      	b.n	80039ec <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80039ea:	2302      	movs	r3, #2
  }
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3720      	adds	r7, #32
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a04:	e03b      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d037      	beq.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a0e:	f7fd ffbd 	bl	800198c <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	6a3a      	ldr	r2, [r7, #32]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d302      	bcc.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e03a      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d023      	beq.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	2b80      	cmp	r3, #128	@ 0x80
 8003a3a:	d020      	beq.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b40      	cmp	r3, #64	@ 0x40
 8003a40:	d01d      	beq.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d116      	bne.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 f81d 	bl	8003aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2208      	movs	r2, #8
 8003a70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e00f      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4013      	ands	r3, r2
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	bf0c      	ite	eq
 8003a8e:	2301      	moveq	r3, #1
 8003a90:	2300      	movne	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	461a      	mov	r2, r3
 8003a96:	79fb      	ldrb	r3, [r7, #7]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d0b4      	beq.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b095      	sub	sp, #84	@ 0x54
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ace:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e5      	bne.n	8003aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3314      	adds	r3, #20
 8003ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e5      	bne.n	8003ae2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d119      	bne.n	8003b52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f023 0310 	bic.w	r3, r3, #16
 8003b34:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b3e:	61ba      	str	r2, [r7, #24]
 8003b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	6979      	ldr	r1, [r7, #20]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e5      	bne.n	8003b1e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b60:	bf00      	nop
 8003b62:	3754      	adds	r7, #84	@ 0x54
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b70:	b0c0      	sub	sp, #256	@ 0x100
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b88:	68d9      	ldr	r1, [r3, #12]
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	ea40 0301 	orr.w	r3, r0, r1
 8003b94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bc4:	f021 010c 	bic.w	r1, r1, #12
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bd2:	430b      	orrs	r3, r1
 8003bd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be6:	6999      	ldr	r1, [r3, #24]
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	ea40 0301 	orr.w	r3, r0, r1
 8003bf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	4b8f      	ldr	r3, [pc, #572]	@ (8003e38 <UART_SetConfig+0x2cc>)
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d005      	beq.n	8003c0c <UART_SetConfig+0xa0>
 8003c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b8d      	ldr	r3, [pc, #564]	@ (8003e3c <UART_SetConfig+0x2d0>)
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d104      	bne.n	8003c16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7ff f900 	bl	8002e10 <HAL_RCC_GetPCLK2Freq>
 8003c10:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c14:	e003      	b.n	8003c1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c16:	f7ff f8e7 	bl	8002de8 <HAL_RCC_GetPCLK1Freq>
 8003c1a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c28:	f040 810c 	bne.w	8003e44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c3e:	4622      	mov	r2, r4
 8003c40:	462b      	mov	r3, r5
 8003c42:	1891      	adds	r1, r2, r2
 8003c44:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c46:	415b      	adcs	r3, r3
 8003c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c4e:	4621      	mov	r1, r4
 8003c50:	eb12 0801 	adds.w	r8, r2, r1
 8003c54:	4629      	mov	r1, r5
 8003c56:	eb43 0901 	adc.w	r9, r3, r1
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c6e:	4690      	mov	r8, r2
 8003c70:	4699      	mov	r9, r3
 8003c72:	4623      	mov	r3, r4
 8003c74:	eb18 0303 	adds.w	r3, r8, r3
 8003c78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c7c:	462b      	mov	r3, r5
 8003c7e:	eb49 0303 	adc.w	r3, r9, r3
 8003c82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c92:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	18db      	adds	r3, r3, r3
 8003c9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	eb42 0303 	adc.w	r3, r2, r3
 8003ca6:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ca8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003cac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003cb0:	f7fc fa9e 	bl	80001f0 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4b61      	ldr	r3, [pc, #388]	@ (8003e40 <UART_SetConfig+0x2d4>)
 8003cba:	fba3 2302 	umull	r2, r3, r3, r2
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	011c      	lsls	r4, r3, #4
 8003cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ccc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cd4:	4642      	mov	r2, r8
 8003cd6:	464b      	mov	r3, r9
 8003cd8:	1891      	adds	r1, r2, r2
 8003cda:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cdc:	415b      	adcs	r3, r3
 8003cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	eb12 0a01 	adds.w	sl, r2, r1
 8003cea:	4649      	mov	r1, r9
 8003cec:	eb43 0b01 	adc.w	fp, r3, r1
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d04:	4692      	mov	sl, r2
 8003d06:	469b      	mov	fp, r3
 8003d08:	4643      	mov	r3, r8
 8003d0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d12:	464b      	mov	r3, r9
 8003d14:	eb4b 0303 	adc.w	r3, fp, r3
 8003d18:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d28:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d30:	460b      	mov	r3, r1
 8003d32:	18db      	adds	r3, r3, r3
 8003d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d36:	4613      	mov	r3, r2
 8003d38:	eb42 0303 	adc.w	r3, r2, r3
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d46:	f7fc fa53 	bl	80001f0 <__aeabi_uldivmod>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4b3b      	ldr	r3, [pc, #236]	@ (8003e40 <UART_SetConfig+0x2d4>)
 8003d52:	fba3 2301 	umull	r2, r3, r3, r1
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2264      	movs	r2, #100	@ 0x64
 8003d5a:	fb02 f303 	mul.w	r3, r2, r3
 8003d5e:	1acb      	subs	r3, r1, r3
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d66:	4b36      	ldr	r3, [pc, #216]	@ (8003e40 <UART_SetConfig+0x2d4>)
 8003d68:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d74:	441c      	add	r4, r3
 8003d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d80:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d88:	4642      	mov	r2, r8
 8003d8a:	464b      	mov	r3, r9
 8003d8c:	1891      	adds	r1, r2, r2
 8003d8e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d90:	415b      	adcs	r3, r3
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d98:	4641      	mov	r1, r8
 8003d9a:	1851      	adds	r1, r2, r1
 8003d9c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d9e:	4649      	mov	r1, r9
 8003da0:	414b      	adcs	r3, r1
 8003da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da4:	f04f 0200 	mov.w	r2, #0
 8003da8:	f04f 0300 	mov.w	r3, #0
 8003dac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003db0:	4659      	mov	r1, fp
 8003db2:	00cb      	lsls	r3, r1, #3
 8003db4:	4651      	mov	r1, sl
 8003db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dba:	4651      	mov	r1, sl
 8003dbc:	00ca      	lsls	r2, r1, #3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	4642      	mov	r2, r8
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dcc:	464b      	mov	r3, r9
 8003dce:	460a      	mov	r2, r1
 8003dd0:	eb42 0303 	adc.w	r3, r2, r3
 8003dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003de4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003de8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dec:	460b      	mov	r3, r1
 8003dee:	18db      	adds	r3, r3, r3
 8003df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003df2:	4613      	mov	r3, r2
 8003df4:	eb42 0303 	adc.w	r3, r2, r3
 8003df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e02:	f7fc f9f5 	bl	80001f0 <__aeabi_uldivmod>
 8003e06:	4602      	mov	r2, r0
 8003e08:	460b      	mov	r3, r1
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <UART_SetConfig+0x2d4>)
 8003e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	2164      	movs	r1, #100	@ 0x64
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	3332      	adds	r3, #50	@ 0x32
 8003e1e:	4a08      	ldr	r2, [pc, #32]	@ (8003e40 <UART_SetConfig+0x2d4>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	f003 0207 	and.w	r2, r3, #7
 8003e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4422      	add	r2, r4
 8003e32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e34:	e106      	b.n	8004044 <UART_SetConfig+0x4d8>
 8003e36:	bf00      	nop
 8003e38:	40011000 	.word	0x40011000
 8003e3c:	40011400 	.word	0x40011400
 8003e40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e56:	4642      	mov	r2, r8
 8003e58:	464b      	mov	r3, r9
 8003e5a:	1891      	adds	r1, r2, r2
 8003e5c:	6239      	str	r1, [r7, #32]
 8003e5e:	415b      	adcs	r3, r3
 8003e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e66:	4641      	mov	r1, r8
 8003e68:	1854      	adds	r4, r2, r1
 8003e6a:	4649      	mov	r1, r9
 8003e6c:	eb43 0501 	adc.w	r5, r3, r1
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	00eb      	lsls	r3, r5, #3
 8003e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e7e:	00e2      	lsls	r2, r4, #3
 8003e80:	4614      	mov	r4, r2
 8003e82:	461d      	mov	r5, r3
 8003e84:	4643      	mov	r3, r8
 8003e86:	18e3      	adds	r3, r4, r3
 8003e88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e8c:	464b      	mov	r3, r9
 8003e8e:	eb45 0303 	adc.w	r3, r5, r3
 8003e92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ea2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	008b      	lsls	r3, r1, #2
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	008a      	lsls	r2, r1, #2
 8003ec0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ec4:	f7fc f994 	bl	80001f0 <__aeabi_uldivmod>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4b60      	ldr	r3, [pc, #384]	@ (8004050 <UART_SetConfig+0x4e4>)
 8003ece:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	011c      	lsls	r4, r3, #4
 8003ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eda:	2200      	movs	r2, #0
 8003edc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ee0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ee4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ee8:	4642      	mov	r2, r8
 8003eea:	464b      	mov	r3, r9
 8003eec:	1891      	adds	r1, r2, r2
 8003eee:	61b9      	str	r1, [r7, #24]
 8003ef0:	415b      	adcs	r3, r3
 8003ef2:	61fb      	str	r3, [r7, #28]
 8003ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ef8:	4641      	mov	r1, r8
 8003efa:	1851      	adds	r1, r2, r1
 8003efc:	6139      	str	r1, [r7, #16]
 8003efe:	4649      	mov	r1, r9
 8003f00:	414b      	adcs	r3, r1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f10:	4659      	mov	r1, fp
 8003f12:	00cb      	lsls	r3, r1, #3
 8003f14:	4651      	mov	r1, sl
 8003f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	00ca      	lsls	r2, r1, #3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	4619      	mov	r1, r3
 8003f22:	4603      	mov	r3, r0
 8003f24:	4642      	mov	r2, r8
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	460a      	mov	r2, r1
 8003f30:	eb42 0303 	adc.w	r3, r2, r3
 8003f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f44:	f04f 0200 	mov.w	r2, #0
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f50:	4649      	mov	r1, r9
 8003f52:	008b      	lsls	r3, r1, #2
 8003f54:	4641      	mov	r1, r8
 8003f56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f5a:	4641      	mov	r1, r8
 8003f5c:	008a      	lsls	r2, r1, #2
 8003f5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f62:	f7fc f945 	bl	80001f0 <__aeabi_uldivmod>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4b38      	ldr	r3, [pc, #224]	@ (8004050 <UART_SetConfig+0x4e4>)
 8003f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	2264      	movs	r2, #100	@ 0x64
 8003f76:	fb02 f303 	mul.w	r3, r2, r3
 8003f7a:	1acb      	subs	r3, r1, r3
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	3332      	adds	r3, #50	@ 0x32
 8003f80:	4a33      	ldr	r2, [pc, #204]	@ (8004050 <UART_SetConfig+0x4e4>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f8c:	441c      	add	r4, r3
 8003f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f92:	2200      	movs	r2, #0
 8003f94:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f96:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fac:	4641      	mov	r1, r8
 8003fae:	1851      	adds	r1, r2, r1
 8003fb0:	6039      	str	r1, [r7, #0]
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	414b      	adcs	r3, r1
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	00cb      	lsls	r3, r1, #3
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fce:	4651      	mov	r1, sl
 8003fd0:	00ca      	lsls	r2, r1, #3
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	4642      	mov	r2, r8
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fde:	464b      	mov	r3, r9
 8003fe0:	460a      	mov	r2, r1
 8003fe2:	eb42 0303 	adc.w	r3, r2, r3
 8003fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ff2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004000:	4649      	mov	r1, r9
 8004002:	008b      	lsls	r3, r1, #2
 8004004:	4641      	mov	r1, r8
 8004006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400a:	4641      	mov	r1, r8
 800400c:	008a      	lsls	r2, r1, #2
 800400e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004012:	f7fc f8ed 	bl	80001f0 <__aeabi_uldivmod>
 8004016:	4602      	mov	r2, r0
 8004018:	460b      	mov	r3, r1
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <UART_SetConfig+0x4e4>)
 800401c:	fba3 1302 	umull	r1, r3, r3, r2
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	2164      	movs	r1, #100	@ 0x64
 8004024:	fb01 f303 	mul.w	r3, r1, r3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	3332      	adds	r3, #50	@ 0x32
 800402e:	4a08      	ldr	r2, [pc, #32]	@ (8004050 <UART_SetConfig+0x4e4>)
 8004030:	fba2 2303 	umull	r2, r3, r2, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	f003 020f 	and.w	r2, r3, #15
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4422      	add	r2, r4
 8004042:	609a      	str	r2, [r3, #8]
}
 8004044:	bf00      	nop
 8004046:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004050:	51eb851f 	.word	0x51eb851f

08004054 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004066:	2b84      	cmp	r3, #132	@ 0x84
 8004068:	d005      	beq.n	8004076 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800406a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	3303      	adds	r3, #3
 8004074:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004076:	68fb      	ldr	r3, [r7, #12]
}
 8004078:	4618      	mov	r0, r3
 800407a:	3714      	adds	r7, #20
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004088:	f000 fafc 	bl	8004684 <vTaskStartScheduler>
  
  return osOK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	bd80      	pop	{r7, pc}

08004092 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004092:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004094:	b089      	sub	sp, #36	@ 0x24
 8004096:	af04      	add	r7, sp, #16
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <osThreadCreate+0x54>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01c      	beq.n	80040e6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685c      	ldr	r4, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691e      	ldr	r6, [r3, #16]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ffc8 	bl	8004054 <makeFreeRtosPriority>
 80040c4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040ce:	9202      	str	r2, [sp, #8]
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	9100      	str	r1, [sp, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	4632      	mov	r2, r6
 80040d8:	4629      	mov	r1, r5
 80040da:	4620      	mov	r0, r4
 80040dc:	f000 f8ed 	bl	80042ba <xTaskCreateStatic>
 80040e0:	4603      	mov	r3, r0
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e01c      	b.n	8004120 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685c      	ldr	r4, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040f2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff ffaa 	bl	8004054 <makeFreeRtosPriority>
 8004100:	4602      	mov	r2, r0
 8004102:	f107 030c 	add.w	r3, r7, #12
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	9200      	str	r2, [sp, #0]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	4632      	mov	r2, r6
 800410e:	4629      	mov	r1, r5
 8004110:	4620      	mov	r0, r4
 8004112:	f000 f932 	bl	800437a <xTaskCreate>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d001      	beq.n	8004120 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004120:	68fb      	ldr	r3, [r7, #12]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800412a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <osDelay+0x16>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	e000      	b.n	8004142 <osDelay+0x18>
 8004140:	2301      	movs	r3, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa68 	bl	8004618 <vTaskDelay>
  
  return osOK;
 8004148:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004152:	b480      	push	{r7}
 8004154:	b083      	sub	sp, #12
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f103 0208 	add.w	r2, r3, #8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f04f 32ff 	mov.w	r2, #4294967295
 800416a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f103 0208 	add.w	r2, r3, #8
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f103 0208 	add.w	r2, r3, #8
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420a:	d103      	bne.n	8004214 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	60fb      	str	r3, [r7, #12]
 8004212:	e00c      	b.n	800422e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3308      	adds	r3, #8
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	e002      	b.n	8004222 <vListInsert+0x2e>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	429a      	cmp	r2, r3
 800422c:	d2f6      	bcs.n	800421c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	601a      	str	r2, [r3, #0]
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6892      	ldr	r2, [r2, #8]
 800427c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6852      	ldr	r2, [r2, #4]
 8004286:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	429a      	cmp	r2, r3
 8004290:	d103      	bne.n	800429a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	1e5a      	subs	r2, r3, #1
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b08e      	sub	sp, #56	@ 0x38
 80042be:	af04      	add	r7, sp, #16
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
 80042c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <xTaskCreateStatic+0x4a>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	61fb      	str	r3, [r7, #28]
}
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004304:	23a0      	movs	r3, #160	@ 0xa0
 8004306:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2ba0      	cmp	r3, #160	@ 0xa0
 800430c:	d00b      	beq.n	8004326 <xTaskCreateStatic+0x6c>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	61bb      	str	r3, [r7, #24]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004326:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432a:	2b00      	cmp	r3, #0
 800432c:	d01e      	beq.n	800436c <xTaskCreateStatic+0xb2>
 800432e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01b      	beq.n	800436c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	2202      	movs	r2, #2
 8004342:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004346:	2300      	movs	r3, #0
 8004348:	9303      	str	r3, [sp, #12]
 800434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434c:	9302      	str	r3, [sp, #8]
 800434e:	f107 0314 	add.w	r3, r7, #20
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f850 	bl	8004404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004364:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004366:	f000 f8ed 	bl	8004544 <prvAddNewTaskToReadyList>
 800436a:	e001      	b.n	8004370 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004370:	697b      	ldr	r3, [r7, #20]
	}
 8004372:	4618      	mov	r0, r3
 8004374:	3728      	adds	r7, #40	@ 0x28
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800437a:	b580      	push	{r7, lr}
 800437c:	b08c      	sub	sp, #48	@ 0x30
 800437e:	af04      	add	r7, sp, #16
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4618      	mov	r0, r3
 8004390:	f000 ff02 	bl	8005198 <pvPortMalloc>
 8004394:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00e      	beq.n	80043ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800439c:	20a0      	movs	r0, #160	@ 0xa0
 800439e:	f000 fefb 	bl	8005198 <pvPortMalloc>
 80043a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80043b0:	e005      	b.n	80043be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043b2:	6978      	ldr	r0, [r7, #20]
 80043b4:	f000 ffbe 	bl	8005334 <vPortFree>
 80043b8:	e001      	b.n	80043be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043cc:	88fa      	ldrh	r2, [r7, #6]
 80043ce:	2300      	movs	r3, #0
 80043d0:	9303      	str	r3, [sp, #12]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	9302      	str	r3, [sp, #8]
 80043d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f80e 	bl	8004404 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043e8:	69f8      	ldr	r0, [r7, #28]
 80043ea:	f000 f8ab 	bl	8004544 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	e002      	b.n	80043fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295
 80043f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043fa:	69bb      	ldr	r3, [r7, #24]
	}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3720      	adds	r7, #32
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800441c:	3b01      	subs	r3, #1
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	617b      	str	r3, [r7, #20]
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	e7fd      	b.n	800444a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01f      	beq.n	8004494 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004454:	2300      	movs	r3, #0
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	e012      	b.n	8004480 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	4413      	add	r3, r2
 8004460:	7819      	ldrb	r1, [r3, #0]
 8004462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	4413      	add	r3, r2
 8004468:	3334      	adds	r3, #52	@ 0x34
 800446a:	460a      	mov	r2, r1
 800446c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	4413      	add	r3, r2
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d006      	beq.n	8004488 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3301      	adds	r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b0f      	cmp	r3, #15
 8004484:	d9e9      	bls.n	800445a <prvInitialiseNewTask+0x56>
 8004486:	e000      	b.n	800448a <prvInitialiseNewTask+0x86>
			{
				break;
 8004488:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800448a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004492:	e003      	b.n	800449c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449e:	2b06      	cmp	r3, #6
 80044a0:	d901      	bls.n	80044a6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044a2:	2306      	movs	r3, #6
 80044a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	2200      	movs	r2, #0
 80044b6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	3304      	adds	r3, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fe68 	bl	8004192 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c4:	3318      	adds	r3, #24
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fe63 	bl	8004192 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d4:	f1c3 0207 	rsb	r2, r3, #7
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e4:	2200      	movs	r2, #0
 80044e6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f4:	334c      	adds	r3, #76	@ 0x4c
 80044f6:	224c      	movs	r2, #76	@ 0x4c
 80044f8:	2100      	movs	r1, #0
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 fae6 	bl	8005acc <memset>
 8004500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004502:	4a0d      	ldr	r2, [pc, #52]	@ (8004538 <prvInitialiseNewTask+0x134>)
 8004504:	651a      	str	r2, [r3, #80]	@ 0x50
 8004506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004508:	4a0c      	ldr	r2, [pc, #48]	@ (800453c <prvInitialiseNewTask+0x138>)
 800450a:	655a      	str	r2, [r3, #84]	@ 0x54
 800450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450e:	4a0c      	ldr	r2, [pc, #48]	@ (8004540 <prvInitialiseNewTask+0x13c>)
 8004510:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	68f9      	ldr	r1, [r7, #12]
 8004516:	69b8      	ldr	r0, [r7, #24]
 8004518:	f000 fc2a 	bl	8004d70 <pxPortInitialiseStack>
 800451c:	4602      	mov	r2, r0
 800451e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004520:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800452e:	bf00      	nop
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20004234 	.word	0x20004234
 800453c:	2000429c 	.word	0x2000429c
 8004540:	20004304 	.word	0x20004304

08004544 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800454c:	f000 fd44 	bl	8004fd8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004550:	4b2a      	ldr	r3, [pc, #168]	@ (80045fc <prvAddNewTaskToReadyList+0xb8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	4a29      	ldr	r2, [pc, #164]	@ (80045fc <prvAddNewTaskToReadyList+0xb8>)
 8004558:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800455a:	4b29      	ldr	r3, [pc, #164]	@ (8004600 <prvAddNewTaskToReadyList+0xbc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004562:	4a27      	ldr	r2, [pc, #156]	@ (8004600 <prvAddNewTaskToReadyList+0xbc>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004568:	4b24      	ldr	r3, [pc, #144]	@ (80045fc <prvAddNewTaskToReadyList+0xb8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d110      	bne.n	8004592 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004570:	f000 fad4 	bl	8004b1c <prvInitialiseTaskLists>
 8004574:	e00d      	b.n	8004592 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004576:	4b23      	ldr	r3, [pc, #140]	@ (8004604 <prvAddNewTaskToReadyList+0xc0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800457e:	4b20      	ldr	r3, [pc, #128]	@ (8004600 <prvAddNewTaskToReadyList+0xbc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	429a      	cmp	r2, r3
 800458a:	d802      	bhi.n	8004592 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800458c:	4a1c      	ldr	r2, [pc, #112]	@ (8004600 <prvAddNewTaskToReadyList+0xbc>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004592:	4b1d      	ldr	r3, [pc, #116]	@ (8004608 <prvAddNewTaskToReadyList+0xc4>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	4a1b      	ldr	r2, [pc, #108]	@ (8004608 <prvAddNewTaskToReadyList+0xc4>)
 800459a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	4b19      	ldr	r3, [pc, #100]	@ (800460c <prvAddNewTaskToReadyList+0xc8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	4a18      	ldr	r2, [pc, #96]	@ (800460c <prvAddNewTaskToReadyList+0xc8>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <prvAddNewTaskToReadyList+0xcc>)
 80045bc:	441a      	add	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f7ff fdf1 	bl	80041ac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045ca:	f000 fd37 	bl	800503c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <prvAddNewTaskToReadyList+0xc0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00e      	beq.n	80045f4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <prvAddNewTaskToReadyList+0xbc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d207      	bcs.n	80045f4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <prvAddNewTaskToReadyList+0xd0>)
 80045e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045f4:	bf00      	nop
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	200005e0 	.word	0x200005e0
 8004600:	200004e0 	.word	0x200004e0
 8004604:	200005ec 	.word	0x200005ec
 8004608:	200005fc 	.word	0x200005fc
 800460c:	200005e8 	.word	0x200005e8
 8004610:	200004e4 	.word	0x200004e4
 8004614:	e000ed04 	.word	0xe000ed04

08004618 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d018      	beq.n	800465c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800462a:	4b14      	ldr	r3, [pc, #80]	@ (800467c <vTaskDelay+0x64>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <vTaskDelay+0x32>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	60bb      	str	r3, [r7, #8]
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	e7fd      	b.n	8004646 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800464a:	f000 f885 	bl	8004758 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800464e:	2100      	movs	r1, #0
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fb27 	bl	8004ca4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004656:	f000 f88d 	bl	8004774 <xTaskResumeAll>
 800465a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004662:	4b07      	ldr	r3, [pc, #28]	@ (8004680 <vTaskDelay+0x68>)
 8004664:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004672:	bf00      	nop
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000608 	.word	0x20000608
 8004680:	e000ed04 	.word	0xe000ed04

08004684 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08a      	sub	sp, #40	@ 0x28
 8004688:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004692:	463a      	mov	r2, r7
 8004694:	1d39      	adds	r1, r7, #4
 8004696:	f107 0308 	add.w	r3, r7, #8
 800469a:	4618      	mov	r0, r3
 800469c:	f7fc fb4c 	bl	8000d38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	9202      	str	r2, [sp, #8]
 80046a8:	9301      	str	r3, [sp, #4]
 80046aa:	2300      	movs	r3, #0
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	2300      	movs	r3, #0
 80046b0:	460a      	mov	r2, r1
 80046b2:	4921      	ldr	r1, [pc, #132]	@ (8004738 <vTaskStartScheduler+0xb4>)
 80046b4:	4821      	ldr	r0, [pc, #132]	@ (800473c <vTaskStartScheduler+0xb8>)
 80046b6:	f7ff fe00 	bl	80042ba <xTaskCreateStatic>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a20      	ldr	r2, [pc, #128]	@ (8004740 <vTaskStartScheduler+0xbc>)
 80046be:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004740 <vTaskStartScheduler+0xbc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046c8:	2301      	movs	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e001      	b.n	80046d2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d11b      	bne.n	8004710 <vTaskStartScheduler+0x8c>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	613b      	str	r3, [r7, #16]
}
 80046ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046ec:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <vTaskStartScheduler+0xc0>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	334c      	adds	r3, #76	@ 0x4c
 80046f2:	4a15      	ldr	r2, [pc, #84]	@ (8004748 <vTaskStartScheduler+0xc4>)
 80046f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046f6:	4b15      	ldr	r3, [pc, #84]	@ (800474c <vTaskStartScheduler+0xc8>)
 80046f8:	f04f 32ff 	mov.w	r2, #4294967295
 80046fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046fe:	4b14      	ldr	r3, [pc, #80]	@ (8004750 <vTaskStartScheduler+0xcc>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004704:	4b13      	ldr	r3, [pc, #76]	@ (8004754 <vTaskStartScheduler+0xd0>)
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800470a:	f000 fbc1 	bl	8004e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800470e:	e00f      	b.n	8004730 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d10b      	bne.n	8004730 <vTaskStartScheduler+0xac>
	__asm volatile
 8004718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60fb      	str	r3, [r7, #12]
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	e7fd      	b.n	800472c <vTaskStartScheduler+0xa8>
}
 8004730:	bf00      	nop
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	08006214 	.word	0x08006214
 800473c:	08004aed 	.word	0x08004aed
 8004740:	20000604 	.word	0x20000604
 8004744:	200004e0 	.word	0x200004e0
 8004748:	2000001c 	.word	0x2000001c
 800474c:	20000600 	.word	0x20000600
 8004750:	200005ec 	.word	0x200005ec
 8004754:	200005e4 	.word	0x200005e4

08004758 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800475c:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <vTaskSuspendAll+0x18>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	4a03      	ldr	r2, [pc, #12]	@ (8004770 <vTaskSuspendAll+0x18>)
 8004764:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004766:	bf00      	nop
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	20000608 	.word	0x20000608

08004774 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004782:	4b42      	ldr	r3, [pc, #264]	@ (800488c <xTaskResumeAll+0x118>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10b      	bne.n	80047a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	603b      	str	r3, [r7, #0]
}
 800479c:	bf00      	nop
 800479e:	bf00      	nop
 80047a0:	e7fd      	b.n	800479e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047a2:	f000 fc19 	bl	8004fd8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047a6:	4b39      	ldr	r3, [pc, #228]	@ (800488c <xTaskResumeAll+0x118>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	4a37      	ldr	r2, [pc, #220]	@ (800488c <xTaskResumeAll+0x118>)
 80047ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047b0:	4b36      	ldr	r3, [pc, #216]	@ (800488c <xTaskResumeAll+0x118>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d161      	bne.n	800487c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047b8:	4b35      	ldr	r3, [pc, #212]	@ (8004890 <xTaskResumeAll+0x11c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d05d      	beq.n	800487c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047c0:	e02e      	b.n	8004820 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c2:	4b34      	ldr	r3, [pc, #208]	@ (8004894 <xTaskResumeAll+0x120>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3318      	adds	r3, #24
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fd49 	bl	8004266 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3304      	adds	r3, #4
 80047d8:	4618      	mov	r0, r3
 80047da:	f7ff fd44 	bl	8004266 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	2201      	movs	r2, #1
 80047e4:	409a      	lsls	r2, r3
 80047e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004898 <xTaskResumeAll+0x124>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004898 <xTaskResumeAll+0x124>)
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4a27      	ldr	r2, [pc, #156]	@ (800489c <xTaskResumeAll+0x128>)
 80047fe:	441a      	add	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3304      	adds	r3, #4
 8004804:	4619      	mov	r1, r3
 8004806:	4610      	mov	r0, r2
 8004808:	f7ff fcd0 	bl	80041ac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	4b23      	ldr	r3, [pc, #140]	@ (80048a0 <xTaskResumeAll+0x12c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	429a      	cmp	r2, r3
 8004818:	d302      	bcc.n	8004820 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800481a:	4b22      	ldr	r3, [pc, #136]	@ (80048a4 <xTaskResumeAll+0x130>)
 800481c:	2201      	movs	r2, #1
 800481e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004820:	4b1c      	ldr	r3, [pc, #112]	@ (8004894 <xTaskResumeAll+0x120>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1cc      	bne.n	80047c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800482e:	f000 fa19 	bl	8004c64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004832:	4b1d      	ldr	r3, [pc, #116]	@ (80048a8 <xTaskResumeAll+0x134>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d010      	beq.n	8004860 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800483e:	f000 f837 	bl	80048b0 <xTaskIncrementTick>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004848:	4b16      	ldr	r3, [pc, #88]	@ (80048a4 <xTaskResumeAll+0x130>)
 800484a:	2201      	movs	r2, #1
 800484c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3b01      	subs	r3, #1
 8004852:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f1      	bne.n	800483e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800485a:	4b13      	ldr	r3, [pc, #76]	@ (80048a8 <xTaskResumeAll+0x134>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004860:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <xTaskResumeAll+0x130>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004868:	2301      	movs	r3, #1
 800486a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800486c:	4b0f      	ldr	r3, [pc, #60]	@ (80048ac <xTaskResumeAll+0x138>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800487c:	f000 fbde 	bl	800503c <vPortExitCritical>

	return xAlreadyYielded;
 8004880:	68bb      	ldr	r3, [r7, #8]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000608 	.word	0x20000608
 8004890:	200005e0 	.word	0x200005e0
 8004894:	200005a0 	.word	0x200005a0
 8004898:	200005e8 	.word	0x200005e8
 800489c:	200004e4 	.word	0x200004e4
 80048a0:	200004e0 	.word	0x200004e0
 80048a4:	200005f4 	.word	0x200005f4
 80048a8:	200005f0 	.word	0x200005f0
 80048ac:	e000ed04 	.word	0xe000ed04

080048b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048ba:	4b4f      	ldr	r3, [pc, #316]	@ (80049f8 <xTaskIncrementTick+0x148>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 808f 	bne.w	80049e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048c4:	4b4d      	ldr	r3, [pc, #308]	@ (80049fc <xTaskIncrementTick+0x14c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3301      	adds	r3, #1
 80048ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048cc:	4a4b      	ldr	r2, [pc, #300]	@ (80049fc <xTaskIncrementTick+0x14c>)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d121      	bne.n	800491c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80048d8:	4b49      	ldr	r3, [pc, #292]	@ (8004a00 <xTaskIncrementTick+0x150>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	603b      	str	r3, [r7, #0]
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	e7fd      	b.n	80048f6 <xTaskIncrementTick+0x46>
 80048fa:	4b41      	ldr	r3, [pc, #260]	@ (8004a00 <xTaskIncrementTick+0x150>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	4b40      	ldr	r3, [pc, #256]	@ (8004a04 <xTaskIncrementTick+0x154>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a3e      	ldr	r2, [pc, #248]	@ (8004a00 <xTaskIncrementTick+0x150>)
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4a3e      	ldr	r2, [pc, #248]	@ (8004a04 <xTaskIncrementTick+0x154>)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a08 <xTaskIncrementTick+0x158>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	4a3c      	ldr	r2, [pc, #240]	@ (8004a08 <xTaskIncrementTick+0x158>)
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	f000 f9a4 	bl	8004c64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800491c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a0c <xTaskIncrementTick+0x15c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	429a      	cmp	r2, r3
 8004924:	d348      	bcc.n	80049b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004926:	4b36      	ldr	r3, [pc, #216]	@ (8004a00 <xTaskIncrementTick+0x150>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004930:	4b36      	ldr	r3, [pc, #216]	@ (8004a0c <xTaskIncrementTick+0x15c>)
 8004932:	f04f 32ff 	mov.w	r2, #4294967295
 8004936:	601a      	str	r2, [r3, #0]
					break;
 8004938:	e03e      	b.n	80049b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800493a:	4b31      	ldr	r3, [pc, #196]	@ (8004a00 <xTaskIncrementTick+0x150>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	429a      	cmp	r2, r3
 8004950:	d203      	bcs.n	800495a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004952:	4a2e      	ldr	r2, [pc, #184]	@ (8004a0c <xTaskIncrementTick+0x15c>)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004958:	e02e      	b.n	80049b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3304      	adds	r3, #4
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fc81 	bl	8004266 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	3318      	adds	r3, #24
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fc78 	bl	8004266 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	2201      	movs	r2, #1
 800497c:	409a      	lsls	r2, r3
 800497e:	4b24      	ldr	r3, [pc, #144]	@ (8004a10 <xTaskIncrementTick+0x160>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	4a22      	ldr	r2, [pc, #136]	@ (8004a10 <xTaskIncrementTick+0x160>)
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4a1f      	ldr	r2, [pc, #124]	@ (8004a14 <xTaskIncrementTick+0x164>)
 8004996:	441a      	add	r2, r3
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7ff fc04 	bl	80041ac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a18 <xTaskIncrementTick+0x168>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d3b9      	bcc.n	8004926 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049b2:	2301      	movs	r3, #1
 80049b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049b6:	e7b6      	b.n	8004926 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049b8:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <xTaskIncrementTick+0x168>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049be:	4915      	ldr	r1, [pc, #84]	@ (8004a14 <xTaskIncrementTick+0x164>)
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d901      	bls.n	80049d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049d4:	4b11      	ldr	r3, [pc, #68]	@ (8004a1c <xTaskIncrementTick+0x16c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049dc:	2301      	movs	r3, #1
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	e004      	b.n	80049ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a20 <xTaskIncrementTick+0x170>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004a20 <xTaskIncrementTick+0x170>)
 80049ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049ec:	697b      	ldr	r3, [r7, #20]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000608 	.word	0x20000608
 80049fc:	200005e4 	.word	0x200005e4
 8004a00:	20000598 	.word	0x20000598
 8004a04:	2000059c 	.word	0x2000059c
 8004a08:	200005f8 	.word	0x200005f8
 8004a0c:	20000600 	.word	0x20000600
 8004a10:	200005e8 	.word	0x200005e8
 8004a14:	200004e4 	.word	0x200004e4
 8004a18:	200004e0 	.word	0x200004e0
 8004a1c:	200005f4 	.word	0x200005f4
 8004a20:	200005f0 	.word	0x200005f0

08004a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad4 <vTaskSwitchContext+0xb0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a32:	4b29      	ldr	r3, [pc, #164]	@ (8004ad8 <vTaskSwitchContext+0xb4>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a38:	e045      	b.n	8004ac6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004a3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <vTaskSwitchContext+0xb4>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a40:	4b26      	ldr	r3, [pc, #152]	@ (8004adc <vTaskSwitchContext+0xb8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	fab3 f383 	clz	r3, r3
 8004a4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004a4e:	7afb      	ldrb	r3, [r7, #11]
 8004a50:	f1c3 031f 	rsb	r3, r3, #31
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	4922      	ldr	r1, [pc, #136]	@ (8004ae0 <vTaskSwitchContext+0xbc>)
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10b      	bne.n	8004a82 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	607b      	str	r3, [r7, #4]
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <vTaskSwitchContext+0x5a>
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ae0 <vTaskSwitchContext+0xbc>)
 8004a8e:	4413      	add	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	3308      	adds	r3, #8
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d104      	bne.n	8004ab2 <vTaskSwitchContext+0x8e>
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae4 <vTaskSwitchContext+0xc0>)
 8004aba:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004abc:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <vTaskSwitchContext+0xc0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	334c      	adds	r3, #76	@ 0x4c
 8004ac2:	4a09      	ldr	r2, [pc, #36]	@ (8004ae8 <vTaskSwitchContext+0xc4>)
 8004ac4:	6013      	str	r3, [r2, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000608 	.word	0x20000608
 8004ad8:	200005f4 	.word	0x200005f4
 8004adc:	200005e8 	.word	0x200005e8
 8004ae0:	200004e4 	.word	0x200004e4
 8004ae4:	200004e0 	.word	0x200004e0
 8004ae8:	2000001c 	.word	0x2000001c

08004aec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004af4:	f000 f852 	bl	8004b9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004af8:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <prvIdleTask+0x28>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d9f9      	bls.n	8004af4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <prvIdleTask+0x2c>)
 8004b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b10:	e7f0      	b.n	8004af4 <prvIdleTask+0x8>
 8004b12:	bf00      	nop
 8004b14:	200004e4 	.word	0x200004e4
 8004b18:	e000ed04 	.word	0xe000ed04

08004b1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b22:	2300      	movs	r3, #0
 8004b24:	607b      	str	r3, [r7, #4]
 8004b26:	e00c      	b.n	8004b42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <prvInitialiseTaskLists+0x60>)
 8004b34:	4413      	add	r3, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7ff fb0b 	bl	8004152 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b06      	cmp	r3, #6
 8004b46:	d9ef      	bls.n	8004b28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b48:	480d      	ldr	r0, [pc, #52]	@ (8004b80 <prvInitialiseTaskLists+0x64>)
 8004b4a:	f7ff fb02 	bl	8004152 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b4e:	480d      	ldr	r0, [pc, #52]	@ (8004b84 <prvInitialiseTaskLists+0x68>)
 8004b50:	f7ff faff 	bl	8004152 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b54:	480c      	ldr	r0, [pc, #48]	@ (8004b88 <prvInitialiseTaskLists+0x6c>)
 8004b56:	f7ff fafc 	bl	8004152 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b5a:	480c      	ldr	r0, [pc, #48]	@ (8004b8c <prvInitialiseTaskLists+0x70>)
 8004b5c:	f7ff faf9 	bl	8004152 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b60:	480b      	ldr	r0, [pc, #44]	@ (8004b90 <prvInitialiseTaskLists+0x74>)
 8004b62:	f7ff faf6 	bl	8004152 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <prvInitialiseTaskLists+0x78>)
 8004b68:	4a05      	ldr	r2, [pc, #20]	@ (8004b80 <prvInitialiseTaskLists+0x64>)
 8004b6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <prvInitialiseTaskLists+0x7c>)
 8004b6e:	4a05      	ldr	r2, [pc, #20]	@ (8004b84 <prvInitialiseTaskLists+0x68>)
 8004b70:	601a      	str	r2, [r3, #0]
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200004e4 	.word	0x200004e4
 8004b80:	20000570 	.word	0x20000570
 8004b84:	20000584 	.word	0x20000584
 8004b88:	200005a0 	.word	0x200005a0
 8004b8c:	200005b4 	.word	0x200005b4
 8004b90:	200005cc 	.word	0x200005cc
 8004b94:	20000598 	.word	0x20000598
 8004b98:	2000059c 	.word	0x2000059c

08004b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ba2:	e019      	b.n	8004bd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ba4:	f000 fa18 	bl	8004fd8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba8:	4b10      	ldr	r3, [pc, #64]	@ (8004bec <prvCheckTasksWaitingTermination+0x50>)
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fb56 	bl	8004266 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <prvCheckTasksWaitingTermination+0x54>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf0 <prvCheckTasksWaitingTermination+0x54>)
 8004bc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <prvCheckTasksWaitingTermination+0x58>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf4 <prvCheckTasksWaitingTermination+0x58>)
 8004bcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bce:	f000 fa35 	bl	800503c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f810 	bl	8004bf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bd8:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <prvCheckTasksWaitingTermination+0x58>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1e1      	bne.n	8004ba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	200005b4 	.word	0x200005b4
 8004bf0:	200005e0 	.word	0x200005e0
 8004bf4:	200005c8 	.word	0x200005c8

08004bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	334c      	adds	r3, #76	@ 0x4c
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 ff79 	bl	8005afc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d108      	bne.n	8004c26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fb8b 	bl	8005334 <vPortFree>
				vPortFree( pxTCB );
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fb88 	bl	8005334 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c24:	e019      	b.n	8004c5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d103      	bne.n	8004c38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fb7f 	bl	8005334 <vPortFree>
	}
 8004c36:	e010      	b.n	8004c5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d00b      	beq.n	8004c5a <prvDeleteTCB+0x62>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	60fb      	str	r3, [r7, #12]
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
 8004c58:	e7fd      	b.n	8004c56 <prvDeleteTCB+0x5e>
	}
 8004c5a:	bf00      	nop
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <prvResetNextTaskUnblockTime+0x38>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8004c76:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c7c:	e008      	b.n	8004c90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c7e:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <prvResetNextTaskUnblockTime+0x38>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ca0 <prvResetNextTaskUnblockTime+0x3c>)
 8004c8e:	6013      	str	r3, [r2, #0]
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000598 	.word	0x20000598
 8004ca0:	20000600 	.word	0x20000600

08004ca4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cae:	4b29      	ldr	r3, [pc, #164]	@ (8004d54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cb4:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fad3 	bl	8004266 <uxListRemove>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10b      	bne.n	8004cde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004cc6:	4b24      	ldr	r3, [pc, #144]	@ (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	2201      	movs	r2, #1
 8004cce:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd2:	43da      	mvns	r2, r3
 8004cd4:	4b21      	ldr	r3, [pc, #132]	@ (8004d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	4a20      	ldr	r2, [pc, #128]	@ (8004d5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004cdc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce4:	d10a      	bne.n	8004cfc <prvAddCurrentTaskToDelayedList+0x58>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cec:	4b1a      	ldr	r3, [pc, #104]	@ (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	481a      	ldr	r0, [pc, #104]	@ (8004d60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004cf6:	f7ff fa59 	bl	80041ac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004cfa:	e026      	b.n	8004d4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4413      	add	r3, r2
 8004d02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d04:	4b14      	ldr	r3, [pc, #80]	@ (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68ba      	ldr	r2, [r7, #8]
 8004d0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d209      	bcs.n	8004d28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d14:	4b13      	ldr	r3, [pc, #76]	@ (8004d64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b0f      	ldr	r3, [pc, #60]	@ (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7ff fa67 	bl	80041f4 <vListInsert>
}
 8004d26:	e010      	b.n	8004d4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d28:	4b0f      	ldr	r3, [pc, #60]	@ (8004d68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3304      	adds	r3, #4
 8004d32:	4619      	mov	r1, r3
 8004d34:	4610      	mov	r0, r2
 8004d36:	f7ff fa5d 	bl	80041f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68ba      	ldr	r2, [r7, #8]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d202      	bcs.n	8004d4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004d44:	4a09      	ldr	r2, [pc, #36]	@ (8004d6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6013      	str	r3, [r2, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	200005e4 	.word	0x200005e4
 8004d58:	200004e0 	.word	0x200004e0
 8004d5c:	200005e8 	.word	0x200005e8
 8004d60:	200005cc 	.word	0x200005cc
 8004d64:	2000059c 	.word	0x2000059c
 8004d68:	20000598 	.word	0x20000598
 8004d6c:	20000600 	.word	0x20000600

08004d70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3b04      	subs	r3, #4
 8004d80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3b04      	subs	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3b04      	subs	r3, #4
 8004d9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004da0:	4a0c      	ldr	r2, [pc, #48]	@ (8004dd4 <pxPortInitialiseStack+0x64>)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3b14      	subs	r3, #20
 8004daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3b04      	subs	r3, #4
 8004db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f06f 0202 	mvn.w	r2, #2
 8004dbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3b20      	subs	r3, #32
 8004dc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3714      	adds	r7, #20
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	08004dd9 	.word	0x08004dd9

08004dd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004de2:	4b13      	ldr	r3, [pc, #76]	@ (8004e30 <prvTaskExitError+0x58>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d00b      	beq.n	8004e04 <prvTaskExitError+0x2c>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	60fb      	str	r3, [r7, #12]
}
 8004dfe:	bf00      	nop
 8004e00:	bf00      	nop
 8004e02:	e7fd      	b.n	8004e00 <prvTaskExitError+0x28>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	60bb      	str	r3, [r7, #8]
}
 8004e16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e18:	bf00      	nop
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0fc      	beq.n	8004e1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	2000000c 	.word	0x2000000c
	...

08004e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e40:	4b07      	ldr	r3, [pc, #28]	@ (8004e60 <pxCurrentTCBConst2>)
 8004e42:	6819      	ldr	r1, [r3, #0]
 8004e44:	6808      	ldr	r0, [r1, #0]
 8004e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4a:	f380 8809 	msr	PSP, r0
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f380 8811 	msr	BASEPRI, r0
 8004e5a:	4770      	bx	lr
 8004e5c:	f3af 8000 	nop.w

08004e60 <pxCurrentTCBConst2>:
 8004e60:	200004e0 	.word	0x200004e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop

08004e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e68:	4808      	ldr	r0, [pc, #32]	@ (8004e8c <prvPortStartFirstTask+0x24>)
 8004e6a:	6800      	ldr	r0, [r0, #0]
 8004e6c:	6800      	ldr	r0, [r0, #0]
 8004e6e:	f380 8808 	msr	MSP, r0
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f380 8814 	msr	CONTROL, r0
 8004e7a:	b662      	cpsie	i
 8004e7c:	b661      	cpsie	f
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	df00      	svc	0
 8004e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e8a:	bf00      	nop
 8004e8c:	e000ed08 	.word	0xe000ed08

08004e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e96:	4b47      	ldr	r3, [pc, #284]	@ (8004fb4 <xPortStartScheduler+0x124>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a47      	ldr	r2, [pc, #284]	@ (8004fb8 <xPortStartScheduler+0x128>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d10b      	bne.n	8004eb8 <xPortStartScheduler+0x28>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea4:	f383 8811 	msr	BASEPRI, r3
 8004ea8:	f3bf 8f6f 	isb	sy
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	613b      	str	r3, [r7, #16]
}
 8004eb2:	bf00      	nop
 8004eb4:	bf00      	nop
 8004eb6:	e7fd      	b.n	8004eb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	@ (8004fb4 <xPortStartScheduler+0x124>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3f      	ldr	r2, [pc, #252]	@ (8004fbc <xPortStartScheduler+0x12c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10b      	bne.n	8004eda <xPortStartScheduler+0x4a>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60fb      	str	r3, [r7, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	e7fd      	b.n	8004ed6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004eda:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <xPortStartScheduler+0x130>)
 8004edc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	22ff      	movs	r2, #255	@ 0xff
 8004eea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	4b31      	ldr	r3, [pc, #196]	@ (8004fc4 <xPortStartScheduler+0x134>)
 8004f00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f02:	4b31      	ldr	r3, [pc, #196]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f04:	2207      	movs	r2, #7
 8004f06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f08:	e009      	b.n	8004f1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	4a2d      	ldr	r2, [pc, #180]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f1e:	78fb      	ldrb	r3, [r7, #3]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f26:	2b80      	cmp	r3, #128	@ 0x80
 8004f28:	d0ef      	beq.n	8004f0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f2a:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f1c3 0307 	rsb	r3, r3, #7
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d00b      	beq.n	8004f4e <xPortStartScheduler+0xbe>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	60bb      	str	r3, [r7, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f58:	4b1b      	ldr	r3, [pc, #108]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f60:	4a19      	ldr	r2, [pc, #100]	@ (8004fc8 <xPortStartScheduler+0x138>)
 8004f62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f6c:	4b17      	ldr	r3, [pc, #92]	@ (8004fcc <xPortStartScheduler+0x13c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <xPortStartScheduler+0x13c>)
 8004f72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f78:	4b14      	ldr	r3, [pc, #80]	@ (8004fcc <xPortStartScheduler+0x13c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a13      	ldr	r2, [pc, #76]	@ (8004fcc <xPortStartScheduler+0x13c>)
 8004f7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004f82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f84:	f000 f8da 	bl	800513c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f88:	4b11      	ldr	r3, [pc, #68]	@ (8004fd0 <xPortStartScheduler+0x140>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f8e:	f000 f8f9 	bl	8005184 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f92:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <xPortStartScheduler+0x144>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a0f      	ldr	r2, [pc, #60]	@ (8004fd4 <xPortStartScheduler+0x144>)
 8004f98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004f9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f9e:	f7ff ff63 	bl	8004e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fa2:	f7ff fd3f 	bl	8004a24 <vTaskSwitchContext>
	prvTaskExitError();
 8004fa6:	f7ff ff17 	bl	8004dd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	e000ed00 	.word	0xe000ed00
 8004fb8:	410fc271 	.word	0x410fc271
 8004fbc:	410fc270 	.word	0x410fc270
 8004fc0:	e000e400 	.word	0xe000e400
 8004fc4:	2000060c 	.word	0x2000060c
 8004fc8:	20000610 	.word	0x20000610
 8004fcc:	e000ed20 	.word	0xe000ed20
 8004fd0:	2000000c 	.word	0x2000000c
 8004fd4:	e000ef34 	.word	0xe000ef34

08004fd8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <vPortEnterCritical+0x5c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <vPortEnterCritical+0x5c>)
 8004ffa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8005034 <vPortEnterCritical+0x5c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d110      	bne.n	8005026 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005004:	4b0c      	ldr	r3, [pc, #48]	@ (8005038 <vPortEnterCritical+0x60>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <vPortEnterCritical+0x4e>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	603b      	str	r3, [r7, #0]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <vPortEnterCritical+0x4a>
	}
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	2000000c 	.word	0x2000000c
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005042:	4b12      	ldr	r3, [pc, #72]	@ (800508c <vPortExitCritical+0x50>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <vPortExitCritical+0x26>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	607b      	str	r3, [r7, #4]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005062:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <vPortExitCritical+0x50>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3b01      	subs	r3, #1
 8005068:	4a08      	ldr	r2, [pc, #32]	@ (800508c <vPortExitCritical+0x50>)
 800506a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800506c:	4b07      	ldr	r3, [pc, #28]	@ (800508c <vPortExitCritical+0x50>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <vPortExitCritical+0x44>
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800507e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	2000000c 	.word	0x2000000c

08005090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005090:	f3ef 8009 	mrs	r0, PSP
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4b15      	ldr	r3, [pc, #84]	@ (80050f0 <pxCurrentTCBConst>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	f01e 0f10 	tst.w	lr, #16
 80050a0:	bf08      	it	eq
 80050a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80050a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050aa:	6010      	str	r0, [r2, #0]
 80050ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80050b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80050b4:	f380 8811 	msr	BASEPRI, r0
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f7ff fcb0 	bl	8004a24 <vTaskSwitchContext>
 80050c4:	f04f 0000 	mov.w	r0, #0
 80050c8:	f380 8811 	msr	BASEPRI, r0
 80050cc:	bc09      	pop	{r0, r3}
 80050ce:	6819      	ldr	r1, [r3, #0]
 80050d0:	6808      	ldr	r0, [r1, #0]
 80050d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d6:	f01e 0f10 	tst.w	lr, #16
 80050da:	bf08      	it	eq
 80050dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050e0:	f380 8809 	msr	PSP, r0
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	f3af 8000 	nop.w

080050f0 <pxCurrentTCBConst>:
 80050f0:	200004e0 	.word	0x200004e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop

080050f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	607b      	str	r3, [r7, #4]
}
 8005110:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005112:	f7ff fbcd 	bl	80048b0 <xTaskIncrementTick>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800511c:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <SysTick_Handler+0x40>)
 800511e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f383 8811 	msr	BASEPRI, r3
}
 800512e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	e000ed04 	.word	0xe000ed04

0800513c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005140:	4b0b      	ldr	r3, [pc, #44]	@ (8005170 <vPortSetupTimerInterrupt+0x34>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005146:	4b0b      	ldr	r3, [pc, #44]	@ (8005174 <vPortSetupTimerInterrupt+0x38>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800514c:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <vPortSetupTimerInterrupt+0x3c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a0a      	ldr	r2, [pc, #40]	@ (800517c <vPortSetupTimerInterrupt+0x40>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	099b      	lsrs	r3, r3, #6
 8005158:	4a09      	ldr	r2, [pc, #36]	@ (8005180 <vPortSetupTimerInterrupt+0x44>)
 800515a:	3b01      	subs	r3, #1
 800515c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800515e:	4b04      	ldr	r3, [pc, #16]	@ (8005170 <vPortSetupTimerInterrupt+0x34>)
 8005160:	2207      	movs	r2, #7
 8005162:	601a      	str	r2, [r3, #0]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	e000e010 	.word	0xe000e010
 8005174:	e000e018 	.word	0xe000e018
 8005178:	20000000 	.word	0x20000000
 800517c:	10624dd3 	.word	0x10624dd3
 8005180:	e000e014 	.word	0xe000e014

08005184 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005184:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005194 <vPortEnableVFP+0x10>
 8005188:	6801      	ldr	r1, [r0, #0]
 800518a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800518e:	6001      	str	r1, [r0, #0]
 8005190:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005192:	bf00      	nop
 8005194:	e000ed88 	.word	0xe000ed88

08005198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b08a      	sub	sp, #40	@ 0x28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051a4:	f7ff fad8 	bl	8004758 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051a8:	4b5c      	ldr	r3, [pc, #368]	@ (800531c <pvPortMalloc+0x184>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051b0:	f000 f924 	bl	80053fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005320 <pvPortMalloc+0x188>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 8095 	bne.w	80052ec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d01e      	beq.n	8005206 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80051c8:	2208      	movs	r2, #8
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4413      	add	r3, r2
 80051ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d015      	beq.n	8005206 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f023 0307 	bic.w	r3, r3, #7
 80051e0:	3308      	adds	r3, #8
 80051e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <pvPortMalloc+0x6e>
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	617b      	str	r3, [r7, #20]
}
 8005200:	bf00      	nop
 8005202:	bf00      	nop
 8005204:	e7fd      	b.n	8005202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d06f      	beq.n	80052ec <pvPortMalloc+0x154>
 800520c:	4b45      	ldr	r3, [pc, #276]	@ (8005324 <pvPortMalloc+0x18c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	429a      	cmp	r2, r3
 8005214:	d86a      	bhi.n	80052ec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005216:	4b44      	ldr	r3, [pc, #272]	@ (8005328 <pvPortMalloc+0x190>)
 8005218:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800521a:	4b43      	ldr	r3, [pc, #268]	@ (8005328 <pvPortMalloc+0x190>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005220:	e004      	b.n	800522c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d903      	bls.n	800523e <pvPortMalloc+0xa6>
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f1      	bne.n	8005222 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800523e:	4b37      	ldr	r3, [pc, #220]	@ (800531c <pvPortMalloc+0x184>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005244:	429a      	cmp	r2, r3
 8005246:	d051      	beq.n	80052ec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2208      	movs	r2, #8
 800524e:	4413      	add	r3, r2
 8005250:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	1ad2      	subs	r2, r2, r3
 8005262:	2308      	movs	r3, #8
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	429a      	cmp	r2, r3
 8005268:	d920      	bls.n	80052ac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800526a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4413      	add	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <pvPortMalloc+0xfc>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	613b      	str	r3, [r7, #16]
}
 800528e:	bf00      	nop
 8005290:	bf00      	nop
 8005292:	e7fd      	b.n	8005290 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	1ad2      	subs	r2, r2, r3
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052a6:	69b8      	ldr	r0, [r7, #24]
 80052a8:	f000 f90a 	bl	80054c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005324 <pvPortMalloc+0x18c>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005324 <pvPortMalloc+0x18c>)
 80052b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005324 <pvPortMalloc+0x18c>)
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b1b      	ldr	r3, [pc, #108]	@ (800532c <pvPortMalloc+0x194>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d203      	bcs.n	80052ce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052c6:	4b17      	ldr	r3, [pc, #92]	@ (8005324 <pvPortMalloc+0x18c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a18      	ldr	r2, [pc, #96]	@ (800532c <pvPortMalloc+0x194>)
 80052cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	4b13      	ldr	r3, [pc, #76]	@ (8005320 <pvPortMalloc+0x188>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052e2:	4b13      	ldr	r3, [pc, #76]	@ (8005330 <pvPortMalloc+0x198>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	4a11      	ldr	r2, [pc, #68]	@ (8005330 <pvPortMalloc+0x198>)
 80052ea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052ec:	f7ff fa42 	bl	8004774 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00b      	beq.n	8005312 <pvPortMalloc+0x17a>
	__asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	60fb      	str	r3, [r7, #12]
}
 800530c:	bf00      	nop
 800530e:	bf00      	nop
 8005310:	e7fd      	b.n	800530e <pvPortMalloc+0x176>
	return pvReturn;
 8005312:	69fb      	ldr	r3, [r7, #28]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3728      	adds	r7, #40	@ 0x28
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	2000421c 	.word	0x2000421c
 8005320:	20004230 	.word	0x20004230
 8005324:	20004220 	.word	0x20004220
 8005328:	20004214 	.word	0x20004214
 800532c:	20004224 	.word	0x20004224
 8005330:	20004228 	.word	0x20004228

08005334 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d04f      	beq.n	80053e6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005346:	2308      	movs	r3, #8
 8005348:	425b      	negs	r3, r3
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4413      	add	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	4b25      	ldr	r3, [pc, #148]	@ (80053f0 <vPortFree+0xbc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4013      	ands	r3, r2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <vPortFree+0x46>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60fb      	str	r3, [r7, #12]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <vPortFree+0x66>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	60bb      	str	r3, [r7, #8]
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <vPortFree+0xbc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01e      	beq.n	80053e6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d11a      	bne.n	80053e6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	4b0e      	ldr	r3, [pc, #56]	@ (80053f0 <vPortFree+0xbc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	401a      	ands	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053c0:	f7ff f9ca 	bl	8004758 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	4b0a      	ldr	r3, [pc, #40]	@ (80053f4 <vPortFree+0xc0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4413      	add	r3, r2
 80053ce:	4a09      	ldr	r2, [pc, #36]	@ (80053f4 <vPortFree+0xc0>)
 80053d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053d2:	6938      	ldr	r0, [r7, #16]
 80053d4:	f000 f874 	bl	80054c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053d8:	4b07      	ldr	r3, [pc, #28]	@ (80053f8 <vPortFree+0xc4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3301      	adds	r3, #1
 80053de:	4a06      	ldr	r2, [pc, #24]	@ (80053f8 <vPortFree+0xc4>)
 80053e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053e2:	f7ff f9c7 	bl	8004774 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053e6:	bf00      	nop
 80053e8:	3718      	adds	r7, #24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20004230 	.word	0x20004230
 80053f4:	20004220 	.word	0x20004220
 80053f8:	2000422c 	.word	0x2000422c

080053fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005402:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005406:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005408:	4b27      	ldr	r3, [pc, #156]	@ (80054a8 <prvHeapInit+0xac>)
 800540a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00c      	beq.n	8005430 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3307      	adds	r3, #7
 800541a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0307 	bic.w	r3, r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	4a1f      	ldr	r2, [pc, #124]	@ (80054a8 <prvHeapInit+0xac>)
 800542c:	4413      	add	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005434:	4a1d      	ldr	r2, [pc, #116]	@ (80054ac <prvHeapInit+0xb0>)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800543a:	4b1c      	ldr	r3, [pc, #112]	@ (80054ac <prvHeapInit+0xb0>)
 800543c:	2200      	movs	r2, #0
 800543e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	4413      	add	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005448:	2208      	movs	r2, #8
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0307 	bic.w	r3, r3, #7
 8005456:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4a15      	ldr	r2, [pc, #84]	@ (80054b0 <prvHeapInit+0xb4>)
 800545c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800545e:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <prvHeapInit+0xb4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2200      	movs	r2, #0
 8005464:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005466:	4b12      	ldr	r3, [pc, #72]	@ (80054b0 <prvHeapInit+0xb4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800547c:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <prvHeapInit+0xb4>)
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	4a0a      	ldr	r2, [pc, #40]	@ (80054b4 <prvHeapInit+0xb8>)
 800548a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	4a09      	ldr	r2, [pc, #36]	@ (80054b8 <prvHeapInit+0xbc>)
 8005492:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005494:	4b09      	ldr	r3, [pc, #36]	@ (80054bc <prvHeapInit+0xc0>)
 8005496:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800549a:	601a      	str	r2, [r3, #0]
}
 800549c:	bf00      	nop
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	20000614 	.word	0x20000614
 80054ac:	20004214 	.word	0x20004214
 80054b0:	2000421c 	.word	0x2000421c
 80054b4:	20004224 	.word	0x20004224
 80054b8:	20004220 	.word	0x20004220
 80054bc:	20004230 	.word	0x20004230

080054c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054c8:	4b28      	ldr	r3, [pc, #160]	@ (800556c <prvInsertBlockIntoFreeList+0xac>)
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	e002      	b.n	80054d4 <prvInsertBlockIntoFreeList+0x14>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d8f7      	bhi.n	80054ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	4413      	add	r3, r2
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d108      	bne.n	8005502 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	441a      	add	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	441a      	add	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d118      	bne.n	8005548 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <prvInsertBlockIntoFreeList+0xb0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	429a      	cmp	r2, r3
 8005520:	d00d      	beq.n	800553e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	441a      	add	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e008      	b.n	8005550 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800553e:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <prvInsertBlockIntoFreeList+0xb0>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e003      	b.n	8005550 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d002      	beq.n	800555e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	20004214 	.word	0x20004214
 8005570:	2000421c 	.word	0x2000421c

08005574 <std>:
 8005574:	2300      	movs	r3, #0
 8005576:	b510      	push	{r4, lr}
 8005578:	4604      	mov	r4, r0
 800557a:	e9c0 3300 	strd	r3, r3, [r0]
 800557e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005582:	6083      	str	r3, [r0, #8]
 8005584:	8181      	strh	r1, [r0, #12]
 8005586:	6643      	str	r3, [r0, #100]	@ 0x64
 8005588:	81c2      	strh	r2, [r0, #14]
 800558a:	6183      	str	r3, [r0, #24]
 800558c:	4619      	mov	r1, r3
 800558e:	2208      	movs	r2, #8
 8005590:	305c      	adds	r0, #92	@ 0x5c
 8005592:	f000 fa9b 	bl	8005acc <memset>
 8005596:	4b0d      	ldr	r3, [pc, #52]	@ (80055cc <std+0x58>)
 8005598:	6263      	str	r3, [r4, #36]	@ 0x24
 800559a:	4b0d      	ldr	r3, [pc, #52]	@ (80055d0 <std+0x5c>)
 800559c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800559e:	4b0d      	ldr	r3, [pc, #52]	@ (80055d4 <std+0x60>)
 80055a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055a2:	4b0d      	ldr	r3, [pc, #52]	@ (80055d8 <std+0x64>)
 80055a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80055a6:	4b0d      	ldr	r3, [pc, #52]	@ (80055dc <std+0x68>)
 80055a8:	6224      	str	r4, [r4, #32]
 80055aa:	429c      	cmp	r4, r3
 80055ac:	d006      	beq.n	80055bc <std+0x48>
 80055ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055b2:	4294      	cmp	r4, r2
 80055b4:	d002      	beq.n	80055bc <std+0x48>
 80055b6:	33d0      	adds	r3, #208	@ 0xd0
 80055b8:	429c      	cmp	r4, r3
 80055ba:	d105      	bne.n	80055c8 <std+0x54>
 80055bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80055c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c4:	f000 bb50 	b.w	8005c68 <__retarget_lock_init_recursive>
 80055c8:	bd10      	pop	{r4, pc}
 80055ca:	bf00      	nop
 80055cc:	0800591d 	.word	0x0800591d
 80055d0:	0800593f 	.word	0x0800593f
 80055d4:	08005977 	.word	0x08005977
 80055d8:	0800599b 	.word	0x0800599b
 80055dc:	20004234 	.word	0x20004234

080055e0 <stdio_exit_handler>:
 80055e0:	4a02      	ldr	r2, [pc, #8]	@ (80055ec <stdio_exit_handler+0xc>)
 80055e2:	4903      	ldr	r1, [pc, #12]	@ (80055f0 <stdio_exit_handler+0x10>)
 80055e4:	4803      	ldr	r0, [pc, #12]	@ (80055f4 <stdio_exit_handler+0x14>)
 80055e6:	f000 b869 	b.w	80056bc <_fwalk_sglue>
 80055ea:	bf00      	nop
 80055ec:	20000010 	.word	0x20000010
 80055f0:	08005f79 	.word	0x08005f79
 80055f4:	20000020 	.word	0x20000020

080055f8 <cleanup_stdio>:
 80055f8:	6841      	ldr	r1, [r0, #4]
 80055fa:	4b0c      	ldr	r3, [pc, #48]	@ (800562c <cleanup_stdio+0x34>)
 80055fc:	4299      	cmp	r1, r3
 80055fe:	b510      	push	{r4, lr}
 8005600:	4604      	mov	r4, r0
 8005602:	d001      	beq.n	8005608 <cleanup_stdio+0x10>
 8005604:	f000 fcb8 	bl	8005f78 <_fflush_r>
 8005608:	68a1      	ldr	r1, [r4, #8]
 800560a:	4b09      	ldr	r3, [pc, #36]	@ (8005630 <cleanup_stdio+0x38>)
 800560c:	4299      	cmp	r1, r3
 800560e:	d002      	beq.n	8005616 <cleanup_stdio+0x1e>
 8005610:	4620      	mov	r0, r4
 8005612:	f000 fcb1 	bl	8005f78 <_fflush_r>
 8005616:	68e1      	ldr	r1, [r4, #12]
 8005618:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <cleanup_stdio+0x3c>)
 800561a:	4299      	cmp	r1, r3
 800561c:	d004      	beq.n	8005628 <cleanup_stdio+0x30>
 800561e:	4620      	mov	r0, r4
 8005620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005624:	f000 bca8 	b.w	8005f78 <_fflush_r>
 8005628:	bd10      	pop	{r4, pc}
 800562a:	bf00      	nop
 800562c:	20004234 	.word	0x20004234
 8005630:	2000429c 	.word	0x2000429c
 8005634:	20004304 	.word	0x20004304

08005638 <global_stdio_init.part.0>:
 8005638:	b510      	push	{r4, lr}
 800563a:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <global_stdio_init.part.0+0x30>)
 800563c:	4c0b      	ldr	r4, [pc, #44]	@ (800566c <global_stdio_init.part.0+0x34>)
 800563e:	4a0c      	ldr	r2, [pc, #48]	@ (8005670 <global_stdio_init.part.0+0x38>)
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	4620      	mov	r0, r4
 8005644:	2200      	movs	r2, #0
 8005646:	2104      	movs	r1, #4
 8005648:	f7ff ff94 	bl	8005574 <std>
 800564c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005650:	2201      	movs	r2, #1
 8005652:	2109      	movs	r1, #9
 8005654:	f7ff ff8e 	bl	8005574 <std>
 8005658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800565c:	2202      	movs	r2, #2
 800565e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005662:	2112      	movs	r1, #18
 8005664:	f7ff bf86 	b.w	8005574 <std>
 8005668:	2000436c 	.word	0x2000436c
 800566c:	20004234 	.word	0x20004234
 8005670:	080055e1 	.word	0x080055e1

08005674 <__sfp_lock_acquire>:
 8005674:	4801      	ldr	r0, [pc, #4]	@ (800567c <__sfp_lock_acquire+0x8>)
 8005676:	f000 baf8 	b.w	8005c6a <__retarget_lock_acquire_recursive>
 800567a:	bf00      	nop
 800567c:	20004375 	.word	0x20004375

08005680 <__sfp_lock_release>:
 8005680:	4801      	ldr	r0, [pc, #4]	@ (8005688 <__sfp_lock_release+0x8>)
 8005682:	f000 baf3 	b.w	8005c6c <__retarget_lock_release_recursive>
 8005686:	bf00      	nop
 8005688:	20004375 	.word	0x20004375

0800568c <__sinit>:
 800568c:	b510      	push	{r4, lr}
 800568e:	4604      	mov	r4, r0
 8005690:	f7ff fff0 	bl	8005674 <__sfp_lock_acquire>
 8005694:	6a23      	ldr	r3, [r4, #32]
 8005696:	b11b      	cbz	r3, 80056a0 <__sinit+0x14>
 8005698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569c:	f7ff bff0 	b.w	8005680 <__sfp_lock_release>
 80056a0:	4b04      	ldr	r3, [pc, #16]	@ (80056b4 <__sinit+0x28>)
 80056a2:	6223      	str	r3, [r4, #32]
 80056a4:	4b04      	ldr	r3, [pc, #16]	@ (80056b8 <__sinit+0x2c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1f5      	bne.n	8005698 <__sinit+0xc>
 80056ac:	f7ff ffc4 	bl	8005638 <global_stdio_init.part.0>
 80056b0:	e7f2      	b.n	8005698 <__sinit+0xc>
 80056b2:	bf00      	nop
 80056b4:	080055f9 	.word	0x080055f9
 80056b8:	2000436c 	.word	0x2000436c

080056bc <_fwalk_sglue>:
 80056bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056c0:	4607      	mov	r7, r0
 80056c2:	4688      	mov	r8, r1
 80056c4:	4614      	mov	r4, r2
 80056c6:	2600      	movs	r6, #0
 80056c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056cc:	f1b9 0901 	subs.w	r9, r9, #1
 80056d0:	d505      	bpl.n	80056de <_fwalk_sglue+0x22>
 80056d2:	6824      	ldr	r4, [r4, #0]
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	d1f7      	bne.n	80056c8 <_fwalk_sglue+0xc>
 80056d8:	4630      	mov	r0, r6
 80056da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056de:	89ab      	ldrh	r3, [r5, #12]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d907      	bls.n	80056f4 <_fwalk_sglue+0x38>
 80056e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056e8:	3301      	adds	r3, #1
 80056ea:	d003      	beq.n	80056f4 <_fwalk_sglue+0x38>
 80056ec:	4629      	mov	r1, r5
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	4306      	orrs	r6, r0
 80056f4:	3568      	adds	r5, #104	@ 0x68
 80056f6:	e7e9      	b.n	80056cc <_fwalk_sglue+0x10>

080056f8 <_puts_r>:
 80056f8:	6a03      	ldr	r3, [r0, #32]
 80056fa:	b570      	push	{r4, r5, r6, lr}
 80056fc:	6884      	ldr	r4, [r0, #8]
 80056fe:	4605      	mov	r5, r0
 8005700:	460e      	mov	r6, r1
 8005702:	b90b      	cbnz	r3, 8005708 <_puts_r+0x10>
 8005704:	f7ff ffc2 	bl	800568c <__sinit>
 8005708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800570a:	07db      	lsls	r3, r3, #31
 800570c:	d405      	bmi.n	800571a <_puts_r+0x22>
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	0598      	lsls	r0, r3, #22
 8005712:	d402      	bmi.n	800571a <_puts_r+0x22>
 8005714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005716:	f000 faa8 	bl	8005c6a <__retarget_lock_acquire_recursive>
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	0719      	lsls	r1, r3, #28
 800571e:	d502      	bpl.n	8005726 <_puts_r+0x2e>
 8005720:	6923      	ldr	r3, [r4, #16]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d135      	bne.n	8005792 <_puts_r+0x9a>
 8005726:	4621      	mov	r1, r4
 8005728:	4628      	mov	r0, r5
 800572a:	f000 f979 	bl	8005a20 <__swsetup_r>
 800572e:	b380      	cbz	r0, 8005792 <_puts_r+0x9a>
 8005730:	f04f 35ff 	mov.w	r5, #4294967295
 8005734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005736:	07da      	lsls	r2, r3, #31
 8005738:	d405      	bmi.n	8005746 <_puts_r+0x4e>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	059b      	lsls	r3, r3, #22
 800573e:	d402      	bmi.n	8005746 <_puts_r+0x4e>
 8005740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005742:	f000 fa93 	bl	8005c6c <__retarget_lock_release_recursive>
 8005746:	4628      	mov	r0, r5
 8005748:	bd70      	pop	{r4, r5, r6, pc}
 800574a:	2b00      	cmp	r3, #0
 800574c:	da04      	bge.n	8005758 <_puts_r+0x60>
 800574e:	69a2      	ldr	r2, [r4, #24]
 8005750:	429a      	cmp	r2, r3
 8005752:	dc17      	bgt.n	8005784 <_puts_r+0x8c>
 8005754:	290a      	cmp	r1, #10
 8005756:	d015      	beq.n	8005784 <_puts_r+0x8c>
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	6022      	str	r2, [r4, #0]
 800575e:	7019      	strb	r1, [r3, #0]
 8005760:	68a3      	ldr	r3, [r4, #8]
 8005762:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005766:	3b01      	subs	r3, #1
 8005768:	60a3      	str	r3, [r4, #8]
 800576a:	2900      	cmp	r1, #0
 800576c:	d1ed      	bne.n	800574a <_puts_r+0x52>
 800576e:	2b00      	cmp	r3, #0
 8005770:	da11      	bge.n	8005796 <_puts_r+0x9e>
 8005772:	4622      	mov	r2, r4
 8005774:	210a      	movs	r1, #10
 8005776:	4628      	mov	r0, r5
 8005778:	f000 f913 	bl	80059a2 <__swbuf_r>
 800577c:	3001      	adds	r0, #1
 800577e:	d0d7      	beq.n	8005730 <_puts_r+0x38>
 8005780:	250a      	movs	r5, #10
 8005782:	e7d7      	b.n	8005734 <_puts_r+0x3c>
 8005784:	4622      	mov	r2, r4
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f90b 	bl	80059a2 <__swbuf_r>
 800578c:	3001      	adds	r0, #1
 800578e:	d1e7      	bne.n	8005760 <_puts_r+0x68>
 8005790:	e7ce      	b.n	8005730 <_puts_r+0x38>
 8005792:	3e01      	subs	r6, #1
 8005794:	e7e4      	b.n	8005760 <_puts_r+0x68>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	6022      	str	r2, [r4, #0]
 800579c:	220a      	movs	r2, #10
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e7ee      	b.n	8005780 <_puts_r+0x88>
	...

080057a4 <puts>:
 80057a4:	4b02      	ldr	r3, [pc, #8]	@ (80057b0 <puts+0xc>)
 80057a6:	4601      	mov	r1, r0
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	f7ff bfa5 	b.w	80056f8 <_puts_r>
 80057ae:	bf00      	nop
 80057b0:	2000001c 	.word	0x2000001c

080057b4 <setvbuf>:
 80057b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80057b8:	461d      	mov	r5, r3
 80057ba:	4b57      	ldr	r3, [pc, #348]	@ (8005918 <setvbuf+0x164>)
 80057bc:	681f      	ldr	r7, [r3, #0]
 80057be:	4604      	mov	r4, r0
 80057c0:	460e      	mov	r6, r1
 80057c2:	4690      	mov	r8, r2
 80057c4:	b127      	cbz	r7, 80057d0 <setvbuf+0x1c>
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	b913      	cbnz	r3, 80057d0 <setvbuf+0x1c>
 80057ca:	4638      	mov	r0, r7
 80057cc:	f7ff ff5e 	bl	800568c <__sinit>
 80057d0:	f1b8 0f02 	cmp.w	r8, #2
 80057d4:	d006      	beq.n	80057e4 <setvbuf+0x30>
 80057d6:	f1b8 0f01 	cmp.w	r8, #1
 80057da:	f200 809a 	bhi.w	8005912 <setvbuf+0x15e>
 80057de:	2d00      	cmp	r5, #0
 80057e0:	f2c0 8097 	blt.w	8005912 <setvbuf+0x15e>
 80057e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057e6:	07d9      	lsls	r1, r3, #31
 80057e8:	d405      	bmi.n	80057f6 <setvbuf+0x42>
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	059a      	lsls	r2, r3, #22
 80057ee:	d402      	bmi.n	80057f6 <setvbuf+0x42>
 80057f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057f2:	f000 fa3a 	bl	8005c6a <__retarget_lock_acquire_recursive>
 80057f6:	4621      	mov	r1, r4
 80057f8:	4638      	mov	r0, r7
 80057fa:	f000 fbbd 	bl	8005f78 <_fflush_r>
 80057fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005800:	b141      	cbz	r1, 8005814 <setvbuf+0x60>
 8005802:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005806:	4299      	cmp	r1, r3
 8005808:	d002      	beq.n	8005810 <setvbuf+0x5c>
 800580a:	4638      	mov	r0, r7
 800580c:	f000 fa30 	bl	8005c70 <_free_r>
 8005810:	2300      	movs	r3, #0
 8005812:	6363      	str	r3, [r4, #52]	@ 0x34
 8005814:	2300      	movs	r3, #0
 8005816:	61a3      	str	r3, [r4, #24]
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	89a3      	ldrh	r3, [r4, #12]
 800581c:	061b      	lsls	r3, r3, #24
 800581e:	d503      	bpl.n	8005828 <setvbuf+0x74>
 8005820:	6921      	ldr	r1, [r4, #16]
 8005822:	4638      	mov	r0, r7
 8005824:	f000 fa24 	bl	8005c70 <_free_r>
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	f1b8 0f02 	cmp.w	r8, #2
 8005836:	81a3      	strh	r3, [r4, #12]
 8005838:	d061      	beq.n	80058fe <setvbuf+0x14a>
 800583a:	ab01      	add	r3, sp, #4
 800583c:	466a      	mov	r2, sp
 800583e:	4621      	mov	r1, r4
 8005840:	4638      	mov	r0, r7
 8005842:	f000 fbc1 	bl	8005fc8 <__swhatbuf_r>
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	4318      	orrs	r0, r3
 800584a:	81a0      	strh	r0, [r4, #12]
 800584c:	bb2d      	cbnz	r5, 800589a <setvbuf+0xe6>
 800584e:	9d00      	ldr	r5, [sp, #0]
 8005850:	4628      	mov	r0, r5
 8005852:	f000 fa57 	bl	8005d04 <malloc>
 8005856:	4606      	mov	r6, r0
 8005858:	2800      	cmp	r0, #0
 800585a:	d152      	bne.n	8005902 <setvbuf+0x14e>
 800585c:	f8dd 9000 	ldr.w	r9, [sp]
 8005860:	45a9      	cmp	r9, r5
 8005862:	d140      	bne.n	80058e6 <setvbuf+0x132>
 8005864:	f04f 35ff 	mov.w	r5, #4294967295
 8005868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800586c:	f043 0202 	orr.w	r2, r3, #2
 8005870:	81a2      	strh	r2, [r4, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	60a2      	str	r2, [r4, #8]
 8005876:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800587a:	6022      	str	r2, [r4, #0]
 800587c:	6122      	str	r2, [r4, #16]
 800587e:	2201      	movs	r2, #1
 8005880:	6162      	str	r2, [r4, #20]
 8005882:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005884:	07d6      	lsls	r6, r2, #31
 8005886:	d404      	bmi.n	8005892 <setvbuf+0xde>
 8005888:	0598      	lsls	r0, r3, #22
 800588a:	d402      	bmi.n	8005892 <setvbuf+0xde>
 800588c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800588e:	f000 f9ed 	bl	8005c6c <__retarget_lock_release_recursive>
 8005892:	4628      	mov	r0, r5
 8005894:	b003      	add	sp, #12
 8005896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800589a:	2e00      	cmp	r6, #0
 800589c:	d0d8      	beq.n	8005850 <setvbuf+0x9c>
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	b913      	cbnz	r3, 80058a8 <setvbuf+0xf4>
 80058a2:	4638      	mov	r0, r7
 80058a4:	f7ff fef2 	bl	800568c <__sinit>
 80058a8:	f1b8 0f01 	cmp.w	r8, #1
 80058ac:	bf08      	it	eq
 80058ae:	89a3      	ldrheq	r3, [r4, #12]
 80058b0:	6026      	str	r6, [r4, #0]
 80058b2:	bf04      	itt	eq
 80058b4:	f043 0301 	orreq.w	r3, r3, #1
 80058b8:	81a3      	strheq	r3, [r4, #12]
 80058ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058be:	f013 0208 	ands.w	r2, r3, #8
 80058c2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80058c6:	d01e      	beq.n	8005906 <setvbuf+0x152>
 80058c8:	07d9      	lsls	r1, r3, #31
 80058ca:	bf41      	itttt	mi
 80058cc:	2200      	movmi	r2, #0
 80058ce:	426d      	negmi	r5, r5
 80058d0:	60a2      	strmi	r2, [r4, #8]
 80058d2:	61a5      	strmi	r5, [r4, #24]
 80058d4:	bf58      	it	pl
 80058d6:	60a5      	strpl	r5, [r4, #8]
 80058d8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80058da:	07d2      	lsls	r2, r2, #31
 80058dc:	d401      	bmi.n	80058e2 <setvbuf+0x12e>
 80058de:	059b      	lsls	r3, r3, #22
 80058e0:	d513      	bpl.n	800590a <setvbuf+0x156>
 80058e2:	2500      	movs	r5, #0
 80058e4:	e7d5      	b.n	8005892 <setvbuf+0xde>
 80058e6:	4648      	mov	r0, r9
 80058e8:	f000 fa0c 	bl	8005d04 <malloc>
 80058ec:	4606      	mov	r6, r0
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d0b8      	beq.n	8005864 <setvbuf+0xb0>
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	464d      	mov	r5, r9
 80058fc:	e7cf      	b.n	800589e <setvbuf+0xea>
 80058fe:	2500      	movs	r5, #0
 8005900:	e7b2      	b.n	8005868 <setvbuf+0xb4>
 8005902:	46a9      	mov	r9, r5
 8005904:	e7f5      	b.n	80058f2 <setvbuf+0x13e>
 8005906:	60a2      	str	r2, [r4, #8]
 8005908:	e7e6      	b.n	80058d8 <setvbuf+0x124>
 800590a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800590c:	f000 f9ae 	bl	8005c6c <__retarget_lock_release_recursive>
 8005910:	e7e7      	b.n	80058e2 <setvbuf+0x12e>
 8005912:	f04f 35ff 	mov.w	r5, #4294967295
 8005916:	e7bc      	b.n	8005892 <setvbuf+0xde>
 8005918:	2000001c 	.word	0x2000001c

0800591c <__sread>:
 800591c:	b510      	push	{r4, lr}
 800591e:	460c      	mov	r4, r1
 8005920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005924:	f000 f952 	bl	8005bcc <_read_r>
 8005928:	2800      	cmp	r0, #0
 800592a:	bfab      	itete	ge
 800592c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800592e:	89a3      	ldrhlt	r3, [r4, #12]
 8005930:	181b      	addge	r3, r3, r0
 8005932:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005936:	bfac      	ite	ge
 8005938:	6563      	strge	r3, [r4, #84]	@ 0x54
 800593a:	81a3      	strhlt	r3, [r4, #12]
 800593c:	bd10      	pop	{r4, pc}

0800593e <__swrite>:
 800593e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005942:	461f      	mov	r7, r3
 8005944:	898b      	ldrh	r3, [r1, #12]
 8005946:	05db      	lsls	r3, r3, #23
 8005948:	4605      	mov	r5, r0
 800594a:	460c      	mov	r4, r1
 800594c:	4616      	mov	r6, r2
 800594e:	d505      	bpl.n	800595c <__swrite+0x1e>
 8005950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005954:	2302      	movs	r3, #2
 8005956:	2200      	movs	r2, #0
 8005958:	f000 f926 	bl	8005ba8 <_lseek_r>
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005962:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005966:	81a3      	strh	r3, [r4, #12]
 8005968:	4632      	mov	r2, r6
 800596a:	463b      	mov	r3, r7
 800596c:	4628      	mov	r0, r5
 800596e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005972:	f000 b93d 	b.w	8005bf0 <_write_r>

08005976 <__sseek>:
 8005976:	b510      	push	{r4, lr}
 8005978:	460c      	mov	r4, r1
 800597a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800597e:	f000 f913 	bl	8005ba8 <_lseek_r>
 8005982:	1c43      	adds	r3, r0, #1
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	bf15      	itete	ne
 8005988:	6560      	strne	r0, [r4, #84]	@ 0x54
 800598a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800598e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005992:	81a3      	strheq	r3, [r4, #12]
 8005994:	bf18      	it	ne
 8005996:	81a3      	strhne	r3, [r4, #12]
 8005998:	bd10      	pop	{r4, pc}

0800599a <__sclose>:
 800599a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599e:	f000 b89d 	b.w	8005adc <_close_r>

080059a2 <__swbuf_r>:
 80059a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a4:	460e      	mov	r6, r1
 80059a6:	4614      	mov	r4, r2
 80059a8:	4605      	mov	r5, r0
 80059aa:	b118      	cbz	r0, 80059b4 <__swbuf_r+0x12>
 80059ac:	6a03      	ldr	r3, [r0, #32]
 80059ae:	b90b      	cbnz	r3, 80059b4 <__swbuf_r+0x12>
 80059b0:	f7ff fe6c 	bl	800568c <__sinit>
 80059b4:	69a3      	ldr	r3, [r4, #24]
 80059b6:	60a3      	str	r3, [r4, #8]
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	071a      	lsls	r2, r3, #28
 80059bc:	d501      	bpl.n	80059c2 <__swbuf_r+0x20>
 80059be:	6923      	ldr	r3, [r4, #16]
 80059c0:	b943      	cbnz	r3, 80059d4 <__swbuf_r+0x32>
 80059c2:	4621      	mov	r1, r4
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 f82b 	bl	8005a20 <__swsetup_r>
 80059ca:	b118      	cbz	r0, 80059d4 <__swbuf_r+0x32>
 80059cc:	f04f 37ff 	mov.w	r7, #4294967295
 80059d0:	4638      	mov	r0, r7
 80059d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	6922      	ldr	r2, [r4, #16]
 80059d8:	1a98      	subs	r0, r3, r2
 80059da:	6963      	ldr	r3, [r4, #20]
 80059dc:	b2f6      	uxtb	r6, r6
 80059de:	4283      	cmp	r3, r0
 80059e0:	4637      	mov	r7, r6
 80059e2:	dc05      	bgt.n	80059f0 <__swbuf_r+0x4e>
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 fac6 	bl	8005f78 <_fflush_r>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	d1ed      	bne.n	80059cc <__swbuf_r+0x2a>
 80059f0:	68a3      	ldr	r3, [r4, #8]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	60a3      	str	r3, [r4, #8]
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	6022      	str	r2, [r4, #0]
 80059fc:	701e      	strb	r6, [r3, #0]
 80059fe:	6962      	ldr	r2, [r4, #20]
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d004      	beq.n	8005a10 <__swbuf_r+0x6e>
 8005a06:	89a3      	ldrh	r3, [r4, #12]
 8005a08:	07db      	lsls	r3, r3, #31
 8005a0a:	d5e1      	bpl.n	80059d0 <__swbuf_r+0x2e>
 8005a0c:	2e0a      	cmp	r6, #10
 8005a0e:	d1df      	bne.n	80059d0 <__swbuf_r+0x2e>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4628      	mov	r0, r5
 8005a14:	f000 fab0 	bl	8005f78 <_fflush_r>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d0d9      	beq.n	80059d0 <__swbuf_r+0x2e>
 8005a1c:	e7d6      	b.n	80059cc <__swbuf_r+0x2a>
	...

08005a20 <__swsetup_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4b29      	ldr	r3, [pc, #164]	@ (8005ac8 <__swsetup_r+0xa8>)
 8005a24:	4605      	mov	r5, r0
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	460c      	mov	r4, r1
 8005a2a:	b118      	cbz	r0, 8005a34 <__swsetup_r+0x14>
 8005a2c:	6a03      	ldr	r3, [r0, #32]
 8005a2e:	b90b      	cbnz	r3, 8005a34 <__swsetup_r+0x14>
 8005a30:	f7ff fe2c 	bl	800568c <__sinit>
 8005a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a38:	0719      	lsls	r1, r3, #28
 8005a3a:	d422      	bmi.n	8005a82 <__swsetup_r+0x62>
 8005a3c:	06da      	lsls	r2, r3, #27
 8005a3e:	d407      	bmi.n	8005a50 <__swsetup_r+0x30>
 8005a40:	2209      	movs	r2, #9
 8005a42:	602a      	str	r2, [r5, #0]
 8005a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a48:	81a3      	strh	r3, [r4, #12]
 8005a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a4e:	e033      	b.n	8005ab8 <__swsetup_r+0x98>
 8005a50:	0758      	lsls	r0, r3, #29
 8005a52:	d512      	bpl.n	8005a7a <__swsetup_r+0x5a>
 8005a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a56:	b141      	cbz	r1, 8005a6a <__swsetup_r+0x4a>
 8005a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a5c:	4299      	cmp	r1, r3
 8005a5e:	d002      	beq.n	8005a66 <__swsetup_r+0x46>
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 f905 	bl	8005c70 <_free_r>
 8005a66:	2300      	movs	r3, #0
 8005a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	2300      	movs	r3, #0
 8005a74:	6063      	str	r3, [r4, #4]
 8005a76:	6923      	ldr	r3, [r4, #16]
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f043 0308 	orr.w	r3, r3, #8
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	6923      	ldr	r3, [r4, #16]
 8005a84:	b94b      	cbnz	r3, 8005a9a <__swsetup_r+0x7a>
 8005a86:	89a3      	ldrh	r3, [r4, #12]
 8005a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a90:	d003      	beq.n	8005a9a <__swsetup_r+0x7a>
 8005a92:	4621      	mov	r1, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	f000 fabd 	bl	8006014 <__smakebuf_r>
 8005a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a9e:	f013 0201 	ands.w	r2, r3, #1
 8005aa2:	d00a      	beq.n	8005aba <__swsetup_r+0x9a>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	60a2      	str	r2, [r4, #8]
 8005aa8:	6962      	ldr	r2, [r4, #20]
 8005aaa:	4252      	negs	r2, r2
 8005aac:	61a2      	str	r2, [r4, #24]
 8005aae:	6922      	ldr	r2, [r4, #16]
 8005ab0:	b942      	cbnz	r2, 8005ac4 <__swsetup_r+0xa4>
 8005ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ab6:	d1c5      	bne.n	8005a44 <__swsetup_r+0x24>
 8005ab8:	bd38      	pop	{r3, r4, r5, pc}
 8005aba:	0799      	lsls	r1, r3, #30
 8005abc:	bf58      	it	pl
 8005abe:	6962      	ldrpl	r2, [r4, #20]
 8005ac0:	60a2      	str	r2, [r4, #8]
 8005ac2:	e7f4      	b.n	8005aae <__swsetup_r+0x8e>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	e7f7      	b.n	8005ab8 <__swsetup_r+0x98>
 8005ac8:	2000001c 	.word	0x2000001c

08005acc <memset>:
 8005acc:	4402      	add	r2, r0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d100      	bne.n	8005ad6 <memset+0xa>
 8005ad4:	4770      	bx	lr
 8005ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8005ada:	e7f9      	b.n	8005ad0 <memset+0x4>

08005adc <_close_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d06      	ldr	r5, [pc, #24]	@ (8005af8 <_close_r+0x1c>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	f7fb fcae 	bl	8001448 <_close>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_close_r+0x1a>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_close_r+0x1a>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	20004370 	.word	0x20004370

08005afc <_reclaim_reent>:
 8005afc:	4b29      	ldr	r3, [pc, #164]	@ (8005ba4 <_reclaim_reent+0xa8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4283      	cmp	r3, r0
 8005b02:	b570      	push	{r4, r5, r6, lr}
 8005b04:	4604      	mov	r4, r0
 8005b06:	d04b      	beq.n	8005ba0 <_reclaim_reent+0xa4>
 8005b08:	69c3      	ldr	r3, [r0, #28]
 8005b0a:	b1ab      	cbz	r3, 8005b38 <_reclaim_reent+0x3c>
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	b16b      	cbz	r3, 8005b2c <_reclaim_reent+0x30>
 8005b10:	2500      	movs	r5, #0
 8005b12:	69e3      	ldr	r3, [r4, #28]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	5959      	ldr	r1, [r3, r5]
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	d13b      	bne.n	8005b94 <_reclaim_reent+0x98>
 8005b1c:	3504      	adds	r5, #4
 8005b1e:	2d80      	cmp	r5, #128	@ 0x80
 8005b20:	d1f7      	bne.n	8005b12 <_reclaim_reent+0x16>
 8005b22:	69e3      	ldr	r3, [r4, #28]
 8005b24:	4620      	mov	r0, r4
 8005b26:	68d9      	ldr	r1, [r3, #12]
 8005b28:	f000 f8a2 	bl	8005c70 <_free_r>
 8005b2c:	69e3      	ldr	r3, [r4, #28]
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	b111      	cbz	r1, 8005b38 <_reclaim_reent+0x3c>
 8005b32:	4620      	mov	r0, r4
 8005b34:	f000 f89c 	bl	8005c70 <_free_r>
 8005b38:	6961      	ldr	r1, [r4, #20]
 8005b3a:	b111      	cbz	r1, 8005b42 <_reclaim_reent+0x46>
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 f897 	bl	8005c70 <_free_r>
 8005b42:	69e1      	ldr	r1, [r4, #28]
 8005b44:	b111      	cbz	r1, 8005b4c <_reclaim_reent+0x50>
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 f892 	bl	8005c70 <_free_r>
 8005b4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005b4e:	b111      	cbz	r1, 8005b56 <_reclaim_reent+0x5a>
 8005b50:	4620      	mov	r0, r4
 8005b52:	f000 f88d 	bl	8005c70 <_free_r>
 8005b56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b58:	b111      	cbz	r1, 8005b60 <_reclaim_reent+0x64>
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f000 f888 	bl	8005c70 <_free_r>
 8005b60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b62:	b111      	cbz	r1, 8005b6a <_reclaim_reent+0x6e>
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 f883 	bl	8005c70 <_free_r>
 8005b6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005b6c:	b111      	cbz	r1, 8005b74 <_reclaim_reent+0x78>
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 f87e 	bl	8005c70 <_free_r>
 8005b74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005b76:	b111      	cbz	r1, 8005b7e <_reclaim_reent+0x82>
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 f879 	bl	8005c70 <_free_r>
 8005b7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005b80:	b111      	cbz	r1, 8005b88 <_reclaim_reent+0x8c>
 8005b82:	4620      	mov	r0, r4
 8005b84:	f000 f874 	bl	8005c70 <_free_r>
 8005b88:	6a23      	ldr	r3, [r4, #32]
 8005b8a:	b14b      	cbz	r3, 8005ba0 <_reclaim_reent+0xa4>
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b92:	4718      	bx	r3
 8005b94:	680e      	ldr	r6, [r1, #0]
 8005b96:	4620      	mov	r0, r4
 8005b98:	f000 f86a 	bl	8005c70 <_free_r>
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	e7bb      	b.n	8005b18 <_reclaim_reent+0x1c>
 8005ba0:	bd70      	pop	{r4, r5, r6, pc}
 8005ba2:	bf00      	nop
 8005ba4:	2000001c 	.word	0x2000001c

08005ba8 <_lseek_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4d07      	ldr	r5, [pc, #28]	@ (8005bc8 <_lseek_r+0x20>)
 8005bac:	4604      	mov	r4, r0
 8005bae:	4608      	mov	r0, r1
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	602a      	str	r2, [r5, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f7fb fc5d 	bl	8001476 <_lseek>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_lseek_r+0x1e>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_lseek_r+0x1e>
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	20004370 	.word	0x20004370

08005bcc <_read_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4d07      	ldr	r5, [pc, #28]	@ (8005bec <_read_r+0x20>)
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	4608      	mov	r0, r1
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	602a      	str	r2, [r5, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f7fb fc5c 	bl	8001498 <_read>
 8005be0:	1c43      	adds	r3, r0, #1
 8005be2:	d102      	bne.n	8005bea <_read_r+0x1e>
 8005be4:	682b      	ldr	r3, [r5, #0]
 8005be6:	b103      	cbz	r3, 8005bea <_read_r+0x1e>
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	20004370 	.word	0x20004370

08005bf0 <_write_r>:
 8005bf0:	b538      	push	{r3, r4, r5, lr}
 8005bf2:	4d07      	ldr	r5, [pc, #28]	@ (8005c10 <_write_r+0x20>)
 8005bf4:	4604      	mov	r4, r0
 8005bf6:	4608      	mov	r0, r1
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	602a      	str	r2, [r5, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f7fb fbf6 	bl	80013f0 <_write>
 8005c04:	1c43      	adds	r3, r0, #1
 8005c06:	d102      	bne.n	8005c0e <_write_r+0x1e>
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	b103      	cbz	r3, 8005c0e <_write_r+0x1e>
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	bd38      	pop	{r3, r4, r5, pc}
 8005c10:	20004370 	.word	0x20004370

08005c14 <__errno>:
 8005c14:	4b01      	ldr	r3, [pc, #4]	@ (8005c1c <__errno+0x8>)
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	2000001c 	.word	0x2000001c

08005c20 <__libc_init_array>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4d0d      	ldr	r5, [pc, #52]	@ (8005c58 <__libc_init_array+0x38>)
 8005c24:	4c0d      	ldr	r4, [pc, #52]	@ (8005c5c <__libc_init_array+0x3c>)
 8005c26:	1b64      	subs	r4, r4, r5
 8005c28:	10a4      	asrs	r4, r4, #2
 8005c2a:	2600      	movs	r6, #0
 8005c2c:	42a6      	cmp	r6, r4
 8005c2e:	d109      	bne.n	8005c44 <__libc_init_array+0x24>
 8005c30:	4d0b      	ldr	r5, [pc, #44]	@ (8005c60 <__libc_init_array+0x40>)
 8005c32:	4c0c      	ldr	r4, [pc, #48]	@ (8005c64 <__libc_init_array+0x44>)
 8005c34:	f000 fa5c 	bl	80060f0 <_init>
 8005c38:	1b64      	subs	r4, r4, r5
 8005c3a:	10a4      	asrs	r4, r4, #2
 8005c3c:	2600      	movs	r6, #0
 8005c3e:	42a6      	cmp	r6, r4
 8005c40:	d105      	bne.n	8005c4e <__libc_init_array+0x2e>
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
 8005c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c48:	4798      	blx	r3
 8005c4a:	3601      	adds	r6, #1
 8005c4c:	e7ee      	b.n	8005c2c <__libc_init_array+0xc>
 8005c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c52:	4798      	blx	r3
 8005c54:	3601      	adds	r6, #1
 8005c56:	e7f2      	b.n	8005c3e <__libc_init_array+0x1e>
 8005c58:	0800623c 	.word	0x0800623c
 8005c5c:	0800623c 	.word	0x0800623c
 8005c60:	0800623c 	.word	0x0800623c
 8005c64:	08006240 	.word	0x08006240

08005c68 <__retarget_lock_init_recursive>:
 8005c68:	4770      	bx	lr

08005c6a <__retarget_lock_acquire_recursive>:
 8005c6a:	4770      	bx	lr

08005c6c <__retarget_lock_release_recursive>:
 8005c6c:	4770      	bx	lr
	...

08005c70 <_free_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4605      	mov	r5, r0
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d041      	beq.n	8005cfc <_free_r+0x8c>
 8005c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7c:	1f0c      	subs	r4, r1, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfb8      	it	lt
 8005c82:	18e4      	addlt	r4, r4, r3
 8005c84:	f000 f8e8 	bl	8005e58 <__malloc_lock>
 8005c88:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <_free_r+0x90>)
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	b933      	cbnz	r3, 8005c9c <_free_r+0x2c>
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	6014      	str	r4, [r2, #0]
 8005c92:	4628      	mov	r0, r5
 8005c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c98:	f000 b8e4 	b.w	8005e64 <__malloc_unlock>
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d908      	bls.n	8005cb2 <_free_r+0x42>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	1821      	adds	r1, r4, r0
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	bf01      	itttt	eq
 8005ca8:	6819      	ldreq	r1, [r3, #0]
 8005caa:	685b      	ldreq	r3, [r3, #4]
 8005cac:	1809      	addeq	r1, r1, r0
 8005cae:	6021      	streq	r1, [r4, #0]
 8005cb0:	e7ed      	b.n	8005c8e <_free_r+0x1e>
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b10b      	cbz	r3, 8005cbc <_free_r+0x4c>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d9fa      	bls.n	8005cb2 <_free_r+0x42>
 8005cbc:	6811      	ldr	r1, [r2, #0]
 8005cbe:	1850      	adds	r0, r2, r1
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d10b      	bne.n	8005cdc <_free_r+0x6c>
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	1850      	adds	r0, r2, r1
 8005cca:	4283      	cmp	r3, r0
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	d1e0      	bne.n	8005c92 <_free_r+0x22>
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	6053      	str	r3, [r2, #4]
 8005cd6:	4408      	add	r0, r1
 8005cd8:	6010      	str	r0, [r2, #0]
 8005cda:	e7da      	b.n	8005c92 <_free_r+0x22>
 8005cdc:	d902      	bls.n	8005ce4 <_free_r+0x74>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	e7d6      	b.n	8005c92 <_free_r+0x22>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	1821      	adds	r1, r4, r0
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf04      	itt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	bf04      	itt	eq
 8005cf4:	1809      	addeq	r1, r1, r0
 8005cf6:	6021      	streq	r1, [r4, #0]
 8005cf8:	6054      	str	r4, [r2, #4]
 8005cfa:	e7ca      	b.n	8005c92 <_free_r+0x22>
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
 8005cfe:	bf00      	nop
 8005d00:	2000437c 	.word	0x2000437c

08005d04 <malloc>:
 8005d04:	4b02      	ldr	r3, [pc, #8]	@ (8005d10 <malloc+0xc>)
 8005d06:	4601      	mov	r1, r0
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	f000 b825 	b.w	8005d58 <_malloc_r>
 8005d0e:	bf00      	nop
 8005d10:	2000001c 	.word	0x2000001c

08005d14 <sbrk_aligned>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	4e0f      	ldr	r6, [pc, #60]	@ (8005d54 <sbrk_aligned+0x40>)
 8005d18:	460c      	mov	r4, r1
 8005d1a:	6831      	ldr	r1, [r6, #0]
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	b911      	cbnz	r1, 8005d26 <sbrk_aligned+0x12>
 8005d20:	f000 f9d6 	bl	80060d0 <_sbrk_r>
 8005d24:	6030      	str	r0, [r6, #0]
 8005d26:	4621      	mov	r1, r4
 8005d28:	4628      	mov	r0, r5
 8005d2a:	f000 f9d1 	bl	80060d0 <_sbrk_r>
 8005d2e:	1c43      	adds	r3, r0, #1
 8005d30:	d103      	bne.n	8005d3a <sbrk_aligned+0x26>
 8005d32:	f04f 34ff 	mov.w	r4, #4294967295
 8005d36:	4620      	mov	r0, r4
 8005d38:	bd70      	pop	{r4, r5, r6, pc}
 8005d3a:	1cc4      	adds	r4, r0, #3
 8005d3c:	f024 0403 	bic.w	r4, r4, #3
 8005d40:	42a0      	cmp	r0, r4
 8005d42:	d0f8      	beq.n	8005d36 <sbrk_aligned+0x22>
 8005d44:	1a21      	subs	r1, r4, r0
 8005d46:	4628      	mov	r0, r5
 8005d48:	f000 f9c2 	bl	80060d0 <_sbrk_r>
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d1f2      	bne.n	8005d36 <sbrk_aligned+0x22>
 8005d50:	e7ef      	b.n	8005d32 <sbrk_aligned+0x1e>
 8005d52:	bf00      	nop
 8005d54:	20004378 	.word	0x20004378

08005d58 <_malloc_r>:
 8005d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d5c:	1ccd      	adds	r5, r1, #3
 8005d5e:	f025 0503 	bic.w	r5, r5, #3
 8005d62:	3508      	adds	r5, #8
 8005d64:	2d0c      	cmp	r5, #12
 8005d66:	bf38      	it	cc
 8005d68:	250c      	movcc	r5, #12
 8005d6a:	2d00      	cmp	r5, #0
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	db01      	blt.n	8005d74 <_malloc_r+0x1c>
 8005d70:	42a9      	cmp	r1, r5
 8005d72:	d904      	bls.n	8005d7e <_malloc_r+0x26>
 8005d74:	230c      	movs	r3, #12
 8005d76:	6033      	str	r3, [r6, #0]
 8005d78:	2000      	movs	r0, #0
 8005d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e54 <_malloc_r+0xfc>
 8005d82:	f000 f869 	bl	8005e58 <__malloc_lock>
 8005d86:	f8d8 3000 	ldr.w	r3, [r8]
 8005d8a:	461c      	mov	r4, r3
 8005d8c:	bb44      	cbnz	r4, 8005de0 <_malloc_r+0x88>
 8005d8e:	4629      	mov	r1, r5
 8005d90:	4630      	mov	r0, r6
 8005d92:	f7ff ffbf 	bl	8005d14 <sbrk_aligned>
 8005d96:	1c43      	adds	r3, r0, #1
 8005d98:	4604      	mov	r4, r0
 8005d9a:	d158      	bne.n	8005e4e <_malloc_r+0xf6>
 8005d9c:	f8d8 4000 	ldr.w	r4, [r8]
 8005da0:	4627      	mov	r7, r4
 8005da2:	2f00      	cmp	r7, #0
 8005da4:	d143      	bne.n	8005e2e <_malloc_r+0xd6>
 8005da6:	2c00      	cmp	r4, #0
 8005da8:	d04b      	beq.n	8005e42 <_malloc_r+0xea>
 8005daa:	6823      	ldr	r3, [r4, #0]
 8005dac:	4639      	mov	r1, r7
 8005dae:	4630      	mov	r0, r6
 8005db0:	eb04 0903 	add.w	r9, r4, r3
 8005db4:	f000 f98c 	bl	80060d0 <_sbrk_r>
 8005db8:	4581      	cmp	r9, r0
 8005dba:	d142      	bne.n	8005e42 <_malloc_r+0xea>
 8005dbc:	6821      	ldr	r1, [r4, #0]
 8005dbe:	1a6d      	subs	r5, r5, r1
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	f7ff ffa6 	bl	8005d14 <sbrk_aligned>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d03a      	beq.n	8005e42 <_malloc_r+0xea>
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	442b      	add	r3, r5
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	f8d8 3000 	ldr.w	r3, [r8]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	bb62      	cbnz	r2, 8005e34 <_malloc_r+0xdc>
 8005dda:	f8c8 7000 	str.w	r7, [r8]
 8005dde:	e00f      	b.n	8005e00 <_malloc_r+0xa8>
 8005de0:	6822      	ldr	r2, [r4, #0]
 8005de2:	1b52      	subs	r2, r2, r5
 8005de4:	d420      	bmi.n	8005e28 <_malloc_r+0xd0>
 8005de6:	2a0b      	cmp	r2, #11
 8005de8:	d917      	bls.n	8005e1a <_malloc_r+0xc2>
 8005dea:	1961      	adds	r1, r4, r5
 8005dec:	42a3      	cmp	r3, r4
 8005dee:	6025      	str	r5, [r4, #0]
 8005df0:	bf18      	it	ne
 8005df2:	6059      	strne	r1, [r3, #4]
 8005df4:	6863      	ldr	r3, [r4, #4]
 8005df6:	bf08      	it	eq
 8005df8:	f8c8 1000 	streq.w	r1, [r8]
 8005dfc:	5162      	str	r2, [r4, r5]
 8005dfe:	604b      	str	r3, [r1, #4]
 8005e00:	4630      	mov	r0, r6
 8005e02:	f000 f82f 	bl	8005e64 <__malloc_unlock>
 8005e06:	f104 000b 	add.w	r0, r4, #11
 8005e0a:	1d23      	adds	r3, r4, #4
 8005e0c:	f020 0007 	bic.w	r0, r0, #7
 8005e10:	1ac2      	subs	r2, r0, r3
 8005e12:	bf1c      	itt	ne
 8005e14:	1a1b      	subne	r3, r3, r0
 8005e16:	50a3      	strne	r3, [r4, r2]
 8005e18:	e7af      	b.n	8005d7a <_malloc_r+0x22>
 8005e1a:	6862      	ldr	r2, [r4, #4]
 8005e1c:	42a3      	cmp	r3, r4
 8005e1e:	bf0c      	ite	eq
 8005e20:	f8c8 2000 	streq.w	r2, [r8]
 8005e24:	605a      	strne	r2, [r3, #4]
 8005e26:	e7eb      	b.n	8005e00 <_malloc_r+0xa8>
 8005e28:	4623      	mov	r3, r4
 8005e2a:	6864      	ldr	r4, [r4, #4]
 8005e2c:	e7ae      	b.n	8005d8c <_malloc_r+0x34>
 8005e2e:	463c      	mov	r4, r7
 8005e30:	687f      	ldr	r7, [r7, #4]
 8005e32:	e7b6      	b.n	8005da2 <_malloc_r+0x4a>
 8005e34:	461a      	mov	r2, r3
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	42a3      	cmp	r3, r4
 8005e3a:	d1fb      	bne.n	8005e34 <_malloc_r+0xdc>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6053      	str	r3, [r2, #4]
 8005e40:	e7de      	b.n	8005e00 <_malloc_r+0xa8>
 8005e42:	230c      	movs	r3, #12
 8005e44:	6033      	str	r3, [r6, #0]
 8005e46:	4630      	mov	r0, r6
 8005e48:	f000 f80c 	bl	8005e64 <__malloc_unlock>
 8005e4c:	e794      	b.n	8005d78 <_malloc_r+0x20>
 8005e4e:	6005      	str	r5, [r0, #0]
 8005e50:	e7d6      	b.n	8005e00 <_malloc_r+0xa8>
 8005e52:	bf00      	nop
 8005e54:	2000437c 	.word	0x2000437c

08005e58 <__malloc_lock>:
 8005e58:	4801      	ldr	r0, [pc, #4]	@ (8005e60 <__malloc_lock+0x8>)
 8005e5a:	f7ff bf06 	b.w	8005c6a <__retarget_lock_acquire_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20004374 	.word	0x20004374

08005e64 <__malloc_unlock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	@ (8005e6c <__malloc_unlock+0x8>)
 8005e66:	f7ff bf01 	b.w	8005c6c <__retarget_lock_release_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20004374 	.word	0x20004374

08005e70 <__sflush_r>:
 8005e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e78:	0716      	lsls	r6, r2, #28
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	460c      	mov	r4, r1
 8005e7e:	d454      	bmi.n	8005f2a <__sflush_r+0xba>
 8005e80:	684b      	ldr	r3, [r1, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	dc02      	bgt.n	8005e8c <__sflush_r+0x1c>
 8005e86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dd48      	ble.n	8005f1e <__sflush_r+0xae>
 8005e8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e8e:	2e00      	cmp	r6, #0
 8005e90:	d045      	beq.n	8005f1e <__sflush_r+0xae>
 8005e92:	2300      	movs	r3, #0
 8005e94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e98:	682f      	ldr	r7, [r5, #0]
 8005e9a:	6a21      	ldr	r1, [r4, #32]
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	d030      	beq.n	8005f02 <__sflush_r+0x92>
 8005ea0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	0759      	lsls	r1, r3, #29
 8005ea6:	d505      	bpl.n	8005eb4 <__sflush_r+0x44>
 8005ea8:	6863      	ldr	r3, [r4, #4]
 8005eaa:	1ad2      	subs	r2, r2, r3
 8005eac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005eae:	b10b      	cbz	r3, 8005eb4 <__sflush_r+0x44>
 8005eb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005eb2:	1ad2      	subs	r2, r2, r3
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005eb8:	6a21      	ldr	r1, [r4, #32]
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b0      	blx	r6
 8005ebe:	1c43      	adds	r3, r0, #1
 8005ec0:	89a3      	ldrh	r3, [r4, #12]
 8005ec2:	d106      	bne.n	8005ed2 <__sflush_r+0x62>
 8005ec4:	6829      	ldr	r1, [r5, #0]
 8005ec6:	291d      	cmp	r1, #29
 8005ec8:	d82b      	bhi.n	8005f22 <__sflush_r+0xb2>
 8005eca:	4a2a      	ldr	r2, [pc, #168]	@ (8005f74 <__sflush_r+0x104>)
 8005ecc:	410a      	asrs	r2, r1
 8005ece:	07d6      	lsls	r6, r2, #31
 8005ed0:	d427      	bmi.n	8005f22 <__sflush_r+0xb2>
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	6062      	str	r2, [r4, #4]
 8005ed6:	04d9      	lsls	r1, r3, #19
 8005ed8:	6922      	ldr	r2, [r4, #16]
 8005eda:	6022      	str	r2, [r4, #0]
 8005edc:	d504      	bpl.n	8005ee8 <__sflush_r+0x78>
 8005ede:	1c42      	adds	r2, r0, #1
 8005ee0:	d101      	bne.n	8005ee6 <__sflush_r+0x76>
 8005ee2:	682b      	ldr	r3, [r5, #0]
 8005ee4:	b903      	cbnz	r3, 8005ee8 <__sflush_r+0x78>
 8005ee6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ee8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eea:	602f      	str	r7, [r5, #0]
 8005eec:	b1b9      	cbz	r1, 8005f1e <__sflush_r+0xae>
 8005eee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ef2:	4299      	cmp	r1, r3
 8005ef4:	d002      	beq.n	8005efc <__sflush_r+0x8c>
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	f7ff feba 	bl	8005c70 <_free_r>
 8005efc:	2300      	movs	r3, #0
 8005efe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f00:	e00d      	b.n	8005f1e <__sflush_r+0xae>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b0      	blx	r6
 8005f08:	4602      	mov	r2, r0
 8005f0a:	1c50      	adds	r0, r2, #1
 8005f0c:	d1c9      	bne.n	8005ea2 <__sflush_r+0x32>
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0c6      	beq.n	8005ea2 <__sflush_r+0x32>
 8005f14:	2b1d      	cmp	r3, #29
 8005f16:	d001      	beq.n	8005f1c <__sflush_r+0xac>
 8005f18:	2b16      	cmp	r3, #22
 8005f1a:	d11e      	bne.n	8005f5a <__sflush_r+0xea>
 8005f1c:	602f      	str	r7, [r5, #0]
 8005f1e:	2000      	movs	r0, #0
 8005f20:	e022      	b.n	8005f68 <__sflush_r+0xf8>
 8005f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f26:	b21b      	sxth	r3, r3
 8005f28:	e01b      	b.n	8005f62 <__sflush_r+0xf2>
 8005f2a:	690f      	ldr	r7, [r1, #16]
 8005f2c:	2f00      	cmp	r7, #0
 8005f2e:	d0f6      	beq.n	8005f1e <__sflush_r+0xae>
 8005f30:	0793      	lsls	r3, r2, #30
 8005f32:	680e      	ldr	r6, [r1, #0]
 8005f34:	bf08      	it	eq
 8005f36:	694b      	ldreq	r3, [r1, #20]
 8005f38:	600f      	str	r7, [r1, #0]
 8005f3a:	bf18      	it	ne
 8005f3c:	2300      	movne	r3, #0
 8005f3e:	eba6 0807 	sub.w	r8, r6, r7
 8005f42:	608b      	str	r3, [r1, #8]
 8005f44:	f1b8 0f00 	cmp.w	r8, #0
 8005f48:	dde9      	ble.n	8005f1e <__sflush_r+0xae>
 8005f4a:	6a21      	ldr	r1, [r4, #32]
 8005f4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f4e:	4643      	mov	r3, r8
 8005f50:	463a      	mov	r2, r7
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b0      	blx	r6
 8005f56:	2800      	cmp	r0, #0
 8005f58:	dc08      	bgt.n	8005f6c <__sflush_r+0xfc>
 8005f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295
 8005f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f6c:	4407      	add	r7, r0
 8005f6e:	eba8 0800 	sub.w	r8, r8, r0
 8005f72:	e7e7      	b.n	8005f44 <__sflush_r+0xd4>
 8005f74:	dfbffffe 	.word	0xdfbffffe

08005f78 <_fflush_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	690b      	ldr	r3, [r1, #16]
 8005f7c:	4605      	mov	r5, r0
 8005f7e:	460c      	mov	r4, r1
 8005f80:	b913      	cbnz	r3, 8005f88 <_fflush_r+0x10>
 8005f82:	2500      	movs	r5, #0
 8005f84:	4628      	mov	r0, r5
 8005f86:	bd38      	pop	{r3, r4, r5, pc}
 8005f88:	b118      	cbz	r0, 8005f92 <_fflush_r+0x1a>
 8005f8a:	6a03      	ldr	r3, [r0, #32]
 8005f8c:	b90b      	cbnz	r3, 8005f92 <_fflush_r+0x1a>
 8005f8e:	f7ff fb7d 	bl	800568c <__sinit>
 8005f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0f3      	beq.n	8005f82 <_fflush_r+0xa>
 8005f9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f9c:	07d0      	lsls	r0, r2, #31
 8005f9e:	d404      	bmi.n	8005faa <_fflush_r+0x32>
 8005fa0:	0599      	lsls	r1, r3, #22
 8005fa2:	d402      	bmi.n	8005faa <_fflush_r+0x32>
 8005fa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fa6:	f7ff fe60 	bl	8005c6a <__retarget_lock_acquire_recursive>
 8005faa:	4628      	mov	r0, r5
 8005fac:	4621      	mov	r1, r4
 8005fae:	f7ff ff5f 	bl	8005e70 <__sflush_r>
 8005fb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fb4:	07da      	lsls	r2, r3, #31
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	d4e4      	bmi.n	8005f84 <_fflush_r+0xc>
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	059b      	lsls	r3, r3, #22
 8005fbe:	d4e1      	bmi.n	8005f84 <_fflush_r+0xc>
 8005fc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fc2:	f7ff fe53 	bl	8005c6c <__retarget_lock_release_recursive>
 8005fc6:	e7dd      	b.n	8005f84 <_fflush_r+0xc>

08005fc8 <__swhatbuf_r>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	460c      	mov	r4, r1
 8005fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd0:	2900      	cmp	r1, #0
 8005fd2:	b096      	sub	sp, #88	@ 0x58
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	461e      	mov	r6, r3
 8005fd8:	da0d      	bge.n	8005ff6 <__swhatbuf_r+0x2e>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fe0:	f04f 0100 	mov.w	r1, #0
 8005fe4:	bf14      	ite	ne
 8005fe6:	2340      	movne	r3, #64	@ 0x40
 8005fe8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005fec:	2000      	movs	r0, #0
 8005fee:	6031      	str	r1, [r6, #0]
 8005ff0:	602b      	str	r3, [r5, #0]
 8005ff2:	b016      	add	sp, #88	@ 0x58
 8005ff4:	bd70      	pop	{r4, r5, r6, pc}
 8005ff6:	466a      	mov	r2, sp
 8005ff8:	f000 f848 	bl	800608c <_fstat_r>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	dbec      	blt.n	8005fda <__swhatbuf_r+0x12>
 8006000:	9901      	ldr	r1, [sp, #4]
 8006002:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006006:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800600a:	4259      	negs	r1, r3
 800600c:	4159      	adcs	r1, r3
 800600e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006012:	e7eb      	b.n	8005fec <__swhatbuf_r+0x24>

08006014 <__smakebuf_r>:
 8006014:	898b      	ldrh	r3, [r1, #12]
 8006016:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006018:	079d      	lsls	r5, r3, #30
 800601a:	4606      	mov	r6, r0
 800601c:	460c      	mov	r4, r1
 800601e:	d507      	bpl.n	8006030 <__smakebuf_r+0x1c>
 8006020:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	6123      	str	r3, [r4, #16]
 8006028:	2301      	movs	r3, #1
 800602a:	6163      	str	r3, [r4, #20]
 800602c:	b003      	add	sp, #12
 800602e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006030:	ab01      	add	r3, sp, #4
 8006032:	466a      	mov	r2, sp
 8006034:	f7ff ffc8 	bl	8005fc8 <__swhatbuf_r>
 8006038:	9f00      	ldr	r7, [sp, #0]
 800603a:	4605      	mov	r5, r0
 800603c:	4639      	mov	r1, r7
 800603e:	4630      	mov	r0, r6
 8006040:	f7ff fe8a 	bl	8005d58 <_malloc_r>
 8006044:	b948      	cbnz	r0, 800605a <__smakebuf_r+0x46>
 8006046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800604a:	059a      	lsls	r2, r3, #22
 800604c:	d4ee      	bmi.n	800602c <__smakebuf_r+0x18>
 800604e:	f023 0303 	bic.w	r3, r3, #3
 8006052:	f043 0302 	orr.w	r3, r3, #2
 8006056:	81a3      	strh	r3, [r4, #12]
 8006058:	e7e2      	b.n	8006020 <__smakebuf_r+0xc>
 800605a:	89a3      	ldrh	r3, [r4, #12]
 800605c:	6020      	str	r0, [r4, #0]
 800605e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	9b01      	ldr	r3, [sp, #4]
 8006066:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800606a:	b15b      	cbz	r3, 8006084 <__smakebuf_r+0x70>
 800606c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006070:	4630      	mov	r0, r6
 8006072:	f000 f81d 	bl	80060b0 <_isatty_r>
 8006076:	b128      	cbz	r0, 8006084 <__smakebuf_r+0x70>
 8006078:	89a3      	ldrh	r3, [r4, #12]
 800607a:	f023 0303 	bic.w	r3, r3, #3
 800607e:	f043 0301 	orr.w	r3, r3, #1
 8006082:	81a3      	strh	r3, [r4, #12]
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	431d      	orrs	r5, r3
 8006088:	81a5      	strh	r5, [r4, #12]
 800608a:	e7cf      	b.n	800602c <__smakebuf_r+0x18>

0800608c <_fstat_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4d07      	ldr	r5, [pc, #28]	@ (80060ac <_fstat_r+0x20>)
 8006090:	2300      	movs	r3, #0
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	f7fb fa25 	bl	80014e8 <_fstat>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d102      	bne.n	80060a8 <_fstat_r+0x1c>
 80060a2:	682b      	ldr	r3, [r5, #0]
 80060a4:	b103      	cbz	r3, 80060a8 <_fstat_r+0x1c>
 80060a6:	6023      	str	r3, [r4, #0]
 80060a8:	bd38      	pop	{r3, r4, r5, pc}
 80060aa:	bf00      	nop
 80060ac:	20004370 	.word	0x20004370

080060b0 <_isatty_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	@ (80060cc <_isatty_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fb f982 	bl	80013c4 <_isatty>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_isatty_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_isatty_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20004370 	.word	0x20004370

080060d0 <_sbrk_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d06      	ldr	r5, [pc, #24]	@ (80060ec <_sbrk_r+0x1c>)
 80060d4:	2300      	movs	r3, #0
 80060d6:	4604      	mov	r4, r0
 80060d8:	4608      	mov	r0, r1
 80060da:	602b      	str	r3, [r5, #0]
 80060dc:	f7fb fbae 	bl	800183c <_sbrk>
 80060e0:	1c43      	adds	r3, r0, #1
 80060e2:	d102      	bne.n	80060ea <_sbrk_r+0x1a>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b103      	cbz	r3, 80060ea <_sbrk_r+0x1a>
 80060e8:	6023      	str	r3, [r4, #0]
 80060ea:	bd38      	pop	{r3, r4, r5, pc}
 80060ec:	20004370 	.word	0x20004370

080060f0 <_init>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr

080060fc <_fini>:
 80060fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fe:	bf00      	nop
 8006100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006102:	bc08      	pop	{r3}
 8006104:	469e      	mov	lr, r3
 8006106:	4770      	bx	lr
