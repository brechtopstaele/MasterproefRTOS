
Aether_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067bc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mysection    00000000  08060000  08060000  000080a4  2**0
                  CONTENTS
  3 .rodata       000001a0  0800695c  0800695c  0000795c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006afc  08006afc  000080a4  2**0
                  CONTENTS
  5 .ARM          00000008  08006afc  08006afc  00007afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08006b04  08006b04  000080a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08006b04  08006b04  00007b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08006b08  08006b08  00007b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000a4  20000000  08006b0c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000042cc  200000a4  08006bb0  000080a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004370  08006bb0  00008370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001634f  00000000  00000000  000080d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003895  00000000  00000000  0001e423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  00021cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebf  00000000  00000000  00022fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a065  00000000  00000000  00023e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017085  00000000  00000000  0003defc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009906d  00000000  00000000  00054f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000edfee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056f0  00000000  00000000  000ee034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000f3724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006944 	.word	0x08006944

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08006944 	.word	0x08006944

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000586:	2306      	movs	r3, #6
 8000588:	847b      	strh	r3, [r7, #34]	@ 0x22
 800058a:	2306      	movs	r3, #6
 800058c:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	83fb      	strh	r3, [r7, #30]
 8000596:	2300      	movs	r3, #0
 8000598:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800059a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800059e:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80005a4:	4ba1      	ldr	r3, [pc, #644]	@ (800082c <EE_Init+0x2ac>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80005aa:	4ba1      	ldr	r3, [pc, #644]	@ (8000830 <EE_Init+0x2b0>)
 80005ac:	881b      	ldrh	r3, [r3, #0]
 80005ae:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80005b0:	2300      	movs	r3, #0
 80005b2:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 80005b4:	2302      	movs	r3, #2
 80005b6:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 80005c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80005c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d00b      	beq.n	80005e2 <EE_Init+0x62>
 80005ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80005ce:	f280 8196 	bge.w	80008fe <EE_Init+0x37e>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	f000 80f8 	beq.w	80007c8 <EE_Init+0x248>
 80005d8:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 80005dc:	4293      	cmp	r3, r2
 80005de:	d050      	beq.n	8000682 <EE_Init+0x102>
 80005e0:	e18d      	b.n	80008fe <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80005e2:	8c3b      	ldrh	r3, [r7, #32]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d116      	bne.n	8000616 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80005e8:	4890      	ldr	r0, [pc, #576]	@ (800082c <EE_Init+0x2ac>)
 80005ea:	f000 f9a9 	bl	8000940 <EE_VerifyPageFullyErased>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	f040 818e 	bne.w	8000912 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80005f6:	f107 0214 	add.w	r2, r7, #20
 80005fa:	463b      	mov	r3, r7
 80005fc:	4611      	mov	r1, r2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fd8e 	bl	8002120 <HAL_FLASHEx_Erase>
 8000604:	4603      	mov	r3, r0
 8000606:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000608:	7efb      	ldrb	r3, [r7, #27]
 800060a:	2b00      	cmp	r3, #0
 800060c:	f000 8181 	beq.w	8000912 <EE_Init+0x392>
          {
            return FlashStatus;
 8000610:	7efb      	ldrb	r3, [r7, #27]
 8000612:	b29b      	uxth	r3, r3
 8000614:	e185      	b.n	8000922 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000616:	8c3b      	ldrh	r3, [r7, #32]
 8000618:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800061c:	4293      	cmp	r3, r2
 800061e:	d125      	bne.n	800066c <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000620:	4882      	ldr	r0, [pc, #520]	@ (800082c <EE_Init+0x2ac>)
 8000622:	f000 f98d 	bl	8000940 <EE_VerifyPageFullyErased>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d10e      	bne.n	800064a <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800062c:	f107 0214 	add.w	r2, r7, #20
 8000630:	463b      	mov	r3, r7
 8000632:	4611      	mov	r1, r2
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fd73 	bl	8002120 <HAL_FLASHEx_Erase>
 800063a:	4603      	mov	r3, r0
 800063c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800063e:	7efb      	ldrb	r3, [r7, #27]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <EE_Init+0xca>
          {
            return FlashStatus;
 8000644:	7efb      	ldrb	r3, [r7, #27]
 8000646:	b29b      	uxth	r3, r3
 8000648:	e16b      	b.n	8000922 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800064a:	f04f 0200 	mov.w	r2, #0
 800064e:	f04f 0300 	mov.w	r3, #0
 8000652:	4977      	ldr	r1, [pc, #476]	@ (8000830 <EE_Init+0x2b0>)
 8000654:	2001      	movs	r0, #1
 8000656:	f001 fbad 	bl	8001db4 <HAL_FLASH_Program>
 800065a:	4603      	mov	r3, r0
 800065c:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800065e:	7efb      	ldrb	r3, [r7, #27]
 8000660:	2b00      	cmp	r3, #0
 8000662:	f000 8156 	beq.w	8000912 <EE_Init+0x392>
        {
          return FlashStatus;
 8000666:	7efb      	ldrb	r3, [r7, #27]
 8000668:	b29b      	uxth	r3, r3
 800066a:	e15a      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800066c:	f000 f9fe 	bl	8000a6c <EE_Format>
 8000670:	4603      	mov	r3, r0
 8000672:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000674:	7efb      	ldrb	r3, [r7, #27]
 8000676:	2b00      	cmp	r3, #0
 8000678:	f000 814b 	beq.w	8000912 <EE_Init+0x392>
        {
          return FlashStatus;
 800067c:	7efb      	ldrb	r3, [r7, #27]
 800067e:	b29b      	uxth	r3, r3
 8000680:	e14f      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8000682:	8c3b      	ldrh	r3, [r7, #32]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d163      	bne.n	8000750 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000688:	2300      	movs	r3, #0
 800068a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800068c:	e030      	b.n	80006f0 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800068e:	4b69      	ldr	r3, [pc, #420]	@ (8000834 <EE_Init+0x2b4>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b29a      	uxth	r2, r3
 8000694:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000696:	4968      	ldr	r1, [pc, #416]	@ (8000838 <EE_Init+0x2b8>)
 8000698:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800069c:	429a      	cmp	r2, r3
 800069e:	d101      	bne.n	80006a4 <EE_Init+0x124>
          {
            x = VarIdx;
 80006a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 80006a4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80006a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d01d      	beq.n	80006ea <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80006ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006b0:	4a61      	ldr	r2, [pc, #388]	@ (8000838 <EE_Init+0x2b8>)
 80006b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006b6:	4961      	ldr	r1, [pc, #388]	@ (800083c <EE_Init+0x2bc>)
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f96b 	bl	8000994 <EE_ReadVariable>
 80006be:	4603      	mov	r3, r0
 80006c0:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d010      	beq.n	80006ea <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80006c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006ca:	4a5b      	ldr	r2, [pc, #364]	@ (8000838 <EE_Init+0x2b8>)
 80006cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006d0:	4a5a      	ldr	r2, [pc, #360]	@ (800083c <EE_Init+0x2bc>)
 80006d2:	8812      	ldrh	r2, [r2, #0]
 80006d4:	4611      	mov	r1, r2
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fa60 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 80006dc:	4603      	mov	r3, r0
 80006de:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80006e0:	8bfb      	ldrh	r3, [r7, #30]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <EE_Init+0x16a>
              {
                return EepromStatus;
 80006e6:	8bfb      	ldrh	r3, [r7, #30]
 80006e8:	e11b      	b.n	8000922 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80006ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006ec:	3301      	adds	r3, #1
 80006ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80006f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80006f2:	2b1a      	cmp	r3, #26
 80006f4:	d9cb      	bls.n	800068e <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80006f6:	f04f 0200 	mov.w	r2, #0
 80006fa:	f04f 0300 	mov.w	r3, #0
 80006fe:	494b      	ldr	r1, [pc, #300]	@ (800082c <EE_Init+0x2ac>)
 8000700:	2001      	movs	r0, #1
 8000702:	f001 fb57 	bl	8001db4 <HAL_FLASH_Program>
 8000706:	4603      	mov	r3, r0
 8000708:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800070a:	7efb      	ldrb	r3, [r7, #27]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d002      	beq.n	8000716 <EE_Init+0x196>
        {
          return FlashStatus;
 8000710:	7efb      	ldrb	r3, [r7, #27]
 8000712:	b29b      	uxth	r3, r3
 8000714:	e105      	b.n	8000922 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8000716:	2303      	movs	r3, #3
 8000718:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800071a:	2301      	movs	r3, #1
 800071c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800071e:	2302      	movs	r3, #2
 8000720:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000722:	4843      	ldr	r0, [pc, #268]	@ (8000830 <EE_Init+0x2b0>)
 8000724:	f000 f90c 	bl	8000940 <EE_VerifyPageFullyErased>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	f040 80f3 	bne.w	8000916 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000730:	f107 0214 	add.w	r2, r7, #20
 8000734:	463b      	mov	r3, r7
 8000736:	4611      	mov	r1, r2
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fcf1 	bl	8002120 <HAL_FLASHEx_Erase>
 800073e:	4603      	mov	r3, r0
 8000740:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000742:	7efb      	ldrb	r3, [r7, #27]
 8000744:	2b00      	cmp	r3, #0
 8000746:	f000 80e6 	beq.w	8000916 <EE_Init+0x396>
          {
            return FlashStatus;
 800074a:	7efb      	ldrb	r3, [r7, #27]
 800074c:	b29b      	uxth	r3, r3
 800074e:	e0e8      	b.n	8000922 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8000750:	8c3b      	ldrh	r3, [r7, #32]
 8000752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000756:	4293      	cmp	r3, r2
 8000758:	d12b      	bne.n	80007b2 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 800075a:	2303      	movs	r3, #3
 800075c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000766:	4832      	ldr	r0, [pc, #200]	@ (8000830 <EE_Init+0x2b0>)
 8000768:	f000 f8ea 	bl	8000940 <EE_VerifyPageFullyErased>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10e      	bne.n	8000790 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000772:	f107 0214 	add.w	r2, r7, #20
 8000776:	463b      	mov	r3, r7
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fcd0 	bl	8002120 <HAL_FLASHEx_Erase>
 8000780:	4603      	mov	r3, r0
 8000782:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000784:	7efb      	ldrb	r3, [r7, #27]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d002      	beq.n	8000790 <EE_Init+0x210>
          {
            return FlashStatus;
 800078a:	7efb      	ldrb	r3, [r7, #27]
 800078c:	b29b      	uxth	r3, r3
 800078e:	e0c8      	b.n	8000922 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000790:	f04f 0200 	mov.w	r2, #0
 8000794:	f04f 0300 	mov.w	r3, #0
 8000798:	4924      	ldr	r1, [pc, #144]	@ (800082c <EE_Init+0x2ac>)
 800079a:	2001      	movs	r0, #1
 800079c:	f001 fb0a 	bl	8001db4 <HAL_FLASH_Program>
 80007a0:	4603      	mov	r3, r0
 80007a2:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007a4:	7efb      	ldrb	r3, [r7, #27]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f000 80b5 	beq.w	8000916 <EE_Init+0x396>
        {
          return FlashStatus;
 80007ac:	7efb      	ldrb	r3, [r7, #27]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	e0b7      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80007b2:	f000 f95b 	bl	8000a6c <EE_Format>
 80007b6:	4603      	mov	r3, r0
 80007b8:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007ba:	7efb      	ldrb	r3, [r7, #27]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	f000 80aa 	beq.w	8000916 <EE_Init+0x396>
        {
          return FlashStatus;
 80007c2:	7efb      	ldrb	r3, [r7, #27]
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	e0ac      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80007c8:	8c3b      	ldrh	r3, [r7, #32]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10a      	bne.n	80007e4 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80007ce:	f000 f94d 	bl	8000a6c <EE_Format>
 80007d2:	4603      	mov	r3, r0
 80007d4:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80007d6:	7efb      	ldrb	r3, [r7, #27]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 809e 	beq.w	800091a <EE_Init+0x39a>
        {
          return FlashStatus;
 80007de:	7efb      	ldrb	r3, [r7, #27]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	e09e      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80007e4:	8c3b      	ldrh	r3, [r7, #32]
 80007e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d11b      	bne.n	8000826 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 80007ee:	2303      	movs	r3, #3
 80007f0:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80007fa:	480d      	ldr	r0, [pc, #52]	@ (8000830 <EE_Init+0x2b0>)
 80007fc:	f000 f8a0 	bl	8000940 <EE_VerifyPageFullyErased>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	f040 8089 	bne.w	800091a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000808:	f107 0214 	add.w	r2, r7, #20
 800080c:	463b      	mov	r3, r7
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fc85 	bl	8002120 <HAL_FLASHEx_Erase>
 8000816:	4603      	mov	r3, r0
 8000818:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800081a:	7efb      	ldrb	r3, [r7, #27]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d07c      	beq.n	800091a <EE_Init+0x39a>
          {
            return FlashStatus;
 8000820:	7efb      	ldrb	r3, [r7, #27]
 8000822:	b29b      	uxth	r3, r3
 8000824:	e07d      	b.n	8000922 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000826:	2300      	movs	r3, #0
 8000828:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800082a:	e03a      	b.n	80008a2 <EE_Init+0x322>
 800082c:	08008000 	.word	0x08008000
 8000830:	0800c000 	.word	0x0800c000
 8000834:	08008006 	.word	0x08008006
 8000838:	20000404 	.word	0x20000404
 800083c:	200000c0 	.word	0x200000c0
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8000840:	4b3a      	ldr	r3, [pc, #232]	@ (800092c <EE_Init+0x3ac>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000848:	4939      	ldr	r1, [pc, #228]	@ (8000930 <EE_Init+0x3b0>)
 800084a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800084e:	429a      	cmp	r2, r3
 8000850:	d101      	bne.n	8000856 <EE_Init+0x2d6>
          {
            x = VarIdx;
 8000852:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000854:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 8000856:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000858:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800085c:	429a      	cmp	r2, r3
 800085e:	d01d      	beq.n	800089c <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000860:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000862:	4a33      	ldr	r2, [pc, #204]	@ (8000930 <EE_Init+0x3b0>)
 8000864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000868:	4932      	ldr	r1, [pc, #200]	@ (8000934 <EE_Init+0x3b4>)
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f892 	bl	8000994 <EE_ReadVariable>
 8000870:	4603      	mov	r3, r0
 8000872:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8000874:	8bbb      	ldrh	r3, [r7, #28]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d010      	beq.n	800089c <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800087a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800087c:	4a2c      	ldr	r2, [pc, #176]	@ (8000930 <EE_Init+0x3b0>)
 800087e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000882:	4a2c      	ldr	r2, [pc, #176]	@ (8000934 <EE_Init+0x3b4>)
 8000884:	8812      	ldrh	r2, [r2, #0]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f987 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 800088e:	4603      	mov	r3, r0
 8000890:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8000892:	8bfb      	ldrh	r3, [r7, #30]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <EE_Init+0x31c>
              {
                return EepromStatus;
 8000898:	8bfb      	ldrh	r3, [r7, #30]
 800089a:	e042      	b.n	8000922 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800089c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800089e:	3301      	adds	r3, #1
 80008a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80008a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008a4:	2b1a      	cmp	r3, #26
 80008a6:	d9cb      	bls.n	8000840 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80008a8:	f04f 0200 	mov.w	r2, #0
 80008ac:	f04f 0300 	mov.w	r3, #0
 80008b0:	4921      	ldr	r1, [pc, #132]	@ (8000938 <EE_Init+0x3b8>)
 80008b2:	2001      	movs	r0, #1
 80008b4:	f001 fa7e 	bl	8001db4 <HAL_FLASH_Program>
 80008b8:	4603      	mov	r3, r0
 80008ba:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80008bc:	7efb      	ldrb	r3, [r7, #27]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d002      	beq.n	80008c8 <EE_Init+0x348>
        {
          return FlashStatus;
 80008c2:	7efb      	ldrb	r3, [r7, #27]
 80008c4:	b29b      	uxth	r3, r3
 80008c6:	e02c      	b.n	8000922 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 80008c8:	2302      	movs	r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80008d4:	4819      	ldr	r0, [pc, #100]	@ (800093c <EE_Init+0x3bc>)
 80008d6:	f000 f833 	bl	8000940 <EE_VerifyPageFullyErased>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d11c      	bne.n	800091a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80008e0:	f107 0214 	add.w	r2, r7, #20
 80008e4:	463b      	mov	r3, r7
 80008e6:	4611      	mov	r1, r2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fc19 	bl	8002120 <HAL_FLASHEx_Erase>
 80008ee:	4603      	mov	r3, r0
 80008f0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80008f2:	7efb      	ldrb	r3, [r7, #27]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d010      	beq.n	800091a <EE_Init+0x39a>
          {
            return FlashStatus;
 80008f8:	7efb      	ldrb	r3, [r7, #27]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	e011      	b.n	8000922 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 80008fe:	f000 f8b5 	bl	8000a6c <EE_Format>
 8000902:	4603      	mov	r3, r0
 8000904:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000906:	7efb      	ldrb	r3, [r7, #27]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <EE_Init+0x39e>
      {
        return FlashStatus;
 800090c:	7efb      	ldrb	r3, [r7, #27]
 800090e:	b29b      	uxth	r3, r3
 8000910:	e007      	b.n	8000922 <EE_Init+0x3a2>
      break;
 8000912:	bf00      	nop
 8000914:	e004      	b.n	8000920 <EE_Init+0x3a0>
      break;
 8000916:	bf00      	nop
 8000918:	e002      	b.n	8000920 <EE_Init+0x3a0>
      break;
 800091a:	bf00      	nop
 800091c:	e000      	b.n	8000920 <EE_Init+0x3a0>
      }
      break;
 800091e:	bf00      	nop
  }

  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	0800c006 	.word	0x0800c006
 8000930:	20000404 	.word	0x20000404
 8000934:	200000c0 	.word	0x200000c0
 8000938:	0800c000 	.word	0x0800c000
 800093c:	08008000 	.word	0x08008000

08000940 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8000948:	2301      	movs	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 8000950:	f245 5355 	movw	r3, #21845	@ 0x5555
 8000954:	81fb      	strh	r3, [r7, #14]
    
  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 8000956:	e00d      	b.n	8000974 <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	881b      	ldrh	r3, [r3, #0]
 800095c:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000964:	4293      	cmp	r3, r2
 8000966:	d002      	beq.n	800096e <EE_VerifyPageFullyErased+0x2e>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]

      break;
 800096c:	e009      	b.n	8000982 <EE_VerifyPageFullyErased+0x42>
    }
    /* Next address location */
    Address = Address + 4;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	3304      	adds	r3, #4
 8000972:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800097a:	333f      	adds	r3, #63	@ 0x3f
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	429a      	cmp	r2, r3
 8000980:	d9ea      	bls.n	8000958 <EE_VerifyPageFullyErased+0x18>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	b29b      	uxth	r3, r3
}
 8000986:	4618      	mov	r0, r3
 8000988:	371c      	adds	r7, #28
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
	...

08000994 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	6039      	str	r1, [r7, #0]
 800099e:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80009a4:	f245 5355 	movw	r3, #21845	@ 0x5555
 80009a8:	81bb      	strh	r3, [r7, #12]
 80009aa:	2301      	movs	r3, #1
 80009ac:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <EE_ReadVariable+0x8c>)
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <EE_ReadVariable+0x8c>)
 80009b4:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f000 f8aa 	bl	8000b10 <EE_FindValidPage>
 80009bc:	4603      	mov	r3, r0
 80009be:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 80009c0:	89fb      	ldrh	r3, [r7, #14]
 80009c2:	2bab      	cmp	r3, #171	@ 0xab
 80009c4:	d101      	bne.n	80009ca <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 80009c6:	23ab      	movs	r3, #171	@ 0xab
 80009c8:	e025      	b.n	8000a16 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80009ca:	89fb      	ldrh	r3, [r7, #14]
 80009cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80009d0:	3302      	adds	r3, #2
 80009d2:	039b      	lsls	r3, r3, #14
 80009d4:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	3301      	adds	r3, #1
 80009da:	039a      	lsls	r2, r3, #14
 80009dc:	4b11      	ldr	r3, [pc, #68]	@ (8000a24 <EE_ReadVariable+0x90>)
 80009de:	4413      	add	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 80009e2:	e012      	b.n	8000a0a <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 80009ea:	89ba      	ldrh	r2, [r7, #12]
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d108      	bne.n	8000a04 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	3b02      	subs	r3, #2
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	82fb      	strh	r3, [r7, #22]

      break;
 8000a02:	e007      	b.n	8000a14 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	3b04      	subs	r3, #4
 8000a08:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	3302      	adds	r3, #2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8e7      	bhi.n	80009e4 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000a14:	8afb      	ldrh	r3, [r7, #22]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08008000 	.word	0x08008000
 8000a24:	08007ffe 	.word	0x08007ffe

08000a28 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	80fb      	strh	r3, [r7, #6]
 8000a34:	4613      	mov	r3, r2
 8000a36:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000a3c:	88ba      	ldrh	r2, [r7, #4]
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f8aa 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000a4c:	89fb      	ldrh	r3, [r7, #14]
 8000a4e:	2b80      	cmp	r3, #128	@ 0x80
 8000a50:	d107      	bne.n	8000a62 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000a52:	88ba      	ldrh	r2, [r7, #4]
 8000a54:	88fb      	ldrh	r3, [r7, #6]
 8000a56:	4611      	mov	r1, r2
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f901 	bl	8000c60 <EE_PageTransfer>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 8000a62:	89fb      	ldrh	r3, [r7, #14]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8000a82:	2301      	movs	r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000a86:	2302      	movs	r3, #2
 8000a88:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000a8a:	481f      	ldr	r0, [pc, #124]	@ (8000b08 <EE_Format+0x9c>)
 8000a8c:	f7ff ff58 	bl	8000940 <EE_VerifyPageFullyErased>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10d      	bne.n	8000ab2 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000a96:	f107 0218 	add.w	r2, r7, #24
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fb3e 	bl	8002120 <HAL_FLASHEx_Erase>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000aa8:	7ffb      	ldrb	r3, [r7, #31]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <EE_Format+0x46>
    {
      return FlashStatus;
 8000aae:	7ffb      	ldrb	r3, [r7, #31]
 8000ab0:	e025      	b.n	8000afe <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 8000ab2:	f04f 0200 	mov.w	r2, #0
 8000ab6:	f04f 0300 	mov.w	r3, #0
 8000aba:	4913      	ldr	r1, [pc, #76]	@ (8000b08 <EE_Format+0x9c>)
 8000abc:	2001      	movs	r0, #1
 8000abe:	f001 f979 	bl	8001db4 <HAL_FLASH_Program>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000ac6:	7ffb      	ldrb	r3, [r7, #31]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <EE_Format+0x64>
  {
    return FlashStatus;
 8000acc:	7ffb      	ldrb	r3, [r7, #31]
 8000ace:	e016      	b.n	8000afe <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000ad4:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <EE_Format+0xa0>)
 8000ad6:	f7ff ff33 	bl	8000940 <EE_VerifyPageFullyErased>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10d      	bne.n	8000afc <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000ae0:	f107 0218 	add.w	r2, r7, #24
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f001 fb19 	bl	8002120 <HAL_FLASHEx_Erase>
 8000aee:	4603      	mov	r3, r0
 8000af0:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000af2:	7ffb      	ldrb	r3, [r7, #31]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <EE_Format+0x90>
    {
      return FlashStatus;
 8000af8:	7ffb      	ldrb	r3, [r7, #31]
 8000afa:	e000      	b.n	8000afe <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	08008000 	.word	0x08008000
 8000b0c:	0800c000 	.word	0x0800c000

08000b10 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	81fb      	strh	r3, [r7, #14]
 8000b1e:	2306      	movs	r3, #6
 8000b20:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000b22:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <EE_FindValidPage+0x84>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <EE_FindValidPage+0x88>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d01b      	beq.n	8000b6c <EE_FindValidPage+0x5c>
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d125      	bne.n	8000b84 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000b38:	89bb      	ldrh	r3, [r7, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d108      	bne.n	8000b50 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000b3e:	89fb      	ldrh	r3, [r7, #14]
 8000b40:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d101      	bne.n	8000b4c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e01c      	b.n	8000b86 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e01a      	b.n	8000b86 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000b50:	89fb      	ldrh	r3, [r7, #14]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d108      	bne.n	8000b68 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000b56:	89bb      	ldrh	r3, [r7, #12]
 8000b58:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d101      	bne.n	8000b64 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000b60:	2301      	movs	r3, #1
 8000b62:	e010      	b.n	8000b86 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000b64:	2300      	movs	r3, #0
 8000b66:	e00e      	b.n	8000b86 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000b68:	23ab      	movs	r3, #171	@ 0xab
 8000b6a:	e00c      	b.n	8000b86 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000b6c:	89fb      	ldrh	r3, [r7, #14]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000b72:	2300      	movs	r3, #0
 8000b74:	e007      	b.n	8000b86 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000b76:	89bb      	ldrh	r3, [r7, #12]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d101      	bne.n	8000b80 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e002      	b.n	8000b86 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000b80:	23ab      	movs	r3, #171	@ 0xab
 8000b82:	e000      	b.n	8000b86 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000b84:	2300      	movs	r3, #0
  }
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	08008000 	.word	0x08008000
 8000b98:	0800c000 	.word	0x0800c000

08000b9c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000b9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ba0:	b086      	sub	sp, #24
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	460a      	mov	r2, r1
 8000ba8:	80fb      	strh	r3, [r7, #6]
 8000baa:	4613      	mov	r3, r2
 8000bac:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000bb6:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <EE_VerifyPageFullWriteVariable+0xb8>)
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <EE_VerifyPageFullWriteVariable+0xbc>)
 8000bbc:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f7ff ffa6 	bl	8000b10 <EE_FindValidPage>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000bc8:	8a3b      	ldrh	r3, [r7, #16]
 8000bca:	2bab      	cmp	r3, #171	@ 0xab
 8000bcc:	d101      	bne.n	8000bd2 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 8000bce:	23ab      	movs	r3, #171	@ 0xab
 8000bd0:	e03b      	b.n	8000c4a <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000bd2:	8a3b      	ldrh	r3, [r7, #16]
 8000bd4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000bd8:	3302      	adds	r3, #2
 8000bda:	039b      	lsls	r3, r3, #14
 8000bdc:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000bde:	8a3b      	ldrh	r3, [r7, #16]
 8000be0:	3301      	adds	r3, #1
 8000be2:	039a      	lsls	r2, r3, #14
 8000be4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <EE_VerifyPageFullWriteVariable+0xc0>)
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000bea:	e029      	b.n	8000c40 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d121      	bne.n	8000c3a <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000bf6:	88bb      	ldrh	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	4615      	mov	r5, r2
 8000bfe:	4622      	mov	r2, r4
 8000c00:	462b      	mov	r3, r5
 8000c02:	6979      	ldr	r1, [r7, #20]
 8000c04:	2001      	movs	r0, #1
 8000c06:	f001 f8d5 	bl	8001db4 <HAL_FLASH_Program>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000c0e:	7cfb      	ldrb	r3, [r7, #19]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d002      	beq.n	8000c1a <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 8000c14:	7cfb      	ldrb	r3, [r7, #19]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	e017      	b.n	8000c4a <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	1c99      	adds	r1, r3, #2
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	2200      	movs	r2, #0
 8000c22:	4698      	mov	r8, r3
 8000c24:	4691      	mov	r9, r2
 8000c26:	4642      	mov	r2, r8
 8000c28:	464b      	mov	r3, r9
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f001 f8c2 	bl	8001db4 <HAL_FLASH_Program>
 8000c30:	4603      	mov	r3, r0
 8000c32:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000c34:	7cfb      	ldrb	r3, [r7, #19]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	e007      	b.n	8000c4a <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d3d1      	bcc.n	8000bec <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000c48:	2380      	movs	r3, #128	@ 0x80
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c54:	08008000 	.word	0x08008000
 8000c58:	0800c000 	.word	0x0800c000
 8000c5c:	08007fff 	.word	0x08007fff

08000c60 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	@ 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	460a      	mov	r2, r1
 8000c6a:	80fb      	strh	r3, [r7, #6]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000c76:	4b54      	ldr	r3, [pc, #336]	@ (8000dc8 <EE_PageTransfer+0x168>)
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t OldPageId=0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000c82:	2300      	movs	r3, #0
 8000c84:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ff3c 	bl	8000b10 <EE_FindValidPage>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000c9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d104      	bne.n	8000cac <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000ca2:	4b49      	ldr	r3, [pc, #292]	@ (8000dc8 <EE_PageTransfer+0x168>)
 8000ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000caa:	e009      	b.n	8000cc0 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000cac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d104      	bne.n	8000cbc <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000cb2:	4b46      	ldr	r3, [pc, #280]	@ (8000dcc <EE_PageTransfer+0x16c>)
 8000cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000cba:	e001      	b.n	8000cc0 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000cbc:	23ab      	movs	r3, #171	@ 0xab
 8000cbe:	e07e      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000cc0:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000cca:	2001      	movs	r0, #1
 8000ccc:	f001 f872 	bl	8001db4 <HAL_FLASH_Program>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8000cde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	e06b      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000ce6:	88ba      	ldrh	r2, [r7, #4]
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff55 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000cf6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8000cfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000cfe:	e05e      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000d00:	2300      	movs	r3, #0
 8000d02:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000d04:	e027      	b.n	8000d56 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000d06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d08:	4a31      	ldr	r2, [pc, #196]	@ (8000dd0 <EE_PageTransfer+0x170>)
 8000d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d0e:	88fa      	ldrh	r2, [r7, #6]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d01d      	beq.n	8000d50 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000d14:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d16:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd0 <EE_PageTransfer+0x170>)
 8000d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d1c:	492d      	ldr	r1, [pc, #180]	@ (8000dd4 <EE_PageTransfer+0x174>)
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fe38 	bl	8000994 <EE_ReadVariable>
 8000d24:	4603      	mov	r3, r0
 8000d26:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000d28:	8c3b      	ldrh	r3, [r7, #32]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d010      	beq.n	8000d50 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000d2e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d30:	4a27      	ldr	r2, [pc, #156]	@ (8000dd0 <EE_PageTransfer+0x170>)
 8000d32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d36:	4a27      	ldr	r2, [pc, #156]	@ (8000dd4 <EE_PageTransfer+0x174>)
 8000d38:	8812      	ldrh	r2, [r2, #0]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff2d 	bl	8000b9c <EE_VerifyPageFullWriteVariable>
 8000d42:	4603      	mov	r3, r0
 8000d44:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000d46:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000d4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000d4e:	e036      	b.n	8000dbe <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000d50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d52:	3301      	adds	r3, #1
 8000d54:	853b      	strh	r3, [r7, #40]	@ 0x28
 8000d56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000d58:	2b1a      	cmp	r3, #26
 8000d5a:	d9d4      	bls.n	8000d06 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000d60:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000d62:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000d6c:	f107 021c 	add.w	r2, r7, #28
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 f9d2 	bl	8002120 <HAL_FLASHEx_Erase>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000d82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8000d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	e015      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	f04f 0300 	mov.w	r3, #0
 8000d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	f001 f809 	bl	8001db4 <HAL_FLASH_Program>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8000db0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	e002      	b.n	8000dbe <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000dbc:	b29b      	uxth	r3, r3
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3730      	adds	r7, #48	@ 0x30
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	08008000 	.word	0x08008000
 8000dcc:	0800c000 	.word	0x0800c000
 8000dd0:	20000404 	.word	0x20000404
 8000dd4:	200000c0 	.word	0x200000c0

08000dd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4a07      	ldr	r2, [pc, #28]	@ (8000e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <vApplicationGetIdleTaskMemory+0x30>)
 8000dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2280      	movs	r2, #128	@ 0x80
 8000df4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000c4 	.word	0x200000c4
 8000e08:	20000164 	.word	0x20000164

08000e0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b08e      	sub	sp, #56	@ 0x38
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e12:	f000 fe8f 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e16:	f000 f839 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e1a:	f000 f933 	bl	8001084 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e1e:	f000 f907 	bl	8001030 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000e22:	f000 f8b3 	bl	8000f8c <MX_TIM1_Init>
  MX_CRC_Init();
 8000e26:	f000 f89d 	bl	8000f64 <MX_CRC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000e2a:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <main+0x70>)
 8000e2c:	f107 041c 	add.w	r4, r7, #28
 8000e30:	461d      	mov	r5, r3
 8000e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 fa0a 	bl	800425e <osThreadCreate>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e80 <main+0x74>)
 8000e4e:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 128);
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <main+0x78>)
 8000e52:	463c      	mov	r4, r7
 8000e54:	461d      	mov	r5, r3
 8000e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8000e62:	463b      	mov	r3, r7
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 f9f9 	bl	800425e <osThreadCreate>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a06      	ldr	r2, [pc, #24]	@ (8000e88 <main+0x7c>)
 8000e70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e72:	f003 f9ed 	bl	8004250 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e76:	bf00      	nop
 8000e78:	e7fd      	b.n	8000e76 <main+0x6a>
 8000e7a:	bf00      	nop
 8000e7c:	08006968 	.word	0x08006968
 8000e80:	200003fc 	.word	0x200003fc
 8000e84:	08006990 	.word	0x08006990
 8000e88:	20000400 	.word	0x20000400

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	@ 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	2230      	movs	r2, #48	@ 0x30
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f004 ff6a 	bl	8005d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b29      	ldr	r3, [pc, #164]	@ (8000f5c <SystemClock_Config+0xd0>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	4a28      	ldr	r2, [pc, #160]	@ (8000f5c <SystemClock_Config+0xd0>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec0:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <SystemClock_Config+0xd0>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <SystemClock_Config+0xd4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ed8:	4a21      	ldr	r2, [pc, #132]	@ (8000f60 <SystemClock_Config+0xd4>)
 8000eda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <SystemClock_Config+0xd4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef4:	2310      	movs	r3, #16
 8000ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f00:	2310      	movs	r3, #16
 8000f02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f0e:	2307      	movs	r3, #7
 8000f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 fbdc 	bl	80026d4 <HAL_RCC_OscConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f22:	f000 f9a7 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2102      	movs	r1, #2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fe3e 	bl	8002bc4 <HAL_RCC_ClockConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000f4e:	f000 f991 	bl	8001274 <Error_Handler>
  }
}
 8000f52:	bf00      	nop
 8000f54:	3750      	adds	r7, #80	@ 0x50
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000

08000f64 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f68:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <MX_CRC_Init+0x20>)
 8000f6a:	4a07      	ldr	r2, [pc, #28]	@ (8000f88 <MX_CRC_Init+0x24>)
 8000f6c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f6e:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <MX_CRC_Init+0x20>)
 8000f70:	f000 ff04 	bl	8001d7c <HAL_CRC_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f7a:	f000 f97b 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000364 	.word	0x20000364
 8000f88:	40023000 	.word	0x40023000

08000f8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8000faa:	4a20      	ldr	r2, [pc, #128]	@ (800102c <MX_TIM1_Init+0xa0>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8000fb0:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000fb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8000fbe:	f245 2207 	movw	r2, #20999	@ 0x5207
 8000fc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fca:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd0:	4b15      	ldr	r3, [pc, #84]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fd6:	4814      	ldr	r0, [pc, #80]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8000fd8:	f002 f846 	bl	8003068 <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000fe2:	f000 f947 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480d      	ldr	r0, [pc, #52]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8000ff4:	f002 f9da 	bl	80033ac <HAL_TIM_ConfigClockSource>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000ffe:	f000 f939 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	@ (8001028 <MX_TIM1_Init+0x9c>)
 8001010:	f002 fbe2 	bl	80037d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800101a:	f000 f92b 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000036c 	.word	0x2000036c
 800102c:	40010000 	.word	0x40010000

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <MX_USART2_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001068:	f002 fc38 	bl	80038dc <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 f8ff 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	200003b4 	.word	0x200003b4
 8001080:	40004400 	.word	0x40004400

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a25      	ldr	r2, [pc, #148]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a1e      	ldr	r2, [pc, #120]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	4b18      	ldr	r3, [pc, #96]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	4a17      	ldr	r2, [pc, #92]	@ (8001154 <MX_GPIO_Init+0xd0>)
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <MX_GPIO_Init+0xd0>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2120      	movs	r1, #32
 800110e:	4812      	ldr	r0, [pc, #72]	@ (8001158 <MX_GPIO_Init+0xd4>)
 8001110:	f001 faac 	bl	800266c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001114:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800111a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	480c      	ldr	r0, [pc, #48]	@ (800115c <MX_GPIO_Init+0xd8>)
 800112c:	f001 f91a 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001130:	2320      	movs	r3, #32
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4804      	ldr	r0, [pc, #16]	@ (8001158 <MX_GPIO_Init+0xd4>)
 8001148:	f001 f90c 	bl	8002364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	@ 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40020000 	.word	0x40020000
 800115c:	40020800 	.word	0x40020800

08001160 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001168:	2120      	movs	r1, #32
 800116a:	4804      	ldr	r0, [pc, #16]	@ (800117c <StartDefaultTask+0x1c>)
 800116c:	f001 fa97 	bl	800269e <HAL_GPIO_TogglePin>
	  osDelay(200);
 8001170:	20c8      	movs	r0, #200	@ 0xc8
 8001172:	f003 f8c0 	bl	80042f6 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001176:	bf00      	nop
 8001178:	e7f6      	b.n	8001168 <StartDefaultTask+0x8>
 800117a:	bf00      	nop
 800117c:	40020000 	.word	0x40020000

08001180 <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	b0ad      	sub	sp, #180	@ 0xb4
 8001184:	af0e      	add	r7, sp, #56	@ 0x38
 8001186:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
	uint16_t has_written = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
	char input[100];
	/* Infinite loop */
	for (;;) {

		// Read the user input
		printf("\r\n Code to update: \n");
 800118e:	482a      	ldr	r0, [pc, #168]	@ (8001238 <StartReceiveTask+0xb8>)
 8001190:	f004 fc8e 	bl	8005ab0 <puts>
		//if(scanf("%s", input) != -1){
		//TODO: fgets doesn't read newline?
		if (fgets(input, 10, stdin)) {
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <StartReceiveTask+0xbc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	210a      	movs	r1, #10
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 fb51 	bl	8005848 <fgets>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d024      	beq.n	80011f6 <StartReceiveTask+0x76>
			size_t len = strlen(input);
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f865 	bl	8000280 <strlen>
 80011b6:	6738      	str	r0, [r7, #112]	@ 0x70
			if (feof(stdin) || (len != 0 && input[len - 1] == '\n'))
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <StartReceiveTask+0xbc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	4618      	mov	r0, r3
 80011c0:	f004 fab8 	bl	8005734 <feof>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10a      	bne.n	80011e0 <StartReceiveTask+0x60>
 80011ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d00e      	beq.n	80011ee <StartReceiveTask+0x6e>
 80011d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011d2:	3b01      	subs	r3, #1
 80011d4:	3378      	adds	r3, #120	@ 0x78
 80011d6:	443b      	add	r3, r7
 80011d8:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 80011dc:	2b0a      	cmp	r3, #10
 80011de:	d106      	bne.n	80011ee <StartReceiveTask+0x6e>
				printf("\r\n Code received:  %s \r\n", input);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4619      	mov	r1, r3
 80011e6:	4816      	ldr	r0, [pc, #88]	@ (8001240 <StartReceiveTask+0xc0>)
 80011e8:	f004 fbfa 	bl	80059e0 <iprintf>
 80011ec:	e006      	b.n	80011fc <StartReceiveTask+0x7c>
			else
				printf("Invalid input, please respect the limit of 100 characters.");
 80011ee:	4815      	ldr	r0, [pc, #84]	@ (8001244 <StartReceiveTask+0xc4>)
 80011f0:	f004 fbf6 	bl	80059e0 <iprintf>
 80011f4:	e002      	b.n	80011fc <StartReceiveTask+0x7c>
		} else {
			printf("Invalid input, please respect the limit of 100 characters.");
 80011f6:	4813      	ldr	r0, [pc, #76]	@ (8001244 <StartReceiveTask+0xc4>)
 80011f8:	f004 fbf2 	bl	80059e0 <iprintf>
		}

		if(has_written == 0){
 80011fc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001200:	2b00      	cmp	r3, #0
 8001202:	d115      	bne.n	8001230 <StartReceiveTask+0xb0>
			writeToFlash(huart2);
 8001204:	4e10      	ldr	r6, [pc, #64]	@ (8001248 <StartReceiveTask+0xc8>)
 8001206:	466d      	mov	r5, sp
 8001208:	f106 0410 	add.w	r4, r6, #16
 800120c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001218:	e894 0003 	ldmia.w	r4, {r0, r1}
 800121c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001220:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001224:	f000 f82c 	bl	8001280 <writeToFlash>
			has_written = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 800122e:	e7ae      	b.n	800118e <StartReceiveTask+0xe>
		} else {
			printf("Code was already saved.");
 8001230:	4806      	ldr	r0, [pc, #24]	@ (800124c <StartReceiveTask+0xcc>)
 8001232:	f004 fbd5 	bl	80059e0 <iprintf>
		printf("\r\n Code to update: \n");
 8001236:	e7aa      	b.n	800118e <StartReceiveTask+0xe>
 8001238:	080069ac 	.word	0x080069ac
 800123c:	20000054 	.word	0x20000054
 8001240:	080069c0 	.word	0x080069c0
 8001244:	080069dc 	.word	0x080069dc
 8001248:	200003b4 	.word	0x200003b4
 800124c:	08006a18 	.word	0x08006a18

08001250 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a04      	ldr	r2, [pc, #16]	@ (8001270 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001262:	f000 fc89 	bl	8001b78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40000c00 	.word	0x40000c00

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <Error_Handler+0x8>

08001280 <writeToFlash>:
		'n', '.', 'p', 'l' };
uint8_t VarDataTabRead[NB_OF_VAR];
uint16_t VarIndex, VarDataTmp = 0;


void writeToFlash(UART_HandleTypeDef huart2){
 8001280:	b084      	sub	sp, #16
 8001282:	b580      	push	{r7, lr}
 8001284:	af00      	add	r7, sp, #0
 8001286:	f107 0c08 	add.w	ip, r7, #8
 800128a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* Unlock the Flash Program Erase controller */
	HAL_FLASH_Unlock();
 800128e:	f000 fde5 	bl	8001e5c <HAL_FLASH_Unlock>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2120      	movs	r1, #32
 8001296:	489c      	ldr	r0, [pc, #624]	@ (8001508 <writeToFlash+0x288>)
 8001298:	f001 f9e8 	bl	800266c <HAL_GPIO_WritePin>

	/* EEPROM Init */
	if (EE_Init() != EE_OK) {
 800129c:	f7ff f970 	bl	8000580 <EE_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <writeToFlash+0x2a>
		Error_Handler();
 80012a6:	f7ff ffe5 	bl	8001274 <Error_Handler>
	}

	// Fill EEPROM variables addresses
	for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++) {
 80012aa:	4b98      	ldr	r3, [pc, #608]	@ (800150c <writeToFlash+0x28c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	801a      	strh	r2, [r3, #0]
 80012b0:	e00d      	b.n	80012ce <writeToFlash+0x4e>
		VirtAddVarTab[VarIndex - 1] = VarIndex;
 80012b2:	4b96      	ldr	r3, [pc, #600]	@ (800150c <writeToFlash+0x28c>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	4a94      	ldr	r2, [pc, #592]	@ (800150c <writeToFlash+0x28c>)
 80012ba:	8811      	ldrh	r1, [r2, #0]
 80012bc:	4a94      	ldr	r2, [pc, #592]	@ (8001510 <writeToFlash+0x290>)
 80012be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (VarIndex = 1; VarIndex <= NB_OF_VAR; VarIndex++) {
 80012c2:	4b92      	ldr	r3, [pc, #584]	@ (800150c <writeToFlash+0x28c>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b90      	ldr	r3, [pc, #576]	@ (800150c <writeToFlash+0x28c>)
 80012cc:	801a      	strh	r2, [r3, #0]
 80012ce:	4b8f      	ldr	r3, [pc, #572]	@ (800150c <writeToFlash+0x28c>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	2b1b      	cmp	r3, #27
 80012d4:	d9ed      	bls.n	80012b2 <writeToFlash+0x32>
	}

	// Store Values in EEPROM emulation
	HAL_UART_Transmit(&huart2, "Store values\n\r", 14, 100);
 80012d6:	2364      	movs	r3, #100	@ 0x64
 80012d8:	220e      	movs	r2, #14
 80012da:	498e      	ldr	r1, [pc, #568]	@ (8001514 <writeToFlash+0x294>)
 80012dc:	f107 0008 	add.w	r0, r7, #8
 80012e0:	f002 fb4c 	bl	800397c <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2120      	movs	r1, #32
 80012e8:	4887      	ldr	r0, [pc, #540]	@ (8001508 <writeToFlash+0x288>)
 80012ea:	f001 f9bf 	bl	800266c <HAL_GPIO_WritePin>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80012ee:	4b87      	ldr	r3, [pc, #540]	@ (800150c <writeToFlash+0x28c>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	801a      	strh	r2, [r3, #0]
 80012f4:	e01a      	b.n	800132c <writeToFlash+0xac>
		/* Sequence 1 */
		if ((EE_WriteVariable(VirtAddVarTab[VarIndex], VarDataTab[VarIndex]))
 80012f6:	4b85      	ldr	r3, [pc, #532]	@ (800150c <writeToFlash+0x28c>)
 80012f8:	881b      	ldrh	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	4b84      	ldr	r3, [pc, #528]	@ (8001510 <writeToFlash+0x290>)
 80012fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001302:	4a82      	ldr	r2, [pc, #520]	@ (800150c <writeToFlash+0x28c>)
 8001304:	8812      	ldrh	r2, [r2, #0]
 8001306:	4611      	mov	r1, r2
 8001308:	4a83      	ldr	r2, [pc, #524]	@ (8001518 <writeToFlash+0x298>)
 800130a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fb89 	bl	8000a28 <EE_WriteVariable>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <writeToFlash+0xa0>
				!= HAL_OK) {
			Error_Handler();
 800131c:	f7ff ffaa 	bl	8001274 <Error_Handler>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001320:	4b7a      	ldr	r3, [pc, #488]	@ (800150c <writeToFlash+0x28c>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b78      	ldr	r3, [pc, #480]	@ (800150c <writeToFlash+0x28c>)
 800132a:	801a      	strh	r2, [r3, #0]
 800132c:	4b77      	ldr	r3, [pc, #476]	@ (800150c <writeToFlash+0x28c>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	2b1a      	cmp	r3, #26
 8001332:	d9e0      	bls.n	80012f6 <writeToFlash+0x76>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2120      	movs	r1, #32
 8001338:	4873      	ldr	r0, [pc, #460]	@ (8001508 <writeToFlash+0x288>)
 800133a:	f001 f997 	bl	800266c <HAL_GPIO_WritePin>

	// Read values
	HAL_UART_Transmit(&huart2, "Read values\n\r", 13, 100);
 800133e:	2364      	movs	r3, #100	@ 0x64
 8001340:	220d      	movs	r2, #13
 8001342:	4976      	ldr	r1, [pc, #472]	@ (800151c <writeToFlash+0x29c>)
 8001344:	f107 0008 	add.w	r0, r7, #8
 8001348:	f002 fb18 	bl	800397c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	2120      	movs	r1, #32
 8001350:	486d      	ldr	r0, [pc, #436]	@ (8001508 <writeToFlash+0x288>)
 8001352:	f001 f98b 	bl	800266c <HAL_GPIO_WritePin>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001356:	4b6d      	ldr	r3, [pc, #436]	@ (800150c <writeToFlash+0x28c>)
 8001358:	2200      	movs	r2, #0
 800135a:	801a      	strh	r2, [r3, #0]
 800135c:	e019      	b.n	8001392 <writeToFlash+0x112>
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 800135e:	4b6b      	ldr	r3, [pc, #428]	@ (800150c <writeToFlash+0x28c>)
 8001360:	881b      	ldrh	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <writeToFlash+0x290>)
 8001366:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				&VarDataTabRead[VarIndex])) != HAL_OK) {
 800136a:	4a68      	ldr	r2, [pc, #416]	@ (800150c <writeToFlash+0x28c>)
 800136c:	8812      	ldrh	r2, [r2, #0]
 800136e:	4611      	mov	r1, r2
 8001370:	4a6b      	ldr	r2, [pc, #428]	@ (8001520 <writeToFlash+0x2a0>)
 8001372:	440a      	add	r2, r1
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 8001374:	4611      	mov	r1, r2
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fb0c 	bl	8000994 <EE_ReadVariable>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <writeToFlash+0x106>
			Error_Handler();
 8001382:	f7ff ff77 	bl	8001274 <Error_Handler>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001386:	4b61      	ldr	r3, [pc, #388]	@ (800150c <writeToFlash+0x28c>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b5f      	ldr	r3, [pc, #380]	@ (800150c <writeToFlash+0x28c>)
 8001390:	801a      	strh	r2, [r3, #0]
 8001392:	4b5e      	ldr	r3, [pc, #376]	@ (800150c <writeToFlash+0x28c>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	2b1a      	cmp	r3, #26
 8001398:	d9e1      	bls.n	800135e <writeToFlash+0xde>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800139a:	2201      	movs	r2, #1
 800139c:	2120      	movs	r1, #32
 800139e:	485a      	ldr	r0, [pc, #360]	@ (8001508 <writeToFlash+0x288>)
 80013a0:	f001 f964 	bl	800266c <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 80013a4:	2364      	movs	r3, #100	@ 0x64
 80013a6:	220c      	movs	r2, #12
 80013a8:	495e      	ldr	r1, [pc, #376]	@ (8001524 <writeToFlash+0x2a4>)
 80013aa:	f107 0008 	add.w	r0, r7, #8
 80013ae:	f002 fae5 	bl	800397c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, VarDataTabRead, NB_OF_VAR, 1000);
 80013b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b6:	221b      	movs	r2, #27
 80013b8:	4959      	ldr	r1, [pc, #356]	@ (8001520 <writeToFlash+0x2a0>)
 80013ba:	f107 0008 	add.w	r0, r7, #8
 80013be:	f002 fadd 	bl	800397c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 80013c2:	2364      	movs	r3, #100	@ 0x64
 80013c4:	2202      	movs	r2, #2
 80013c6:	4958      	ldr	r1, [pc, #352]	@ (8001528 <writeToFlash+0x2a8>)
 80013c8:	f107 0008 	add.w	r0, r7, #8
 80013cc:	f002 fad6 	bl	800397c <HAL_UART_Transmit>

	// Store revert Values in EEPROM emulation
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 80013d0:	2364      	movs	r3, #100	@ 0x64
 80013d2:	2202      	movs	r2, #2
 80013d4:	4954      	ldr	r1, [pc, #336]	@ (8001528 <writeToFlash+0x2a8>)
 80013d6:	f107 0008 	add.w	r0, r7, #8
 80013da:	f002 facf 	bl	800397c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "Store revert values\n\r", 21, 100);
 80013de:	2364      	movs	r3, #100	@ 0x64
 80013e0:	2215      	movs	r2, #21
 80013e2:	4952      	ldr	r1, [pc, #328]	@ (800152c <writeToFlash+0x2ac>)
 80013e4:	f107 0008 	add.w	r0, r7, #8
 80013e8:	f002 fac8 	bl	800397c <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2120      	movs	r1, #32
 80013f0:	4845      	ldr	r0, [pc, #276]	@ (8001508 <writeToFlash+0x288>)
 80013f2:	f001 f93b 	bl	800266c <HAL_GPIO_WritePin>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80013f6:	4b45      	ldr	r3, [pc, #276]	@ (800150c <writeToFlash+0x28c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	801a      	strh	r2, [r3, #0]
 80013fc:	e01b      	b.n	8001436 <writeToFlash+0x1b6>
		/* Sequence 1 */
		if ((EE_WriteVariable(VirtAddVarTab[VarIndex],
 80013fe:	4b43      	ldr	r3, [pc, #268]	@ (800150c <writeToFlash+0x28c>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <writeToFlash+0x290>)
 8001406:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
				VarDataTab[NB_OF_VAR - VarIndex - 1])) != HAL_OK) {
 800140a:	4b40      	ldr	r3, [pc, #256]	@ (800150c <writeToFlash+0x28c>)
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	f1c3 031a 	rsb	r3, r3, #26
		if ((EE_WriteVariable(VirtAddVarTab[VarIndex],
 8001412:	4941      	ldr	r1, [pc, #260]	@ (8001518 <writeToFlash+0x298>)
 8001414:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001418:	4619      	mov	r1, r3
 800141a:	4610      	mov	r0, r2
 800141c:	f7ff fb04 	bl	8000a28 <EE_WriteVariable>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <writeToFlash+0x1aa>
			Error_Handler();
 8001426:	f7ff ff25 	bl	8001274 <Error_Handler>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 800142a:	4b38      	ldr	r3, [pc, #224]	@ (800150c <writeToFlash+0x28c>)
 800142c:	881b      	ldrh	r3, [r3, #0]
 800142e:	3301      	adds	r3, #1
 8001430:	b29a      	uxth	r2, r3
 8001432:	4b36      	ldr	r3, [pc, #216]	@ (800150c <writeToFlash+0x28c>)
 8001434:	801a      	strh	r2, [r3, #0]
 8001436:	4b35      	ldr	r3, [pc, #212]	@ (800150c <writeToFlash+0x28c>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2b1a      	cmp	r3, #26
 800143c:	d9df      	bls.n	80013fe <writeToFlash+0x17e>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	2120      	movs	r1, #32
 8001442:	4831      	ldr	r0, [pc, #196]	@ (8001508 <writeToFlash+0x288>)
 8001444:	f001 f912 	bl	800266c <HAL_GPIO_WritePin>

	// Read values
	HAL_UART_Transmit(&huart2, "Read revert values\n\r", 20, 100);
 8001448:	2364      	movs	r3, #100	@ 0x64
 800144a:	2214      	movs	r2, #20
 800144c:	4938      	ldr	r1, [pc, #224]	@ (8001530 <writeToFlash+0x2b0>)
 800144e:	f107 0008 	add.w	r0, r7, #8
 8001452:	f002 fa93 	bl	800397c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2120      	movs	r1, #32
 800145a:	482b      	ldr	r0, [pc, #172]	@ (8001508 <writeToFlash+0x288>)
 800145c:	f001 f906 	bl	800266c <HAL_GPIO_WritePin>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001460:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <writeToFlash+0x28c>)
 8001462:	2200      	movs	r2, #0
 8001464:	801a      	strh	r2, [r3, #0]
 8001466:	e019      	b.n	800149c <writeToFlash+0x21c>
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <writeToFlash+0x28c>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <writeToFlash+0x290>)
 8001470:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				&VarDataTabRead[VarIndex])) != HAL_OK) {
 8001474:	4a25      	ldr	r2, [pc, #148]	@ (800150c <writeToFlash+0x28c>)
 8001476:	8812      	ldrh	r2, [r2, #0]
 8001478:	4611      	mov	r1, r2
 800147a:	4a29      	ldr	r2, [pc, #164]	@ (8001520 <writeToFlash+0x2a0>)
 800147c:	440a      	add	r2, r1
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fa87 	bl	8000994 <EE_ReadVariable>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <writeToFlash+0x210>
			Error_Handler();
 800148c:	f7ff fef2 	bl	8001274 <Error_Handler>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001490:	4b1e      	ldr	r3, [pc, #120]	@ (800150c <writeToFlash+0x28c>)
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	3301      	adds	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	4b1c      	ldr	r3, [pc, #112]	@ (800150c <writeToFlash+0x28c>)
 800149a:	801a      	strh	r2, [r3, #0]
 800149c:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <writeToFlash+0x28c>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	2b1a      	cmp	r3, #26
 80014a2:	d9e1      	bls.n	8001468 <writeToFlash+0x1e8>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2120      	movs	r1, #32
 80014a8:	4817      	ldr	r0, [pc, #92]	@ (8001508 <writeToFlash+0x288>)
 80014aa:	f001 f8df 	bl	800266c <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart2, "Read revert table: ", 19, 100);
 80014ae:	2364      	movs	r3, #100	@ 0x64
 80014b0:	2213      	movs	r2, #19
 80014b2:	4920      	ldr	r1, [pc, #128]	@ (8001534 <writeToFlash+0x2b4>)
 80014b4:	f107 0008 	add.w	r0, r7, #8
 80014b8:	f002 fa60 	bl	800397c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, VarDataTabRead, NB_OF_VAR, 1000);
 80014bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c0:	221b      	movs	r2, #27
 80014c2:	4917      	ldr	r1, [pc, #92]	@ (8001520 <writeToFlash+0x2a0>)
 80014c4:	f107 0008 	add.w	r0, r7, #8
 80014c8:	f002 fa58 	bl	800397c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 80014cc:	2364      	movs	r3, #100	@ 0x64
 80014ce:	2202      	movs	r2, #2
 80014d0:	4915      	ldr	r1, [pc, #84]	@ (8001528 <writeToFlash+0x2a8>)
 80014d2:	f107 0008 	add.w	r0, r7, #8
 80014d6:	f002 fa51 	bl	800397c <HAL_UART_Transmit>

	// Store Values in EEPROM emulation
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 80014da:	2364      	movs	r3, #100	@ 0x64
 80014dc:	2202      	movs	r2, #2
 80014de:	4912      	ldr	r1, [pc, #72]	@ (8001528 <writeToFlash+0x2a8>)
 80014e0:	f107 0008 	add.w	r0, r7, #8
 80014e4:	f002 fa4a 	bl	800397c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "Store values\n\r", 14, 100);
 80014e8:	2364      	movs	r3, #100	@ 0x64
 80014ea:	220e      	movs	r2, #14
 80014ec:	4909      	ldr	r1, [pc, #36]	@ (8001514 <writeToFlash+0x294>)
 80014ee:	f107 0008 	add.w	r0, r7, #8
 80014f2:	f002 fa43 	bl	800397c <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2120      	movs	r1, #32
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <writeToFlash+0x288>)
 80014fc:	f001 f8b6 	bl	800266c <HAL_GPIO_WritePin>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001500:	4b02      	ldr	r3, [pc, #8]	@ (800150c <writeToFlash+0x28c>)
 8001502:	2200      	movs	r2, #0
 8001504:	801a      	strh	r2, [r3, #0]
 8001506:	e032      	b.n	800156e <writeToFlash+0x2ee>
 8001508:	40020000 	.word	0x40020000
 800150c:	20000458 	.word	0x20000458
 8001510:	20000404 	.word	0x20000404
 8001514:	08006a30 	.word	0x08006a30
 8001518:	20000000 	.word	0x20000000
 800151c:	08006a40 	.word	0x08006a40
 8001520:	2000043c 	.word	0x2000043c
 8001524:	08006a50 	.word	0x08006a50
 8001528:	08006a60 	.word	0x08006a60
 800152c:	08006a64 	.word	0x08006a64
 8001530:	08006a7c 	.word	0x08006a7c
 8001534:	08006a94 	.word	0x08006a94
		/* Sequence 1 */
		if ((EE_WriteVariable(VirtAddVarTab[VarIndex], VarDataTab[VarIndex]))
 8001538:	4b39      	ldr	r3, [pc, #228]	@ (8001620 <writeToFlash+0x3a0>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	461a      	mov	r2, r3
 800153e:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <writeToFlash+0x3a4>)
 8001540:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001544:	4a36      	ldr	r2, [pc, #216]	@ (8001620 <writeToFlash+0x3a0>)
 8001546:	8812      	ldrh	r2, [r2, #0]
 8001548:	4611      	mov	r1, r2
 800154a:	4a37      	ldr	r2, [pc, #220]	@ (8001628 <writeToFlash+0x3a8>)
 800154c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fa68 	bl	8000a28 <EE_WriteVariable>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <writeToFlash+0x2e2>
				!= HAL_OK) {
			Error_Handler();
 800155e:	f7ff fe89 	bl	8001274 <Error_Handler>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001562:	4b2f      	ldr	r3, [pc, #188]	@ (8001620 <writeToFlash+0x3a0>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b2d      	ldr	r3, [pc, #180]	@ (8001620 <writeToFlash+0x3a0>)
 800156c:	801a      	strh	r2, [r3, #0]
 800156e:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <writeToFlash+0x3a0>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	2b1a      	cmp	r3, #26
 8001574:	d9e0      	bls.n	8001538 <writeToFlash+0x2b8>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	2120      	movs	r1, #32
 800157a:	482c      	ldr	r0, [pc, #176]	@ (800162c <writeToFlash+0x3ac>)
 800157c:	f001 f876 	bl	800266c <HAL_GPIO_WritePin>

	// Read values
	HAL_UART_Transmit(&huart2, "Read values\n\r", 13, 100);
 8001580:	2364      	movs	r3, #100	@ 0x64
 8001582:	220d      	movs	r2, #13
 8001584:	492a      	ldr	r1, [pc, #168]	@ (8001630 <writeToFlash+0x3b0>)
 8001586:	f107 0008 	add.w	r0, r7, #8
 800158a:	f002 f9f7 	bl	800397c <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2120      	movs	r1, #32
 8001592:	4826      	ldr	r0, [pc, #152]	@ (800162c <writeToFlash+0x3ac>)
 8001594:	f001 f86a 	bl	800266c <HAL_GPIO_WritePin>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 8001598:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <writeToFlash+0x3a0>)
 800159a:	2200      	movs	r2, #0
 800159c:	801a      	strh	r2, [r3, #0]
 800159e:	e019      	b.n	80015d4 <writeToFlash+0x354>
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <writeToFlash+0x3a0>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001624 <writeToFlash+0x3a4>)
 80015a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				&VarDataTabRead[VarIndex])) != HAL_OK) {
 80015ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001620 <writeToFlash+0x3a0>)
 80015ae:	8812      	ldrh	r2, [r2, #0]
 80015b0:	4611      	mov	r1, r2
 80015b2:	4a20      	ldr	r2, [pc, #128]	@ (8001634 <writeToFlash+0x3b4>)
 80015b4:	440a      	add	r2, r1
		if ((EE_ReadVariable(VirtAddVarTab[VarIndex],
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff f9eb 	bl	8000994 <EE_ReadVariable>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <writeToFlash+0x348>
			Error_Handler();
 80015c4:	f7ff fe56 	bl	8001274 <Error_Handler>
	for (VarIndex = 0; VarIndex < NB_OF_VAR; VarIndex++) {
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <writeToFlash+0x3a0>)
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	3301      	adds	r3, #1
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <writeToFlash+0x3a0>)
 80015d2:	801a      	strh	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <writeToFlash+0x3a0>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	2b1a      	cmp	r3, #26
 80015da:	d9e1      	bls.n	80015a0 <writeToFlash+0x320>
		}
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	2120      	movs	r1, #32
 80015e0:	4812      	ldr	r0, [pc, #72]	@ (800162c <writeToFlash+0x3ac>)
 80015e2:	f001 f843 	bl	800266c <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 80015e6:	2364      	movs	r3, #100	@ 0x64
 80015e8:	220c      	movs	r2, #12
 80015ea:	4913      	ldr	r1, [pc, #76]	@ (8001638 <writeToFlash+0x3b8>)
 80015ec:	f107 0008 	add.w	r0, r7, #8
 80015f0:	f002 f9c4 	bl	800397c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, VarDataTabRead, NB_OF_VAR, 1000);
 80015f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015f8:	221b      	movs	r2, #27
 80015fa:	490e      	ldr	r1, [pc, #56]	@ (8001634 <writeToFlash+0x3b4>)
 80015fc:	f107 0008 	add.w	r0, r7, #8
 8001600:	f002 f9bc 	bl	800397c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8001604:	2364      	movs	r3, #100	@ 0x64
 8001606:	2202      	movs	r2, #2
 8001608:	490c      	ldr	r1, [pc, #48]	@ (800163c <writeToFlash+0x3bc>)
 800160a:	f107 0008 	add.w	r0, r7, #8
 800160e:	f002 f9b5 	bl	800397c <HAL_UART_Transmit>
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800161a:	b004      	add	sp, #16
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000458 	.word	0x20000458
 8001624:	20000404 	.word	0x20000404
 8001628:	20000000 	.word	0x20000000
 800162c:	40020000 	.word	0x40020000
 8001630:	08006a40 	.word	0x08006a40
 8001634:	2000043c 	.word	0x2000043c
 8001638:	08006a50 	.word	0x08006a50
 800163c:	08006a60 	.word	0x08006a60

08001640 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	db04      	blt.n	8001658 <_isatty+0x18>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b02      	cmp	r3, #2
 8001652:	dc01      	bgt.n	8001658 <_isatty+0x18>
    return 1;
 8001654:	2301      	movs	r3, #1
 8001656:	e005      	b.n	8001664 <_isatty+0x24>

  errno = EBADF;
 8001658:	f004 fc30 	bl	8005ebc <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	2209      	movs	r2, #9
 8001660:	601a      	str	r2, [r3, #0]
  return 0;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_write>:

int _write(int fd, char* ptr, int len) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d002      	beq.n	8001684 <_write+0x18>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d111      	bne.n	80016a8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001684:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <_write+0x54>)
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	b29a      	uxth	r2, r3
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	f002 f973 	bl	800397c <HAL_UART_Transmit>
 8001696:	4603      	mov	r3, r0
 8001698:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <_write+0x38>
      return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	e008      	b.n	80016b6 <_write+0x4a>
    else
      return EIO;
 80016a4:	2305      	movs	r3, #5
 80016a6:	e006      	b.n	80016b6 <_write+0x4a>
  }
  errno = EBADF;
 80016a8:	f004 fc08 	bl	8005ebc <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2209      	movs	r2, #9
 80016b0:	601a      	str	r2, [r3, #0]
  return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000045c 	.word	0x2000045c

080016c4 <_close>:

int _close(int fd) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db04      	blt.n	80016dc <_close+0x18>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	dc01      	bgt.n	80016dc <_close+0x18>
    return 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	e006      	b.n	80016ea <_close+0x26>

  errno = EBADF;
 80016dc:	f004 fbee 	bl	8005ebc <__errno>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2209      	movs	r2, #9
 80016e4:	601a      	str	r2, [r3, #0]
  return -1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	60f8      	str	r0, [r7, #12]
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80016fe:	f004 fbdd 	bl	8005ebc <__errno>
 8001702:	4603      	mov	r3, r0
 8001704:	2209      	movs	r2, #9
 8001706:	601a      	str	r2, [r3, #0]
  return -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_read>:

int _read(int fd, char* ptr, int len) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d110      	bne.n	8001748 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <_read+0x4c>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	2201      	movs	r2, #1
 8001730:	68b9      	ldr	r1, [r7, #8]
 8001732:	f002 f9ae 	bl	8003a92 <HAL_UART_Receive>
 8001736:	4603      	mov	r3, r0
 8001738:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800173a:	7dfb      	ldrb	r3, [r7, #23]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <_read+0x30>
      return 1;
 8001740:	2301      	movs	r3, #1
 8001742:	e008      	b.n	8001756 <_read+0x42>
    else
      return EIO;
 8001744:	2305      	movs	r3, #5
 8001746:	e006      	b.n	8001756 <_read+0x42>
  }
  errno = EBADF;
 8001748:	f004 fbb8 	bl	8005ebc <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	2209      	movs	r2, #9
 8001750:	601a      	str	r2, [r3, #0]
  return -1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000045c 	.word	0x2000045c

08001764 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db08      	blt.n	8001786 <_fstat+0x22>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	dc05      	bgt.n	8001786 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001780:	605a      	str	r2, [r3, #4]
    return 0;
 8001782:	2300      	movs	r3, #0
 8001784:	e005      	b.n	8001792 <_fstat+0x2e>
  }

  errno = EBADF;
 8001786:	f004 fb99 	bl	8005ebc <__errno>
 800178a:	4603      	mov	r3, r0
 800178c:	2209      	movs	r2, #9
 800178e:	601a      	str	r2, [r3, #0]
  return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_MspInit+0x54>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	4a11      	ldr	r2, [pc, #68]	@ (80017f0 <HAL_MspInit+0x54>)
 80017ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_MspInit+0x54>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_MspInit+0x54>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_MspInit+0x54>)
 80017c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <HAL_MspInit+0x54>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	210f      	movs	r1, #15
 80017de:	f06f 0001 	mvn.w	r0, #1
 80017e2:	f000 faa1 	bl	8001d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <HAL_CRC_MspInit+0x3c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10d      	bne.n	8001822 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_CRC_MspInit+0x40>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a09      	ldr	r2, [pc, #36]	@ (8001834 <HAL_CRC_MspInit+0x40>)
 8001810:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b07      	ldr	r3, [pc, #28]	@ (8001834 <HAL_CRC_MspInit+0x40>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023000 	.word	0x40023000
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <HAL_TIM_Base_MspInit+0x3c>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10d      	bne.n	8001866 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b0a      	ldr	r3, [pc, #40]	@ (8001878 <HAL_TIM_Base_MspInit+0x40>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	4a09      	ldr	r2, [pc, #36]	@ (8001878 <HAL_TIM_Base_MspInit+0x40>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6453      	str	r3, [r2, #68]	@ 0x44
 800185a:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <HAL_TIM_Base_MspInit+0x40>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40010000 	.word	0x40010000
 8001878:	40023800 	.word	0x40023800

0800187c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b08a      	sub	sp, #40	@ 0x28
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a19      	ldr	r2, [pc, #100]	@ (8001900 <HAL_UART_MspInit+0x84>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d12b      	bne.n	80018f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <HAL_UART_MspInit+0x88>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <HAL_UART_MspInit+0x88>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	4b15      	ldr	r3, [pc, #84]	@ (8001904 <HAL_UART_MspInit+0x88>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <HAL_UART_MspInit+0x88>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <HAL_UART_MspInit+0x88>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_UART_MspInit+0x88>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018d6:	230c      	movs	r3, #12
 80018d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e6:	2307      	movs	r3, #7
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <HAL_UART_MspInit+0x8c>)
 80018f2:	f000 fd37 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	@ 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40004400 	.word	0x40004400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	@ 0x38
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4b33      	ldr	r3, [pc, #204]	@ (80019f0 <HAL_InitTick+0xe4>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	4a32      	ldr	r2, [pc, #200]	@ (80019f0 <HAL_InitTick+0xe4>)
 8001926:	f043 0308 	orr.w	r3, r3, #8
 800192a:	6413      	str	r3, [r2, #64]	@ 0x40
 800192c:	4b30      	ldr	r3, [pc, #192]	@ (80019f0 <HAL_InitTick+0xe4>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001938:	f107 0210 	add.w	r2, r7, #16
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f001 fb5e 	bl	8003004 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800194c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194e:	2b00      	cmp	r3, #0
 8001950:	d103      	bne.n	800195a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001952:	f001 fb2f 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8001956:	6378      	str	r0, [r7, #52]	@ 0x34
 8001958:	e004      	b.n	8001964 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800195a:	f001 fb2b 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 800195e:	4603      	mov	r3, r0
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001966:	4a23      	ldr	r2, [pc, #140]	@ (80019f4 <HAL_InitTick+0xe8>)
 8001968:	fba2 2303 	umull	r2, r3, r2, r3
 800196c:	0c9b      	lsrs	r3, r3, #18
 800196e:	3b01      	subs	r3, #1
 8001970:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001972:	4b21      	ldr	r3, [pc, #132]	@ (80019f8 <HAL_InitTick+0xec>)
 8001974:	4a21      	ldr	r2, [pc, #132]	@ (80019fc <HAL_InitTick+0xf0>)
 8001976:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001978:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <HAL_InitTick+0xec>)
 800197a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800197e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001980:	4a1d      	ldr	r2, [pc, #116]	@ (80019f8 <HAL_InitTick+0xec>)
 8001982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001984:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <HAL_InitTick+0xec>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <HAL_InitTick+0xec>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <HAL_InitTick+0xec>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001998:	4817      	ldr	r0, [pc, #92]	@ (80019f8 <HAL_InitTick+0xec>)
 800199a:	f001 fb65 	bl	8003068 <HAL_TIM_Base_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11b      	bne.n	80019e4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80019ac:	4812      	ldr	r0, [pc, #72]	@ (80019f8 <HAL_InitTick+0xec>)
 80019ae:	f001 fbab 	bl	8003108 <HAL_TIM_Base_Start_IT>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d111      	bne.n	80019e4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019c0:	2032      	movs	r0, #50	@ 0x32
 80019c2:	f000 f9cd 	bl	8001d60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d808      	bhi.n	80019de <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80019cc:	2200      	movs	r2, #0
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	2032      	movs	r0, #50	@ 0x32
 80019d2:	f000 f9a9 	bl	8001d28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a00 <HAL_InitTick+0xf4>)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e002      	b.n	80019e4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3738      	adds	r7, #56	@ 0x38
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	431bde83 	.word	0x431bde83
 80019f8:	20000460 	.word	0x20000460
 80019fc:	40000c00 	.word	0x40000c00
 8001a00:	2000003c 	.word	0x2000003c

08001a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <NMI_Handler+0x4>

08001a0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <HardFault_Handler+0x4>

08001a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <MemManage_Handler+0x4>

08001a1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a20:	bf00      	nop
 8001a22:	e7fd      	b.n	8001a20 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <TIM5_IRQHandler+0x10>)
 8001a42:	f001 fbc3 	bl	80031cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000460 	.word	0x20000460

08001a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a58:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <_sbrk+0x5c>)
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <_sbrk+0x60>)
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a64:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <_sbrk+0x64>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <_sbrk+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d207      	bcs.n	8001a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a80:	f004 fa1c 	bl	8005ebc <__errno>
 8001a84:	4603      	mov	r3, r0
 8001a86:	220c      	movs	r2, #12
 8001a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8e:	e009      	b.n	8001aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <_sbrk+0x64>)
 8001aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20018000 	.word	0x20018000
 8001ab0:	00000400 	.word	0x00000400
 8001ab4:	200004a8 	.word	0x200004a8
 8001ab8:	20004370 	.word	0x20004370

08001abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <SystemInit+0x20>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ac6:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <SystemInit+0x20>)
 8001ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ae4:	f7ff ffea 	bl	8001abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f004 f9db 	bl	8005ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7ff f97b 	bl	8000e0c <main>
  bx  lr    
 8001b16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001b24:	08006b0c 	.word	0x08006b0c
  ldr r2, =_sbss
 8001b28:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 8001b2c:	20004370 	.word	0x20004370

08001b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_Init+0x40>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_Init+0x40>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <HAL_Init+0x40>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f8d8 	bl	8001d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	200f      	movs	r0, #15
 8001b64:	f7ff fed2 	bl	800190c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff fe18 	bl	800179c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <HAL_IncTick+0x24>)
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000040 	.word	0x20000040
 8001b9c:	200004ac 	.word	0x200004ac

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	200004ac 	.word	0x200004ac

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	db0b      	blt.n	8001c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	f003 021f 	and.w	r2, r3, #31
 8001c34:	4907      	ldr	r1, [pc, #28]	@ (8001c54 <__NVIC_EnableIRQ+0x38>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	095b      	lsrs	r3, r3, #5
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	@ (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	@ (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	@ 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff4c 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3a:	f7ff ff61 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	6978      	ldr	r0, [r7, #20]
 8001d46:	f7ff ffb1 	bl	8001cac <NVIC_EncodePriority>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff80 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff54 	bl	8001c1c <__NVIC_EnableIRQ>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	795b      	ldrb	r3, [r3, #5]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7ff fd28 	bl	80017f4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001dc6:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_FLASH_Program+0xa0>)
 8001dc8:	7e1b      	ldrb	r3, [r3, #24]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_FLASH_Program+0x1e>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e03b      	b.n	8001e4a <HAL_FLASH_Program+0x96>
 8001dd2:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_FLASH_Program+0xa0>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001dd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001ddc:	f000 f860 	bl	8001ea0 <FLASH_WaitForLastOperation>
 8001de0:	4603      	mov	r3, r0
 8001de2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d12b      	bne.n	8001e42 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001df0:	783b      	ldrb	r3, [r7, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	68b8      	ldr	r0, [r7, #8]
 8001df6:	f000 f90b 	bl	8002010 <FLASH_Program_Byte>
 8001dfa:	e016      	b.n	8001e2a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d105      	bne.n	8001e0e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001e02:	883b      	ldrh	r3, [r7, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	68b8      	ldr	r0, [r7, #8]
 8001e08:	f000 f8de 	bl	8001fc8 <FLASH_Program_HalfWord>
 8001e0c:	e00d      	b.n	8001e2a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d105      	bne.n	8001e20 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4619      	mov	r1, r3
 8001e18:	68b8      	ldr	r0, [r7, #8]
 8001e1a:	f000 f8b3 	bl	8001f84 <FLASH_Program_Word>
 8001e1e:	e004      	b.n	8001e2a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e24:	68b8      	ldr	r0, [r7, #8]
 8001e26:	f000 f87b 	bl	8001f20 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e2a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001e2e:	f000 f837 	bl	8001ea0 <FLASH_WaitForLastOperation>
 8001e32:	4603      	mov	r3, r0
 8001e34:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001e36:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_FLASH_Program+0xa4>)
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	4a07      	ldr	r2, [pc, #28]	@ (8001e58 <HAL_FLASH_Program+0xa4>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001e42:	4b04      	ldr	r3, [pc, #16]	@ (8001e54 <HAL_FLASH_Program+0xa0>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200004b0 	.word	0x200004b0
 8001e58:	40023c00 	.word	0x40023c00

08001e5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e66:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <HAL_FLASH_Unlock+0x38>)
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	da0b      	bge.n	8001e86 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_FLASH_Unlock+0x38>)
 8001e70:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <HAL_FLASH_Unlock+0x3c>)
 8001e72:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001e74:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <HAL_FLASH_Unlock+0x38>)
 8001e76:	4a09      	ldr	r2, [pc, #36]	@ (8001e9c <HAL_FLASH_Unlock+0x40>)
 8001e78:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_FLASH_Unlock+0x38>)
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	da01      	bge.n	8001e86 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001e86:	79fb      	ldrb	r3, [r7, #7]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	40023c00 	.word	0x40023c00
 8001e98:	45670123 	.word	0x45670123
 8001e9c:	cdef89ab 	.word	0xcdef89ab

08001ea0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001eac:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <FLASH_WaitForLastOperation+0x78>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb2:	f7ff fe75 	bl	8001ba0 <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001eb8:	e010      	b.n	8001edc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec0:	d00c      	beq.n	8001edc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <FLASH_WaitForLastOperation+0x38>
 8001ec8:	f7ff fe6a 	bl	8001ba0 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d201      	bcs.n	8001edc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e019      	b.n	8001f10 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001edc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <FLASH_WaitForLastOperation+0x7c>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1e8      	bne.n	8001eba <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f1c <FLASH_WaitForLastOperation+0x7c>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ef4:	4b09      	ldr	r3, [pc, #36]	@ (8001f1c <FLASH_WaitForLastOperation+0x7c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001efa:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <FLASH_WaitForLastOperation+0x7c>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001f06:	f000 f8a5 	bl	8002054 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
  
}  
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200004b0 	.word	0x200004b0
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <FLASH_Program_DoubleWord+0x60>)
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	4a13      	ldr	r2, [pc, #76]	@ (8001f80 <FLASH_Program_DoubleWord+0x60>)
 8001f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <FLASH_Program_DoubleWord+0x60>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <FLASH_Program_DoubleWord+0x60>)
 8001f3e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001f42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f44:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <FLASH_Program_DoubleWord+0x60>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4a0d      	ldr	r2, [pc, #52]	@ (8001f80 <FLASH_Program_DoubleWord+0x60>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001f56:	f3bf 8f6f 	isb	sy
}
 8001f5a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	000a      	movs	r2, r1
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	3104      	adds	r1, #4
 8001f70:	4613      	mov	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40023c00 	.word	0x40023c00

08001f84 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <FLASH_Program_Word+0x40>)
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <FLASH_Program_Word+0x40>)
 8001f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <FLASH_Program_Word+0x40>)
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	4a09      	ldr	r2, [pc, #36]	@ (8001fc4 <FLASH_Program_Word+0x40>)
 8001fa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <FLASH_Program_Word+0x40>)
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	4a06      	ldr	r2, [pc, #24]	@ (8001fc4 <FLASH_Program_Word+0x40>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	601a      	str	r2, [r3, #0]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40023c00 	.word	0x40023c00

08001fc8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800200c <FLASH_Program_HalfWord+0x44>)
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800200c <FLASH_Program_HalfWord+0x44>)
 8001fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <FLASH_Program_HalfWord+0x44>)
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	4a09      	ldr	r2, [pc, #36]	@ (800200c <FLASH_Program_HalfWord+0x44>)
 8001fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001fec:	4b07      	ldr	r3, [pc, #28]	@ (800200c <FLASH_Program_HalfWord+0x44>)
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	4a06      	ldr	r2, [pc, #24]	@ (800200c <FLASH_Program_HalfWord+0x44>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	801a      	strh	r2, [r3, #0]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	40023c00 	.word	0x40023c00

08002010 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <FLASH_Program_Byte+0x40>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	4a0b      	ldr	r2, [pc, #44]	@ (8002050 <FLASH_Program_Byte+0x40>)
 8002022:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002026:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002028:	4b09      	ldr	r3, [pc, #36]	@ (8002050 <FLASH_Program_Byte+0x40>)
 800202a:	4a09      	ldr	r2, [pc, #36]	@ (8002050 <FLASH_Program_Byte+0x40>)
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002030:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <FLASH_Program_Byte+0x40>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4a06      	ldr	r2, [pc, #24]	@ (8002050 <FLASH_Program_Byte+0x40>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	78fa      	ldrb	r2, [r7, #3]
 8002040:	701a      	strb	r2, [r3, #0]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023c00 	.word	0x40023c00

08002054 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002058:	4b2f      	ldr	r3, [pc, #188]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d008      	beq.n	8002076 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002064:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f043 0310 	orr.w	r3, r3, #16
 800206c:	4a2b      	ldr	r2, [pc, #172]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 800206e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002070:	4b29      	ldr	r3, [pc, #164]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 8002072:	2210      	movs	r2, #16
 8002074:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002076:	4b28      	ldr	r3, [pc, #160]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b00      	cmp	r3, #0
 8002080:	d008      	beq.n	8002094 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002082:	4b26      	ldr	r3, [pc, #152]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f043 0308 	orr.w	r3, r3, #8
 800208a:	4a24      	ldr	r2, [pc, #144]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 800208c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 8002090:	2220      	movs	r2, #32
 8002092:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002094:	4b20      	ldr	r3, [pc, #128]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	4a1c      	ldr	r2, [pc, #112]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 80020aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80020ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 80020ae:	2240      	movs	r2, #64	@ 0x40
 80020b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d008      	beq.n	80020d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80020be:	4b17      	ldr	r3, [pc, #92]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	4a15      	ldr	r2, [pc, #84]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 80020c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80020ca:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 80020cc:	2280      	movs	r2, #128	@ 0x80
 80020ce:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	4a0d      	ldr	r2, [pc, #52]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 80020e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80020e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 80020ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020ee:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80020fc:	4b07      	ldr	r3, [pc, #28]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f043 0320 	orr.w	r3, r3, #32
 8002104:	4a05      	ldr	r2, [pc, #20]	@ (800211c <FLASH_SetErrorCode+0xc8>)
 8002106:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <FLASH_SetErrorCode+0xc4>)
 800210a:	2202      	movs	r2, #2
 800210c:	60da      	str	r2, [r3, #12]
  }
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40023c00 	.word	0x40023c00
 800211c:	200004b0 	.word	0x200004b0

08002120 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002132:	4b31      	ldr	r3, [pc, #196]	@ (80021f8 <HAL_FLASHEx_Erase+0xd8>)
 8002134:	7e1b      	ldrb	r3, [r3, #24]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d101      	bne.n	800213e <HAL_FLASHEx_Erase+0x1e>
 800213a:	2302      	movs	r3, #2
 800213c:	e058      	b.n	80021f0 <HAL_FLASHEx_Erase+0xd0>
 800213e:	4b2e      	ldr	r3, [pc, #184]	@ (80021f8 <HAL_FLASHEx_Erase+0xd8>)
 8002140:	2201      	movs	r2, #1
 8002142:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002144:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002148:	f7ff feaa 	bl	8001ea0 <FLASH_WaitForLastOperation>
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d148      	bne.n	80021e8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d115      	bne.n	8002192 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 f844 	bl	8002200 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002178:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800217c:	f7ff fe90 	bl	8001ea0 <FLASH_WaitForLastOperation>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002184:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HAL_FLASHEx_Erase+0xdc>)
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <HAL_FLASHEx_Erase+0xdc>)
 800218a:	f023 0304 	bic.w	r3, r3, #4
 800218e:	6113      	str	r3, [r2, #16]
 8002190:	e028      	b.n	80021e4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	e01c      	b.n	80021d4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	4619      	mov	r1, r3
 80021a2:	68b8      	ldr	r0, [r7, #8]
 80021a4:	f000 f850 	bl	8002248 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021a8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021ac:	f7ff fe78 	bl	8001ea0 <FLASH_WaitForLastOperation>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80021b4:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <HAL_FLASHEx_Erase+0xdc>)
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	4a10      	ldr	r2, [pc, #64]	@ (80021fc <HAL_FLASHEx_Erase+0xdc>)
 80021ba:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 80021be:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	601a      	str	r2, [r3, #0]
          break;
 80021cc:	e00a      	b.n	80021e4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	3301      	adds	r3, #1
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4413      	add	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d3da      	bcc.n	800219a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80021e4:	f000 f878 	bl	80022d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_FLASHEx_Erase+0xd8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	761a      	strb	r2, [r3, #24]

  return status;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200004b0 	.word	0x200004b0
 80021fc:	40023c00 	.word	0x40023c00

08002200 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800220c:	4b0d      	ldr	r3, [pc, #52]	@ (8002244 <FLASH_MassErase+0x44>)
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	4a0c      	ldr	r2, [pc, #48]	@ (8002244 <FLASH_MassErase+0x44>)
 8002212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002218:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <FLASH_MassErase+0x44>)
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	4a09      	ldr	r2, [pc, #36]	@ (8002244 <FLASH_MassErase+0x44>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002224:	4b07      	ldr	r3, [pc, #28]	@ (8002244 <FLASH_MassErase+0x44>)
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	4313      	orrs	r3, r2
 800222e:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <FLASH_MassErase+0x44>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002234:	6113      	str	r3, [r2, #16]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00

08002248 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d102      	bne.n	8002264 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e010      	b.n	8002286 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d103      	bne.n	8002272 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800226a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	e009      	b.n	8002286 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d103      	bne.n	8002280 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002278:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	e002      	b.n	8002286 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002280:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002284:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002286:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	4a12      	ldr	r2, [pc, #72]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 800228c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002290:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 8002294:	691a      	ldr	r2, [r3, #16]
 8002296:	490f      	ldr	r1, [pc, #60]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800229e:	4b0d      	ldr	r3, [pc, #52]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 80022a4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80022a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80022aa:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 80022ac:	691a      	ldr	r2, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4313      	orrs	r3, r2
 80022b4:	4a07      	ldr	r2, [pc, #28]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 80022b6:	f043 0302 	orr.w	r3, r3, #2
 80022ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4a04      	ldr	r2, [pc, #16]	@ (80022d4 <FLASH_Erase_Sector+0x8c>)
 80022c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c6:	6113      	str	r3, [r2, #16]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40023c00 	.word	0x40023c00

080022d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80022dc:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <FLASH_FlushCaches+0x88>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d017      	beq.n	8002318 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <FLASH_FlushCaches+0x88>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002360 <FLASH_FlushCaches+0x88>)
 80022ee:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80022f2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80022f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002360 <FLASH_FlushCaches+0x88>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a19      	ldr	r2, [pc, #100]	@ (8002360 <FLASH_FlushCaches+0x88>)
 80022fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <FLASH_FlushCaches+0x88>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a16      	ldr	r2, [pc, #88]	@ (8002360 <FLASH_FlushCaches+0x88>)
 8002306:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800230a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800230c:	4b14      	ldr	r3, [pc, #80]	@ (8002360 <FLASH_FlushCaches+0x88>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a13      	ldr	r2, [pc, #76]	@ (8002360 <FLASH_FlushCaches+0x88>)
 8002312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002316:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <FLASH_FlushCaches+0x88>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002320:	2b00      	cmp	r3, #0
 8002322:	d017      	beq.n	8002354 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002324:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <FLASH_FlushCaches+0x88>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <FLASH_FlushCaches+0x88>)
 800232a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800232e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002330:	4b0b      	ldr	r3, [pc, #44]	@ (8002360 <FLASH_FlushCaches+0x88>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <FLASH_FlushCaches+0x88>)
 8002336:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b08      	ldr	r3, [pc, #32]	@ (8002360 <FLASH_FlushCaches+0x88>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a07      	ldr	r2, [pc, #28]	@ (8002360 <FLASH_FlushCaches+0x88>)
 8002342:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002346:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002348:	4b05      	ldr	r3, [pc, #20]	@ (8002360 <FLASH_FlushCaches+0x88>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a04      	ldr	r2, [pc, #16]	@ (8002360 <FLASH_FlushCaches+0x88>)
 800234e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002352:	6013      	str	r3, [r2, #0]
  }
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023c00 	.word	0x40023c00

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	e159      	b.n	8002634 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002380:	2201      	movs	r2, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8148 	bne.w	800262e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d005      	beq.n	80023b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d130      	bne.n	8002418 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ec:	2201      	movs	r2, #1
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	091b      	lsrs	r3, r3, #4
 8002402:	f003 0201 	and.w	r2, r3, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b03      	cmp	r3, #3
 8002422:	d017      	beq.n	8002454 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d123      	bne.n	80024a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	08da      	lsrs	r2, r3, #3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3208      	adds	r2, #8
 8002468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	220f      	movs	r2, #15
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	69b9      	ldr	r1, [r7, #24]
 80024a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	2203      	movs	r2, #3
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0203 	and.w	r2, r3, #3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a2 	beq.w	800262e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b57      	ldr	r3, [pc, #348]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	4a56      	ldr	r2, [pc, #344]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_GPIO_Init+0x2e8>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002506:	4a52      	ldr	r2, [pc, #328]	@ (8002650 <HAL_GPIO_Init+0x2ec>)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002512:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	220f      	movs	r2, #15
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a49      	ldr	r2, [pc, #292]	@ (8002654 <HAL_GPIO_Init+0x2f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d019      	beq.n	8002566 <HAL_GPIO_Init+0x202>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a48      	ldr	r2, [pc, #288]	@ (8002658 <HAL_GPIO_Init+0x2f4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d013      	beq.n	8002562 <HAL_GPIO_Init+0x1fe>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a47      	ldr	r2, [pc, #284]	@ (800265c <HAL_GPIO_Init+0x2f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00d      	beq.n	800255e <HAL_GPIO_Init+0x1fa>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a46      	ldr	r2, [pc, #280]	@ (8002660 <HAL_GPIO_Init+0x2fc>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <HAL_GPIO_Init+0x1f6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a45      	ldr	r2, [pc, #276]	@ (8002664 <HAL_GPIO_Init+0x300>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d101      	bne.n	8002556 <HAL_GPIO_Init+0x1f2>
 8002552:	2304      	movs	r3, #4
 8002554:	e008      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002556:	2307      	movs	r3, #7
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255a:	2303      	movs	r3, #3
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x204>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x204>
 8002566:	2300      	movs	r3, #0
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f002 0203 	and.w	r2, r2, #3
 800256e:	0092      	lsls	r2, r2, #2
 8002570:	4093      	lsls	r3, r2
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4313      	orrs	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002578:	4935      	ldr	r1, [pc, #212]	@ (8002650 <HAL_GPIO_Init+0x2ec>)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3302      	adds	r3, #2
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002586:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d4:	4a24      	ldr	r2, [pc, #144]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <HAL_GPIO_Init+0x304>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4013      	ands	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002604:	4b18      	ldr	r3, [pc, #96]	@ (8002668 <HAL_GPIO_Init+0x304>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002628:	4a0f      	ldr	r2, [pc, #60]	@ (8002668 <HAL_GPIO_Init+0x304>)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3301      	adds	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2b0f      	cmp	r3, #15
 8002638:	f67f aea2 	bls.w	8002380 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3724      	adds	r7, #36	@ 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	40013800 	.word	0x40013800
 8002654:	40020000 	.word	0x40020000
 8002658:	40020400 	.word	0x40020400
 800265c:	40020800 	.word	0x40020800
 8002660:	40020c00 	.word	0x40020c00
 8002664:	40021000 	.word	0x40021000
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002688:	e003      	b.n	8002692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800269e:	b480      	push	{r7}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	460b      	mov	r3, r1
 80026a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b0:	887a      	ldrh	r2, [r7, #2]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	041a      	lsls	r2, r3, #16
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	43d9      	mvns	r1, r3
 80026bc:	887b      	ldrh	r3, [r7, #2]
 80026be:	400b      	ands	r3, r1
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	619a      	str	r2, [r3, #24]
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e267      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d075      	beq.n	80027de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026f2:	4b88      	ldr	r3, [pc, #544]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d00c      	beq.n	8002718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fe:	4b85      	ldr	r3, [pc, #532]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002706:	2b08      	cmp	r3, #8
 8002708:	d112      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270a:	4b82      	ldr	r3, [pc, #520]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002716:	d10b      	bne.n	8002730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002718:	4b7e      	ldr	r3, [pc, #504]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d05b      	beq.n	80027dc <HAL_RCC_OscConfig+0x108>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d157      	bne.n	80027dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e242      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002738:	d106      	bne.n	8002748 <HAL_RCC_OscConfig+0x74>
 800273a:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a75      	ldr	r2, [pc, #468]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e01d      	b.n	8002784 <HAL_RCC_OscConfig+0xb0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x98>
 8002752:	4b70      	ldr	r3, [pc, #448]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a6f      	ldr	r2, [pc, #444]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b6d      	ldr	r3, [pc, #436]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6c      	ldr	r2, [pc, #432]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0xb0>
 800276c:	4b69      	ldr	r3, [pc, #420]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a68      	ldr	r2, [pc, #416]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b66      	ldr	r3, [pc, #408]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a65      	ldr	r2, [pc, #404]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7ff fa08 	bl	8001ba0 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff fa04 	bl	8001ba0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e207      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0xc0>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff f9f4 	bl	8001ba0 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027bc:	f7ff f9f0 	bl	8001ba0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	@ 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e1f3      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	4b51      	ldr	r3, [pc, #324]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0xe8>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d063      	beq.n	80028b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11c      	bne.n	800283c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002802:	4b44      	ldr	r3, [pc, #272]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	4b41      	ldr	r3, [pc, #260]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x152>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e1c7      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b3b      	ldr	r3, [pc, #236]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4937      	ldr	r1, [pc, #220]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	e03a      	b.n	80028b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002844:	4b34      	ldr	r3, [pc, #208]	@ (8002918 <HAL_RCC_OscConfig+0x244>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284a:	f7ff f9a9 	bl	8001ba0 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002852:	f7ff f9a5 	bl	8001ba0 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e1a8      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	4b2b      	ldr	r3, [pc, #172]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002870:	4b28      	ldr	r3, [pc, #160]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4925      	ldr	r1, [pc, #148]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	e015      	b.n	80028b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002886:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_RCC_OscConfig+0x244>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288c:	f7ff f988 	bl	8001ba0 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002894:	f7ff f984 	bl	8001ba0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e187      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0308 	and.w	r3, r3, #8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d036      	beq.n	800292c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_RCC_OscConfig+0x248>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028cc:	f7ff f968 	bl	8001ba0 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028d4:	f7ff f964 	bl	8001ba0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e167      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_RCC_OscConfig+0x240>)
 80028e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x200>
 80028f2:	e01b      	b.n	800292c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f4:	4b09      	ldr	r3, [pc, #36]	@ (800291c <HAL_RCC_OscConfig+0x248>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7ff f951 	bl	8001ba0 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002900:	e00e      	b.n	8002920 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002902:	f7ff f94d 	bl	8001ba0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d907      	bls.n	8002920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e150      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
 8002914:	40023800 	.word	0x40023800
 8002918:	42470000 	.word	0x42470000
 800291c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	4b88      	ldr	r3, [pc, #544]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ea      	bne.n	8002902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 8097 	beq.w	8002a68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293e:	4b81      	ldr	r3, [pc, #516]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10f      	bne.n	800296a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a7c      	ldr	r2, [pc, #496]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b77      	ldr	r3, [pc, #476]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002976:	4b74      	ldr	r3, [pc, #464]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a73      	ldr	r2, [pc, #460]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7ff f90d 	bl	8001ba0 <HAL_GetTick>
 8002986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7ff f909 	bl	8001ba0 <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e10c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b48 <HAL_RCC_OscConfig+0x474>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d106      	bne.n	80029be <HAL_RCC_OscConfig+0x2ea>
 80029b0:	4b64      	ldr	r3, [pc, #400]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b4:	4a63      	ldr	r2, [pc, #396]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029b6:	f043 0301 	orr.w	r3, r3, #1
 80029ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80029bc:	e01c      	b.n	80029f8 <HAL_RCC_OscConfig+0x324>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x30c>
 80029c6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ca:	4a5e      	ldr	r2, [pc, #376]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029cc:	f043 0304 	orr.w	r3, r3, #4
 80029d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0x324>
 80029e0:	4b58      	ldr	r3, [pc, #352]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e4:	4a57      	ldr	r2, [pc, #348]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ec:	4b55      	ldr	r3, [pc, #340]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f0:	4a54      	ldr	r2, [pc, #336]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 80029f2:	f023 0304 	bic.w	r3, r3, #4
 80029f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d015      	beq.n	8002a2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff f8ce 	bl	8001ba0 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7ff f8ca 	bl	8001ba0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e0cb      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1e:	4b49      	ldr	r3, [pc, #292]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0ee      	beq.n	8002a08 <HAL_RCC_OscConfig+0x334>
 8002a2a:	e014      	b.n	8002a56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2c:	f7ff f8b8 	bl	8001ba0 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a34:	f7ff f8b4 	bl	8001ba0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e0b5      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1ee      	bne.n	8002a34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a56:	7dfb      	ldrb	r3, [r7, #23]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a5c:	4b39      	ldr	r3, [pc, #228]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	4a38      	ldr	r2, [pc, #224]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 80a1 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a72:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d05c      	beq.n	8002b38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d141      	bne.n	8002b0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b31      	ldr	r3, [pc, #196]	@ (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7ff f888 	bl	8001ba0 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a94:	f7ff f884 	bl	8001ba0 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e087      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	4b27      	ldr	r3, [pc, #156]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	019b      	lsls	r3, r3, #6
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	3b01      	subs	r3, #1
 8002acc:	041b      	lsls	r3, r3, #16
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	491b      	ldr	r1, [pc, #108]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002adc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f85d 	bl	8001ba0 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aea:	f7ff f859 	bl	8001ba0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e05c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x416>
 8002b08:	e054      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_RCC_OscConfig+0x478>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7ff f846 	bl	8001ba0 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b18:	f7ff f842 	bl	8001ba0 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e045      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x444>
 8002b36:	e03d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d107      	bne.n	8002b50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e038      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_RCC_OscConfig+0x4ec>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d028      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d121      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d11a      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b80:	4013      	ands	r3, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d111      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	085b      	lsrs	r3, r3, #1
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0cc      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b68      	ldr	r3, [pc, #416]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d90c      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b65      	ldr	r3, [pc, #404]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b63      	ldr	r3, [pc, #396]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b8      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c18:	4b59      	ldr	r3, [pc, #356]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c30:	4b53      	ldr	r3, [pc, #332]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a52      	ldr	r2, [pc, #328]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b50      	ldr	r3, [pc, #320]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	494d      	ldr	r1, [pc, #308]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d044      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d119      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d003      	beq.n	8002c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c82:	4b3f      	ldr	r3, [pc, #252]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e06f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c92:	4b3b      	ldr	r3, [pc, #236]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e067      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b37      	ldr	r3, [pc, #220]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4934      	ldr	r1, [pc, #208]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cb4:	f7fe ff74 	bl	8001ba0 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe ff70 	bl	8001ba0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e04f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d20c      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	b2d2      	uxtb	r2, r2
 8002cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e032      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b19      	ldr	r3, [pc, #100]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4916      	ldr	r1, [pc, #88]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d36:	4b12      	ldr	r3, [pc, #72]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	490e      	ldr	r1, [pc, #56]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d4a:	f000 f821 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	490a      	ldr	r1, [pc, #40]	@ (8002d84 <HAL_RCC_ClockConfig+0x1c0>)
 8002d5c:	5ccb      	ldrb	r3, [r1, r3]
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	4a09      	ldr	r2, [pc, #36]	@ (8002d88 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d66:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fdce 	bl	800190c <HAL_InitTick>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08006ab0 	.word	0x08006ab0
 8002d88:	20000038 	.word	0x20000038
 8002d8c:	2000003c 	.word	0x2000003c

08002d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b094      	sub	sp, #80	@ 0x50
 8002d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002da0:	2300      	movs	r3, #0
 8002da2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da8:	4b79      	ldr	r3, [pc, #484]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d00d      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	f200 80e1 	bhi.w	8002f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x3a>
 8002dc2:	e0db      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b73      	ldr	r3, [pc, #460]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dc6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002dc8:	e0db      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dca:	4b73      	ldr	r3, [pc, #460]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dce:	e0d8      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dd8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dda:	4b6d      	ldr	r3, [pc, #436]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d063      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b6a      	ldr	r3, [pc, #424]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002df0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e14:	0150      	lsls	r0, r2, #5
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	6139      	str	r1, [r7, #16]
 8002e20:	4629      	mov	r1, r5
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e34:	4659      	mov	r1, fp
 8002e36:	018b      	lsls	r3, r1, #6
 8002e38:	4651      	mov	r1, sl
 8002e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3e:	4651      	mov	r1, sl
 8002e40:	018a      	lsls	r2, r1, #6
 8002e42:	4651      	mov	r1, sl
 8002e44:	ebb2 0801 	subs.w	r8, r2, r1
 8002e48:	4659      	mov	r1, fp
 8002e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e62:	4690      	mov	r8, r2
 8002e64:	4699      	mov	r9, r3
 8002e66:	4623      	mov	r3, r4
 8002e68:	eb18 0303 	adds.w	r3, r8, r3
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	462b      	mov	r3, r5
 8002e70:	eb49 0303 	adc.w	r3, r9, r3
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e82:	4629      	mov	r1, r5
 8002e84:	024b      	lsls	r3, r1, #9
 8002e86:	4621      	mov	r1, r4
 8002e88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	024a      	lsls	r2, r1, #9
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e96:	2200      	movs	r2, #0
 8002e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ea0:	f7fd f9f6 	bl	8000290 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002eac:	e058      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eae:	4b38      	ldr	r3, [pc, #224]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	099b      	lsrs	r3, r3, #6
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4611      	mov	r1, r2
 8002eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ec8:	4642      	mov	r2, r8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	f04f 0000 	mov.w	r0, #0
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	0159      	lsls	r1, r3, #5
 8002ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eda:	0150      	lsls	r0, r2, #5
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f00:	ebb2 040a 	subs.w	r4, r2, sl
 8002f04:	eb63 050b 	sbc.w	r5, r3, fp
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	00eb      	lsls	r3, r5, #3
 8002f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f16:	00e2      	lsls	r2, r4, #3
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	18e3      	adds	r3, r4, r3
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	464b      	mov	r3, r9
 8002f24:	eb45 0303 	adc.w	r3, r5, r3
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f36:	4629      	mov	r1, r5
 8002f38:	028b      	lsls	r3, r1, #10
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f40:	4621      	mov	r1, r4
 8002f42:	028a      	lsls	r2, r1, #10
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	61fa      	str	r2, [r7, #28]
 8002f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f54:	f7fd f99c 	bl	8000290 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f60:	4b0b      	ldr	r3, [pc, #44]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002f70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f7a:	e002      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3750      	adds	r7, #80	@ 0x50
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000038 	.word	0x20000038

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fb8:	f7ff fff0 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0a9b      	lsrs	r3, r3, #10
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	08006ac0 	.word	0x08006ac0

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fe0:	f7ff ffdc 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b05      	ldr	r3, [pc, #20]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	0b5b      	lsrs	r3, r3, #13
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4903      	ldr	r1, [pc, #12]	@ (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	08006ac0 	.word	0x08006ac0

08003004 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	220f      	movs	r2, #15
 8003012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003014:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003046:	4b07      	ldr	r3, [pc, #28]	@ (8003064 <HAL_RCC_GetClockConfig+0x60>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0207 	and.w	r2, r3, #7
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40023800 	.word	0x40023800
 8003064:	40023c00 	.word	0x40023c00

08003068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e041      	b.n	80030fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d106      	bne.n	8003094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7fe fbd2 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3304      	adds	r3, #4
 80030a4:	4619      	mov	r1, r3
 80030a6:	4610      	mov	r0, r2
 80030a8:	f000 fa70 	bl	800358c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d001      	beq.n	8003120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e044      	b.n	80031aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68da      	ldr	r2, [r3, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d018      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0x6c>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800314a:	d013      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0x6c>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a1a      	ldr	r2, [pc, #104]	@ (80031bc <HAL_TIM_Base_Start_IT+0xb4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00e      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0x6c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a19      	ldr	r2, [pc, #100]	@ (80031c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0x6c>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a17      	ldr	r2, [pc, #92]	@ (80031c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_TIM_Base_Start_IT+0x6c>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a16      	ldr	r2, [pc, #88]	@ (80031c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d111      	bne.n	8003198 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b06      	cmp	r3, #6
 8003184:	d010      	beq.n	80031a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f042 0201 	orr.w	r2, r2, #1
 8003194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003196:	e007      	b.n	80031a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	40010000 	.word	0x40010000
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	40014000 	.word	0x40014000

080031cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d020      	beq.n	8003230 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01b      	beq.n	8003230 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0202 	mvn.w	r2, #2
 8003200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f999 	bl	800354e <HAL_TIM_IC_CaptureCallback>
 800321c:	e005      	b.n	800322a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f98b 	bl	800353a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f99c 	bl	8003562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d020      	beq.n	800327c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d01b      	beq.n	800327c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f06f 0204 	mvn.w	r2, #4
 800324c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f973 	bl	800354e <HAL_TIM_IC_CaptureCallback>
 8003268:	e005      	b.n	8003276 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f965 	bl	800353a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f976 	bl	8003562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d020      	beq.n	80032c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d01b      	beq.n	80032c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f06f 0208 	mvn.w	r2, #8
 8003298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2204      	movs	r2, #4
 800329e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f94d 	bl	800354e <HAL_TIM_IC_CaptureCallback>
 80032b4:	e005      	b.n	80032c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f93f 	bl	800353a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f950 	bl	8003562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d020      	beq.n	8003314 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01b      	beq.n	8003314 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0210 	mvn.w	r2, #16
 80032e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2208      	movs	r2, #8
 80032ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f927 	bl	800354e <HAL_TIM_IC_CaptureCallback>
 8003300:	e005      	b.n	800330e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f919 	bl	800353a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f000 f92a 	bl	8003562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00c      	beq.n	8003338 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d007      	beq.n	8003338 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f06f 0201 	mvn.w	r2, #1
 8003330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fd ff8c 	bl	8001250 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00c      	beq.n	800335c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003348:	2b00      	cmp	r3, #0
 800334a:	d007      	beq.n	800335c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fab6 	bl	80038c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f8fb 	bl	8003576 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00c      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d007      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0220 	mvn.w	r2, #32
 800339c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fa88 	bl	80038b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a4:	bf00      	nop
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_TIM_ConfigClockSource+0x1c>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e0b4      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x186>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80033e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003400:	d03e      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0xd4>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003406:	f200 8087 	bhi.w	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800340e:	f000 8086 	beq.w	800351e <HAL_TIM_ConfigClockSource+0x172>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003416:	d87f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003418:	2b70      	cmp	r3, #112	@ 0x70
 800341a:	d01a      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xa6>
 800341c:	2b70      	cmp	r3, #112	@ 0x70
 800341e:	d87b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003420:	2b60      	cmp	r3, #96	@ 0x60
 8003422:	d050      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003424:	2b60      	cmp	r3, #96	@ 0x60
 8003426:	d877      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003428:	2b50      	cmp	r3, #80	@ 0x50
 800342a:	d03c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0xfa>
 800342c:	2b50      	cmp	r3, #80	@ 0x50
 800342e:	d873      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	2b40      	cmp	r3, #64	@ 0x40
 8003432:	d058      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003434:	2b40      	cmp	r3, #64	@ 0x40
 8003436:	d86f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003438:	2b30      	cmp	r3, #48	@ 0x30
 800343a:	d064      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15a>
 800343c:	2b30      	cmp	r3, #48	@ 0x30
 800343e:	d86b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d060      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15a>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d867      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d05c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15a>
 800344c:	2b10      	cmp	r3, #16
 800344e:	d05a      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15a>
 8003450:	e062      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003462:	f000 f999 	bl	8003798 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]
      break;
 800347e:	e04f      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	f000 f982 	bl	8003798 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034a2:	609a      	str	r2, [r3, #8]
      break;
 80034a4:	e03c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b2:	461a      	mov	r2, r3
 80034b4:	f000 f8f6 	bl	80036a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2150      	movs	r1, #80	@ 0x50
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f94f 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 80034c4:	e02c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d2:	461a      	mov	r2, r3
 80034d4:	f000 f915 	bl	8003702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2160      	movs	r1, #96	@ 0x60
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f93f 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 80034e4:	e01c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 f8d6 	bl	80036a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2140      	movs	r1, #64	@ 0x40
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f92f 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 8003504:	e00c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f000 f926 	bl	8003762 <TIM_ITRx_SetConfig>
      break;
 8003516:	e003      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e000      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800351e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a3a      	ldr	r2, [pc, #232]	@ (8003688 <TIM_Base_SetConfig+0xfc>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00f      	beq.n	80035c4 <TIM_Base_SetConfig+0x38>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035aa:	d00b      	beq.n	80035c4 <TIM_Base_SetConfig+0x38>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a37      	ldr	r2, [pc, #220]	@ (800368c <TIM_Base_SetConfig+0x100>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d007      	beq.n	80035c4 <TIM_Base_SetConfig+0x38>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a36      	ldr	r2, [pc, #216]	@ (8003690 <TIM_Base_SetConfig+0x104>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <TIM_Base_SetConfig+0x38>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a35      	ldr	r2, [pc, #212]	@ (8003694 <TIM_Base_SetConfig+0x108>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d108      	bne.n	80035d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003688 <TIM_Base_SetConfig+0xfc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01b      	beq.n	8003616 <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e4:	d017      	beq.n	8003616 <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a28      	ldr	r2, [pc, #160]	@ (800368c <TIM_Base_SetConfig+0x100>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a27      	ldr	r2, [pc, #156]	@ (8003690 <TIM_Base_SetConfig+0x104>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00f      	beq.n	8003616 <TIM_Base_SetConfig+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a26      	ldr	r2, [pc, #152]	@ (8003694 <TIM_Base_SetConfig+0x108>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d00b      	beq.n	8003616 <TIM_Base_SetConfig+0x8a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a25      	ldr	r2, [pc, #148]	@ (8003698 <TIM_Base_SetConfig+0x10c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d007      	beq.n	8003616 <TIM_Base_SetConfig+0x8a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a24      	ldr	r2, [pc, #144]	@ (800369c <TIM_Base_SetConfig+0x110>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_Base_SetConfig+0x8a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a23      	ldr	r2, [pc, #140]	@ (80036a0 <TIM_Base_SetConfig+0x114>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800361c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a0e      	ldr	r2, [pc, #56]	@ (8003688 <TIM_Base_SetConfig+0xfc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d103      	bne.n	800365c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b01      	cmp	r3, #1
 800366c:	d105      	bne.n	800367a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f023 0201 	bic.w	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	611a      	str	r2, [r3, #16]
  }
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40010000 	.word	0x40010000
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40000c00 	.word	0x40000c00
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800

080036a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0201 	bic.w	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f023 030a 	bic.w	r3, r3, #10
 80036e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003702:	b480      	push	{r7}
 8003704:	b087      	sub	sp, #28
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f023 0210 	bic.w	r2, r3, #16
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800372c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	031b      	lsls	r3, r3, #12
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	4313      	orrs	r3, r2
 8003736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800373e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	621a      	str	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr

08003762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
 800376a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003778:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	f043 0307 	orr.w	r3, r3, #7
 8003784:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	021a      	lsls	r2, r3, #8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	609a      	str	r2, [r3, #8]
}
 80037cc:	bf00      	nop
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ec:	2302      	movs	r3, #2
 80037ee:	e050      	b.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a1c      	ldr	r2, [pc, #112]	@ (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d018      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d013      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a18      	ldr	r2, [pc, #96]	@ (80038a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00e      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a16      	ldr	r2, [pc, #88]	@ (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d009      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a15      	ldr	r2, [pc, #84]	@ (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d004      	beq.n	8003866 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a13      	ldr	r2, [pc, #76]	@ (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10c      	bne.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800386c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	4313      	orrs	r3, r2
 8003876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800
 80038ac:	40000c00 	.word	0x40000c00
 80038b0:	40014000 	.word	0x40014000

080038b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e042      	b.n	8003974 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d106      	bne.n	8003908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fd ffba 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	@ 0x24
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800391e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fa09 	bl	8003d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	@ 0x28
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b20      	cmp	r3, #32
 800399a:	d175      	bne.n	8003a88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Transmit+0x2c>
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e06e      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2221      	movs	r2, #33	@ 0x21
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039ba:	f7fe f8f1 	bl	8001ba0 <HAL_GetTick>
 80039be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	88fa      	ldrh	r2, [r7, #6]
 80039c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d4:	d108      	bne.n	80039e8 <HAL_UART_Transmit+0x6c>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d104      	bne.n	80039e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e003      	b.n	80039f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039f0:	e02e      	b.n	8003a50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2200      	movs	r2, #0
 80039fa:	2180      	movs	r1, #128	@ 0x80
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f8df 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e03a      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e007      	b.n	8003a42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1cb      	bne.n	80039f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2140      	movs	r1, #64	@ 0x40
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 f8ab 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e006      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b08a      	sub	sp, #40	@ 0x28
 8003a96:	af02      	add	r7, sp, #8
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	f040 8081 	bne.w	8003bb6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_UART_Receive+0x2e>
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e079      	b.n	8003bb8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2222      	movs	r2, #34	@ 0x22
 8003ace:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad8:	f7fe f862 	bl	8001ba0 <HAL_GetTick>
 8003adc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	88fa      	ldrh	r2, [r7, #6]
 8003ae2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af2:	d108      	bne.n	8003b06 <HAL_UART_Receive+0x74>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e003      	b.n	8003b0e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003b0e:	e047      	b.n	8003ba0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2200      	movs	r2, #0
 8003b18:	2120      	movs	r1, #32
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f850 	bl	8003bc0 <UART_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e042      	b.n	8003bb8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10c      	bne.n	8003b52 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e01f      	b.n	8003b92 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b5a:	d007      	beq.n	8003b6c <HAL_UART_Receive+0xda>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10a      	bne.n	8003b7a <HAL_UART_Receive+0xe8>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d106      	bne.n	8003b7a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e008      	b.n	8003b8c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1b2      	bne.n	8003b10 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e000      	b.n	8003bb8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
  }
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd0:	e03b      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d037      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bda:	f7fd ffe1 	bl	8001ba0 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	6a3a      	ldr	r2, [r7, #32]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d302      	bcc.n	8003bf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e03a      	b.n	8003c6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d023      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b80      	cmp	r3, #128	@ 0x80
 8003c06:	d020      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b40      	cmp	r3, #64	@ 0x40
 8003c0c:	d01d      	beq.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d116      	bne.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f81d 	bl	8003c72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00f      	b.n	8003c6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4013      	ands	r3, r2
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	bf0c      	ite	eq
 8003c5a:	2301      	moveq	r3, #1
 8003c5c:	2300      	movne	r3, #0
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	79fb      	ldrb	r3, [r7, #7]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d0b4      	beq.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b095      	sub	sp, #84	@ 0x54
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ca0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3314      	adds	r3, #20
 8003cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	f023 0301 	bic.w	r3, r3, #1
 8003cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d119      	bne.n	8003d1e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	330c      	adds	r3, #12
 8003cf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f023 0310 	bic.w	r3, r3, #16
 8003d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	330c      	adds	r3, #12
 8003d08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d0a:	61ba      	str	r2, [r7, #24]
 8003d0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6979      	ldr	r1, [r7, #20]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	613b      	str	r3, [r7, #16]
   return(result);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e5      	bne.n	8003cea <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d2c:	bf00      	nop
 8003d2e:	3754      	adds	r7, #84	@ 0x54
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b0c0      	sub	sp, #256	@ 0x100
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	68d9      	ldr	r1, [r3, #12]
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	ea40 0301 	orr.w	r3, r0, r1
 8003d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d90:	f021 010c 	bic.w	r1, r1, #12
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	6999      	ldr	r1, [r3, #24]
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	ea40 0301 	orr.w	r3, r0, r1
 8003dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b8f      	ldr	r3, [pc, #572]	@ (8004004 <UART_SetConfig+0x2cc>)
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d005      	beq.n	8003dd8 <UART_SetConfig+0xa0>
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8d      	ldr	r3, [pc, #564]	@ (8004008 <UART_SetConfig+0x2d0>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d104      	bne.n	8003de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd8:	f7ff f900 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8003ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003de0:	e003      	b.n	8003dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003de2:	f7ff f8e7 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8003de6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df4:	f040 810c 	bne.w	8004010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	462b      	mov	r3, r5
 8003e0e:	1891      	adds	r1, r2, r2
 8003e10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e12:	415b      	adcs	r3, r3
 8003e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	eb12 0801 	adds.w	r8, r2, r1
 8003e20:	4629      	mov	r1, r5
 8003e22:	eb43 0901 	adc.w	r9, r3, r1
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	f04f 0300 	mov.w	r3, #0
 8003e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e3a:	4690      	mov	r8, r2
 8003e3c:	4699      	mov	r9, r3
 8003e3e:	4623      	mov	r3, r4
 8003e40:	eb18 0303 	adds.w	r3, r8, r3
 8003e44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e48:	462b      	mov	r3, r5
 8003e4a:	eb49 0303 	adc.w	r3, r9, r3
 8003e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e66:	460b      	mov	r3, r1
 8003e68:	18db      	adds	r3, r3, r3
 8003e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	eb42 0303 	adc.w	r3, r2, r3
 8003e72:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e7c:	f7fc fa08 	bl	8000290 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4b61      	ldr	r3, [pc, #388]	@ (800400c <UART_SetConfig+0x2d4>)
 8003e86:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	011c      	lsls	r4, r3, #4
 8003e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	1891      	adds	r1, r2, r2
 8003ea6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ea8:	415b      	adcs	r3, r3
 8003eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003eb0:	4641      	mov	r1, r8
 8003eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ed0:	4692      	mov	sl, r2
 8003ed2:	469b      	mov	fp, r3
 8003ed4:	4643      	mov	r3, r8
 8003ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8003eda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003efc:	460b      	mov	r3, r1
 8003efe:	18db      	adds	r3, r3, r3
 8003f00:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f02:	4613      	mov	r3, r2
 8003f04:	eb42 0303 	adc.w	r3, r2, r3
 8003f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f12:	f7fc f9bd 	bl	8000290 <__aeabi_uldivmod>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <UART_SetConfig+0x2d4>)
 8003f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2264      	movs	r2, #100	@ 0x64
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	1acb      	subs	r3, r1, r3
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f32:	4b36      	ldr	r3, [pc, #216]	@ (800400c <UART_SetConfig+0x2d4>)
 8003f34:	fba3 2302 	umull	r2, r3, r3, r2
 8003f38:	095b      	lsrs	r3, r3, #5
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f40:	441c      	add	r4, r3
 8003f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f54:	4642      	mov	r2, r8
 8003f56:	464b      	mov	r3, r9
 8003f58:	1891      	adds	r1, r2, r2
 8003f5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f5c:	415b      	adcs	r3, r3
 8003f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f64:	4641      	mov	r1, r8
 8003f66:	1851      	adds	r1, r2, r1
 8003f68:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	414b      	adcs	r3, r1
 8003f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	00cb      	lsls	r3, r1, #3
 8003f80:	4651      	mov	r1, sl
 8003f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f86:	4651      	mov	r1, sl
 8003f88:	00ca      	lsls	r2, r1, #3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4642      	mov	r2, r8
 8003f92:	189b      	adds	r3, r3, r2
 8003f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f98:	464b      	mov	r3, r9
 8003f9a:	460a      	mov	r2, r1
 8003f9c:	eb42 0303 	adc.w	r3, r2, r3
 8003fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fb8:	460b      	mov	r3, r1
 8003fba:	18db      	adds	r3, r3, r3
 8003fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fce:	f7fc f95f 	bl	8000290 <__aeabi_uldivmod>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800400c <UART_SetConfig+0x2d4>)
 8003fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	2164      	movs	r1, #100	@ 0x64
 8003fe0:	fb01 f303 	mul.w	r3, r1, r3
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	3332      	adds	r3, #50	@ 0x32
 8003fea:	4a08      	ldr	r2, [pc, #32]	@ (800400c <UART_SetConfig+0x2d4>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	f003 0207 	and.w	r2, r3, #7
 8003ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4422      	add	r2, r4
 8003ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004000:	e106      	b.n	8004210 <UART_SetConfig+0x4d8>
 8004002:	bf00      	nop
 8004004:	40011000 	.word	0x40011000
 8004008:	40011400 	.word	0x40011400
 800400c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800401a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800401e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004022:	4642      	mov	r2, r8
 8004024:	464b      	mov	r3, r9
 8004026:	1891      	adds	r1, r2, r2
 8004028:	6239      	str	r1, [r7, #32]
 800402a:	415b      	adcs	r3, r3
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
 800402e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004032:	4641      	mov	r1, r8
 8004034:	1854      	adds	r4, r2, r1
 8004036:	4649      	mov	r1, r9
 8004038:	eb43 0501 	adc.w	r5, r3, r1
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	00eb      	lsls	r3, r5, #3
 8004046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404a:	00e2      	lsls	r2, r4, #3
 800404c:	4614      	mov	r4, r2
 800404e:	461d      	mov	r5, r3
 8004050:	4643      	mov	r3, r8
 8004052:	18e3      	adds	r3, r4, r3
 8004054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004058:	464b      	mov	r3, r9
 800405a:	eb45 0303 	adc.w	r3, r5, r3
 800405e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800406e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800407e:	4629      	mov	r1, r5
 8004080:	008b      	lsls	r3, r1, #2
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004088:	4621      	mov	r1, r4
 800408a:	008a      	lsls	r2, r1, #2
 800408c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004090:	f7fc f8fe 	bl	8000290 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4b60      	ldr	r3, [pc, #384]	@ (800421c <UART_SetConfig+0x4e4>)
 800409a:	fba3 2302 	umull	r2, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	011c      	lsls	r4, r3, #4
 80040a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040b4:	4642      	mov	r2, r8
 80040b6:	464b      	mov	r3, r9
 80040b8:	1891      	adds	r1, r2, r2
 80040ba:	61b9      	str	r1, [r7, #24]
 80040bc:	415b      	adcs	r3, r3
 80040be:	61fb      	str	r3, [r7, #28]
 80040c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040c4:	4641      	mov	r1, r8
 80040c6:	1851      	adds	r1, r2, r1
 80040c8:	6139      	str	r1, [r7, #16]
 80040ca:	4649      	mov	r1, r9
 80040cc:	414b      	adcs	r3, r1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040dc:	4659      	mov	r1, fp
 80040de:	00cb      	lsls	r3, r1, #3
 80040e0:	4651      	mov	r1, sl
 80040e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040e6:	4651      	mov	r1, sl
 80040e8:	00ca      	lsls	r2, r1, #3
 80040ea:	4610      	mov	r0, r2
 80040ec:	4619      	mov	r1, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	4642      	mov	r2, r8
 80040f2:	189b      	adds	r3, r3, r2
 80040f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040f8:	464b      	mov	r3, r9
 80040fa:	460a      	mov	r2, r1
 80040fc:	eb42 0303 	adc.w	r3, r2, r3
 8004100:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800410e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800411c:	4649      	mov	r1, r9
 800411e:	008b      	lsls	r3, r1, #2
 8004120:	4641      	mov	r1, r8
 8004122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004126:	4641      	mov	r1, r8
 8004128:	008a      	lsls	r2, r1, #2
 800412a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800412e:	f7fc f8af 	bl	8000290 <__aeabi_uldivmod>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4611      	mov	r1, r2
 8004138:	4b38      	ldr	r3, [pc, #224]	@ (800421c <UART_SetConfig+0x4e4>)
 800413a:	fba3 2301 	umull	r2, r3, r3, r1
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	2264      	movs	r2, #100	@ 0x64
 8004142:	fb02 f303 	mul.w	r3, r2, r3
 8004146:	1acb      	subs	r3, r1, r3
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	3332      	adds	r3, #50	@ 0x32
 800414c:	4a33      	ldr	r2, [pc, #204]	@ (800421c <UART_SetConfig+0x4e4>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004158:	441c      	add	r4, r3
 800415a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800415e:	2200      	movs	r2, #0
 8004160:	673b      	str	r3, [r7, #112]	@ 0x70
 8004162:	677a      	str	r2, [r7, #116]	@ 0x74
 8004164:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004168:	4642      	mov	r2, r8
 800416a:	464b      	mov	r3, r9
 800416c:	1891      	adds	r1, r2, r2
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	415b      	adcs	r3, r3
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004178:	4641      	mov	r1, r8
 800417a:	1851      	adds	r1, r2, r1
 800417c:	6039      	str	r1, [r7, #0]
 800417e:	4649      	mov	r1, r9
 8004180:	414b      	adcs	r3, r1
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004190:	4659      	mov	r1, fp
 8004192:	00cb      	lsls	r3, r1, #3
 8004194:	4651      	mov	r1, sl
 8004196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800419a:	4651      	mov	r1, sl
 800419c:	00ca      	lsls	r2, r1, #3
 800419e:	4610      	mov	r0, r2
 80041a0:	4619      	mov	r1, r3
 80041a2:	4603      	mov	r3, r0
 80041a4:	4642      	mov	r2, r8
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041aa:	464b      	mov	r3, r9
 80041ac:	460a      	mov	r2, r1
 80041ae:	eb42 0303 	adc.w	r3, r2, r3
 80041b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80041be:	667a      	str	r2, [r7, #100]	@ 0x64
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041cc:	4649      	mov	r1, r9
 80041ce:	008b      	lsls	r3, r1, #2
 80041d0:	4641      	mov	r1, r8
 80041d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041d6:	4641      	mov	r1, r8
 80041d8:	008a      	lsls	r2, r1, #2
 80041da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041de:	f7fc f857 	bl	8000290 <__aeabi_uldivmod>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4b0d      	ldr	r3, [pc, #52]	@ (800421c <UART_SetConfig+0x4e4>)
 80041e8:	fba3 1302 	umull	r1, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	2164      	movs	r1, #100	@ 0x64
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	3332      	adds	r3, #50	@ 0x32
 80041fa:	4a08      	ldr	r2, [pc, #32]	@ (800421c <UART_SetConfig+0x4e4>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	095b      	lsrs	r3, r3, #5
 8004202:	f003 020f 	and.w	r2, r3, #15
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4422      	add	r2, r4
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004216:	46bd      	mov	sp, r7
 8004218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421c:	51eb851f 	.word	0x51eb851f

08004220 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800422e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004232:	2b84      	cmp	r3, #132	@ 0x84
 8004234:	d005      	beq.n	8004242 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004236:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	3303      	adds	r3, #3
 8004240:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004242:	68fb      	ldr	r3, [r7, #12]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004254:	f000 fafc 	bl	8004850 <vTaskStartScheduler>
  
  return osOK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	bd80      	pop	{r7, pc}

0800425e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800425e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004260:	b089      	sub	sp, #36	@ 0x24
 8004262:	af04      	add	r7, sp, #16
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <osThreadCreate+0x54>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01c      	beq.n	80042b2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685c      	ldr	r4, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691e      	ldr	r6, [r3, #16]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff ffc8 	bl	8004220 <makeFreeRtosPriority>
 8004290:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800429a:	9202      	str	r2, [sp, #8]
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	9100      	str	r1, [sp, #0]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4632      	mov	r2, r6
 80042a4:	4629      	mov	r1, r5
 80042a6:	4620      	mov	r0, r4
 80042a8:	f000 f8ed 	bl	8004486 <xTaskCreateStatic>
 80042ac:	4603      	mov	r3, r0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e01c      	b.n	80042ec <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685c      	ldr	r4, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042be:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff ffaa 	bl	8004220 <makeFreeRtosPriority>
 80042cc:	4602      	mov	r2, r0
 80042ce:	f107 030c 	add.w	r3, r7, #12
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	9200      	str	r2, [sp, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	4632      	mov	r2, r6
 80042da:	4629      	mov	r1, r5
 80042dc:	4620      	mov	r0, r4
 80042de:	f000 f932 	bl	8004546 <xTaskCreate>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d001      	beq.n	80042ec <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e000      	b.n	80042ee <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042ec:	68fb      	ldr	r3, [r7, #12]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042f6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <osDelay+0x16>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	e000      	b.n	800430e <osDelay+0x18>
 800430c:	2301      	movs	r3, #1
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fa68 	bl	80047e4 <vTaskDelay>
  
  return osOK;
 8004314:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004316:	4618      	mov	r0, r3
 8004318:	3710      	adds	r7, #16
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f103 0208 	add.w	r2, r3, #8
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f04f 32ff 	mov.w	r2, #4294967295
 8004336:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f103 0208 	add.w	r2, r3, #8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f103 0208 	add.w	r2, r3, #8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d6:	d103      	bne.n	80043e0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e00c      	b.n	80043fa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3308      	adds	r3, #8
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e002      	b.n	80043ee <vListInsert+0x2e>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d2f6      	bcs.n	80043e8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	601a      	str	r2, [r3, #0]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6892      	ldr	r2, [r2, #8]
 8004448:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6852      	ldr	r2, [r2, #4]
 8004452:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d103      	bne.n	8004466 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	1e5a      	subs	r2, r3, #1
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004486:	b580      	push	{r7, lr}
 8004488:	b08e      	sub	sp, #56	@ 0x38
 800448a:	af04      	add	r7, sp, #16
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800449a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449e:	f383 8811 	msr	BASEPRI, r3
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	e7fd      	b.n	80044ae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10b      	bne.n	80044d0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	61fb      	str	r3, [r7, #28]
}
 80044ca:	bf00      	nop
 80044cc:	bf00      	nop
 80044ce:	e7fd      	b.n	80044cc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044d0:	23a0      	movs	r3, #160	@ 0xa0
 80044d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80044d8:	d00b      	beq.n	80044f2 <xTaskCreateStatic+0x6c>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	61bb      	str	r3, [r7, #24]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d01e      	beq.n	8004538 <xTaskCreateStatic+0xb2>
 80044fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01b      	beq.n	8004538 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004502:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004508:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	2202      	movs	r2, #2
 800450e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004512:	2300      	movs	r3, #0
 8004514:	9303      	str	r3, [sp, #12]
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	9302      	str	r3, [sp, #8]
 800451a:	f107 0314 	add.w	r3, r7, #20
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f850 	bl	80045d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004530:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004532:	f000 f8ed 	bl	8004710 <prvAddNewTaskToReadyList>
 8004536:	e001      	b.n	800453c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800453c:	697b      	ldr	r3, [r7, #20]
	}
 800453e:	4618      	mov	r0, r3
 8004540:	3728      	adds	r7, #40	@ 0x28
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004546:	b580      	push	{r7, lr}
 8004548:	b08c      	sub	sp, #48	@ 0x30
 800454a:	af04      	add	r7, sp, #16
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fefc 	bl	8005358 <pvPortMalloc>
 8004560:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00e      	beq.n	8004586 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004568:	20a0      	movs	r0, #160	@ 0xa0
 800456a:	f000 fef5 	bl	8005358 <pvPortMalloc>
 800456e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30
 800457c:	e005      	b.n	800458a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f000 ffb8 	bl	80054f4 <vPortFree>
 8004584:	e001      	b.n	800458a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d017      	beq.n	80045c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004598:	88fa      	ldrh	r2, [r7, #6]
 800459a:	2300      	movs	r3, #0
 800459c:	9303      	str	r3, [sp, #12]
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	9302      	str	r3, [sp, #8]
 80045a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68b9      	ldr	r1, [r7, #8]
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f80e 	bl	80045d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045b4:	69f8      	ldr	r0, [r7, #28]
 80045b6:	f000 f8ab 	bl	8004710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045ba:	2301      	movs	r3, #1
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	e002      	b.n	80045c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80045c0:	f04f 33ff 	mov.w	r3, #4294967295
 80045c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80045c6:	69bb      	ldr	r3, [r7, #24]
	}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b088      	sub	sp, #32
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045e8:	3b01      	subs	r3, #1
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	f023 0307 	bic.w	r3, r3, #7
 80045f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00b      	beq.n	800461a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	617b      	str	r3, [r7, #20]
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	e7fd      	b.n	8004616 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01f      	beq.n	8004660 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	e012      	b.n	800464c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	7819      	ldrb	r1, [r3, #0]
 800462e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	4413      	add	r3, r2
 8004634:	3334      	adds	r3, #52	@ 0x34
 8004636:	460a      	mov	r2, r1
 8004638:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	4413      	add	r3, r2
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3301      	adds	r3, #1
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b0f      	cmp	r3, #15
 8004650:	d9e9      	bls.n	8004626 <prvInitialiseNewTask+0x56>
 8004652:	e000      	b.n	8004656 <prvInitialiseNewTask+0x86>
			{
				break;
 8004654:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800465e:	e003      	b.n	8004668 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466a:	2b06      	cmp	r3, #6
 800466c:	d901      	bls.n	8004672 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800466e:	2306      	movs	r3, #6
 8004670:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004676:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800467c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	2200      	movs	r2, #0
 8004682:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	3304      	adds	r3, #4
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fe68 	bl	800435e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	3318      	adds	r3, #24
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fe63 	bl	800435e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800469c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	f1c3 0207 	rsb	r2, r3, #7
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80046ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b0:	2200      	movs	r2, #0
 80046b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	334c      	adds	r3, #76	@ 0x4c
 80046c2:	224c      	movs	r2, #76	@ 0x4c
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 fb54 	bl	8005d74 <memset>
 80046cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004704 <prvInitialiseNewTask+0x134>)
 80046d0:	651a      	str	r2, [r3, #80]	@ 0x50
 80046d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004708 <prvInitialiseNewTask+0x138>)
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	4a0c      	ldr	r2, [pc, #48]	@ (800470c <prvInitialiseNewTask+0x13c>)
 80046dc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	68f9      	ldr	r1, [r7, #12]
 80046e2:	69b8      	ldr	r0, [r7, #24]
 80046e4:	f000 fc2a 	bl	8004f3c <pxPortInitialiseStack>
 80046e8:	4602      	mov	r2, r0
 80046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d002      	beq.n	80046fa <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046fa:	bf00      	nop
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20004224 	.word	0x20004224
 8004708:	2000428c 	.word	0x2000428c
 800470c:	200042f4 	.word	0x200042f4

08004710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004718:	f000 fd3e 	bl	8005198 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800471c:	4b2a      	ldr	r3, [pc, #168]	@ (80047c8 <prvAddNewTaskToReadyList+0xb8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	4a29      	ldr	r2, [pc, #164]	@ (80047c8 <prvAddNewTaskToReadyList+0xb8>)
 8004724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004726:	4b29      	ldr	r3, [pc, #164]	@ (80047cc <prvAddNewTaskToReadyList+0xbc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800472e:	4a27      	ldr	r2, [pc, #156]	@ (80047cc <prvAddNewTaskToReadyList+0xbc>)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004734:	4b24      	ldr	r3, [pc, #144]	@ (80047c8 <prvAddNewTaskToReadyList+0xb8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d110      	bne.n	800475e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800473c:	f000 fad4 	bl	8004ce8 <prvInitialiseTaskLists>
 8004740:	e00d      	b.n	800475e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004742:	4b23      	ldr	r3, [pc, #140]	@ (80047d0 <prvAddNewTaskToReadyList+0xc0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800474a:	4b20      	ldr	r3, [pc, #128]	@ (80047cc <prvAddNewTaskToReadyList+0xbc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	429a      	cmp	r2, r3
 8004756:	d802      	bhi.n	800475e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004758:	4a1c      	ldr	r2, [pc, #112]	@ (80047cc <prvAddNewTaskToReadyList+0xbc>)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800475e:	4b1d      	ldr	r3, [pc, #116]	@ (80047d4 <prvAddNewTaskToReadyList+0xc4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a1b      	ldr	r2, [pc, #108]	@ (80047d4 <prvAddNewTaskToReadyList+0xc4>)
 8004766:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	2201      	movs	r2, #1
 800476e:	409a      	lsls	r2, r3
 8004770:	4b19      	ldr	r3, [pc, #100]	@ (80047d8 <prvAddNewTaskToReadyList+0xc8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4313      	orrs	r3, r2
 8004776:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <prvAddNewTaskToReadyList+0xc8>)
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4a15      	ldr	r2, [pc, #84]	@ (80047dc <prvAddNewTaskToReadyList+0xcc>)
 8004788:	441a      	add	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f7ff fdf1 	bl	8004378 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004796:	f000 fd31 	bl	80051fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800479a:	4b0d      	ldr	r3, [pc, #52]	@ (80047d0 <prvAddNewTaskToReadyList+0xc0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00e      	beq.n	80047c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047a2:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <prvAddNewTaskToReadyList+0xbc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d207      	bcs.n	80047c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <prvAddNewTaskToReadyList+0xd0>)
 80047b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047c0:	bf00      	nop
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	200005d0 	.word	0x200005d0
 80047cc:	200004d0 	.word	0x200004d0
 80047d0:	200005dc 	.word	0x200005dc
 80047d4:	200005ec 	.word	0x200005ec
 80047d8:	200005d8 	.word	0x200005d8
 80047dc:	200004d4 	.word	0x200004d4
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d018      	beq.n	8004828 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047f6:	4b14      	ldr	r3, [pc, #80]	@ (8004848 <vTaskDelay+0x64>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <vTaskDelay+0x32>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60bb      	str	r3, [r7, #8]
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	e7fd      	b.n	8004812 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004816:	f000 f885 	bl	8004924 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800481a:	2100      	movs	r1, #0
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fb27 	bl	8004e70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004822:	f000 f88d 	bl	8004940 <xTaskResumeAll>
 8004826:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d107      	bne.n	800483e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800482e:	4b07      	ldr	r3, [pc, #28]	@ (800484c <vTaskDelay+0x68>)
 8004830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004834:	601a      	str	r2, [r3, #0]
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800483e:	bf00      	nop
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	200005f8 	.word	0x200005f8
 800484c:	e000ed04 	.word	0xe000ed04

08004850 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	@ 0x28
 8004854:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800485e:	463a      	mov	r2, r7
 8004860:	1d39      	adds	r1, r7, #4
 8004862:	f107 0308 	add.w	r3, r7, #8
 8004866:	4618      	mov	r0, r3
 8004868:	f7fc fab6 	bl	8000dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	9202      	str	r2, [sp, #8]
 8004874:	9301      	str	r3, [sp, #4]
 8004876:	2300      	movs	r3, #0
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	2300      	movs	r3, #0
 800487c:	460a      	mov	r2, r1
 800487e:	4921      	ldr	r1, [pc, #132]	@ (8004904 <vTaskStartScheduler+0xb4>)
 8004880:	4821      	ldr	r0, [pc, #132]	@ (8004908 <vTaskStartScheduler+0xb8>)
 8004882:	f7ff fe00 	bl	8004486 <xTaskCreateStatic>
 8004886:	4603      	mov	r3, r0
 8004888:	4a20      	ldr	r2, [pc, #128]	@ (800490c <vTaskStartScheduler+0xbc>)
 800488a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800488c:	4b1f      	ldr	r3, [pc, #124]	@ (800490c <vTaskStartScheduler+0xbc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d002      	beq.n	800489a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004894:	2301      	movs	r3, #1
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e001      	b.n	800489e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d11b      	bne.n	80048dc <vTaskStartScheduler+0x8c>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	613b      	str	r3, [r7, #16]
}
 80048b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048b8:	4b15      	ldr	r3, [pc, #84]	@ (8004910 <vTaskStartScheduler+0xc0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	334c      	adds	r3, #76	@ 0x4c
 80048be:	4a15      	ldr	r2, [pc, #84]	@ (8004914 <vTaskStartScheduler+0xc4>)
 80048c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048c2:	4b15      	ldr	r3, [pc, #84]	@ (8004918 <vTaskStartScheduler+0xc8>)
 80048c4:	f04f 32ff 	mov.w	r2, #4294967295
 80048c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048ca:	4b14      	ldr	r3, [pc, #80]	@ (800491c <vTaskStartScheduler+0xcc>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048d0:	4b13      	ldr	r3, [pc, #76]	@ (8004920 <vTaskStartScheduler+0xd0>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048d6:	f000 fbbb 	bl	8005050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048da:	e00f      	b.n	80048fc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e2:	d10b      	bne.n	80048fc <vTaskStartScheduler+0xac>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	60fb      	str	r3, [r7, #12]
}
 80048f6:	bf00      	nop
 80048f8:	bf00      	nop
 80048fa:	e7fd      	b.n	80048f8 <vTaskStartScheduler+0xa8>
}
 80048fc:	bf00      	nop
 80048fe:	3718      	adds	r7, #24
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	08006aa8 	.word	0x08006aa8
 8004908:	08004cb9 	.word	0x08004cb9
 800490c:	200005f4 	.word	0x200005f4
 8004910:	200004d0 	.word	0x200004d0
 8004914:	20000054 	.word	0x20000054
 8004918:	200005f0 	.word	0x200005f0
 800491c:	200005dc 	.word	0x200005dc
 8004920:	200005d4 	.word	0x200005d4

08004924 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004928:	4b04      	ldr	r3, [pc, #16]	@ (800493c <vTaskSuspendAll+0x18>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	4a03      	ldr	r2, [pc, #12]	@ (800493c <vTaskSuspendAll+0x18>)
 8004930:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004932:	bf00      	nop
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	200005f8 	.word	0x200005f8

08004940 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800494e:	4b42      	ldr	r3, [pc, #264]	@ (8004a58 <xTaskResumeAll+0x118>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10b      	bne.n	800496e <xTaskResumeAll+0x2e>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	603b      	str	r3, [r7, #0]
}
 8004968:	bf00      	nop
 800496a:	bf00      	nop
 800496c:	e7fd      	b.n	800496a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800496e:	f000 fc13 	bl	8005198 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004972:	4b39      	ldr	r3, [pc, #228]	@ (8004a58 <xTaskResumeAll+0x118>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3b01      	subs	r3, #1
 8004978:	4a37      	ldr	r2, [pc, #220]	@ (8004a58 <xTaskResumeAll+0x118>)
 800497a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497c:	4b36      	ldr	r3, [pc, #216]	@ (8004a58 <xTaskResumeAll+0x118>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d161      	bne.n	8004a48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004984:	4b35      	ldr	r3, [pc, #212]	@ (8004a5c <xTaskResumeAll+0x11c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d05d      	beq.n	8004a48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800498c:	e02e      	b.n	80049ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800498e:	4b34      	ldr	r3, [pc, #208]	@ (8004a60 <xTaskResumeAll+0x120>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3318      	adds	r3, #24
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff fd49 	bl	8004432 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7ff fd44 	bl	8004432 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	2201      	movs	r2, #1
 80049b0:	409a      	lsls	r2, r3
 80049b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004a64 <xTaskResumeAll+0x124>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a64 <xTaskResumeAll+0x124>)
 80049ba:	6013      	str	r3, [r2, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4a27      	ldr	r2, [pc, #156]	@ (8004a68 <xTaskResumeAll+0x128>)
 80049ca:	441a      	add	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7ff fcd0 	bl	8004378 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049dc:	4b23      	ldr	r3, [pc, #140]	@ (8004a6c <xTaskResumeAll+0x12c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d302      	bcc.n	80049ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80049e6:	4b22      	ldr	r3, [pc, #136]	@ (8004a70 <xTaskResumeAll+0x130>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004a60 <xTaskResumeAll+0x120>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1cc      	bne.n	800498e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049fa:	f000 fa19 	bl	8004e30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80049fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004a74 <xTaskResumeAll+0x134>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d010      	beq.n	8004a2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a0a:	f000 f837 	bl	8004a7c <xTaskIncrementTick>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a14:	4b16      	ldr	r3, [pc, #88]	@ (8004a70 <xTaskResumeAll+0x130>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f1      	bne.n	8004a0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a26:	4b13      	ldr	r3, [pc, #76]	@ (8004a74 <xTaskResumeAll+0x134>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a2c:	4b10      	ldr	r3, [pc, #64]	@ (8004a70 <xTaskResumeAll+0x130>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a38:	4b0f      	ldr	r3, [pc, #60]	@ (8004a78 <xTaskResumeAll+0x138>)
 8004a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a48:	f000 fbd8 	bl	80051fc <vPortExitCritical>

	return xAlreadyYielded;
 8004a4c:	68bb      	ldr	r3, [r7, #8]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	200005f8 	.word	0x200005f8
 8004a5c:	200005d0 	.word	0x200005d0
 8004a60:	20000590 	.word	0x20000590
 8004a64:	200005d8 	.word	0x200005d8
 8004a68:	200004d4 	.word	0x200004d4
 8004a6c:	200004d0 	.word	0x200004d0
 8004a70:	200005e4 	.word	0x200005e4
 8004a74:	200005e0 	.word	0x200005e0
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a86:	4b4f      	ldr	r3, [pc, #316]	@ (8004bc4 <xTaskIncrementTick+0x148>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 808f 	bne.w	8004bae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a90:	4b4d      	ldr	r3, [pc, #308]	@ (8004bc8 <xTaskIncrementTick+0x14c>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3301      	adds	r3, #1
 8004a96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a98:	4a4b      	ldr	r2, [pc, #300]	@ (8004bc8 <xTaskIncrementTick+0x14c>)
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d121      	bne.n	8004ae8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004aa4:	4b49      	ldr	r3, [pc, #292]	@ (8004bcc <xTaskIncrementTick+0x150>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00b      	beq.n	8004ac6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	603b      	str	r3, [r7, #0]
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	e7fd      	b.n	8004ac2 <xTaskIncrementTick+0x46>
 8004ac6:	4b41      	ldr	r3, [pc, #260]	@ (8004bcc <xTaskIncrementTick+0x150>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	4b40      	ldr	r3, [pc, #256]	@ (8004bd0 <xTaskIncrementTick+0x154>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a3e      	ldr	r2, [pc, #248]	@ (8004bcc <xTaskIncrementTick+0x150>)
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	4a3e      	ldr	r2, [pc, #248]	@ (8004bd0 <xTaskIncrementTick+0x154>)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd4 <xTaskIncrementTick+0x158>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd4 <xTaskIncrementTick+0x158>)
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	f000 f9a4 	bl	8004e30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd8 <xTaskIncrementTick+0x15c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d348      	bcc.n	8004b84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af2:	4b36      	ldr	r3, [pc, #216]	@ (8004bcc <xTaskIncrementTick+0x150>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004afc:	4b36      	ldr	r3, [pc, #216]	@ (8004bd8 <xTaskIncrementTick+0x15c>)
 8004afe:	f04f 32ff 	mov.w	r2, #4294967295
 8004b02:	601a      	str	r2, [r3, #0]
					break;
 8004b04:	e03e      	b.n	8004b84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b06:	4b31      	ldr	r3, [pc, #196]	@ (8004bcc <xTaskIncrementTick+0x150>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d203      	bcs.n	8004b26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8004bd8 <xTaskIncrementTick+0x15c>)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b24:	e02e      	b.n	8004b84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fc81 	bl	8004432 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d004      	beq.n	8004b42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	3318      	adds	r3, #24
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7ff fc78 	bl	8004432 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b46:	2201      	movs	r2, #1
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	4b24      	ldr	r3, [pc, #144]	@ (8004bdc <xTaskIncrementTick+0x160>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	4a22      	ldr	r2, [pc, #136]	@ (8004bdc <xTaskIncrementTick+0x160>)
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4a1f      	ldr	r2, [pc, #124]	@ (8004be0 <xTaskIncrementTick+0x164>)
 8004b62:	441a      	add	r2, r3
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f7ff fc04 	bl	8004378 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b74:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <xTaskIncrementTick+0x168>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d3b9      	bcc.n	8004af2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b82:	e7b6      	b.n	8004af2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b84:	4b17      	ldr	r3, [pc, #92]	@ (8004be4 <xTaskIncrementTick+0x168>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8a:	4915      	ldr	r1, [pc, #84]	@ (8004be0 <xTaskIncrementTick+0x164>)
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d901      	bls.n	8004ba0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ba0:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <xTaskIncrementTick+0x16c>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e004      	b.n	8004bb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bae:	4b0f      	ldr	r3, [pc, #60]	@ (8004bec <xTaskIncrementTick+0x170>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8004bec <xTaskIncrementTick+0x170>)
 8004bb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bb8:	697b      	ldr	r3, [r7, #20]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200005f8 	.word	0x200005f8
 8004bc8:	200005d4 	.word	0x200005d4
 8004bcc:	20000588 	.word	0x20000588
 8004bd0:	2000058c 	.word	0x2000058c
 8004bd4:	200005e8 	.word	0x200005e8
 8004bd8:	200005f0 	.word	0x200005f0
 8004bdc:	200005d8 	.word	0x200005d8
 8004be0:	200004d4 	.word	0x200004d4
 8004be4:	200004d0 	.word	0x200004d0
 8004be8:	200005e4 	.word	0x200005e4
 8004bec:	200005e0 	.word	0x200005e0

08004bf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca0 <vTaskSwitchContext+0xb0>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bfe:	4b29      	ldr	r3, [pc, #164]	@ (8004ca4 <vTaskSwitchContext+0xb4>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c04:	e045      	b.n	8004c92 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004c06:	4b27      	ldr	r3, [pc, #156]	@ (8004ca4 <vTaskSwitchContext+0xb4>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0c:	4b26      	ldr	r3, [pc, #152]	@ (8004ca8 <vTaskSwitchContext+0xb8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	fab3 f383 	clz	r3, r3
 8004c18:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c1a:	7afb      	ldrb	r3, [r7, #11]
 8004c1c:	f1c3 031f 	rsb	r3, r3, #31
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	4922      	ldr	r1, [pc, #136]	@ (8004cac <vTaskSwitchContext+0xbc>)
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4613      	mov	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	607b      	str	r3, [r7, #4]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <vTaskSwitchContext+0x5a>
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4a14      	ldr	r2, [pc, #80]	@ (8004cac <vTaskSwitchContext+0xbc>)
 8004c5a:	4413      	add	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3308      	adds	r3, #8
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d104      	bne.n	8004c7e <vTaskSwitchContext+0x8e>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	605a      	str	r2, [r3, #4]
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb0 <vTaskSwitchContext+0xc0>)
 8004c86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c88:	4b09      	ldr	r3, [pc, #36]	@ (8004cb0 <vTaskSwitchContext+0xc0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	334c      	adds	r3, #76	@ 0x4c
 8004c8e:	4a09      	ldr	r2, [pc, #36]	@ (8004cb4 <vTaskSwitchContext+0xc4>)
 8004c90:	6013      	str	r3, [r2, #0]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	200005f8 	.word	0x200005f8
 8004ca4:	200005e4 	.word	0x200005e4
 8004ca8:	200005d8 	.word	0x200005d8
 8004cac:	200004d4 	.word	0x200004d4
 8004cb0:	200004d0 	.word	0x200004d0
 8004cb4:	20000054 	.word	0x20000054

08004cb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cc0:	f000 f852 	bl	8004d68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cc4:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <prvIdleTask+0x28>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d9f9      	bls.n	8004cc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004ccc:	4b05      	ldr	r3, [pc, #20]	@ (8004ce4 <prvIdleTask+0x2c>)
 8004cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004cdc:	e7f0      	b.n	8004cc0 <prvIdleTask+0x8>
 8004cde:	bf00      	nop
 8004ce0:	200004d4 	.word	0x200004d4
 8004ce4:	e000ed04 	.word	0xe000ed04

08004ce8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cee:	2300      	movs	r3, #0
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	e00c      	b.n	8004d0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4a12      	ldr	r2, [pc, #72]	@ (8004d48 <prvInitialiseTaskLists+0x60>)
 8004d00:	4413      	add	r3, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff fb0b 	bl	800431e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	607b      	str	r3, [r7, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2b06      	cmp	r3, #6
 8004d12:	d9ef      	bls.n	8004cf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d14:	480d      	ldr	r0, [pc, #52]	@ (8004d4c <prvInitialiseTaskLists+0x64>)
 8004d16:	f7ff fb02 	bl	800431e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d1a:	480d      	ldr	r0, [pc, #52]	@ (8004d50 <prvInitialiseTaskLists+0x68>)
 8004d1c:	f7ff faff 	bl	800431e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d20:	480c      	ldr	r0, [pc, #48]	@ (8004d54 <prvInitialiseTaskLists+0x6c>)
 8004d22:	f7ff fafc 	bl	800431e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d26:	480c      	ldr	r0, [pc, #48]	@ (8004d58 <prvInitialiseTaskLists+0x70>)
 8004d28:	f7ff faf9 	bl	800431e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d2c:	480b      	ldr	r0, [pc, #44]	@ (8004d5c <prvInitialiseTaskLists+0x74>)
 8004d2e:	f7ff faf6 	bl	800431e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d32:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <prvInitialiseTaskLists+0x78>)
 8004d34:	4a05      	ldr	r2, [pc, #20]	@ (8004d4c <prvInitialiseTaskLists+0x64>)
 8004d36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d38:	4b0a      	ldr	r3, [pc, #40]	@ (8004d64 <prvInitialiseTaskLists+0x7c>)
 8004d3a:	4a05      	ldr	r2, [pc, #20]	@ (8004d50 <prvInitialiseTaskLists+0x68>)
 8004d3c:	601a      	str	r2, [r3, #0]
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200004d4 	.word	0x200004d4
 8004d4c:	20000560 	.word	0x20000560
 8004d50:	20000574 	.word	0x20000574
 8004d54:	20000590 	.word	0x20000590
 8004d58:	200005a4 	.word	0x200005a4
 8004d5c:	200005bc 	.word	0x200005bc
 8004d60:	20000588 	.word	0x20000588
 8004d64:	2000058c 	.word	0x2000058c

08004d68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d6e:	e019      	b.n	8004da4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d70:	f000 fa12 	bl	8005198 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d74:	4b10      	ldr	r3, [pc, #64]	@ (8004db8 <prvCheckTasksWaitingTermination+0x50>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	3304      	adds	r3, #4
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff fb56 	bl	8004432 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d86:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <prvCheckTasksWaitingTermination+0x54>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004dbc <prvCheckTasksWaitingTermination+0x54>)
 8004d8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d90:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <prvCheckTasksWaitingTermination+0x58>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	4a0a      	ldr	r2, [pc, #40]	@ (8004dc0 <prvCheckTasksWaitingTermination+0x58>)
 8004d98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d9a:	f000 fa2f 	bl	80051fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f810 	bl	8004dc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004da4:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <prvCheckTasksWaitingTermination+0x58>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e1      	bne.n	8004d70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	200005a4 	.word	0x200005a4
 8004dbc:	200005d0 	.word	0x200005d0
 8004dc0:	200005b8 	.word	0x200005b8

08004dc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	334c      	adds	r3, #76	@ 0x4c
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 ffe7 	bl	8005da4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d108      	bne.n	8004df2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 fb85 	bl	80054f4 <vPortFree>
				vPortFree( pxTCB );
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 fb82 	bl	80054f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004df0:	e019      	b.n	8004e26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d103      	bne.n	8004e04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 fb79 	bl	80054f4 <vPortFree>
	}
 8004e02:	e010      	b.n	8004e26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d00b      	beq.n	8004e26 <prvDeleteTCB+0x62>
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	60fb      	str	r3, [r7, #12]
}
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <prvDeleteTCB+0x5e>
	}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e36:	4b0c      	ldr	r3, [pc, #48]	@ (8004e68 <prvResetNextTaskUnblockTime+0x38>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <prvResetNextTaskUnblockTime+0x3c>)
 8004e42:	f04f 32ff 	mov.w	r2, #4294967295
 8004e46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e48:	e008      	b.n	8004e5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e4a:	4b07      	ldr	r3, [pc, #28]	@ (8004e68 <prvResetNextTaskUnblockTime+0x38>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4a04      	ldr	r2, [pc, #16]	@ (8004e6c <prvResetNextTaskUnblockTime+0x3c>)
 8004e5a:	6013      	str	r3, [r2, #0]
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	20000588 	.word	0x20000588
 8004e6c:	200005f0 	.word	0x200005f0

08004e70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e7a:	4b29      	ldr	r3, [pc, #164]	@ (8004f20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e80:	4b28      	ldr	r3, [pc, #160]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fad3 	bl	8004432 <uxListRemove>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e92:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	2201      	movs	r2, #1
 8004e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	4b21      	ldr	r3, [pc, #132]	@ (8004f28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	4a20      	ldr	r2, [pc, #128]	@ (8004f28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ea8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d10a      	bne.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x58>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d007      	beq.n	8004ec8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	481a      	ldr	r0, [pc, #104]	@ (8004f2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ec2:	f7ff fa59 	bl	8004378 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ec6:	e026      	b.n	8004f16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4413      	add	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ed0:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d209      	bcs.n	8004ef4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ee0:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f7ff fa67 	bl	80043c0 <vListInsert>
}
 8004ef2:	e010      	b.n	8004f16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f7ff fa5d 	bl	80043c0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f06:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d202      	bcs.n	8004f16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f10:	4a09      	ldr	r2, [pc, #36]	@ (8004f38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6013      	str	r3, [r2, #0]
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200005d4 	.word	0x200005d4
 8004f24:	200004d0 	.word	0x200004d0
 8004f28:	200005d8 	.word	0x200005d8
 8004f2c:	200005bc 	.word	0x200005bc
 8004f30:	2000058c 	.word	0x2000058c
 8004f34:	20000588 	.word	0x20000588
 8004f38:	200005f0 	.word	0x200005f0

08004f3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3b04      	subs	r3, #4
 8004f4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3b04      	subs	r3, #4
 8004f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	f023 0201 	bic.w	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa0 <pxPortInitialiseStack+0x64>)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	3b14      	subs	r3, #20
 8004f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f06f 0202 	mvn.w	r2, #2
 8004f8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	3b20      	subs	r3, #32
 8004f90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f92:	68fb      	ldr	r3, [r7, #12]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3714      	adds	r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	08004fa5 	.word	0x08004fa5

08004fa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fae:	4b13      	ldr	r3, [pc, #76]	@ (8004ffc <prvTaskExitError+0x58>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb6:	d00b      	beq.n	8004fd0 <prvTaskExitError+0x2c>
	__asm volatile
 8004fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	60fb      	str	r3, [r7, #12]
}
 8004fca:	bf00      	nop
 8004fcc:	bf00      	nop
 8004fce:	e7fd      	b.n	8004fcc <prvTaskExitError+0x28>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	60bb      	str	r3, [r7, #8]
}
 8004fe2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fe4:	bf00      	nop
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0fc      	beq.n	8004fe6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	20000044 	.word	0x20000044

08005000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005000:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <pxCurrentTCBConst2>)
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	6808      	ldr	r0, [r1, #0]
 8005006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500a:	f380 8809 	msr	PSP, r0
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8811 	msr	BASEPRI, r0
 800501a:	4770      	bx	lr
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst2>:
 8005020:	200004d0 	.word	0x200004d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005028:	4808      	ldr	r0, [pc, #32]	@ (800504c <prvPortStartFirstTask+0x24>)
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f380 8808 	msr	MSP, r0
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8814 	msr	CONTROL, r0
 800503a:	b662      	cpsie	i
 800503c:	b661      	cpsie	f
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	df00      	svc	0
 8005048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800504a:	bf00      	nop
 800504c:	e000ed08 	.word	0xe000ed08

08005050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005056:	4b47      	ldr	r3, [pc, #284]	@ (8005174 <xPortStartScheduler+0x124>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a47      	ldr	r2, [pc, #284]	@ (8005178 <xPortStartScheduler+0x128>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d10b      	bne.n	8005078 <xPortStartScheduler+0x28>
	__asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
}
 8005072:	bf00      	nop
 8005074:	bf00      	nop
 8005076:	e7fd      	b.n	8005074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005078:	4b3e      	ldr	r3, [pc, #248]	@ (8005174 <xPortStartScheduler+0x124>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a3f      	ldr	r2, [pc, #252]	@ (800517c <xPortStartScheduler+0x12c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d10b      	bne.n	800509a <xPortStartScheduler+0x4a>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	60fb      	str	r3, [r7, #12]
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	e7fd      	b.n	8005096 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800509a:	4b39      	ldr	r3, [pc, #228]	@ (8005180 <xPortStartScheduler+0x130>)
 800509c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	22ff      	movs	r2, #255	@ 0xff
 80050aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050b4:	78fb      	ldrb	r3, [r7, #3]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	4b31      	ldr	r3, [pc, #196]	@ (8005184 <xPortStartScheduler+0x134>)
 80050c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050c2:	4b31      	ldr	r3, [pc, #196]	@ (8005188 <xPortStartScheduler+0x138>)
 80050c4:	2207      	movs	r2, #7
 80050c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050c8:	e009      	b.n	80050de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80050ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005188 <xPortStartScheduler+0x138>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005188 <xPortStartScheduler+0x138>)
 80050d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e6:	2b80      	cmp	r3, #128	@ 0x80
 80050e8:	d0ef      	beq.n	80050ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050ea:	4b27      	ldr	r3, [pc, #156]	@ (8005188 <xPortStartScheduler+0x138>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f1c3 0307 	rsb	r3, r3, #7
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d00b      	beq.n	800510e <xPortStartScheduler+0xbe>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60bb      	str	r3, [r7, #8]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800510e:	4b1e      	ldr	r3, [pc, #120]	@ (8005188 <xPortStartScheduler+0x138>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	4a1c      	ldr	r2, [pc, #112]	@ (8005188 <xPortStartScheduler+0x138>)
 8005116:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005118:	4b1b      	ldr	r3, [pc, #108]	@ (8005188 <xPortStartScheduler+0x138>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005120:	4a19      	ldr	r2, [pc, #100]	@ (8005188 <xPortStartScheduler+0x138>)
 8005122:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800512c:	4b17      	ldr	r3, [pc, #92]	@ (800518c <xPortStartScheduler+0x13c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a16      	ldr	r2, [pc, #88]	@ (800518c <xPortStartScheduler+0x13c>)
 8005132:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005136:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005138:	4b14      	ldr	r3, [pc, #80]	@ (800518c <xPortStartScheduler+0x13c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a13      	ldr	r2, [pc, #76]	@ (800518c <xPortStartScheduler+0x13c>)
 800513e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005142:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005144:	f000 f8da 	bl	80052fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005148:	4b11      	ldr	r3, [pc, #68]	@ (8005190 <xPortStartScheduler+0x140>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800514e:	f000 f8f9 	bl	8005344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005152:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <xPortStartScheduler+0x144>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a0f      	ldr	r2, [pc, #60]	@ (8005194 <xPortStartScheduler+0x144>)
 8005158:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800515c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800515e:	f7ff ff63 	bl	8005028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005162:	f7ff fd45 	bl	8004bf0 <vTaskSwitchContext>
	prvTaskExitError();
 8005166:	f7ff ff1d 	bl	8004fa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	e000ed00 	.word	0xe000ed00
 8005178:	410fc271 	.word	0x410fc271
 800517c:	410fc270 	.word	0x410fc270
 8005180:	e000e400 	.word	0xe000e400
 8005184:	200005fc 	.word	0x200005fc
 8005188:	20000600 	.word	0x20000600
 800518c:	e000ed20 	.word	0xe000ed20
 8005190:	20000044 	.word	0x20000044
 8005194:	e000ef34 	.word	0xe000ef34

08005198 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	607b      	str	r3, [r7, #4]
}
 80051b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051b2:	4b10      	ldr	r3, [pc, #64]	@ (80051f4 <vPortEnterCritical+0x5c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	4a0e      	ldr	r2, [pc, #56]	@ (80051f4 <vPortEnterCritical+0x5c>)
 80051ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051bc:	4b0d      	ldr	r3, [pc, #52]	@ (80051f4 <vPortEnterCritical+0x5c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d110      	bne.n	80051e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051c4:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <vPortEnterCritical+0x60>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00b      	beq.n	80051e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	603b      	str	r3, [r7, #0]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <vPortEnterCritical+0x4a>
	}
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20000044 	.word	0x20000044
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005202:	4b12      	ldr	r3, [pc, #72]	@ (800524c <vPortExitCritical+0x50>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <vPortExitCritical+0x26>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	607b      	str	r3, [r7, #4]
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	e7fd      	b.n	800521e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005222:	4b0a      	ldr	r3, [pc, #40]	@ (800524c <vPortExitCritical+0x50>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3b01      	subs	r3, #1
 8005228:	4a08      	ldr	r2, [pc, #32]	@ (800524c <vPortExitCritical+0x50>)
 800522a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800522c:	4b07      	ldr	r3, [pc, #28]	@ (800524c <vPortExitCritical+0x50>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d105      	bne.n	8005240 <vPortExitCritical+0x44>
 8005234:	2300      	movs	r3, #0
 8005236:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800523e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20000044 	.word	0x20000044

08005250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005250:	f3ef 8009 	mrs	r0, PSP
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4b15      	ldr	r3, [pc, #84]	@ (80052b0 <pxCurrentTCBConst>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f01e 0f10 	tst.w	lr, #16
 8005260:	bf08      	it	eq
 8005262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	6010      	str	r0, [r2, #0]
 800526c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005270:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005274:	f380 8811 	msr	BASEPRI, r0
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f7ff fcb6 	bl	8004bf0 <vTaskSwitchContext>
 8005284:	f04f 0000 	mov.w	r0, #0
 8005288:	f380 8811 	msr	BASEPRI, r0
 800528c:	bc09      	pop	{r0, r3}
 800528e:	6819      	ldr	r1, [r3, #0]
 8005290:	6808      	ldr	r0, [r1, #0]
 8005292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005296:	f01e 0f10 	tst.w	lr, #16
 800529a:	bf08      	it	eq
 800529c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80052a0:	f380 8809 	msr	PSP, r0
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	f3af 8000 	nop.w

080052b0 <pxCurrentTCBConst>:
 80052b0:	200004d0 	.word	0x200004d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop

080052b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	607b      	str	r3, [r7, #4]
}
 80052d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052d2:	f7ff fbd3 	bl	8004a7c <xTaskIncrementTick>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d003      	beq.n	80052e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052dc:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <SysTick_Handler+0x40>)
 80052de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	2300      	movs	r3, #0
 80052e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f383 8811 	msr	BASEPRI, r3
}
 80052ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052f0:	bf00      	nop
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005300:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <vPortSetupTimerInterrupt+0x34>)
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005306:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <vPortSetupTimerInterrupt+0x38>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800530c:	4b0a      	ldr	r3, [pc, #40]	@ (8005338 <vPortSetupTimerInterrupt+0x3c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0a      	ldr	r2, [pc, #40]	@ (800533c <vPortSetupTimerInterrupt+0x40>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	099b      	lsrs	r3, r3, #6
 8005318:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <vPortSetupTimerInterrupt+0x44>)
 800531a:	3b01      	subs	r3, #1
 800531c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800531e:	4b04      	ldr	r3, [pc, #16]	@ (8005330 <vPortSetupTimerInterrupt+0x34>)
 8005320:	2207      	movs	r2, #7
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	e000e010 	.word	0xe000e010
 8005334:	e000e018 	.word	0xe000e018
 8005338:	20000038 	.word	0x20000038
 800533c:	10624dd3 	.word	0x10624dd3
 8005340:	e000e014 	.word	0xe000e014

08005344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005344:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005354 <vPortEnableVFP+0x10>
 8005348:	6801      	ldr	r1, [r0, #0]
 800534a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800534e:	6001      	str	r1, [r0, #0]
 8005350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005352:	bf00      	nop
 8005354:	e000ed88 	.word	0xe000ed88

08005358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08a      	sub	sp, #40	@ 0x28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005364:	f7ff fade 	bl	8004924 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005368:	4b5c      	ldr	r3, [pc, #368]	@ (80054dc <pvPortMalloc+0x184>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005370:	f000 f924 	bl	80055bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005374:	4b5a      	ldr	r3, [pc, #360]	@ (80054e0 <pvPortMalloc+0x188>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	f040 8095 	bne.w	80054ac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01e      	beq.n	80053c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005388:	2208      	movs	r2, #8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4413      	add	r3, r2
 800538e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	2b00      	cmp	r3, #0
 8005398:	d015      	beq.n	80053c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f023 0307 	bic.w	r3, r3, #7
 80053a0:	3308      	adds	r3, #8
 80053a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <pvPortMalloc+0x6e>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	617b      	str	r3, [r7, #20]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d06f      	beq.n	80054ac <pvPortMalloc+0x154>
 80053cc:	4b45      	ldr	r3, [pc, #276]	@ (80054e4 <pvPortMalloc+0x18c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d86a      	bhi.n	80054ac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053d6:	4b44      	ldr	r3, [pc, #272]	@ (80054e8 <pvPortMalloc+0x190>)
 80053d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053da:	4b43      	ldr	r3, [pc, #268]	@ (80054e8 <pvPortMalloc+0x190>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053e0:	e004      	b.n	80053ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d903      	bls.n	80053fe <pvPortMalloc+0xa6>
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f1      	bne.n	80053e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053fe:	4b37      	ldr	r3, [pc, #220]	@ (80054dc <pvPortMalloc+0x184>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005404:	429a      	cmp	r2, r3
 8005406:	d051      	beq.n	80054ac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2208      	movs	r2, #8
 800540e:	4413      	add	r3, r2
 8005410:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800541a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	1ad2      	subs	r2, r2, r3
 8005422:	2308      	movs	r3, #8
 8005424:	005b      	lsls	r3, r3, #1
 8005426:	429a      	cmp	r2, r3
 8005428:	d920      	bls.n	800546c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800542a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4413      	add	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00b      	beq.n	8005454 <pvPortMalloc+0xfc>
	__asm volatile
 800543c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005440:	f383 8811 	msr	BASEPRI, r3
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	f3bf 8f4f 	dsb	sy
 800544c:	613b      	str	r3, [r7, #16]
}
 800544e:	bf00      	nop
 8005450:	bf00      	nop
 8005452:	e7fd      	b.n	8005450 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	1ad2      	subs	r2, r2, r3
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005466:	69b8      	ldr	r0, [r7, #24]
 8005468:	f000 f90a 	bl	8005680 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800546c:	4b1d      	ldr	r3, [pc, #116]	@ (80054e4 <pvPortMalloc+0x18c>)
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	4a1b      	ldr	r2, [pc, #108]	@ (80054e4 <pvPortMalloc+0x18c>)
 8005478:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800547a:	4b1a      	ldr	r3, [pc, #104]	@ (80054e4 <pvPortMalloc+0x18c>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <pvPortMalloc+0x194>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d203      	bcs.n	800548e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005486:	4b17      	ldr	r3, [pc, #92]	@ (80054e4 <pvPortMalloc+0x18c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a18      	ldr	r2, [pc, #96]	@ (80054ec <pvPortMalloc+0x194>)
 800548c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	4b13      	ldr	r3, [pc, #76]	@ (80054e0 <pvPortMalloc+0x188>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	431a      	orrs	r2, r3
 8005498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800549c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054a2:	4b13      	ldr	r3, [pc, #76]	@ (80054f0 <pvPortMalloc+0x198>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3301      	adds	r3, #1
 80054a8:	4a11      	ldr	r2, [pc, #68]	@ (80054f0 <pvPortMalloc+0x198>)
 80054aa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054ac:	f7ff fa48 	bl	8004940 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00b      	beq.n	80054d2 <pvPortMalloc+0x17a>
	__asm volatile
 80054ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	60fb      	str	r3, [r7, #12]
}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	e7fd      	b.n	80054ce <pvPortMalloc+0x176>
	return pvReturn;
 80054d2:	69fb      	ldr	r3, [r7, #28]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3728      	adds	r7, #40	@ 0x28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	2000420c 	.word	0x2000420c
 80054e0:	20004220 	.word	0x20004220
 80054e4:	20004210 	.word	0x20004210
 80054e8:	20004204 	.word	0x20004204
 80054ec:	20004214 	.word	0x20004214
 80054f0:	20004218 	.word	0x20004218

080054f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d04f      	beq.n	80055a6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005506:	2308      	movs	r3, #8
 8005508:	425b      	negs	r3, r3
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	4413      	add	r3, r2
 800550e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	4b25      	ldr	r3, [pc, #148]	@ (80055b0 <vPortFree+0xbc>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4013      	ands	r3, r2
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <vPortFree+0x46>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	60fb      	str	r3, [r7, #12]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <vPortFree+0x66>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	60bb      	str	r3, [r7, #8]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4b14      	ldr	r3, [pc, #80]	@ (80055b0 <vPortFree+0xbc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01e      	beq.n	80055a6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d11a      	bne.n	80055a6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4b0e      	ldr	r3, [pc, #56]	@ (80055b0 <vPortFree+0xbc>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	43db      	mvns	r3, r3
 800557a:	401a      	ands	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005580:	f7ff f9d0 	bl	8004924 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <vPortFree+0xc0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4413      	add	r3, r2
 800558e:	4a09      	ldr	r2, [pc, #36]	@ (80055b4 <vPortFree+0xc0>)
 8005590:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005592:	6938      	ldr	r0, [r7, #16]
 8005594:	f000 f874 	bl	8005680 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005598:	4b07      	ldr	r3, [pc, #28]	@ (80055b8 <vPortFree+0xc4>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3301      	adds	r3, #1
 800559e:	4a06      	ldr	r2, [pc, #24]	@ (80055b8 <vPortFree+0xc4>)
 80055a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055a2:	f7ff f9cd 	bl	8004940 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20004220 	.word	0x20004220
 80055b4:	20004210 	.word	0x20004210
 80055b8:	2000421c 	.word	0x2000421c

080055bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055c2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80055c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055c8:	4b27      	ldr	r3, [pc, #156]	@ (8005668 <prvHeapInit+0xac>)
 80055ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00c      	beq.n	80055f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3307      	adds	r3, #7
 80055da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0307 	bic.w	r3, r3, #7
 80055e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005668 <prvHeapInit+0xac>)
 80055ec:	4413      	add	r3, r2
 80055ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055f4:	4a1d      	ldr	r2, [pc, #116]	@ (800566c <prvHeapInit+0xb0>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055fa:	4b1c      	ldr	r3, [pc, #112]	@ (800566c <prvHeapInit+0xb0>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	4413      	add	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005608:	2208      	movs	r2, #8
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0307 	bic.w	r3, r3, #7
 8005616:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4a15      	ldr	r2, [pc, #84]	@ (8005670 <prvHeapInit+0xb4>)
 800561c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800561e:	4b14      	ldr	r3, [pc, #80]	@ (8005670 <prvHeapInit+0xb4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005626:	4b12      	ldr	r3, [pc, #72]	@ (8005670 <prvHeapInit+0xb4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	1ad2      	subs	r2, r2, r3
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800563c:	4b0c      	ldr	r3, [pc, #48]	@ (8005670 <prvHeapInit+0xb4>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a0a      	ldr	r2, [pc, #40]	@ (8005674 <prvHeapInit+0xb8>)
 800564a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4a09      	ldr	r2, [pc, #36]	@ (8005678 <prvHeapInit+0xbc>)
 8005652:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005654:	4b09      	ldr	r3, [pc, #36]	@ (800567c <prvHeapInit+0xc0>)
 8005656:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800565a:	601a      	str	r2, [r3, #0]
}
 800565c:	bf00      	nop
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20000604 	.word	0x20000604
 800566c:	20004204 	.word	0x20004204
 8005670:	2000420c 	.word	0x2000420c
 8005674:	20004214 	.word	0x20004214
 8005678:	20004210 	.word	0x20004210
 800567c:	20004220 	.word	0x20004220

08005680 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005688:	4b28      	ldr	r3, [pc, #160]	@ (800572c <prvInsertBlockIntoFreeList+0xac>)
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e002      	b.n	8005694 <prvInsertBlockIntoFreeList+0x14>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d8f7      	bhi.n	800568e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d108      	bne.n	80056c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	441a      	add	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	441a      	add	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d118      	bne.n	8005708 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b15      	ldr	r3, [pc, #84]	@ (8005730 <prvInsertBlockIntoFreeList+0xb0>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d00d      	beq.n	80056fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	441a      	add	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	e008      	b.n	8005710 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005730 <prvInsertBlockIntoFreeList+0xb0>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	e003      	b.n	8005710 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	429a      	cmp	r2, r3
 8005716:	d002      	beq.n	800571e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20004204 	.word	0x20004204
 8005730:	2000420c 	.word	0x2000420c

08005734 <feof>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4b10      	ldr	r3, [pc, #64]	@ (8005778 <feof+0x44>)
 8005738:	4604      	mov	r4, r0
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	b118      	cbz	r0, 8005746 <feof+0x12>
 800573e:	6a03      	ldr	r3, [r0, #32]
 8005740:	b90b      	cbnz	r3, 8005746 <feof+0x12>
 8005742:	f000 f917 	bl	8005974 <__sinit>
 8005746:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005748:	07d8      	lsls	r0, r3, #31
 800574a:	d405      	bmi.n	8005758 <feof+0x24>
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	0599      	lsls	r1, r3, #22
 8005750:	d402      	bmi.n	8005758 <feof+0x24>
 8005752:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005754:	f000 fbdd 	bl	8005f12 <__retarget_lock_acquire_recursive>
 8005758:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800575a:	89a5      	ldrh	r5, [r4, #12]
 800575c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005760:	07d2      	lsls	r2, r2, #31
 8005762:	f3c5 1540 	ubfx	r5, r5, #5, #1
 8005766:	d404      	bmi.n	8005772 <feof+0x3e>
 8005768:	059b      	lsls	r3, r3, #22
 800576a:	d402      	bmi.n	8005772 <feof+0x3e>
 800576c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800576e:	f000 fbd1 	bl	8005f14 <__retarget_lock_release_recursive>
 8005772:	4628      	mov	r0, r5
 8005774:	bd38      	pop	{r3, r4, r5, pc}
 8005776:	bf00      	nop
 8005778:	20000054 	.word	0x20000054

0800577c <_fgets_r>:
 800577c:	2a01      	cmp	r2, #1
 800577e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005782:	4681      	mov	r9, r0
 8005784:	460e      	mov	r6, r1
 8005786:	4615      	mov	r5, r2
 8005788:	461c      	mov	r4, r3
 800578a:	dd21      	ble.n	80057d0 <_fgets_r+0x54>
 800578c:	b118      	cbz	r0, 8005796 <_fgets_r+0x1a>
 800578e:	6a03      	ldr	r3, [r0, #32]
 8005790:	b90b      	cbnz	r3, 8005796 <_fgets_r+0x1a>
 8005792:	f000 f8ef 	bl	8005974 <__sinit>
 8005796:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005798:	07db      	lsls	r3, r3, #31
 800579a:	d405      	bmi.n	80057a8 <_fgets_r+0x2c>
 800579c:	89a3      	ldrh	r3, [r4, #12]
 800579e:	059f      	lsls	r7, r3, #22
 80057a0:	d402      	bmi.n	80057a8 <_fgets_r+0x2c>
 80057a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057a4:	f000 fbb5 	bl	8005f12 <__retarget_lock_acquire_recursive>
 80057a8:	3d01      	subs	r5, #1
 80057aa:	4637      	mov	r7, r6
 80057ac:	6863      	ldr	r3, [r4, #4]
 80057ae:	b99b      	cbnz	r3, 80057d8 <_fgets_r+0x5c>
 80057b0:	4621      	mov	r1, r4
 80057b2:	4648      	mov	r0, r9
 80057b4:	f000 f992 	bl	8005adc <__srefill_r>
 80057b8:	b168      	cbz	r0, 80057d6 <_fgets_r+0x5a>
 80057ba:	42b7      	cmp	r7, r6
 80057bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057be:	d139      	bne.n	8005834 <_fgets_r+0xb8>
 80057c0:	07d8      	lsls	r0, r3, #31
 80057c2:	d405      	bmi.n	80057d0 <_fgets_r+0x54>
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	0599      	lsls	r1, r3, #22
 80057c8:	d402      	bmi.n	80057d0 <_fgets_r+0x54>
 80057ca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057cc:	f000 fba2 	bl	8005f14 <__retarget_lock_release_recursive>
 80057d0:	2000      	movs	r0, #0
 80057d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d6:	6863      	ldr	r3, [r4, #4]
 80057d8:	f8d4 a000 	ldr.w	sl, [r4]
 80057dc:	42ab      	cmp	r3, r5
 80057de:	bf28      	it	cs
 80057e0:	462b      	movcs	r3, r5
 80057e2:	461a      	mov	r2, r3
 80057e4:	210a      	movs	r1, #10
 80057e6:	4650      	mov	r0, sl
 80057e8:	4698      	mov	r8, r3
 80057ea:	f7fa fcf9 	bl	80001e0 <memchr>
 80057ee:	6863      	ldr	r3, [r4, #4]
 80057f0:	b188      	cbz	r0, 8005816 <_fgets_r+0x9a>
 80057f2:	3001      	adds	r0, #1
 80057f4:	eba0 050a 	sub.w	r5, r0, sl
 80057f8:	1b5b      	subs	r3, r3, r5
 80057fa:	e9c4 0300 	strd	r0, r3, [r4]
 80057fe:	462a      	mov	r2, r5
 8005800:	4651      	mov	r1, sl
 8005802:	4638      	mov	r0, r7
 8005804:	f000 fb87 	bl	8005f16 <memcpy>
 8005808:	2300      	movs	r3, #0
 800580a:	557b      	strb	r3, [r7, r5]
 800580c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800580e:	07da      	lsls	r2, r3, #31
 8005810:	d513      	bpl.n	800583a <_fgets_r+0xbe>
 8005812:	4630      	mov	r0, r6
 8005814:	e7dd      	b.n	80057d2 <_fgets_r+0x56>
 8005816:	eba3 0308 	sub.w	r3, r3, r8
 800581a:	6063      	str	r3, [r4, #4]
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	4443      	add	r3, r8
 8005820:	4638      	mov	r0, r7
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	4642      	mov	r2, r8
 8005826:	4651      	mov	r1, sl
 8005828:	f000 fb75 	bl	8005f16 <memcpy>
 800582c:	ebb5 0508 	subs.w	r5, r5, r8
 8005830:	4447      	add	r7, r8
 8005832:	d1bb      	bne.n	80057ac <_fgets_r+0x30>
 8005834:	2300      	movs	r3, #0
 8005836:	703b      	strb	r3, [r7, #0]
 8005838:	e7e8      	b.n	800580c <_fgets_r+0x90>
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	059b      	lsls	r3, r3, #22
 800583e:	d4e8      	bmi.n	8005812 <_fgets_r+0x96>
 8005840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005842:	f000 fb67 	bl	8005f14 <__retarget_lock_release_recursive>
 8005846:	e7e4      	b.n	8005812 <_fgets_r+0x96>

08005848 <fgets>:
 8005848:	4613      	mov	r3, r2
 800584a:	460a      	mov	r2, r1
 800584c:	4601      	mov	r1, r0
 800584e:	4802      	ldr	r0, [pc, #8]	@ (8005858 <fgets+0x10>)
 8005850:	6800      	ldr	r0, [r0, #0]
 8005852:	f7ff bf93 	b.w	800577c <_fgets_r>
 8005856:	bf00      	nop
 8005858:	20000054 	.word	0x20000054

0800585c <std>:
 800585c:	2300      	movs	r3, #0
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
 8005862:	e9c0 3300 	strd	r3, r3, [r0]
 8005866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800586a:	6083      	str	r3, [r0, #8]
 800586c:	8181      	strh	r1, [r0, #12]
 800586e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005870:	81c2      	strh	r2, [r0, #14]
 8005872:	6183      	str	r3, [r0, #24]
 8005874:	4619      	mov	r1, r3
 8005876:	2208      	movs	r2, #8
 8005878:	305c      	adds	r0, #92	@ 0x5c
 800587a:	f000 fa7b 	bl	8005d74 <memset>
 800587e:	4b0d      	ldr	r3, [pc, #52]	@ (80058b4 <std+0x58>)
 8005880:	6263      	str	r3, [r4, #36]	@ 0x24
 8005882:	4b0d      	ldr	r3, [pc, #52]	@ (80058b8 <std+0x5c>)
 8005884:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005886:	4b0d      	ldr	r3, [pc, #52]	@ (80058bc <std+0x60>)
 8005888:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800588a:	4b0d      	ldr	r3, [pc, #52]	@ (80058c0 <std+0x64>)
 800588c:	6323      	str	r3, [r4, #48]	@ 0x30
 800588e:	4b0d      	ldr	r3, [pc, #52]	@ (80058c4 <std+0x68>)
 8005890:	6224      	str	r4, [r4, #32]
 8005892:	429c      	cmp	r4, r3
 8005894:	d006      	beq.n	80058a4 <std+0x48>
 8005896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800589a:	4294      	cmp	r4, r2
 800589c:	d002      	beq.n	80058a4 <std+0x48>
 800589e:	33d0      	adds	r3, #208	@ 0xd0
 80058a0:	429c      	cmp	r4, r3
 80058a2:	d105      	bne.n	80058b0 <std+0x54>
 80058a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058ac:	f000 bb30 	b.w	8005f10 <__retarget_lock_init_recursive>
 80058b0:	bd10      	pop	{r4, pc}
 80058b2:	bf00      	nop
 80058b4:	08005bc5 	.word	0x08005bc5
 80058b8:	08005be7 	.word	0x08005be7
 80058bc:	08005c1f 	.word	0x08005c1f
 80058c0:	08005c43 	.word	0x08005c43
 80058c4:	20004224 	.word	0x20004224

080058c8 <stdio_exit_handler>:
 80058c8:	4a02      	ldr	r2, [pc, #8]	@ (80058d4 <stdio_exit_handler+0xc>)
 80058ca:	4903      	ldr	r1, [pc, #12]	@ (80058d8 <stdio_exit_handler+0x10>)
 80058cc:	4803      	ldr	r0, [pc, #12]	@ (80058dc <stdio_exit_handler+0x14>)
 80058ce:	f000 b869 	b.w	80059a4 <_fwalk_sglue>
 80058d2:	bf00      	nop
 80058d4:	20000048 	.word	0x20000048
 80058d8:	080067cd 	.word	0x080067cd
 80058dc:	20000058 	.word	0x20000058

080058e0 <cleanup_stdio>:
 80058e0:	6841      	ldr	r1, [r0, #4]
 80058e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <cleanup_stdio+0x34>)
 80058e4:	4299      	cmp	r1, r3
 80058e6:	b510      	push	{r4, lr}
 80058e8:	4604      	mov	r4, r0
 80058ea:	d001      	beq.n	80058f0 <cleanup_stdio+0x10>
 80058ec:	f000 ff6e 	bl	80067cc <_fflush_r>
 80058f0:	68a1      	ldr	r1, [r4, #8]
 80058f2:	4b09      	ldr	r3, [pc, #36]	@ (8005918 <cleanup_stdio+0x38>)
 80058f4:	4299      	cmp	r1, r3
 80058f6:	d002      	beq.n	80058fe <cleanup_stdio+0x1e>
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 ff67 	bl	80067cc <_fflush_r>
 80058fe:	68e1      	ldr	r1, [r4, #12]
 8005900:	4b06      	ldr	r3, [pc, #24]	@ (800591c <cleanup_stdio+0x3c>)
 8005902:	4299      	cmp	r1, r3
 8005904:	d004      	beq.n	8005910 <cleanup_stdio+0x30>
 8005906:	4620      	mov	r0, r4
 8005908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800590c:	f000 bf5e 	b.w	80067cc <_fflush_r>
 8005910:	bd10      	pop	{r4, pc}
 8005912:	bf00      	nop
 8005914:	20004224 	.word	0x20004224
 8005918:	2000428c 	.word	0x2000428c
 800591c:	200042f4 	.word	0x200042f4

08005920 <global_stdio_init.part.0>:
 8005920:	b510      	push	{r4, lr}
 8005922:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <global_stdio_init.part.0+0x30>)
 8005924:	4c0b      	ldr	r4, [pc, #44]	@ (8005954 <global_stdio_init.part.0+0x34>)
 8005926:	4a0c      	ldr	r2, [pc, #48]	@ (8005958 <global_stdio_init.part.0+0x38>)
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	4620      	mov	r0, r4
 800592c:	2200      	movs	r2, #0
 800592e:	2104      	movs	r1, #4
 8005930:	f7ff ff94 	bl	800585c <std>
 8005934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005938:	2201      	movs	r2, #1
 800593a:	2109      	movs	r1, #9
 800593c:	f7ff ff8e 	bl	800585c <std>
 8005940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005944:	2202      	movs	r2, #2
 8005946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594a:	2112      	movs	r1, #18
 800594c:	f7ff bf86 	b.w	800585c <std>
 8005950:	2000435c 	.word	0x2000435c
 8005954:	20004224 	.word	0x20004224
 8005958:	080058c9 	.word	0x080058c9

0800595c <__sfp_lock_acquire>:
 800595c:	4801      	ldr	r0, [pc, #4]	@ (8005964 <__sfp_lock_acquire+0x8>)
 800595e:	f000 bad8 	b.w	8005f12 <__retarget_lock_acquire_recursive>
 8005962:	bf00      	nop
 8005964:	20004365 	.word	0x20004365

08005968 <__sfp_lock_release>:
 8005968:	4801      	ldr	r0, [pc, #4]	@ (8005970 <__sfp_lock_release+0x8>)
 800596a:	f000 bad3 	b.w	8005f14 <__retarget_lock_release_recursive>
 800596e:	bf00      	nop
 8005970:	20004365 	.word	0x20004365

08005974 <__sinit>:
 8005974:	b510      	push	{r4, lr}
 8005976:	4604      	mov	r4, r0
 8005978:	f7ff fff0 	bl	800595c <__sfp_lock_acquire>
 800597c:	6a23      	ldr	r3, [r4, #32]
 800597e:	b11b      	cbz	r3, 8005988 <__sinit+0x14>
 8005980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005984:	f7ff bff0 	b.w	8005968 <__sfp_lock_release>
 8005988:	4b04      	ldr	r3, [pc, #16]	@ (800599c <__sinit+0x28>)
 800598a:	6223      	str	r3, [r4, #32]
 800598c:	4b04      	ldr	r3, [pc, #16]	@ (80059a0 <__sinit+0x2c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f5      	bne.n	8005980 <__sinit+0xc>
 8005994:	f7ff ffc4 	bl	8005920 <global_stdio_init.part.0>
 8005998:	e7f2      	b.n	8005980 <__sinit+0xc>
 800599a:	bf00      	nop
 800599c:	080058e1 	.word	0x080058e1
 80059a0:	2000435c 	.word	0x2000435c

080059a4 <_fwalk_sglue>:
 80059a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a8:	4607      	mov	r7, r0
 80059aa:	4688      	mov	r8, r1
 80059ac:	4614      	mov	r4, r2
 80059ae:	2600      	movs	r6, #0
 80059b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059b4:	f1b9 0901 	subs.w	r9, r9, #1
 80059b8:	d505      	bpl.n	80059c6 <_fwalk_sglue+0x22>
 80059ba:	6824      	ldr	r4, [r4, #0]
 80059bc:	2c00      	cmp	r4, #0
 80059be:	d1f7      	bne.n	80059b0 <_fwalk_sglue+0xc>
 80059c0:	4630      	mov	r0, r6
 80059c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059c6:	89ab      	ldrh	r3, [r5, #12]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d907      	bls.n	80059dc <_fwalk_sglue+0x38>
 80059cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059d0:	3301      	adds	r3, #1
 80059d2:	d003      	beq.n	80059dc <_fwalk_sglue+0x38>
 80059d4:	4629      	mov	r1, r5
 80059d6:	4638      	mov	r0, r7
 80059d8:	47c0      	blx	r8
 80059da:	4306      	orrs	r6, r0
 80059dc:	3568      	adds	r5, #104	@ 0x68
 80059de:	e7e9      	b.n	80059b4 <_fwalk_sglue+0x10>

080059e0 <iprintf>:
 80059e0:	b40f      	push	{r0, r1, r2, r3}
 80059e2:	b507      	push	{r0, r1, r2, lr}
 80059e4:	4906      	ldr	r1, [pc, #24]	@ (8005a00 <iprintf+0x20>)
 80059e6:	ab04      	add	r3, sp, #16
 80059e8:	6808      	ldr	r0, [r1, #0]
 80059ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ee:	6881      	ldr	r1, [r0, #8]
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	f000 fbc1 	bl	8006178 <_vfiprintf_r>
 80059f6:	b003      	add	sp, #12
 80059f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059fc:	b004      	add	sp, #16
 80059fe:	4770      	bx	lr
 8005a00:	20000054 	.word	0x20000054

08005a04 <_puts_r>:
 8005a04:	6a03      	ldr	r3, [r0, #32]
 8005a06:	b570      	push	{r4, r5, r6, lr}
 8005a08:	6884      	ldr	r4, [r0, #8]
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	460e      	mov	r6, r1
 8005a0e:	b90b      	cbnz	r3, 8005a14 <_puts_r+0x10>
 8005a10:	f7ff ffb0 	bl	8005974 <__sinit>
 8005a14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a16:	07db      	lsls	r3, r3, #31
 8005a18:	d405      	bmi.n	8005a26 <_puts_r+0x22>
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	0598      	lsls	r0, r3, #22
 8005a1e:	d402      	bmi.n	8005a26 <_puts_r+0x22>
 8005a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a22:	f000 fa76 	bl	8005f12 <__retarget_lock_acquire_recursive>
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	0719      	lsls	r1, r3, #28
 8005a2a:	d502      	bpl.n	8005a32 <_puts_r+0x2e>
 8005a2c:	6923      	ldr	r3, [r4, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d135      	bne.n	8005a9e <_puts_r+0x9a>
 8005a32:	4621      	mov	r1, r4
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 f947 	bl	8005cc8 <__swsetup_r>
 8005a3a:	b380      	cbz	r0, 8005a9e <_puts_r+0x9a>
 8005a3c:	f04f 35ff 	mov.w	r5, #4294967295
 8005a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a42:	07da      	lsls	r2, r3, #31
 8005a44:	d405      	bmi.n	8005a52 <_puts_r+0x4e>
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	059b      	lsls	r3, r3, #22
 8005a4a:	d402      	bmi.n	8005a52 <_puts_r+0x4e>
 8005a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a4e:	f000 fa61 	bl	8005f14 <__retarget_lock_release_recursive>
 8005a52:	4628      	mov	r0, r5
 8005a54:	bd70      	pop	{r4, r5, r6, pc}
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	da04      	bge.n	8005a64 <_puts_r+0x60>
 8005a5a:	69a2      	ldr	r2, [r4, #24]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	dc17      	bgt.n	8005a90 <_puts_r+0x8c>
 8005a60:	290a      	cmp	r1, #10
 8005a62:	d015      	beq.n	8005a90 <_puts_r+0x8c>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	6022      	str	r2, [r4, #0]
 8005a6a:	7019      	strb	r1, [r3, #0]
 8005a6c:	68a3      	ldr	r3, [r4, #8]
 8005a6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a72:	3b01      	subs	r3, #1
 8005a74:	60a3      	str	r3, [r4, #8]
 8005a76:	2900      	cmp	r1, #0
 8005a78:	d1ed      	bne.n	8005a56 <_puts_r+0x52>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	da11      	bge.n	8005aa2 <_puts_r+0x9e>
 8005a7e:	4622      	mov	r2, r4
 8005a80:	210a      	movs	r1, #10
 8005a82:	4628      	mov	r0, r5
 8005a84:	f000 f8e1 	bl	8005c4a <__swbuf_r>
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d0d7      	beq.n	8005a3c <_puts_r+0x38>
 8005a8c:	250a      	movs	r5, #10
 8005a8e:	e7d7      	b.n	8005a40 <_puts_r+0x3c>
 8005a90:	4622      	mov	r2, r4
 8005a92:	4628      	mov	r0, r5
 8005a94:	f000 f8d9 	bl	8005c4a <__swbuf_r>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d1e7      	bne.n	8005a6c <_puts_r+0x68>
 8005a9c:	e7ce      	b.n	8005a3c <_puts_r+0x38>
 8005a9e:	3e01      	subs	r6, #1
 8005aa0:	e7e4      	b.n	8005a6c <_puts_r+0x68>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	6022      	str	r2, [r4, #0]
 8005aa8:	220a      	movs	r2, #10
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e7ee      	b.n	8005a8c <_puts_r+0x88>
	...

08005ab0 <puts>:
 8005ab0:	4b02      	ldr	r3, [pc, #8]	@ (8005abc <puts+0xc>)
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	f7ff bfa5 	b.w	8005a04 <_puts_r>
 8005aba:	bf00      	nop
 8005abc:	20000054 	.word	0x20000054

08005ac0 <lflush>:
 8005ac0:	898b      	ldrh	r3, [r1, #12]
 8005ac2:	f003 0309 	and.w	r3, r3, #9
 8005ac6:	2b09      	cmp	r3, #9
 8005ac8:	d103      	bne.n	8005ad2 <lflush+0x12>
 8005aca:	4b03      	ldr	r3, [pc, #12]	@ (8005ad8 <lflush+0x18>)
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	f000 be7d 	b.w	80067cc <_fflush_r>
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20000054 	.word	0x20000054

08005adc <__srefill_r>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	460c      	mov	r4, r1
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	b118      	cbz	r0, 8005aec <__srefill_r+0x10>
 8005ae4:	6a03      	ldr	r3, [r0, #32]
 8005ae6:	b90b      	cbnz	r3, 8005aec <__srefill_r+0x10>
 8005ae8:	f7ff ff44 	bl	8005974 <__sinit>
 8005aec:	2300      	movs	r3, #0
 8005aee:	6063      	str	r3, [r4, #4]
 8005af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005af4:	069e      	lsls	r6, r3, #26
 8005af6:	d408      	bmi.n	8005b0a <__srefill_r+0x2e>
 8005af8:	0758      	lsls	r0, r3, #29
 8005afa:	d445      	bmi.n	8005b88 <__srefill_r+0xac>
 8005afc:	06d9      	lsls	r1, r3, #27
 8005afe:	d407      	bmi.n	8005b10 <__srefill_r+0x34>
 8005b00:	2209      	movs	r2, #9
 8005b02:	602a      	str	r2, [r5, #0]
 8005b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	071a      	lsls	r2, r3, #28
 8005b12:	d50b      	bpl.n	8005b2c <__srefill_r+0x50>
 8005b14:	4621      	mov	r1, r4
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 fe58 	bl	80067cc <_fflush_r>
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d1f4      	bne.n	8005b0a <__srefill_r+0x2e>
 8005b20:	89a3      	ldrh	r3, [r4, #12]
 8005b22:	60a0      	str	r0, [r4, #8]
 8005b24:	f023 0308 	bic.w	r3, r3, #8
 8005b28:	81a3      	strh	r3, [r4, #12]
 8005b2a:	61a0      	str	r0, [r4, #24]
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	f043 0304 	orr.w	r3, r3, #4
 8005b32:	81a3      	strh	r3, [r4, #12]
 8005b34:	6923      	ldr	r3, [r4, #16]
 8005b36:	b91b      	cbnz	r3, 8005b40 <__srefill_r+0x64>
 8005b38:	4621      	mov	r1, r4
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 fe94 	bl	8006868 <__smakebuf_r>
 8005b40:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8005b44:	07b3      	lsls	r3, r6, #30
 8005b46:	d00f      	beq.n	8005b68 <__srefill_r+0x8c>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb8 <__srefill_r+0xdc>)
 8005b4c:	491b      	ldr	r1, [pc, #108]	@ (8005bbc <__srefill_r+0xe0>)
 8005b4e:	481c      	ldr	r0, [pc, #112]	@ (8005bc0 <__srefill_r+0xe4>)
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	f7ff ff27 	bl	80059a4 <_fwalk_sglue>
 8005b56:	81a6      	strh	r6, [r4, #12]
 8005b58:	f006 0609 	and.w	r6, r6, #9
 8005b5c:	2e09      	cmp	r6, #9
 8005b5e:	d103      	bne.n	8005b68 <__srefill_r+0x8c>
 8005b60:	4621      	mov	r1, r4
 8005b62:	4628      	mov	r0, r5
 8005b64:	f000 fdae 	bl	80066c4 <__sflush_r>
 8005b68:	6922      	ldr	r2, [r4, #16]
 8005b6a:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8005b6c:	6963      	ldr	r3, [r4, #20]
 8005b6e:	6a21      	ldr	r1, [r4, #32]
 8005b70:	6022      	str	r2, [r4, #0]
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b0      	blx	r6
 8005b76:	2800      	cmp	r0, #0
 8005b78:	6060      	str	r0, [r4, #4]
 8005b7a:	dc17      	bgt.n	8005bac <__srefill_r+0xd0>
 8005b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b80:	d116      	bne.n	8005bb0 <__srefill_r+0xd4>
 8005b82:	f043 0320 	orr.w	r3, r3, #32
 8005b86:	e7bf      	b.n	8005b08 <__srefill_r+0x2c>
 8005b88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b8a:	2900      	cmp	r1, #0
 8005b8c:	d0d2      	beq.n	8005b34 <__srefill_r+0x58>
 8005b8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b92:	4299      	cmp	r1, r3
 8005b94:	d002      	beq.n	8005b9c <__srefill_r+0xc0>
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 f9cc 	bl	8005f34 <_free_r>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ba0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ba2:	6063      	str	r3, [r4, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0c5      	beq.n	8005b34 <__srefill_r+0x58>
 8005ba8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	2000      	movs	r0, #0
 8005bae:	e7ae      	b.n	8005b0e <__srefill_r+0x32>
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	6062      	str	r2, [r4, #4]
 8005bb4:	e7a6      	b.n	8005b04 <__srefill_r+0x28>
 8005bb6:	bf00      	nop
 8005bb8:	20000048 	.word	0x20000048
 8005bbc:	08005ac1 	.word	0x08005ac1
 8005bc0:	20000058 	.word	0x20000058

08005bc4 <__sread>:
 8005bc4:	b510      	push	{r4, lr}
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bcc:	f000 f952 	bl	8005e74 <_read_r>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	bfab      	itete	ge
 8005bd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8005bd8:	181b      	addge	r3, r3, r0
 8005bda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bde:	bfac      	ite	ge
 8005be0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005be2:	81a3      	strhlt	r3, [r4, #12]
 8005be4:	bd10      	pop	{r4, pc}

08005be6 <__swrite>:
 8005be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bea:	461f      	mov	r7, r3
 8005bec:	898b      	ldrh	r3, [r1, #12]
 8005bee:	05db      	lsls	r3, r3, #23
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	4616      	mov	r6, r2
 8005bf6:	d505      	bpl.n	8005c04 <__swrite+0x1e>
 8005bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f000 f926 	bl	8005e50 <_lseek_r>
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c0e:	81a3      	strh	r3, [r4, #12]
 8005c10:	4632      	mov	r2, r6
 8005c12:	463b      	mov	r3, r7
 8005c14:	4628      	mov	r0, r5
 8005c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1a:	f000 b93d 	b.w	8005e98 <_write_r>

08005c1e <__sseek>:
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	460c      	mov	r4, r1
 8005c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c26:	f000 f913 	bl	8005e50 <_lseek_r>
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	89a3      	ldrh	r3, [r4, #12]
 8005c2e:	bf15      	itete	ne
 8005c30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c3a:	81a3      	strheq	r3, [r4, #12]
 8005c3c:	bf18      	it	ne
 8005c3e:	81a3      	strhne	r3, [r4, #12]
 8005c40:	bd10      	pop	{r4, pc}

08005c42 <__sclose>:
 8005c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c46:	f000 b89d 	b.w	8005d84 <_close_r>

08005c4a <__swbuf_r>:
 8005c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4c:	460e      	mov	r6, r1
 8005c4e:	4614      	mov	r4, r2
 8005c50:	4605      	mov	r5, r0
 8005c52:	b118      	cbz	r0, 8005c5c <__swbuf_r+0x12>
 8005c54:	6a03      	ldr	r3, [r0, #32]
 8005c56:	b90b      	cbnz	r3, 8005c5c <__swbuf_r+0x12>
 8005c58:	f7ff fe8c 	bl	8005974 <__sinit>
 8005c5c:	69a3      	ldr	r3, [r4, #24]
 8005c5e:	60a3      	str	r3, [r4, #8]
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	071a      	lsls	r2, r3, #28
 8005c64:	d501      	bpl.n	8005c6a <__swbuf_r+0x20>
 8005c66:	6923      	ldr	r3, [r4, #16]
 8005c68:	b943      	cbnz	r3, 8005c7c <__swbuf_r+0x32>
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 f82b 	bl	8005cc8 <__swsetup_r>
 8005c72:	b118      	cbz	r0, 8005c7c <__swbuf_r+0x32>
 8005c74:	f04f 37ff 	mov.w	r7, #4294967295
 8005c78:	4638      	mov	r0, r7
 8005c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	6922      	ldr	r2, [r4, #16]
 8005c80:	1a98      	subs	r0, r3, r2
 8005c82:	6963      	ldr	r3, [r4, #20]
 8005c84:	b2f6      	uxtb	r6, r6
 8005c86:	4283      	cmp	r3, r0
 8005c88:	4637      	mov	r7, r6
 8005c8a:	dc05      	bgt.n	8005c98 <__swbuf_r+0x4e>
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 fd9c 	bl	80067cc <_fflush_r>
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d1ed      	bne.n	8005c74 <__swbuf_r+0x2a>
 8005c98:	68a3      	ldr	r3, [r4, #8]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	60a3      	str	r3, [r4, #8]
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	6022      	str	r2, [r4, #0]
 8005ca4:	701e      	strb	r6, [r3, #0]
 8005ca6:	6962      	ldr	r2, [r4, #20]
 8005ca8:	1c43      	adds	r3, r0, #1
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d004      	beq.n	8005cb8 <__swbuf_r+0x6e>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	07db      	lsls	r3, r3, #31
 8005cb2:	d5e1      	bpl.n	8005c78 <__swbuf_r+0x2e>
 8005cb4:	2e0a      	cmp	r6, #10
 8005cb6:	d1df      	bne.n	8005c78 <__swbuf_r+0x2e>
 8005cb8:	4621      	mov	r1, r4
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f000 fd86 	bl	80067cc <_fflush_r>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d0d9      	beq.n	8005c78 <__swbuf_r+0x2e>
 8005cc4:	e7d6      	b.n	8005c74 <__swbuf_r+0x2a>
	...

08005cc8 <__swsetup_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4b29      	ldr	r3, [pc, #164]	@ (8005d70 <__swsetup_r+0xa8>)
 8005ccc:	4605      	mov	r5, r0
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	b118      	cbz	r0, 8005cdc <__swsetup_r+0x14>
 8005cd4:	6a03      	ldr	r3, [r0, #32]
 8005cd6:	b90b      	cbnz	r3, 8005cdc <__swsetup_r+0x14>
 8005cd8:	f7ff fe4c 	bl	8005974 <__sinit>
 8005cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce0:	0719      	lsls	r1, r3, #28
 8005ce2:	d422      	bmi.n	8005d2a <__swsetup_r+0x62>
 8005ce4:	06da      	lsls	r2, r3, #27
 8005ce6:	d407      	bmi.n	8005cf8 <__swsetup_r+0x30>
 8005ce8:	2209      	movs	r2, #9
 8005cea:	602a      	str	r2, [r5, #0]
 8005cec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf0:	81a3      	strh	r3, [r4, #12]
 8005cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf6:	e033      	b.n	8005d60 <__swsetup_r+0x98>
 8005cf8:	0758      	lsls	r0, r3, #29
 8005cfa:	d512      	bpl.n	8005d22 <__swsetup_r+0x5a>
 8005cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cfe:	b141      	cbz	r1, 8005d12 <__swsetup_r+0x4a>
 8005d00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d04:	4299      	cmp	r1, r3
 8005d06:	d002      	beq.n	8005d0e <__swsetup_r+0x46>
 8005d08:	4628      	mov	r0, r5
 8005d0a:	f000 f913 	bl	8005f34 <_free_r>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d18:	81a3      	strh	r3, [r4, #12]
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	6063      	str	r3, [r4, #4]
 8005d1e:	6923      	ldr	r3, [r4, #16]
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	89a3      	ldrh	r3, [r4, #12]
 8005d24:	f043 0308 	orr.w	r3, r3, #8
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	6923      	ldr	r3, [r4, #16]
 8005d2c:	b94b      	cbnz	r3, 8005d42 <__swsetup_r+0x7a>
 8005d2e:	89a3      	ldrh	r3, [r4, #12]
 8005d30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d38:	d003      	beq.n	8005d42 <__swsetup_r+0x7a>
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	f000 fd93 	bl	8006868 <__smakebuf_r>
 8005d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d46:	f013 0201 	ands.w	r2, r3, #1
 8005d4a:	d00a      	beq.n	8005d62 <__swsetup_r+0x9a>
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	60a2      	str	r2, [r4, #8]
 8005d50:	6962      	ldr	r2, [r4, #20]
 8005d52:	4252      	negs	r2, r2
 8005d54:	61a2      	str	r2, [r4, #24]
 8005d56:	6922      	ldr	r2, [r4, #16]
 8005d58:	b942      	cbnz	r2, 8005d6c <__swsetup_r+0xa4>
 8005d5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d5e:	d1c5      	bne.n	8005cec <__swsetup_r+0x24>
 8005d60:	bd38      	pop	{r3, r4, r5, pc}
 8005d62:	0799      	lsls	r1, r3, #30
 8005d64:	bf58      	it	pl
 8005d66:	6962      	ldrpl	r2, [r4, #20]
 8005d68:	60a2      	str	r2, [r4, #8]
 8005d6a:	e7f4      	b.n	8005d56 <__swsetup_r+0x8e>
 8005d6c:	2000      	movs	r0, #0
 8005d6e:	e7f7      	b.n	8005d60 <__swsetup_r+0x98>
 8005d70:	20000054 	.word	0x20000054

08005d74 <memset>:
 8005d74:	4402      	add	r2, r0
 8005d76:	4603      	mov	r3, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memset+0xa>
 8005d7c:	4770      	bx	lr
 8005d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d82:	e7f9      	b.n	8005d78 <memset+0x4>

08005d84 <_close_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4d06      	ldr	r5, [pc, #24]	@ (8005da0 <_close_r+0x1c>)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	f7fb fc98 	bl	80016c4 <_close>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_close_r+0x1a>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_close_r+0x1a>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	20004360 	.word	0x20004360

08005da4 <_reclaim_reent>:
 8005da4:	4b29      	ldr	r3, [pc, #164]	@ (8005e4c <_reclaim_reent+0xa8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4283      	cmp	r3, r0
 8005daa:	b570      	push	{r4, r5, r6, lr}
 8005dac:	4604      	mov	r4, r0
 8005dae:	d04b      	beq.n	8005e48 <_reclaim_reent+0xa4>
 8005db0:	69c3      	ldr	r3, [r0, #28]
 8005db2:	b1ab      	cbz	r3, 8005de0 <_reclaim_reent+0x3c>
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	b16b      	cbz	r3, 8005dd4 <_reclaim_reent+0x30>
 8005db8:	2500      	movs	r5, #0
 8005dba:	69e3      	ldr	r3, [r4, #28]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	5959      	ldr	r1, [r3, r5]
 8005dc0:	2900      	cmp	r1, #0
 8005dc2:	d13b      	bne.n	8005e3c <_reclaim_reent+0x98>
 8005dc4:	3504      	adds	r5, #4
 8005dc6:	2d80      	cmp	r5, #128	@ 0x80
 8005dc8:	d1f7      	bne.n	8005dba <_reclaim_reent+0x16>
 8005dca:	69e3      	ldr	r3, [r4, #28]
 8005dcc:	4620      	mov	r0, r4
 8005dce:	68d9      	ldr	r1, [r3, #12]
 8005dd0:	f000 f8b0 	bl	8005f34 <_free_r>
 8005dd4:	69e3      	ldr	r3, [r4, #28]
 8005dd6:	6819      	ldr	r1, [r3, #0]
 8005dd8:	b111      	cbz	r1, 8005de0 <_reclaim_reent+0x3c>
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f000 f8aa 	bl	8005f34 <_free_r>
 8005de0:	6961      	ldr	r1, [r4, #20]
 8005de2:	b111      	cbz	r1, 8005dea <_reclaim_reent+0x46>
 8005de4:	4620      	mov	r0, r4
 8005de6:	f000 f8a5 	bl	8005f34 <_free_r>
 8005dea:	69e1      	ldr	r1, [r4, #28]
 8005dec:	b111      	cbz	r1, 8005df4 <_reclaim_reent+0x50>
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 f8a0 	bl	8005f34 <_free_r>
 8005df4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005df6:	b111      	cbz	r1, 8005dfe <_reclaim_reent+0x5a>
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f000 f89b 	bl	8005f34 <_free_r>
 8005dfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e00:	b111      	cbz	r1, 8005e08 <_reclaim_reent+0x64>
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 f896 	bl	8005f34 <_free_r>
 8005e08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005e0a:	b111      	cbz	r1, 8005e12 <_reclaim_reent+0x6e>
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	f000 f891 	bl	8005f34 <_free_r>
 8005e12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005e14:	b111      	cbz	r1, 8005e1c <_reclaim_reent+0x78>
 8005e16:	4620      	mov	r0, r4
 8005e18:	f000 f88c 	bl	8005f34 <_free_r>
 8005e1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005e1e:	b111      	cbz	r1, 8005e26 <_reclaim_reent+0x82>
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 f887 	bl	8005f34 <_free_r>
 8005e26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005e28:	b111      	cbz	r1, 8005e30 <_reclaim_reent+0x8c>
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	f000 f882 	bl	8005f34 <_free_r>
 8005e30:	6a23      	ldr	r3, [r4, #32]
 8005e32:	b14b      	cbz	r3, 8005e48 <_reclaim_reent+0xa4>
 8005e34:	4620      	mov	r0, r4
 8005e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005e3a:	4718      	bx	r3
 8005e3c:	680e      	ldr	r6, [r1, #0]
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 f878 	bl	8005f34 <_free_r>
 8005e44:	4631      	mov	r1, r6
 8005e46:	e7bb      	b.n	8005dc0 <_reclaim_reent+0x1c>
 8005e48:	bd70      	pop	{r4, r5, r6, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000054 	.word	0x20000054

08005e50 <_lseek_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d07      	ldr	r5, [pc, #28]	@ (8005e70 <_lseek_r+0x20>)
 8005e54:	4604      	mov	r4, r0
 8005e56:	4608      	mov	r0, r1
 8005e58:	4611      	mov	r1, r2
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	602a      	str	r2, [r5, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f7fb fc47 	bl	80016f2 <_lseek>
 8005e64:	1c43      	adds	r3, r0, #1
 8005e66:	d102      	bne.n	8005e6e <_lseek_r+0x1e>
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	b103      	cbz	r3, 8005e6e <_lseek_r+0x1e>
 8005e6c:	6023      	str	r3, [r4, #0]
 8005e6e:	bd38      	pop	{r3, r4, r5, pc}
 8005e70:	20004360 	.word	0x20004360

08005e74 <_read_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d07      	ldr	r5, [pc, #28]	@ (8005e94 <_read_r+0x20>)
 8005e78:	4604      	mov	r4, r0
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	2200      	movs	r2, #0
 8005e80:	602a      	str	r2, [r5, #0]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f7fb fc46 	bl	8001714 <_read>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_read_r+0x1e>
 8005e8c:	682b      	ldr	r3, [r5, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_read_r+0x1e>
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	20004360 	.word	0x20004360

08005e98 <_write_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4d07      	ldr	r5, [pc, #28]	@ (8005eb8 <_write_r+0x20>)
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	4608      	mov	r0, r1
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	602a      	str	r2, [r5, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f7fb fbe0 	bl	800166c <_write>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d102      	bne.n	8005eb6 <_write_r+0x1e>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	b103      	cbz	r3, 8005eb6 <_write_r+0x1e>
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
 8005eb8:	20004360 	.word	0x20004360

08005ebc <__errno>:
 8005ebc:	4b01      	ldr	r3, [pc, #4]	@ (8005ec4 <__errno+0x8>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000054 	.word	0x20000054

08005ec8 <__libc_init_array>:
 8005ec8:	b570      	push	{r4, r5, r6, lr}
 8005eca:	4d0d      	ldr	r5, [pc, #52]	@ (8005f00 <__libc_init_array+0x38>)
 8005ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8005f04 <__libc_init_array+0x3c>)
 8005ece:	1b64      	subs	r4, r4, r5
 8005ed0:	10a4      	asrs	r4, r4, #2
 8005ed2:	2600      	movs	r6, #0
 8005ed4:	42a6      	cmp	r6, r4
 8005ed6:	d109      	bne.n	8005eec <__libc_init_array+0x24>
 8005ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8005f08 <__libc_init_array+0x40>)
 8005eda:	4c0c      	ldr	r4, [pc, #48]	@ (8005f0c <__libc_init_array+0x44>)
 8005edc:	f000 fd32 	bl	8006944 <_init>
 8005ee0:	1b64      	subs	r4, r4, r5
 8005ee2:	10a4      	asrs	r4, r4, #2
 8005ee4:	2600      	movs	r6, #0
 8005ee6:	42a6      	cmp	r6, r4
 8005ee8:	d105      	bne.n	8005ef6 <__libc_init_array+0x2e>
 8005eea:	bd70      	pop	{r4, r5, r6, pc}
 8005eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef0:	4798      	blx	r3
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7ee      	b.n	8005ed4 <__libc_init_array+0xc>
 8005ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005efa:	4798      	blx	r3
 8005efc:	3601      	adds	r6, #1
 8005efe:	e7f2      	b.n	8005ee6 <__libc_init_array+0x1e>
 8005f00:	08006b04 	.word	0x08006b04
 8005f04:	08006b04 	.word	0x08006b04
 8005f08:	08006b04 	.word	0x08006b04
 8005f0c:	08006b08 	.word	0x08006b08

08005f10 <__retarget_lock_init_recursive>:
 8005f10:	4770      	bx	lr

08005f12 <__retarget_lock_acquire_recursive>:
 8005f12:	4770      	bx	lr

08005f14 <__retarget_lock_release_recursive>:
 8005f14:	4770      	bx	lr

08005f16 <memcpy>:
 8005f16:	440a      	add	r2, r1
 8005f18:	4291      	cmp	r1, r2
 8005f1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f1e:	d100      	bne.n	8005f22 <memcpy+0xc>
 8005f20:	4770      	bx	lr
 8005f22:	b510      	push	{r4, lr}
 8005f24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f2c:	4291      	cmp	r1, r2
 8005f2e:	d1f9      	bne.n	8005f24 <memcpy+0xe>
 8005f30:	bd10      	pop	{r4, pc}
	...

08005f34 <_free_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4605      	mov	r5, r0
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	d041      	beq.n	8005fc0 <_free_r+0x8c>
 8005f3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f40:	1f0c      	subs	r4, r1, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	bfb8      	it	lt
 8005f46:	18e4      	addlt	r4, r4, r3
 8005f48:	f000 f8e0 	bl	800610c <__malloc_lock>
 8005f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc4 <_free_r+0x90>)
 8005f4e:	6813      	ldr	r3, [r2, #0]
 8005f50:	b933      	cbnz	r3, 8005f60 <_free_r+0x2c>
 8005f52:	6063      	str	r3, [r4, #4]
 8005f54:	6014      	str	r4, [r2, #0]
 8005f56:	4628      	mov	r0, r5
 8005f58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f5c:	f000 b8dc 	b.w	8006118 <__malloc_unlock>
 8005f60:	42a3      	cmp	r3, r4
 8005f62:	d908      	bls.n	8005f76 <_free_r+0x42>
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	1821      	adds	r1, r4, r0
 8005f68:	428b      	cmp	r3, r1
 8005f6a:	bf01      	itttt	eq
 8005f6c:	6819      	ldreq	r1, [r3, #0]
 8005f6e:	685b      	ldreq	r3, [r3, #4]
 8005f70:	1809      	addeq	r1, r1, r0
 8005f72:	6021      	streq	r1, [r4, #0]
 8005f74:	e7ed      	b.n	8005f52 <_free_r+0x1e>
 8005f76:	461a      	mov	r2, r3
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	b10b      	cbz	r3, 8005f80 <_free_r+0x4c>
 8005f7c:	42a3      	cmp	r3, r4
 8005f7e:	d9fa      	bls.n	8005f76 <_free_r+0x42>
 8005f80:	6811      	ldr	r1, [r2, #0]
 8005f82:	1850      	adds	r0, r2, r1
 8005f84:	42a0      	cmp	r0, r4
 8005f86:	d10b      	bne.n	8005fa0 <_free_r+0x6c>
 8005f88:	6820      	ldr	r0, [r4, #0]
 8005f8a:	4401      	add	r1, r0
 8005f8c:	1850      	adds	r0, r2, r1
 8005f8e:	4283      	cmp	r3, r0
 8005f90:	6011      	str	r1, [r2, #0]
 8005f92:	d1e0      	bne.n	8005f56 <_free_r+0x22>
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	6053      	str	r3, [r2, #4]
 8005f9a:	4408      	add	r0, r1
 8005f9c:	6010      	str	r0, [r2, #0]
 8005f9e:	e7da      	b.n	8005f56 <_free_r+0x22>
 8005fa0:	d902      	bls.n	8005fa8 <_free_r+0x74>
 8005fa2:	230c      	movs	r3, #12
 8005fa4:	602b      	str	r3, [r5, #0]
 8005fa6:	e7d6      	b.n	8005f56 <_free_r+0x22>
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	1821      	adds	r1, r4, r0
 8005fac:	428b      	cmp	r3, r1
 8005fae:	bf04      	itt	eq
 8005fb0:	6819      	ldreq	r1, [r3, #0]
 8005fb2:	685b      	ldreq	r3, [r3, #4]
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	bf04      	itt	eq
 8005fb8:	1809      	addeq	r1, r1, r0
 8005fba:	6021      	streq	r1, [r4, #0]
 8005fbc:	6054      	str	r4, [r2, #4]
 8005fbe:	e7ca      	b.n	8005f56 <_free_r+0x22>
 8005fc0:	bd38      	pop	{r3, r4, r5, pc}
 8005fc2:	bf00      	nop
 8005fc4:	2000436c 	.word	0x2000436c

08005fc8 <sbrk_aligned>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	4e0f      	ldr	r6, [pc, #60]	@ (8006008 <sbrk_aligned+0x40>)
 8005fcc:	460c      	mov	r4, r1
 8005fce:	6831      	ldr	r1, [r6, #0]
 8005fd0:	4605      	mov	r5, r0
 8005fd2:	b911      	cbnz	r1, 8005fda <sbrk_aligned+0x12>
 8005fd4:	f000 fca6 	bl	8006924 <_sbrk_r>
 8005fd8:	6030      	str	r0, [r6, #0]
 8005fda:	4621      	mov	r1, r4
 8005fdc:	4628      	mov	r0, r5
 8005fde:	f000 fca1 	bl	8006924 <_sbrk_r>
 8005fe2:	1c43      	adds	r3, r0, #1
 8005fe4:	d103      	bne.n	8005fee <sbrk_aligned+0x26>
 8005fe6:	f04f 34ff 	mov.w	r4, #4294967295
 8005fea:	4620      	mov	r0, r4
 8005fec:	bd70      	pop	{r4, r5, r6, pc}
 8005fee:	1cc4      	adds	r4, r0, #3
 8005ff0:	f024 0403 	bic.w	r4, r4, #3
 8005ff4:	42a0      	cmp	r0, r4
 8005ff6:	d0f8      	beq.n	8005fea <sbrk_aligned+0x22>
 8005ff8:	1a21      	subs	r1, r4, r0
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 fc92 	bl	8006924 <_sbrk_r>
 8006000:	3001      	adds	r0, #1
 8006002:	d1f2      	bne.n	8005fea <sbrk_aligned+0x22>
 8006004:	e7ef      	b.n	8005fe6 <sbrk_aligned+0x1e>
 8006006:	bf00      	nop
 8006008:	20004368 	.word	0x20004368

0800600c <_malloc_r>:
 800600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006010:	1ccd      	adds	r5, r1, #3
 8006012:	f025 0503 	bic.w	r5, r5, #3
 8006016:	3508      	adds	r5, #8
 8006018:	2d0c      	cmp	r5, #12
 800601a:	bf38      	it	cc
 800601c:	250c      	movcc	r5, #12
 800601e:	2d00      	cmp	r5, #0
 8006020:	4606      	mov	r6, r0
 8006022:	db01      	blt.n	8006028 <_malloc_r+0x1c>
 8006024:	42a9      	cmp	r1, r5
 8006026:	d904      	bls.n	8006032 <_malloc_r+0x26>
 8006028:	230c      	movs	r3, #12
 800602a:	6033      	str	r3, [r6, #0]
 800602c:	2000      	movs	r0, #0
 800602e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006032:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006108 <_malloc_r+0xfc>
 8006036:	f000 f869 	bl	800610c <__malloc_lock>
 800603a:	f8d8 3000 	ldr.w	r3, [r8]
 800603e:	461c      	mov	r4, r3
 8006040:	bb44      	cbnz	r4, 8006094 <_malloc_r+0x88>
 8006042:	4629      	mov	r1, r5
 8006044:	4630      	mov	r0, r6
 8006046:	f7ff ffbf 	bl	8005fc8 <sbrk_aligned>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	4604      	mov	r4, r0
 800604e:	d158      	bne.n	8006102 <_malloc_r+0xf6>
 8006050:	f8d8 4000 	ldr.w	r4, [r8]
 8006054:	4627      	mov	r7, r4
 8006056:	2f00      	cmp	r7, #0
 8006058:	d143      	bne.n	80060e2 <_malloc_r+0xd6>
 800605a:	2c00      	cmp	r4, #0
 800605c:	d04b      	beq.n	80060f6 <_malloc_r+0xea>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	4639      	mov	r1, r7
 8006062:	4630      	mov	r0, r6
 8006064:	eb04 0903 	add.w	r9, r4, r3
 8006068:	f000 fc5c 	bl	8006924 <_sbrk_r>
 800606c:	4581      	cmp	r9, r0
 800606e:	d142      	bne.n	80060f6 <_malloc_r+0xea>
 8006070:	6821      	ldr	r1, [r4, #0]
 8006072:	1a6d      	subs	r5, r5, r1
 8006074:	4629      	mov	r1, r5
 8006076:	4630      	mov	r0, r6
 8006078:	f7ff ffa6 	bl	8005fc8 <sbrk_aligned>
 800607c:	3001      	adds	r0, #1
 800607e:	d03a      	beq.n	80060f6 <_malloc_r+0xea>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	442b      	add	r3, r5
 8006084:	6023      	str	r3, [r4, #0]
 8006086:	f8d8 3000 	ldr.w	r3, [r8]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	bb62      	cbnz	r2, 80060e8 <_malloc_r+0xdc>
 800608e:	f8c8 7000 	str.w	r7, [r8]
 8006092:	e00f      	b.n	80060b4 <_malloc_r+0xa8>
 8006094:	6822      	ldr	r2, [r4, #0]
 8006096:	1b52      	subs	r2, r2, r5
 8006098:	d420      	bmi.n	80060dc <_malloc_r+0xd0>
 800609a:	2a0b      	cmp	r2, #11
 800609c:	d917      	bls.n	80060ce <_malloc_r+0xc2>
 800609e:	1961      	adds	r1, r4, r5
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	6025      	str	r5, [r4, #0]
 80060a4:	bf18      	it	ne
 80060a6:	6059      	strne	r1, [r3, #4]
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	bf08      	it	eq
 80060ac:	f8c8 1000 	streq.w	r1, [r8]
 80060b0:	5162      	str	r2, [r4, r5]
 80060b2:	604b      	str	r3, [r1, #4]
 80060b4:	4630      	mov	r0, r6
 80060b6:	f000 f82f 	bl	8006118 <__malloc_unlock>
 80060ba:	f104 000b 	add.w	r0, r4, #11
 80060be:	1d23      	adds	r3, r4, #4
 80060c0:	f020 0007 	bic.w	r0, r0, #7
 80060c4:	1ac2      	subs	r2, r0, r3
 80060c6:	bf1c      	itt	ne
 80060c8:	1a1b      	subne	r3, r3, r0
 80060ca:	50a3      	strne	r3, [r4, r2]
 80060cc:	e7af      	b.n	800602e <_malloc_r+0x22>
 80060ce:	6862      	ldr	r2, [r4, #4]
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	bf0c      	ite	eq
 80060d4:	f8c8 2000 	streq.w	r2, [r8]
 80060d8:	605a      	strne	r2, [r3, #4]
 80060da:	e7eb      	b.n	80060b4 <_malloc_r+0xa8>
 80060dc:	4623      	mov	r3, r4
 80060de:	6864      	ldr	r4, [r4, #4]
 80060e0:	e7ae      	b.n	8006040 <_malloc_r+0x34>
 80060e2:	463c      	mov	r4, r7
 80060e4:	687f      	ldr	r7, [r7, #4]
 80060e6:	e7b6      	b.n	8006056 <_malloc_r+0x4a>
 80060e8:	461a      	mov	r2, r3
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	d1fb      	bne.n	80060e8 <_malloc_r+0xdc>
 80060f0:	2300      	movs	r3, #0
 80060f2:	6053      	str	r3, [r2, #4]
 80060f4:	e7de      	b.n	80060b4 <_malloc_r+0xa8>
 80060f6:	230c      	movs	r3, #12
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	4630      	mov	r0, r6
 80060fc:	f000 f80c 	bl	8006118 <__malloc_unlock>
 8006100:	e794      	b.n	800602c <_malloc_r+0x20>
 8006102:	6005      	str	r5, [r0, #0]
 8006104:	e7d6      	b.n	80060b4 <_malloc_r+0xa8>
 8006106:	bf00      	nop
 8006108:	2000436c 	.word	0x2000436c

0800610c <__malloc_lock>:
 800610c:	4801      	ldr	r0, [pc, #4]	@ (8006114 <__malloc_lock+0x8>)
 800610e:	f7ff bf00 	b.w	8005f12 <__retarget_lock_acquire_recursive>
 8006112:	bf00      	nop
 8006114:	20004364 	.word	0x20004364

08006118 <__malloc_unlock>:
 8006118:	4801      	ldr	r0, [pc, #4]	@ (8006120 <__malloc_unlock+0x8>)
 800611a:	f7ff befb 	b.w	8005f14 <__retarget_lock_release_recursive>
 800611e:	bf00      	nop
 8006120:	20004364 	.word	0x20004364

08006124 <__sfputc_r>:
 8006124:	6893      	ldr	r3, [r2, #8]
 8006126:	3b01      	subs	r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	b410      	push	{r4}
 800612c:	6093      	str	r3, [r2, #8]
 800612e:	da08      	bge.n	8006142 <__sfputc_r+0x1e>
 8006130:	6994      	ldr	r4, [r2, #24]
 8006132:	42a3      	cmp	r3, r4
 8006134:	db01      	blt.n	800613a <__sfputc_r+0x16>
 8006136:	290a      	cmp	r1, #10
 8006138:	d103      	bne.n	8006142 <__sfputc_r+0x1e>
 800613a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800613e:	f7ff bd84 	b.w	8005c4a <__swbuf_r>
 8006142:	6813      	ldr	r3, [r2, #0]
 8006144:	1c58      	adds	r0, r3, #1
 8006146:	6010      	str	r0, [r2, #0]
 8006148:	7019      	strb	r1, [r3, #0]
 800614a:	4608      	mov	r0, r1
 800614c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006150:	4770      	bx	lr

08006152 <__sfputs_r>:
 8006152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006154:	4606      	mov	r6, r0
 8006156:	460f      	mov	r7, r1
 8006158:	4614      	mov	r4, r2
 800615a:	18d5      	adds	r5, r2, r3
 800615c:	42ac      	cmp	r4, r5
 800615e:	d101      	bne.n	8006164 <__sfputs_r+0x12>
 8006160:	2000      	movs	r0, #0
 8006162:	e007      	b.n	8006174 <__sfputs_r+0x22>
 8006164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006168:	463a      	mov	r2, r7
 800616a:	4630      	mov	r0, r6
 800616c:	f7ff ffda 	bl	8006124 <__sfputc_r>
 8006170:	1c43      	adds	r3, r0, #1
 8006172:	d1f3      	bne.n	800615c <__sfputs_r+0xa>
 8006174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006178 <_vfiprintf_r>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	460d      	mov	r5, r1
 800617e:	b09d      	sub	sp, #116	@ 0x74
 8006180:	4614      	mov	r4, r2
 8006182:	4698      	mov	r8, r3
 8006184:	4606      	mov	r6, r0
 8006186:	b118      	cbz	r0, 8006190 <_vfiprintf_r+0x18>
 8006188:	6a03      	ldr	r3, [r0, #32]
 800618a:	b90b      	cbnz	r3, 8006190 <_vfiprintf_r+0x18>
 800618c:	f7ff fbf2 	bl	8005974 <__sinit>
 8006190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006192:	07d9      	lsls	r1, r3, #31
 8006194:	d405      	bmi.n	80061a2 <_vfiprintf_r+0x2a>
 8006196:	89ab      	ldrh	r3, [r5, #12]
 8006198:	059a      	lsls	r2, r3, #22
 800619a:	d402      	bmi.n	80061a2 <_vfiprintf_r+0x2a>
 800619c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800619e:	f7ff feb8 	bl	8005f12 <__retarget_lock_acquire_recursive>
 80061a2:	89ab      	ldrh	r3, [r5, #12]
 80061a4:	071b      	lsls	r3, r3, #28
 80061a6:	d501      	bpl.n	80061ac <_vfiprintf_r+0x34>
 80061a8:	692b      	ldr	r3, [r5, #16]
 80061aa:	b99b      	cbnz	r3, 80061d4 <_vfiprintf_r+0x5c>
 80061ac:	4629      	mov	r1, r5
 80061ae:	4630      	mov	r0, r6
 80061b0:	f7ff fd8a 	bl	8005cc8 <__swsetup_r>
 80061b4:	b170      	cbz	r0, 80061d4 <_vfiprintf_r+0x5c>
 80061b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061b8:	07dc      	lsls	r4, r3, #31
 80061ba:	d504      	bpl.n	80061c6 <_vfiprintf_r+0x4e>
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	b01d      	add	sp, #116	@ 0x74
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	89ab      	ldrh	r3, [r5, #12]
 80061c8:	0598      	lsls	r0, r3, #22
 80061ca:	d4f7      	bmi.n	80061bc <_vfiprintf_r+0x44>
 80061cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061ce:	f7ff fea1 	bl	8005f14 <__retarget_lock_release_recursive>
 80061d2:	e7f3      	b.n	80061bc <_vfiprintf_r+0x44>
 80061d4:	2300      	movs	r3, #0
 80061d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80061d8:	2320      	movs	r3, #32
 80061da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061de:	f8cd 800c 	str.w	r8, [sp, #12]
 80061e2:	2330      	movs	r3, #48	@ 0x30
 80061e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006394 <_vfiprintf_r+0x21c>
 80061e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061ec:	f04f 0901 	mov.w	r9, #1
 80061f0:	4623      	mov	r3, r4
 80061f2:	469a      	mov	sl, r3
 80061f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061f8:	b10a      	cbz	r2, 80061fe <_vfiprintf_r+0x86>
 80061fa:	2a25      	cmp	r2, #37	@ 0x25
 80061fc:	d1f9      	bne.n	80061f2 <_vfiprintf_r+0x7a>
 80061fe:	ebba 0b04 	subs.w	fp, sl, r4
 8006202:	d00b      	beq.n	800621c <_vfiprintf_r+0xa4>
 8006204:	465b      	mov	r3, fp
 8006206:	4622      	mov	r2, r4
 8006208:	4629      	mov	r1, r5
 800620a:	4630      	mov	r0, r6
 800620c:	f7ff ffa1 	bl	8006152 <__sfputs_r>
 8006210:	3001      	adds	r0, #1
 8006212:	f000 80a7 	beq.w	8006364 <_vfiprintf_r+0x1ec>
 8006216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006218:	445a      	add	r2, fp
 800621a:	9209      	str	r2, [sp, #36]	@ 0x24
 800621c:	f89a 3000 	ldrb.w	r3, [sl]
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 809f 	beq.w	8006364 <_vfiprintf_r+0x1ec>
 8006226:	2300      	movs	r3, #0
 8006228:	f04f 32ff 	mov.w	r2, #4294967295
 800622c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006230:	f10a 0a01 	add.w	sl, sl, #1
 8006234:	9304      	str	r3, [sp, #16]
 8006236:	9307      	str	r3, [sp, #28]
 8006238:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800623c:	931a      	str	r3, [sp, #104]	@ 0x68
 800623e:	4654      	mov	r4, sl
 8006240:	2205      	movs	r2, #5
 8006242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006246:	4853      	ldr	r0, [pc, #332]	@ (8006394 <_vfiprintf_r+0x21c>)
 8006248:	f7f9 ffca 	bl	80001e0 <memchr>
 800624c:	9a04      	ldr	r2, [sp, #16]
 800624e:	b9d8      	cbnz	r0, 8006288 <_vfiprintf_r+0x110>
 8006250:	06d1      	lsls	r1, r2, #27
 8006252:	bf44      	itt	mi
 8006254:	2320      	movmi	r3, #32
 8006256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800625a:	0713      	lsls	r3, r2, #28
 800625c:	bf44      	itt	mi
 800625e:	232b      	movmi	r3, #43	@ 0x2b
 8006260:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006264:	f89a 3000 	ldrb.w	r3, [sl]
 8006268:	2b2a      	cmp	r3, #42	@ 0x2a
 800626a:	d015      	beq.n	8006298 <_vfiprintf_r+0x120>
 800626c:	9a07      	ldr	r2, [sp, #28]
 800626e:	4654      	mov	r4, sl
 8006270:	2000      	movs	r0, #0
 8006272:	f04f 0c0a 	mov.w	ip, #10
 8006276:	4621      	mov	r1, r4
 8006278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800627c:	3b30      	subs	r3, #48	@ 0x30
 800627e:	2b09      	cmp	r3, #9
 8006280:	d94b      	bls.n	800631a <_vfiprintf_r+0x1a2>
 8006282:	b1b0      	cbz	r0, 80062b2 <_vfiprintf_r+0x13a>
 8006284:	9207      	str	r2, [sp, #28]
 8006286:	e014      	b.n	80062b2 <_vfiprintf_r+0x13a>
 8006288:	eba0 0308 	sub.w	r3, r0, r8
 800628c:	fa09 f303 	lsl.w	r3, r9, r3
 8006290:	4313      	orrs	r3, r2
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	46a2      	mov	sl, r4
 8006296:	e7d2      	b.n	800623e <_vfiprintf_r+0xc6>
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	1d19      	adds	r1, r3, #4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	9103      	str	r1, [sp, #12]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bfbb      	ittet	lt
 80062a4:	425b      	neglt	r3, r3
 80062a6:	f042 0202 	orrlt.w	r2, r2, #2
 80062aa:	9307      	strge	r3, [sp, #28]
 80062ac:	9307      	strlt	r3, [sp, #28]
 80062ae:	bfb8      	it	lt
 80062b0:	9204      	strlt	r2, [sp, #16]
 80062b2:	7823      	ldrb	r3, [r4, #0]
 80062b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80062b6:	d10a      	bne.n	80062ce <_vfiprintf_r+0x156>
 80062b8:	7863      	ldrb	r3, [r4, #1]
 80062ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80062bc:	d132      	bne.n	8006324 <_vfiprintf_r+0x1ac>
 80062be:	9b03      	ldr	r3, [sp, #12]
 80062c0:	1d1a      	adds	r2, r3, #4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	9203      	str	r2, [sp, #12]
 80062c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062ca:	3402      	adds	r4, #2
 80062cc:	9305      	str	r3, [sp, #20]
 80062ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80063a4 <_vfiprintf_r+0x22c>
 80062d2:	7821      	ldrb	r1, [r4, #0]
 80062d4:	2203      	movs	r2, #3
 80062d6:	4650      	mov	r0, sl
 80062d8:	f7f9 ff82 	bl	80001e0 <memchr>
 80062dc:	b138      	cbz	r0, 80062ee <_vfiprintf_r+0x176>
 80062de:	9b04      	ldr	r3, [sp, #16]
 80062e0:	eba0 000a 	sub.w	r0, r0, sl
 80062e4:	2240      	movs	r2, #64	@ 0x40
 80062e6:	4082      	lsls	r2, r0
 80062e8:	4313      	orrs	r3, r2
 80062ea:	3401      	adds	r4, #1
 80062ec:	9304      	str	r3, [sp, #16]
 80062ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f2:	4829      	ldr	r0, [pc, #164]	@ (8006398 <_vfiprintf_r+0x220>)
 80062f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062f8:	2206      	movs	r2, #6
 80062fa:	f7f9 ff71 	bl	80001e0 <memchr>
 80062fe:	2800      	cmp	r0, #0
 8006300:	d03f      	beq.n	8006382 <_vfiprintf_r+0x20a>
 8006302:	4b26      	ldr	r3, [pc, #152]	@ (800639c <_vfiprintf_r+0x224>)
 8006304:	bb1b      	cbnz	r3, 800634e <_vfiprintf_r+0x1d6>
 8006306:	9b03      	ldr	r3, [sp, #12]
 8006308:	3307      	adds	r3, #7
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	3308      	adds	r3, #8
 8006310:	9303      	str	r3, [sp, #12]
 8006312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006314:	443b      	add	r3, r7
 8006316:	9309      	str	r3, [sp, #36]	@ 0x24
 8006318:	e76a      	b.n	80061f0 <_vfiprintf_r+0x78>
 800631a:	fb0c 3202 	mla	r2, ip, r2, r3
 800631e:	460c      	mov	r4, r1
 8006320:	2001      	movs	r0, #1
 8006322:	e7a8      	b.n	8006276 <_vfiprintf_r+0xfe>
 8006324:	2300      	movs	r3, #0
 8006326:	3401      	adds	r4, #1
 8006328:	9305      	str	r3, [sp, #20]
 800632a:	4619      	mov	r1, r3
 800632c:	f04f 0c0a 	mov.w	ip, #10
 8006330:	4620      	mov	r0, r4
 8006332:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006336:	3a30      	subs	r2, #48	@ 0x30
 8006338:	2a09      	cmp	r2, #9
 800633a:	d903      	bls.n	8006344 <_vfiprintf_r+0x1cc>
 800633c:	2b00      	cmp	r3, #0
 800633e:	d0c6      	beq.n	80062ce <_vfiprintf_r+0x156>
 8006340:	9105      	str	r1, [sp, #20]
 8006342:	e7c4      	b.n	80062ce <_vfiprintf_r+0x156>
 8006344:	fb0c 2101 	mla	r1, ip, r1, r2
 8006348:	4604      	mov	r4, r0
 800634a:	2301      	movs	r3, #1
 800634c:	e7f0      	b.n	8006330 <_vfiprintf_r+0x1b8>
 800634e:	ab03      	add	r3, sp, #12
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	462a      	mov	r2, r5
 8006354:	4b12      	ldr	r3, [pc, #72]	@ (80063a0 <_vfiprintf_r+0x228>)
 8006356:	a904      	add	r1, sp, #16
 8006358:	4630      	mov	r0, r6
 800635a:	f3af 8000 	nop.w
 800635e:	4607      	mov	r7, r0
 8006360:	1c78      	adds	r0, r7, #1
 8006362:	d1d6      	bne.n	8006312 <_vfiprintf_r+0x19a>
 8006364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006366:	07d9      	lsls	r1, r3, #31
 8006368:	d405      	bmi.n	8006376 <_vfiprintf_r+0x1fe>
 800636a:	89ab      	ldrh	r3, [r5, #12]
 800636c:	059a      	lsls	r2, r3, #22
 800636e:	d402      	bmi.n	8006376 <_vfiprintf_r+0x1fe>
 8006370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006372:	f7ff fdcf 	bl	8005f14 <__retarget_lock_release_recursive>
 8006376:	89ab      	ldrh	r3, [r5, #12]
 8006378:	065b      	lsls	r3, r3, #25
 800637a:	f53f af1f 	bmi.w	80061bc <_vfiprintf_r+0x44>
 800637e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006380:	e71e      	b.n	80061c0 <_vfiprintf_r+0x48>
 8006382:	ab03      	add	r3, sp, #12
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	462a      	mov	r2, r5
 8006388:	4b05      	ldr	r3, [pc, #20]	@ (80063a0 <_vfiprintf_r+0x228>)
 800638a:	a904      	add	r1, sp, #16
 800638c:	4630      	mov	r0, r6
 800638e:	f000 f879 	bl	8006484 <_printf_i>
 8006392:	e7e4      	b.n	800635e <_vfiprintf_r+0x1e6>
 8006394:	08006ac8 	.word	0x08006ac8
 8006398:	08006ad2 	.word	0x08006ad2
 800639c:	00000000 	.word	0x00000000
 80063a0:	08006153 	.word	0x08006153
 80063a4:	08006ace 	.word	0x08006ace

080063a8 <_printf_common>:
 80063a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	4616      	mov	r6, r2
 80063ae:	4698      	mov	r8, r3
 80063b0:	688a      	ldr	r2, [r1, #8]
 80063b2:	690b      	ldr	r3, [r1, #16]
 80063b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	bfb8      	it	lt
 80063bc:	4613      	movlt	r3, r2
 80063be:	6033      	str	r3, [r6, #0]
 80063c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063c4:	4607      	mov	r7, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	b10a      	cbz	r2, 80063ce <_printf_common+0x26>
 80063ca:	3301      	adds	r3, #1
 80063cc:	6033      	str	r3, [r6, #0]
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	0699      	lsls	r1, r3, #26
 80063d2:	bf42      	ittt	mi
 80063d4:	6833      	ldrmi	r3, [r6, #0]
 80063d6:	3302      	addmi	r3, #2
 80063d8:	6033      	strmi	r3, [r6, #0]
 80063da:	6825      	ldr	r5, [r4, #0]
 80063dc:	f015 0506 	ands.w	r5, r5, #6
 80063e0:	d106      	bne.n	80063f0 <_printf_common+0x48>
 80063e2:	f104 0a19 	add.w	sl, r4, #25
 80063e6:	68e3      	ldr	r3, [r4, #12]
 80063e8:	6832      	ldr	r2, [r6, #0]
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	42ab      	cmp	r3, r5
 80063ee:	dc26      	bgt.n	800643e <_printf_common+0x96>
 80063f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	3b00      	subs	r3, #0
 80063f8:	bf18      	it	ne
 80063fa:	2301      	movne	r3, #1
 80063fc:	0692      	lsls	r2, r2, #26
 80063fe:	d42b      	bmi.n	8006458 <_printf_common+0xb0>
 8006400:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006404:	4641      	mov	r1, r8
 8006406:	4638      	mov	r0, r7
 8006408:	47c8      	blx	r9
 800640a:	3001      	adds	r0, #1
 800640c:	d01e      	beq.n	800644c <_printf_common+0xa4>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	6922      	ldr	r2, [r4, #16]
 8006412:	f003 0306 	and.w	r3, r3, #6
 8006416:	2b04      	cmp	r3, #4
 8006418:	bf02      	ittt	eq
 800641a:	68e5      	ldreq	r5, [r4, #12]
 800641c:	6833      	ldreq	r3, [r6, #0]
 800641e:	1aed      	subeq	r5, r5, r3
 8006420:	68a3      	ldr	r3, [r4, #8]
 8006422:	bf0c      	ite	eq
 8006424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006428:	2500      	movne	r5, #0
 800642a:	4293      	cmp	r3, r2
 800642c:	bfc4      	itt	gt
 800642e:	1a9b      	subgt	r3, r3, r2
 8006430:	18ed      	addgt	r5, r5, r3
 8006432:	2600      	movs	r6, #0
 8006434:	341a      	adds	r4, #26
 8006436:	42b5      	cmp	r5, r6
 8006438:	d11a      	bne.n	8006470 <_printf_common+0xc8>
 800643a:	2000      	movs	r0, #0
 800643c:	e008      	b.n	8006450 <_printf_common+0xa8>
 800643e:	2301      	movs	r3, #1
 8006440:	4652      	mov	r2, sl
 8006442:	4641      	mov	r1, r8
 8006444:	4638      	mov	r0, r7
 8006446:	47c8      	blx	r9
 8006448:	3001      	adds	r0, #1
 800644a:	d103      	bne.n	8006454 <_printf_common+0xac>
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006454:	3501      	adds	r5, #1
 8006456:	e7c6      	b.n	80063e6 <_printf_common+0x3e>
 8006458:	18e1      	adds	r1, r4, r3
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	2030      	movs	r0, #48	@ 0x30
 800645e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006462:	4422      	add	r2, r4
 8006464:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006468:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800646c:	3302      	adds	r3, #2
 800646e:	e7c7      	b.n	8006400 <_printf_common+0x58>
 8006470:	2301      	movs	r3, #1
 8006472:	4622      	mov	r2, r4
 8006474:	4641      	mov	r1, r8
 8006476:	4638      	mov	r0, r7
 8006478:	47c8      	blx	r9
 800647a:	3001      	adds	r0, #1
 800647c:	d0e6      	beq.n	800644c <_printf_common+0xa4>
 800647e:	3601      	adds	r6, #1
 8006480:	e7d9      	b.n	8006436 <_printf_common+0x8e>
	...

08006484 <_printf_i>:
 8006484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006488:	7e0f      	ldrb	r7, [r1, #24]
 800648a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800648c:	2f78      	cmp	r7, #120	@ 0x78
 800648e:	4691      	mov	r9, r2
 8006490:	4680      	mov	r8, r0
 8006492:	460c      	mov	r4, r1
 8006494:	469a      	mov	sl, r3
 8006496:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800649a:	d807      	bhi.n	80064ac <_printf_i+0x28>
 800649c:	2f62      	cmp	r7, #98	@ 0x62
 800649e:	d80a      	bhi.n	80064b6 <_printf_i+0x32>
 80064a0:	2f00      	cmp	r7, #0
 80064a2:	f000 80d2 	beq.w	800664a <_printf_i+0x1c6>
 80064a6:	2f58      	cmp	r7, #88	@ 0x58
 80064a8:	f000 80b9 	beq.w	800661e <_printf_i+0x19a>
 80064ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064b4:	e03a      	b.n	800652c <_printf_i+0xa8>
 80064b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064ba:	2b15      	cmp	r3, #21
 80064bc:	d8f6      	bhi.n	80064ac <_printf_i+0x28>
 80064be:	a101      	add	r1, pc, #4	@ (adr r1, 80064c4 <_printf_i+0x40>)
 80064c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064c4:	0800651d 	.word	0x0800651d
 80064c8:	08006531 	.word	0x08006531
 80064cc:	080064ad 	.word	0x080064ad
 80064d0:	080064ad 	.word	0x080064ad
 80064d4:	080064ad 	.word	0x080064ad
 80064d8:	080064ad 	.word	0x080064ad
 80064dc:	08006531 	.word	0x08006531
 80064e0:	080064ad 	.word	0x080064ad
 80064e4:	080064ad 	.word	0x080064ad
 80064e8:	080064ad 	.word	0x080064ad
 80064ec:	080064ad 	.word	0x080064ad
 80064f0:	08006631 	.word	0x08006631
 80064f4:	0800655b 	.word	0x0800655b
 80064f8:	080065eb 	.word	0x080065eb
 80064fc:	080064ad 	.word	0x080064ad
 8006500:	080064ad 	.word	0x080064ad
 8006504:	08006653 	.word	0x08006653
 8006508:	080064ad 	.word	0x080064ad
 800650c:	0800655b 	.word	0x0800655b
 8006510:	080064ad 	.word	0x080064ad
 8006514:	080064ad 	.word	0x080064ad
 8006518:	080065f3 	.word	0x080065f3
 800651c:	6833      	ldr	r3, [r6, #0]
 800651e:	1d1a      	adds	r2, r3, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6032      	str	r2, [r6, #0]
 8006524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006528:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800652c:	2301      	movs	r3, #1
 800652e:	e09d      	b.n	800666c <_printf_i+0x1e8>
 8006530:	6833      	ldr	r3, [r6, #0]
 8006532:	6820      	ldr	r0, [r4, #0]
 8006534:	1d19      	adds	r1, r3, #4
 8006536:	6031      	str	r1, [r6, #0]
 8006538:	0606      	lsls	r6, r0, #24
 800653a:	d501      	bpl.n	8006540 <_printf_i+0xbc>
 800653c:	681d      	ldr	r5, [r3, #0]
 800653e:	e003      	b.n	8006548 <_printf_i+0xc4>
 8006540:	0645      	lsls	r5, r0, #25
 8006542:	d5fb      	bpl.n	800653c <_printf_i+0xb8>
 8006544:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006548:	2d00      	cmp	r5, #0
 800654a:	da03      	bge.n	8006554 <_printf_i+0xd0>
 800654c:	232d      	movs	r3, #45	@ 0x2d
 800654e:	426d      	negs	r5, r5
 8006550:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006554:	4859      	ldr	r0, [pc, #356]	@ (80066bc <_printf_i+0x238>)
 8006556:	230a      	movs	r3, #10
 8006558:	e011      	b.n	800657e <_printf_i+0xfa>
 800655a:	6821      	ldr	r1, [r4, #0]
 800655c:	6833      	ldr	r3, [r6, #0]
 800655e:	0608      	lsls	r0, r1, #24
 8006560:	f853 5b04 	ldr.w	r5, [r3], #4
 8006564:	d402      	bmi.n	800656c <_printf_i+0xe8>
 8006566:	0649      	lsls	r1, r1, #25
 8006568:	bf48      	it	mi
 800656a:	b2ad      	uxthmi	r5, r5
 800656c:	2f6f      	cmp	r7, #111	@ 0x6f
 800656e:	4853      	ldr	r0, [pc, #332]	@ (80066bc <_printf_i+0x238>)
 8006570:	6033      	str	r3, [r6, #0]
 8006572:	bf14      	ite	ne
 8006574:	230a      	movne	r3, #10
 8006576:	2308      	moveq	r3, #8
 8006578:	2100      	movs	r1, #0
 800657a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800657e:	6866      	ldr	r6, [r4, #4]
 8006580:	60a6      	str	r6, [r4, #8]
 8006582:	2e00      	cmp	r6, #0
 8006584:	bfa2      	ittt	ge
 8006586:	6821      	ldrge	r1, [r4, #0]
 8006588:	f021 0104 	bicge.w	r1, r1, #4
 800658c:	6021      	strge	r1, [r4, #0]
 800658e:	b90d      	cbnz	r5, 8006594 <_printf_i+0x110>
 8006590:	2e00      	cmp	r6, #0
 8006592:	d04b      	beq.n	800662c <_printf_i+0x1a8>
 8006594:	4616      	mov	r6, r2
 8006596:	fbb5 f1f3 	udiv	r1, r5, r3
 800659a:	fb03 5711 	mls	r7, r3, r1, r5
 800659e:	5dc7      	ldrb	r7, [r0, r7]
 80065a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065a4:	462f      	mov	r7, r5
 80065a6:	42bb      	cmp	r3, r7
 80065a8:	460d      	mov	r5, r1
 80065aa:	d9f4      	bls.n	8006596 <_printf_i+0x112>
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d10b      	bne.n	80065c8 <_printf_i+0x144>
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	07df      	lsls	r7, r3, #31
 80065b4:	d508      	bpl.n	80065c8 <_printf_i+0x144>
 80065b6:	6923      	ldr	r3, [r4, #16]
 80065b8:	6861      	ldr	r1, [r4, #4]
 80065ba:	4299      	cmp	r1, r3
 80065bc:	bfde      	ittt	le
 80065be:	2330      	movle	r3, #48	@ 0x30
 80065c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065c8:	1b92      	subs	r2, r2, r6
 80065ca:	6122      	str	r2, [r4, #16]
 80065cc:	f8cd a000 	str.w	sl, [sp]
 80065d0:	464b      	mov	r3, r9
 80065d2:	aa03      	add	r2, sp, #12
 80065d4:	4621      	mov	r1, r4
 80065d6:	4640      	mov	r0, r8
 80065d8:	f7ff fee6 	bl	80063a8 <_printf_common>
 80065dc:	3001      	adds	r0, #1
 80065de:	d14a      	bne.n	8006676 <_printf_i+0x1f2>
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	b004      	add	sp, #16
 80065e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f043 0320 	orr.w	r3, r3, #32
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	4833      	ldr	r0, [pc, #204]	@ (80066c0 <_printf_i+0x23c>)
 80065f4:	2778      	movs	r7, #120	@ 0x78
 80065f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	6831      	ldr	r1, [r6, #0]
 80065fe:	061f      	lsls	r7, r3, #24
 8006600:	f851 5b04 	ldr.w	r5, [r1], #4
 8006604:	d402      	bmi.n	800660c <_printf_i+0x188>
 8006606:	065f      	lsls	r7, r3, #25
 8006608:	bf48      	it	mi
 800660a:	b2ad      	uxthmi	r5, r5
 800660c:	6031      	str	r1, [r6, #0]
 800660e:	07d9      	lsls	r1, r3, #31
 8006610:	bf44      	itt	mi
 8006612:	f043 0320 	orrmi.w	r3, r3, #32
 8006616:	6023      	strmi	r3, [r4, #0]
 8006618:	b11d      	cbz	r5, 8006622 <_printf_i+0x19e>
 800661a:	2310      	movs	r3, #16
 800661c:	e7ac      	b.n	8006578 <_printf_i+0xf4>
 800661e:	4827      	ldr	r0, [pc, #156]	@ (80066bc <_printf_i+0x238>)
 8006620:	e7e9      	b.n	80065f6 <_printf_i+0x172>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	f023 0320 	bic.w	r3, r3, #32
 8006628:	6023      	str	r3, [r4, #0]
 800662a:	e7f6      	b.n	800661a <_printf_i+0x196>
 800662c:	4616      	mov	r6, r2
 800662e:	e7bd      	b.n	80065ac <_printf_i+0x128>
 8006630:	6833      	ldr	r3, [r6, #0]
 8006632:	6825      	ldr	r5, [r4, #0]
 8006634:	6961      	ldr	r1, [r4, #20]
 8006636:	1d18      	adds	r0, r3, #4
 8006638:	6030      	str	r0, [r6, #0]
 800663a:	062e      	lsls	r6, r5, #24
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	d501      	bpl.n	8006644 <_printf_i+0x1c0>
 8006640:	6019      	str	r1, [r3, #0]
 8006642:	e002      	b.n	800664a <_printf_i+0x1c6>
 8006644:	0668      	lsls	r0, r5, #25
 8006646:	d5fb      	bpl.n	8006640 <_printf_i+0x1bc>
 8006648:	8019      	strh	r1, [r3, #0]
 800664a:	2300      	movs	r3, #0
 800664c:	6123      	str	r3, [r4, #16]
 800664e:	4616      	mov	r6, r2
 8006650:	e7bc      	b.n	80065cc <_printf_i+0x148>
 8006652:	6833      	ldr	r3, [r6, #0]
 8006654:	1d1a      	adds	r2, r3, #4
 8006656:	6032      	str	r2, [r6, #0]
 8006658:	681e      	ldr	r6, [r3, #0]
 800665a:	6862      	ldr	r2, [r4, #4]
 800665c:	2100      	movs	r1, #0
 800665e:	4630      	mov	r0, r6
 8006660:	f7f9 fdbe 	bl	80001e0 <memchr>
 8006664:	b108      	cbz	r0, 800666a <_printf_i+0x1e6>
 8006666:	1b80      	subs	r0, r0, r6
 8006668:	6060      	str	r0, [r4, #4]
 800666a:	6863      	ldr	r3, [r4, #4]
 800666c:	6123      	str	r3, [r4, #16]
 800666e:	2300      	movs	r3, #0
 8006670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006674:	e7aa      	b.n	80065cc <_printf_i+0x148>
 8006676:	6923      	ldr	r3, [r4, #16]
 8006678:	4632      	mov	r2, r6
 800667a:	4649      	mov	r1, r9
 800667c:	4640      	mov	r0, r8
 800667e:	47d0      	blx	sl
 8006680:	3001      	adds	r0, #1
 8006682:	d0ad      	beq.n	80065e0 <_printf_i+0x15c>
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	079b      	lsls	r3, r3, #30
 8006688:	d413      	bmi.n	80066b2 <_printf_i+0x22e>
 800668a:	68e0      	ldr	r0, [r4, #12]
 800668c:	9b03      	ldr	r3, [sp, #12]
 800668e:	4298      	cmp	r0, r3
 8006690:	bfb8      	it	lt
 8006692:	4618      	movlt	r0, r3
 8006694:	e7a6      	b.n	80065e4 <_printf_i+0x160>
 8006696:	2301      	movs	r3, #1
 8006698:	4632      	mov	r2, r6
 800669a:	4649      	mov	r1, r9
 800669c:	4640      	mov	r0, r8
 800669e:	47d0      	blx	sl
 80066a0:	3001      	adds	r0, #1
 80066a2:	d09d      	beq.n	80065e0 <_printf_i+0x15c>
 80066a4:	3501      	adds	r5, #1
 80066a6:	68e3      	ldr	r3, [r4, #12]
 80066a8:	9903      	ldr	r1, [sp, #12]
 80066aa:	1a5b      	subs	r3, r3, r1
 80066ac:	42ab      	cmp	r3, r5
 80066ae:	dcf2      	bgt.n	8006696 <_printf_i+0x212>
 80066b0:	e7eb      	b.n	800668a <_printf_i+0x206>
 80066b2:	2500      	movs	r5, #0
 80066b4:	f104 0619 	add.w	r6, r4, #25
 80066b8:	e7f5      	b.n	80066a6 <_printf_i+0x222>
 80066ba:	bf00      	nop
 80066bc:	08006ad9 	.word	0x08006ad9
 80066c0:	08006aea 	.word	0x08006aea

080066c4 <__sflush_r>:
 80066c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066cc:	0716      	lsls	r6, r2, #28
 80066ce:	4605      	mov	r5, r0
 80066d0:	460c      	mov	r4, r1
 80066d2:	d454      	bmi.n	800677e <__sflush_r+0xba>
 80066d4:	684b      	ldr	r3, [r1, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	dc02      	bgt.n	80066e0 <__sflush_r+0x1c>
 80066da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066dc:	2b00      	cmp	r3, #0
 80066de:	dd48      	ble.n	8006772 <__sflush_r+0xae>
 80066e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066e2:	2e00      	cmp	r6, #0
 80066e4:	d045      	beq.n	8006772 <__sflush_r+0xae>
 80066e6:	2300      	movs	r3, #0
 80066e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066ec:	682f      	ldr	r7, [r5, #0]
 80066ee:	6a21      	ldr	r1, [r4, #32]
 80066f0:	602b      	str	r3, [r5, #0]
 80066f2:	d030      	beq.n	8006756 <__sflush_r+0x92>
 80066f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066f6:	89a3      	ldrh	r3, [r4, #12]
 80066f8:	0759      	lsls	r1, r3, #29
 80066fa:	d505      	bpl.n	8006708 <__sflush_r+0x44>
 80066fc:	6863      	ldr	r3, [r4, #4]
 80066fe:	1ad2      	subs	r2, r2, r3
 8006700:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006702:	b10b      	cbz	r3, 8006708 <__sflush_r+0x44>
 8006704:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006706:	1ad2      	subs	r2, r2, r3
 8006708:	2300      	movs	r3, #0
 800670a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800670c:	6a21      	ldr	r1, [r4, #32]
 800670e:	4628      	mov	r0, r5
 8006710:	47b0      	blx	r6
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	d106      	bne.n	8006726 <__sflush_r+0x62>
 8006718:	6829      	ldr	r1, [r5, #0]
 800671a:	291d      	cmp	r1, #29
 800671c:	d82b      	bhi.n	8006776 <__sflush_r+0xb2>
 800671e:	4a2a      	ldr	r2, [pc, #168]	@ (80067c8 <__sflush_r+0x104>)
 8006720:	410a      	asrs	r2, r1
 8006722:	07d6      	lsls	r6, r2, #31
 8006724:	d427      	bmi.n	8006776 <__sflush_r+0xb2>
 8006726:	2200      	movs	r2, #0
 8006728:	6062      	str	r2, [r4, #4]
 800672a:	04d9      	lsls	r1, r3, #19
 800672c:	6922      	ldr	r2, [r4, #16]
 800672e:	6022      	str	r2, [r4, #0]
 8006730:	d504      	bpl.n	800673c <__sflush_r+0x78>
 8006732:	1c42      	adds	r2, r0, #1
 8006734:	d101      	bne.n	800673a <__sflush_r+0x76>
 8006736:	682b      	ldr	r3, [r5, #0]
 8006738:	b903      	cbnz	r3, 800673c <__sflush_r+0x78>
 800673a:	6560      	str	r0, [r4, #84]	@ 0x54
 800673c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800673e:	602f      	str	r7, [r5, #0]
 8006740:	b1b9      	cbz	r1, 8006772 <__sflush_r+0xae>
 8006742:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006746:	4299      	cmp	r1, r3
 8006748:	d002      	beq.n	8006750 <__sflush_r+0x8c>
 800674a:	4628      	mov	r0, r5
 800674c:	f7ff fbf2 	bl	8005f34 <_free_r>
 8006750:	2300      	movs	r3, #0
 8006752:	6363      	str	r3, [r4, #52]	@ 0x34
 8006754:	e00d      	b.n	8006772 <__sflush_r+0xae>
 8006756:	2301      	movs	r3, #1
 8006758:	4628      	mov	r0, r5
 800675a:	47b0      	blx	r6
 800675c:	4602      	mov	r2, r0
 800675e:	1c50      	adds	r0, r2, #1
 8006760:	d1c9      	bne.n	80066f6 <__sflush_r+0x32>
 8006762:	682b      	ldr	r3, [r5, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0c6      	beq.n	80066f6 <__sflush_r+0x32>
 8006768:	2b1d      	cmp	r3, #29
 800676a:	d001      	beq.n	8006770 <__sflush_r+0xac>
 800676c:	2b16      	cmp	r3, #22
 800676e:	d11e      	bne.n	80067ae <__sflush_r+0xea>
 8006770:	602f      	str	r7, [r5, #0]
 8006772:	2000      	movs	r0, #0
 8006774:	e022      	b.n	80067bc <__sflush_r+0xf8>
 8006776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800677a:	b21b      	sxth	r3, r3
 800677c:	e01b      	b.n	80067b6 <__sflush_r+0xf2>
 800677e:	690f      	ldr	r7, [r1, #16]
 8006780:	2f00      	cmp	r7, #0
 8006782:	d0f6      	beq.n	8006772 <__sflush_r+0xae>
 8006784:	0793      	lsls	r3, r2, #30
 8006786:	680e      	ldr	r6, [r1, #0]
 8006788:	bf08      	it	eq
 800678a:	694b      	ldreq	r3, [r1, #20]
 800678c:	600f      	str	r7, [r1, #0]
 800678e:	bf18      	it	ne
 8006790:	2300      	movne	r3, #0
 8006792:	eba6 0807 	sub.w	r8, r6, r7
 8006796:	608b      	str	r3, [r1, #8]
 8006798:	f1b8 0f00 	cmp.w	r8, #0
 800679c:	dde9      	ble.n	8006772 <__sflush_r+0xae>
 800679e:	6a21      	ldr	r1, [r4, #32]
 80067a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80067a2:	4643      	mov	r3, r8
 80067a4:	463a      	mov	r2, r7
 80067a6:	4628      	mov	r0, r5
 80067a8:	47b0      	blx	r6
 80067aa:	2800      	cmp	r0, #0
 80067ac:	dc08      	bgt.n	80067c0 <__sflush_r+0xfc>
 80067ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067c0:	4407      	add	r7, r0
 80067c2:	eba8 0800 	sub.w	r8, r8, r0
 80067c6:	e7e7      	b.n	8006798 <__sflush_r+0xd4>
 80067c8:	dfbffffe 	.word	0xdfbffffe

080067cc <_fflush_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	690b      	ldr	r3, [r1, #16]
 80067d0:	4605      	mov	r5, r0
 80067d2:	460c      	mov	r4, r1
 80067d4:	b913      	cbnz	r3, 80067dc <_fflush_r+0x10>
 80067d6:	2500      	movs	r5, #0
 80067d8:	4628      	mov	r0, r5
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	b118      	cbz	r0, 80067e6 <_fflush_r+0x1a>
 80067de:	6a03      	ldr	r3, [r0, #32]
 80067e0:	b90b      	cbnz	r3, 80067e6 <_fflush_r+0x1a>
 80067e2:	f7ff f8c7 	bl	8005974 <__sinit>
 80067e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0f3      	beq.n	80067d6 <_fflush_r+0xa>
 80067ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067f0:	07d0      	lsls	r0, r2, #31
 80067f2:	d404      	bmi.n	80067fe <_fflush_r+0x32>
 80067f4:	0599      	lsls	r1, r3, #22
 80067f6:	d402      	bmi.n	80067fe <_fflush_r+0x32>
 80067f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067fa:	f7ff fb8a 	bl	8005f12 <__retarget_lock_acquire_recursive>
 80067fe:	4628      	mov	r0, r5
 8006800:	4621      	mov	r1, r4
 8006802:	f7ff ff5f 	bl	80066c4 <__sflush_r>
 8006806:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006808:	07da      	lsls	r2, r3, #31
 800680a:	4605      	mov	r5, r0
 800680c:	d4e4      	bmi.n	80067d8 <_fflush_r+0xc>
 800680e:	89a3      	ldrh	r3, [r4, #12]
 8006810:	059b      	lsls	r3, r3, #22
 8006812:	d4e1      	bmi.n	80067d8 <_fflush_r+0xc>
 8006814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006816:	f7ff fb7d 	bl	8005f14 <__retarget_lock_release_recursive>
 800681a:	e7dd      	b.n	80067d8 <_fflush_r+0xc>

0800681c <__swhatbuf_r>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	460c      	mov	r4, r1
 8006820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006824:	2900      	cmp	r1, #0
 8006826:	b096      	sub	sp, #88	@ 0x58
 8006828:	4615      	mov	r5, r2
 800682a:	461e      	mov	r6, r3
 800682c:	da0d      	bge.n	800684a <__swhatbuf_r+0x2e>
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006834:	f04f 0100 	mov.w	r1, #0
 8006838:	bf14      	ite	ne
 800683a:	2340      	movne	r3, #64	@ 0x40
 800683c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006840:	2000      	movs	r0, #0
 8006842:	6031      	str	r1, [r6, #0]
 8006844:	602b      	str	r3, [r5, #0]
 8006846:	b016      	add	sp, #88	@ 0x58
 8006848:	bd70      	pop	{r4, r5, r6, pc}
 800684a:	466a      	mov	r2, sp
 800684c:	f000 f848 	bl	80068e0 <_fstat_r>
 8006850:	2800      	cmp	r0, #0
 8006852:	dbec      	blt.n	800682e <__swhatbuf_r+0x12>
 8006854:	9901      	ldr	r1, [sp, #4]
 8006856:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800685a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800685e:	4259      	negs	r1, r3
 8006860:	4159      	adcs	r1, r3
 8006862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006866:	e7eb      	b.n	8006840 <__swhatbuf_r+0x24>

08006868 <__smakebuf_r>:
 8006868:	898b      	ldrh	r3, [r1, #12]
 800686a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800686c:	079d      	lsls	r5, r3, #30
 800686e:	4606      	mov	r6, r0
 8006870:	460c      	mov	r4, r1
 8006872:	d507      	bpl.n	8006884 <__smakebuf_r+0x1c>
 8006874:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	2301      	movs	r3, #1
 800687e:	6163      	str	r3, [r4, #20]
 8006880:	b003      	add	sp, #12
 8006882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006884:	ab01      	add	r3, sp, #4
 8006886:	466a      	mov	r2, sp
 8006888:	f7ff ffc8 	bl	800681c <__swhatbuf_r>
 800688c:	9f00      	ldr	r7, [sp, #0]
 800688e:	4605      	mov	r5, r0
 8006890:	4639      	mov	r1, r7
 8006892:	4630      	mov	r0, r6
 8006894:	f7ff fbba 	bl	800600c <_malloc_r>
 8006898:	b948      	cbnz	r0, 80068ae <__smakebuf_r+0x46>
 800689a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800689e:	059a      	lsls	r2, r3, #22
 80068a0:	d4ee      	bmi.n	8006880 <__smakebuf_r+0x18>
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	f043 0302 	orr.w	r3, r3, #2
 80068aa:	81a3      	strh	r3, [r4, #12]
 80068ac:	e7e2      	b.n	8006874 <__smakebuf_r+0xc>
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	6020      	str	r0, [r4, #0]
 80068b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068b6:	81a3      	strh	r3, [r4, #12]
 80068b8:	9b01      	ldr	r3, [sp, #4]
 80068ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80068be:	b15b      	cbz	r3, 80068d8 <__smakebuf_r+0x70>
 80068c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068c4:	4630      	mov	r0, r6
 80068c6:	f000 f81d 	bl	8006904 <_isatty_r>
 80068ca:	b128      	cbz	r0, 80068d8 <__smakebuf_r+0x70>
 80068cc:	89a3      	ldrh	r3, [r4, #12]
 80068ce:	f023 0303 	bic.w	r3, r3, #3
 80068d2:	f043 0301 	orr.w	r3, r3, #1
 80068d6:	81a3      	strh	r3, [r4, #12]
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	431d      	orrs	r5, r3
 80068dc:	81a5      	strh	r5, [r4, #12]
 80068de:	e7cf      	b.n	8006880 <__smakebuf_r+0x18>

080068e0 <_fstat_r>:
 80068e0:	b538      	push	{r3, r4, r5, lr}
 80068e2:	4d07      	ldr	r5, [pc, #28]	@ (8006900 <_fstat_r+0x20>)
 80068e4:	2300      	movs	r3, #0
 80068e6:	4604      	mov	r4, r0
 80068e8:	4608      	mov	r0, r1
 80068ea:	4611      	mov	r1, r2
 80068ec:	602b      	str	r3, [r5, #0]
 80068ee:	f7fa ff39 	bl	8001764 <_fstat>
 80068f2:	1c43      	adds	r3, r0, #1
 80068f4:	d102      	bne.n	80068fc <_fstat_r+0x1c>
 80068f6:	682b      	ldr	r3, [r5, #0]
 80068f8:	b103      	cbz	r3, 80068fc <_fstat_r+0x1c>
 80068fa:	6023      	str	r3, [r4, #0]
 80068fc:	bd38      	pop	{r3, r4, r5, pc}
 80068fe:	bf00      	nop
 8006900:	20004360 	.word	0x20004360

08006904 <_isatty_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d06      	ldr	r5, [pc, #24]	@ (8006920 <_isatty_r+0x1c>)
 8006908:	2300      	movs	r3, #0
 800690a:	4604      	mov	r4, r0
 800690c:	4608      	mov	r0, r1
 800690e:	602b      	str	r3, [r5, #0]
 8006910:	f7fa fe96 	bl	8001640 <_isatty>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d102      	bne.n	800691e <_isatty_r+0x1a>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	b103      	cbz	r3, 800691e <_isatty_r+0x1a>
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	20004360 	.word	0x20004360

08006924 <_sbrk_r>:
 8006924:	b538      	push	{r3, r4, r5, lr}
 8006926:	4d06      	ldr	r5, [pc, #24]	@ (8006940 <_sbrk_r+0x1c>)
 8006928:	2300      	movs	r3, #0
 800692a:	4604      	mov	r4, r0
 800692c:	4608      	mov	r0, r1
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	f7fb f88e 	bl	8001a50 <_sbrk>
 8006934:	1c43      	adds	r3, r0, #1
 8006936:	d102      	bne.n	800693e <_sbrk_r+0x1a>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	b103      	cbz	r3, 800693e <_sbrk_r+0x1a>
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	bd38      	pop	{r3, r4, r5, pc}
 8006940:	20004360 	.word	0x20004360

08006944 <_init>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	bf00      	nop
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr

08006950 <_fini>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr
