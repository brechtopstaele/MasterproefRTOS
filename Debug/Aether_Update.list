
Aether_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007460  0800c000  0800c000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mysection    00000000  08004000  08004000  0000a074  2**0
                  CONTENTS
  3 .rodata       000004d8  08013460  08013460  00009460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08013938  08013938  0000a074  2**0
                  CONTENTS
  5 .ARM          00000008  08013938  08013938  00009938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08013940  08013940  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08013940  08013940  00009940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08013944  08013944  00009944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000074  20000000  08013948  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000042e4  20000074  080139bc  0000a074  2**2
                  ALLOC
 11 ._user_heap_stack 00000718  20004358  080139bc  0000a358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a9a  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003598  00000000  00000000  0001fb3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  000230d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec0  00000000  00000000  000243f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019c01  00000000  00000000  000252b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016f5c  00000000  00000000  0003eeb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099164  00000000  00000000  00055e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eef71  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005780  00000000  00000000  000eefb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000f4734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	@ (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	@ (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	@ (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000074 	.word	0x20000074
 800c01c:	00000000 	.word	0x00000000
 800c020:	08013448 	.word	0x08013448

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	@ (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	@ (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	@ (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000078 	.word	0x20000078
 800c03c:	08013448 	.word	0x08013448

0800c040 <memchr>:
 800c040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800c044:	2a10      	cmp	r2, #16
 800c046:	db2b      	blt.n	800c0a0 <memchr+0x60>
 800c048:	f010 0f07 	tst.w	r0, #7
 800c04c:	d008      	beq.n	800c060 <memchr+0x20>
 800c04e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c052:	3a01      	subs	r2, #1
 800c054:	428b      	cmp	r3, r1
 800c056:	d02d      	beq.n	800c0b4 <memchr+0x74>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	b342      	cbz	r2, 800c0b0 <memchr+0x70>
 800c05e:	d1f6      	bne.n	800c04e <memchr+0xe>
 800c060:	b4f0      	push	{r4, r5, r6, r7}
 800c062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c06a:	f022 0407 	bic.w	r4, r2, #7
 800c06e:	f07f 0700 	mvns.w	r7, #0
 800c072:	2300      	movs	r3, #0
 800c074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c078:	3c08      	subs	r4, #8
 800c07a:	ea85 0501 	eor.w	r5, r5, r1
 800c07e:	ea86 0601 	eor.w	r6, r6, r1
 800c082:	fa85 f547 	uadd8	r5, r5, r7
 800c086:	faa3 f587 	sel	r5, r3, r7
 800c08a:	fa86 f647 	uadd8	r6, r6, r7
 800c08e:	faa5 f687 	sel	r6, r5, r7
 800c092:	b98e      	cbnz	r6, 800c0b8 <memchr+0x78>
 800c094:	d1ee      	bne.n	800c074 <memchr+0x34>
 800c096:	bcf0      	pop	{r4, r5, r6, r7}
 800c098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800c09c:	f002 0207 	and.w	r2, r2, #7
 800c0a0:	b132      	cbz	r2, 800c0b0 <memchr+0x70>
 800c0a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0a6:	3a01      	subs	r2, #1
 800c0a8:	ea83 0301 	eor.w	r3, r3, r1
 800c0ac:	b113      	cbz	r3, 800c0b4 <memchr+0x74>
 800c0ae:	d1f8      	bne.n	800c0a2 <memchr+0x62>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	4770      	bx	lr
 800c0b4:	3801      	subs	r0, #1
 800c0b6:	4770      	bx	lr
 800c0b8:	2d00      	cmp	r5, #0
 800c0ba:	bf06      	itte	eq
 800c0bc:	4635      	moveq	r5, r6
 800c0be:	3803      	subeq	r0, #3
 800c0c0:	3807      	subne	r0, #7
 800c0c2:	f015 0f01 	tst.w	r5, #1
 800c0c6:	d107      	bne.n	800c0d8 <memchr+0x98>
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800c0ce:	bf02      	ittt	eq
 800c0d0:	3001      	addeq	r0, #1
 800c0d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 800c0d6:	3001      	addeq	r0, #1
 800c0d8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0da:	3801      	subs	r0, #1
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop

0800c0e0 <strlen>:
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	d1fb      	bne.n	800c0e2 <strlen+0x2>
 800c0ea:	1a18      	subs	r0, r3, r0
 800c0ec:	3801      	subs	r0, #1
 800c0ee:	4770      	bx	lr

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b96a 	b.w	800c3dc <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9d08      	ldr	r5, [sp, #32]
 800c126:	460c      	mov	r4, r1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d14e      	bne.n	800c1ca <__udivmoddi4+0xaa>
 800c12c:	4694      	mov	ip, r2
 800c12e:	458c      	cmp	ip, r1
 800c130:	4686      	mov	lr, r0
 800c132:	fab2 f282 	clz	r2, r2
 800c136:	d962      	bls.n	800c1fe <__udivmoddi4+0xde>
 800c138:	b14a      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13a:	f1c2 0320 	rsb	r3, r2, #32
 800c13e:	4091      	lsls	r1, r2
 800c140:	fa20 f303 	lsr.w	r3, r0, r3
 800c144:	fa0c fc02 	lsl.w	ip, ip, r2
 800c148:	4319      	orrs	r1, r3
 800c14a:	fa00 fe02 	lsl.w	lr, r0, r2
 800c14e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c152:	fa1f f68c 	uxth.w	r6, ip
 800c156:	fbb1 f4f7 	udiv	r4, r1, r7
 800c15a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800c15e:	fb07 1114 	mls	r1, r7, r4, r1
 800c162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c166:	fb04 f106 	mul.w	r1, r4, r6
 800c16a:	4299      	cmp	r1, r3
 800c16c:	d90a      	bls.n	800c184 <__udivmoddi4+0x64>
 800c16e:	eb1c 0303 	adds.w	r3, ip, r3
 800c172:	f104 30ff 	add.w	r0, r4, #4294967295
 800c176:	f080 8112 	bcs.w	800c39e <__udivmoddi4+0x27e>
 800c17a:	4299      	cmp	r1, r3
 800c17c:	f240 810f 	bls.w	800c39e <__udivmoddi4+0x27e>
 800c180:	3c02      	subs	r4, #2
 800c182:	4463      	add	r3, ip
 800c184:	1a59      	subs	r1, r3, r1
 800c186:	fa1f f38e 	uxth.w	r3, lr
 800c18a:	fbb1 f0f7 	udiv	r0, r1, r7
 800c18e:	fb07 1110 	mls	r1, r7, r0, r1
 800c192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c196:	fb00 f606 	mul.w	r6, r0, r6
 800c19a:	429e      	cmp	r6, r3
 800c19c:	d90a      	bls.n	800c1b4 <__udivmoddi4+0x94>
 800c19e:	eb1c 0303 	adds.w	r3, ip, r3
 800c1a2:	f100 31ff 	add.w	r1, r0, #4294967295
 800c1a6:	f080 80fc 	bcs.w	800c3a2 <__udivmoddi4+0x282>
 800c1aa:	429e      	cmp	r6, r3
 800c1ac:	f240 80f9 	bls.w	800c3a2 <__udivmoddi4+0x282>
 800c1b0:	4463      	add	r3, ip
 800c1b2:	3802      	subs	r0, #2
 800c1b4:	1b9b      	subs	r3, r3, r6
 800c1b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	b11d      	cbz	r5, 800c1c6 <__udivmoddi4+0xa6>
 800c1be:	40d3      	lsrs	r3, r2
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	e9c5 3200 	strd	r3, r2, [r5]
 800c1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ca:	428b      	cmp	r3, r1
 800c1cc:	d905      	bls.n	800c1da <__udivmoddi4+0xba>
 800c1ce:	b10d      	cbz	r5, 800c1d4 <__udivmoddi4+0xb4>
 800c1d0:	e9c5 0100 	strd	r0, r1, [r5]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	e7f5      	b.n	800c1c6 <__udivmoddi4+0xa6>
 800c1da:	fab3 f183 	clz	r1, r3
 800c1de:	2900      	cmp	r1, #0
 800c1e0:	d146      	bne.n	800c270 <__udivmoddi4+0x150>
 800c1e2:	42a3      	cmp	r3, r4
 800c1e4:	d302      	bcc.n	800c1ec <__udivmoddi4+0xcc>
 800c1e6:	4290      	cmp	r0, r2
 800c1e8:	f0c0 80f0 	bcc.w	800c3cc <__udivmoddi4+0x2ac>
 800c1ec:	1a86      	subs	r6, r0, r2
 800c1ee:	eb64 0303 	sbc.w	r3, r4, r3
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	2d00      	cmp	r5, #0
 800c1f6:	d0e6      	beq.n	800c1c6 <__udivmoddi4+0xa6>
 800c1f8:	e9c5 6300 	strd	r6, r3, [r5]
 800c1fc:	e7e3      	b.n	800c1c6 <__udivmoddi4+0xa6>
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	f040 8090 	bne.w	800c324 <__udivmoddi4+0x204>
 800c204:	eba1 040c 	sub.w	r4, r1, ip
 800c208:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c20c:	fa1f f78c 	uxth.w	r7, ip
 800c210:	2101      	movs	r1, #1
 800c212:	fbb4 f6f8 	udiv	r6, r4, r8
 800c216:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800c21a:	fb08 4416 	mls	r4, r8, r6, r4
 800c21e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c222:	fb07 f006 	mul.w	r0, r7, r6
 800c226:	4298      	cmp	r0, r3
 800c228:	d908      	bls.n	800c23c <__udivmoddi4+0x11c>
 800c22a:	eb1c 0303 	adds.w	r3, ip, r3
 800c22e:	f106 34ff 	add.w	r4, r6, #4294967295
 800c232:	d202      	bcs.n	800c23a <__udivmoddi4+0x11a>
 800c234:	4298      	cmp	r0, r3
 800c236:	f200 80cd 	bhi.w	800c3d4 <__udivmoddi4+0x2b4>
 800c23a:	4626      	mov	r6, r4
 800c23c:	1a1c      	subs	r4, r3, r0
 800c23e:	fa1f f38e 	uxth.w	r3, lr
 800c242:	fbb4 f0f8 	udiv	r0, r4, r8
 800c246:	fb08 4410 	mls	r4, r8, r0, r4
 800c24a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c24e:	fb00 f707 	mul.w	r7, r0, r7
 800c252:	429f      	cmp	r7, r3
 800c254:	d908      	bls.n	800c268 <__udivmoddi4+0x148>
 800c256:	eb1c 0303 	adds.w	r3, ip, r3
 800c25a:	f100 34ff 	add.w	r4, r0, #4294967295
 800c25e:	d202      	bcs.n	800c266 <__udivmoddi4+0x146>
 800c260:	429f      	cmp	r7, r3
 800c262:	f200 80b0 	bhi.w	800c3c6 <__udivmoddi4+0x2a6>
 800c266:	4620      	mov	r0, r4
 800c268:	1bdb      	subs	r3, r3, r7
 800c26a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c26e:	e7a5      	b.n	800c1bc <__udivmoddi4+0x9c>
 800c270:	f1c1 0620 	rsb	r6, r1, #32
 800c274:	408b      	lsls	r3, r1
 800c276:	fa22 f706 	lsr.w	r7, r2, r6
 800c27a:	431f      	orrs	r7, r3
 800c27c:	fa20 fc06 	lsr.w	ip, r0, r6
 800c280:	fa04 f301 	lsl.w	r3, r4, r1
 800c284:	ea43 030c 	orr.w	r3, r3, ip
 800c288:	40f4      	lsrs	r4, r6
 800c28a:	fa00 f801 	lsl.w	r8, r0, r1
 800c28e:	0c38      	lsrs	r0, r7, #16
 800c290:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800c294:	fbb4 fef0 	udiv	lr, r4, r0
 800c298:	fa1f fc87 	uxth.w	ip, r7
 800c29c:	fb00 441e 	mls	r4, r0, lr, r4
 800c2a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800c2a4:	fb0e f90c 	mul.w	r9, lr, ip
 800c2a8:	45a1      	cmp	r9, r4
 800c2aa:	fa02 f201 	lsl.w	r2, r2, r1
 800c2ae:	d90a      	bls.n	800c2c6 <__udivmoddi4+0x1a6>
 800c2b0:	193c      	adds	r4, r7, r4
 800c2b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 800c2b6:	f080 8084 	bcs.w	800c3c2 <__udivmoddi4+0x2a2>
 800c2ba:	45a1      	cmp	r9, r4
 800c2bc:	f240 8081 	bls.w	800c3c2 <__udivmoddi4+0x2a2>
 800c2c0:	f1ae 0e02 	sub.w	lr, lr, #2
 800c2c4:	443c      	add	r4, r7
 800c2c6:	eba4 0409 	sub.w	r4, r4, r9
 800c2ca:	fa1f f983 	uxth.w	r9, r3
 800c2ce:	fbb4 f3f0 	udiv	r3, r4, r0
 800c2d2:	fb00 4413 	mls	r4, r0, r3, r4
 800c2d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800c2da:	fb03 fc0c 	mul.w	ip, r3, ip
 800c2de:	45a4      	cmp	ip, r4
 800c2e0:	d907      	bls.n	800c2f2 <__udivmoddi4+0x1d2>
 800c2e2:	193c      	adds	r4, r7, r4
 800c2e4:	f103 30ff 	add.w	r0, r3, #4294967295
 800c2e8:	d267      	bcs.n	800c3ba <__udivmoddi4+0x29a>
 800c2ea:	45a4      	cmp	ip, r4
 800c2ec:	d965      	bls.n	800c3ba <__udivmoddi4+0x29a>
 800c2ee:	3b02      	subs	r3, #2
 800c2f0:	443c      	add	r4, r7
 800c2f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800c2f6:	fba0 9302 	umull	r9, r3, r0, r2
 800c2fa:	eba4 040c 	sub.w	r4, r4, ip
 800c2fe:	429c      	cmp	r4, r3
 800c300:	46ce      	mov	lr, r9
 800c302:	469c      	mov	ip, r3
 800c304:	d351      	bcc.n	800c3aa <__udivmoddi4+0x28a>
 800c306:	d04e      	beq.n	800c3a6 <__udivmoddi4+0x286>
 800c308:	b155      	cbz	r5, 800c320 <__udivmoddi4+0x200>
 800c30a:	ebb8 030e 	subs.w	r3, r8, lr
 800c30e:	eb64 040c 	sbc.w	r4, r4, ip
 800c312:	fa04 f606 	lsl.w	r6, r4, r6
 800c316:	40cb      	lsrs	r3, r1
 800c318:	431e      	orrs	r6, r3
 800c31a:	40cc      	lsrs	r4, r1
 800c31c:	e9c5 6400 	strd	r6, r4, [r5]
 800c320:	2100      	movs	r1, #0
 800c322:	e750      	b.n	800c1c6 <__udivmoddi4+0xa6>
 800c324:	f1c2 0320 	rsb	r3, r2, #32
 800c328:	fa20 f103 	lsr.w	r1, r0, r3
 800c32c:	fa0c fc02 	lsl.w	ip, ip, r2
 800c330:	fa24 f303 	lsr.w	r3, r4, r3
 800c334:	4094      	lsls	r4, r2
 800c336:	430c      	orrs	r4, r1
 800c338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c33c:	fa00 fe02 	lsl.w	lr, r0, r2
 800c340:	fa1f f78c 	uxth.w	r7, ip
 800c344:	fbb3 f0f8 	udiv	r0, r3, r8
 800c348:	fb08 3110 	mls	r1, r8, r0, r3
 800c34c:	0c23      	lsrs	r3, r4, #16
 800c34e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c352:	fb00 f107 	mul.w	r1, r0, r7
 800c356:	4299      	cmp	r1, r3
 800c358:	d908      	bls.n	800c36c <__udivmoddi4+0x24c>
 800c35a:	eb1c 0303 	adds.w	r3, ip, r3
 800c35e:	f100 36ff 	add.w	r6, r0, #4294967295
 800c362:	d22c      	bcs.n	800c3be <__udivmoddi4+0x29e>
 800c364:	4299      	cmp	r1, r3
 800c366:	d92a      	bls.n	800c3be <__udivmoddi4+0x29e>
 800c368:	3802      	subs	r0, #2
 800c36a:	4463      	add	r3, ip
 800c36c:	1a5b      	subs	r3, r3, r1
 800c36e:	b2a4      	uxth	r4, r4
 800c370:	fbb3 f1f8 	udiv	r1, r3, r8
 800c374:	fb08 3311 	mls	r3, r8, r1, r3
 800c378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c37c:	fb01 f307 	mul.w	r3, r1, r7
 800c380:	42a3      	cmp	r3, r4
 800c382:	d908      	bls.n	800c396 <__udivmoddi4+0x276>
 800c384:	eb1c 0404 	adds.w	r4, ip, r4
 800c388:	f101 36ff 	add.w	r6, r1, #4294967295
 800c38c:	d213      	bcs.n	800c3b6 <__udivmoddi4+0x296>
 800c38e:	42a3      	cmp	r3, r4
 800c390:	d911      	bls.n	800c3b6 <__udivmoddi4+0x296>
 800c392:	3902      	subs	r1, #2
 800c394:	4464      	add	r4, ip
 800c396:	1ae4      	subs	r4, r4, r3
 800c398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c39c:	e739      	b.n	800c212 <__udivmoddi4+0xf2>
 800c39e:	4604      	mov	r4, r0
 800c3a0:	e6f0      	b.n	800c184 <__udivmoddi4+0x64>
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	e706      	b.n	800c1b4 <__udivmoddi4+0x94>
 800c3a6:	45c8      	cmp	r8, r9
 800c3a8:	d2ae      	bcs.n	800c308 <__udivmoddi4+0x1e8>
 800c3aa:	ebb9 0e02 	subs.w	lr, r9, r2
 800c3ae:	eb63 0c07 	sbc.w	ip, r3, r7
 800c3b2:	3801      	subs	r0, #1
 800c3b4:	e7a8      	b.n	800c308 <__udivmoddi4+0x1e8>
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	e7ed      	b.n	800c396 <__udivmoddi4+0x276>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	e799      	b.n	800c2f2 <__udivmoddi4+0x1d2>
 800c3be:	4630      	mov	r0, r6
 800c3c0:	e7d4      	b.n	800c36c <__udivmoddi4+0x24c>
 800c3c2:	46d6      	mov	lr, sl
 800c3c4:	e77f      	b.n	800c2c6 <__udivmoddi4+0x1a6>
 800c3c6:	4463      	add	r3, ip
 800c3c8:	3802      	subs	r0, #2
 800c3ca:	e74d      	b.n	800c268 <__udivmoddi4+0x148>
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	4623      	mov	r3, r4
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	e70f      	b.n	800c1f4 <__udivmoddi4+0xd4>
 800c3d4:	3e02      	subs	r6, #2
 800c3d6:	4463      	add	r3, ip
 800c3d8:	e730      	b.n	800c23c <__udivmoddi4+0x11c>
 800c3da:	bf00      	nop

0800c3dc <__aeabi_idiv0>:
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop

0800c3e0 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08a      	sub	sp, #40	@ 0x28
 800c3e4:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800c3e6:	2306      	movs	r3, #6
 800c3e8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c3ea:	2306      	movs	r3, #6
 800c3ec:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	83fb      	strh	r3, [r7, #30]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800c3fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800c404:	4ba1      	ldr	r3, [pc, #644]	@ (800c68c <EE_Init+0x2ac>)
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800c40a:	4ba1      	ldr	r3, [pc, #644]	@ (800c690 <EE_Init+0x2b0>)
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800c410:	2300      	movs	r3, #0
 800c412:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 800c414:	2302      	movs	r3, #2
 800c416:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 800c418:	2301      	movs	r3, #1
 800c41a:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c41c:	2302      	movs	r3, #2
 800c41e:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 800c420:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c426:	4293      	cmp	r3, r2
 800c428:	d00b      	beq.n	800c442 <EE_Init+0x62>
 800c42a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c42e:	f280 8196 	bge.w	800c75e <EE_Init+0x37e>
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 80f8 	beq.w	800c628 <EE_Init+0x248>
 800c438:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d050      	beq.n	800c4e2 <EE_Init+0x102>
 800c440:	e18d      	b.n	800c75e <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800c442:	8c3b      	ldrh	r3, [r7, #32]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d116      	bne.n	800c476 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c448:	4890      	ldr	r0, [pc, #576]	@ (800c68c <EE_Init+0x2ac>)
 800c44a:	f000 f9a9 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	f040 818e 	bne.w	800c772 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c456:	f107 0214 	add.w	r2, r7, #20
 800c45a:	463b      	mov	r3, r7
 800c45c:	4611      	mov	r1, r2
 800c45e:	4618      	mov	r0, r3
 800c460:	f002 fa38 	bl	800e8d4 <HAL_FLASHEx_Erase>
 800c464:	4603      	mov	r3, r0
 800c466:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c468:	7efb      	ldrb	r3, [r7, #27]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 8181 	beq.w	800c772 <EE_Init+0x392>
          {
            return FlashStatus;
 800c470:	7efb      	ldrb	r3, [r7, #27]
 800c472:	b29b      	uxth	r3, r3
 800c474:	e185      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800c476:	8c3b      	ldrh	r3, [r7, #32]
 800c478:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d125      	bne.n	800c4cc <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c480:	4882      	ldr	r0, [pc, #520]	@ (800c68c <EE_Init+0x2ac>)
 800c482:	f000 f98d 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10e      	bne.n	800c4aa <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c48c:	f107 0214 	add.w	r2, r7, #20
 800c490:	463b      	mov	r3, r7
 800c492:	4611      	mov	r1, r2
 800c494:	4618      	mov	r0, r3
 800c496:	f002 fa1d 	bl	800e8d4 <HAL_FLASHEx_Erase>
 800c49a:	4603      	mov	r3, r0
 800c49c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c49e:	7efb      	ldrb	r3, [r7, #27]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <EE_Init+0xca>
          {
            return FlashStatus;
 800c4a4:	7efb      	ldrb	r3, [r7, #27]
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	e16b      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800c4aa:	f04f 0200 	mov.w	r2, #0
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	4977      	ldr	r1, [pc, #476]	@ (800c690 <EE_Init+0x2b0>)
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	f002 f857 	bl	800e568 <HAL_FLASH_Program>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c4be:	7efb      	ldrb	r3, [r7, #27]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 8156 	beq.w	800c772 <EE_Init+0x392>
        {
          return FlashStatus;
 800c4c6:	7efb      	ldrb	r3, [r7, #27]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	e15a      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800c4cc:	f000 f9fe 	bl	800c8cc <EE_Format>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c4d4:	7efb      	ldrb	r3, [r7, #27]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 814b 	beq.w	800c772 <EE_Init+0x392>
        {
          return FlashStatus;
 800c4dc:	7efb      	ldrb	r3, [r7, #27]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	e14f      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800c4e2:	8c3b      	ldrh	r3, [r7, #32]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d163      	bne.n	800c5b0 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c4ec:	e030      	b.n	800c550 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800c4ee:	4b69      	ldr	r3, [pc, #420]	@ (800c694 <EE_Init+0x2b4>)
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c4f6:	4968      	ldr	r1, [pc, #416]	@ (800c698 <EE_Init+0x2b8>)
 800c4f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d101      	bne.n	800c504 <EE_Init+0x124>
          {
            x = VarIdx;
 800c500:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c502:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 800c504:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c506:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d01d      	beq.n	800c54a <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c50e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c510:	4a61      	ldr	r2, [pc, #388]	@ (800c698 <EE_Init+0x2b8>)
 800c512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c516:	4961      	ldr	r1, [pc, #388]	@ (800c69c <EE_Init+0x2bc>)
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 f96b 	bl	800c7f4 <EE_ReadVariable>
 800c51e:	4603      	mov	r3, r0
 800c520:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800c522:	8bbb      	ldrh	r3, [r7, #28]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d010      	beq.n	800c54a <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c528:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c52a:	4a5b      	ldr	r2, [pc, #364]	@ (800c698 <EE_Init+0x2b8>)
 800c52c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c530:	4a5a      	ldr	r2, [pc, #360]	@ (800c69c <EE_Init+0x2bc>)
 800c532:	8812      	ldrh	r2, [r2, #0]
 800c534:	4611      	mov	r1, r2
 800c536:	4618      	mov	r0, r3
 800c538:	f000 fa60 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800c53c:	4603      	mov	r3, r0
 800c53e:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800c540:	8bfb      	ldrh	r3, [r7, #30]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <EE_Init+0x16a>
              {
                return EepromStatus;
 800c546:	8bfb      	ldrh	r3, [r7, #30]
 800c548:	e11b      	b.n	800c782 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c54a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c54c:	3301      	adds	r3, #1
 800c54e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c550:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c552:	2b31      	cmp	r3, #49	@ 0x31
 800c554:	d9cb      	bls.n	800c4ee <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c556:	f04f 0200 	mov.w	r2, #0
 800c55a:	f04f 0300 	mov.w	r3, #0
 800c55e:	494b      	ldr	r1, [pc, #300]	@ (800c68c <EE_Init+0x2ac>)
 800c560:	2001      	movs	r0, #1
 800c562:	f002 f801 	bl	800e568 <HAL_FLASH_Program>
 800c566:	4603      	mov	r3, r0
 800c568:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c56a:	7efb      	ldrb	r3, [r7, #27]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <EE_Init+0x196>
        {
          return FlashStatus;
 800c570:	7efb      	ldrb	r3, [r7, #27]
 800c572:	b29b      	uxth	r3, r3
 800c574:	e105      	b.n	800c782 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 800c576:	2303      	movs	r3, #3
 800c578:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c57a:	2301      	movs	r3, #1
 800c57c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c57e:	2302      	movs	r3, #2
 800c580:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c582:	4843      	ldr	r0, [pc, #268]	@ (800c690 <EE_Init+0x2b0>)
 800c584:	f000 f90c 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f040 80f3 	bne.w	800c776 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c590:	f107 0214 	add.w	r2, r7, #20
 800c594:	463b      	mov	r3, r7
 800c596:	4611      	mov	r1, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f002 f99b 	bl	800e8d4 <HAL_FLASHEx_Erase>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c5a2:	7efb      	ldrb	r3, [r7, #27]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 80e6 	beq.w	800c776 <EE_Init+0x396>
          {
            return FlashStatus;
 800c5aa:	7efb      	ldrb	r3, [r7, #27]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	e0e8      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800c5b0:	8c3b      	ldrh	r3, [r7, #32]
 800c5b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d12b      	bne.n	800c612 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c5c6:	4832      	ldr	r0, [pc, #200]	@ (800c690 <EE_Init+0x2b0>)
 800c5c8:	f000 f8ea 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10e      	bne.n	800c5f0 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c5d2:	f107 0214 	add.w	r2, r7, #20
 800c5d6:	463b      	mov	r3, r7
 800c5d8:	4611      	mov	r1, r2
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f002 f97a 	bl	800e8d4 <HAL_FLASHEx_Erase>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c5e4:	7efb      	ldrb	r3, [r7, #27]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <EE_Init+0x210>
          {
            return FlashStatus;
 800c5ea:	7efb      	ldrb	r3, [r7, #27]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	e0c8      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c5f0:	f04f 0200 	mov.w	r2, #0
 800c5f4:	f04f 0300 	mov.w	r3, #0
 800c5f8:	4924      	ldr	r1, [pc, #144]	@ (800c68c <EE_Init+0x2ac>)
 800c5fa:	2001      	movs	r0, #1
 800c5fc:	f001 ffb4 	bl	800e568 <HAL_FLASH_Program>
 800c600:	4603      	mov	r3, r0
 800c602:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c604:	7efb      	ldrb	r3, [r7, #27]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 80b5 	beq.w	800c776 <EE_Init+0x396>
        {
          return FlashStatus;
 800c60c:	7efb      	ldrb	r3, [r7, #27]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	e0b7      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800c612:	f000 f95b 	bl	800c8cc <EE_Format>
 800c616:	4603      	mov	r3, r0
 800c618:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c61a:	7efb      	ldrb	r3, [r7, #27]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 80aa 	beq.w	800c776 <EE_Init+0x396>
        {
          return FlashStatus;
 800c622:	7efb      	ldrb	r3, [r7, #27]
 800c624:	b29b      	uxth	r3, r3
 800c626:	e0ac      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800c628:	8c3b      	ldrh	r3, [r7, #32]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10a      	bne.n	800c644 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800c62e:	f000 f94d 	bl	800c8cc <EE_Format>
 800c632:	4603      	mov	r3, r0
 800c634:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c636:	7efb      	ldrb	r3, [r7, #27]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 809e 	beq.w	800c77a <EE_Init+0x39a>
        {
          return FlashStatus;
 800c63e:	7efb      	ldrb	r3, [r7, #27]
 800c640:	b29b      	uxth	r3, r3
 800c642:	e09e      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800c644:	8c3b      	ldrh	r3, [r7, #32]
 800c646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d11b      	bne.n	800c686 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800c64e:	2303      	movs	r3, #3
 800c650:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c652:	2301      	movs	r3, #1
 800c654:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c656:	2302      	movs	r3, #2
 800c658:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c65a:	480d      	ldr	r0, [pc, #52]	@ (800c690 <EE_Init+0x2b0>)
 800c65c:	f000 f8a0 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	f040 8089 	bne.w	800c77a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c668:	f107 0214 	add.w	r2, r7, #20
 800c66c:	463b      	mov	r3, r7
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f002 f92f 	bl	800e8d4 <HAL_FLASHEx_Erase>
 800c676:	4603      	mov	r3, r0
 800c678:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c67a:	7efb      	ldrb	r3, [r7, #27]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d07c      	beq.n	800c77a <EE_Init+0x39a>
          {
            return FlashStatus;
 800c680:	7efb      	ldrb	r3, [r7, #27]
 800c682:	b29b      	uxth	r3, r3
 800c684:	e07d      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c686:	2300      	movs	r3, #0
 800c688:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c68a:	e03a      	b.n	800c702 <EE_Init+0x322>
 800c68c:	08004000 	.word	0x08004000
 800c690:	08008000 	.word	0x08008000
 800c694:	08004006 	.word	0x08004006
 800c698:	20000430 	.word	0x20000430
 800c69c:	20000090 	.word	0x20000090
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800c6a0:	4b3a      	ldr	r3, [pc, #232]	@ (800c78c <EE_Init+0x3ac>)
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6a8:	4939      	ldr	r1, [pc, #228]	@ (800c790 <EE_Init+0x3b0>)
 800c6aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d101      	bne.n	800c6b6 <EE_Init+0x2d6>
          {
            x = VarIdx;
 800c6b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 800c6b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c6b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d01d      	beq.n	800c6fc <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c6c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6c2:	4a33      	ldr	r2, [pc, #204]	@ (800c790 <EE_Init+0x3b0>)
 800c6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6c8:	4932      	ldr	r1, [pc, #200]	@ (800c794 <EE_Init+0x3b4>)
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f000 f892 	bl	800c7f4 <EE_ReadVariable>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800c6d4:	8bbb      	ldrh	r3, [r7, #28]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d010      	beq.n	800c6fc <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c6da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6dc:	4a2c      	ldr	r2, [pc, #176]	@ (800c790 <EE_Init+0x3b0>)
 800c6de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6e2:	4a2c      	ldr	r2, [pc, #176]	@ (800c794 <EE_Init+0x3b4>)
 800c6e4:	8812      	ldrh	r2, [r2, #0]
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f987 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800c6f2:	8bfb      	ldrh	r3, [r7, #30]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d001      	beq.n	800c6fc <EE_Init+0x31c>
              {
                return EepromStatus;
 800c6f8:	8bfb      	ldrh	r3, [r7, #30]
 800c6fa:	e042      	b.n	800c782 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c6fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6fe:	3301      	adds	r3, #1
 800c700:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c702:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c704:	2b31      	cmp	r3, #49	@ 0x31
 800c706:	d9cb      	bls.n	800c6a0 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 800c708:	f04f 0200 	mov.w	r2, #0
 800c70c:	f04f 0300 	mov.w	r3, #0
 800c710:	4921      	ldr	r1, [pc, #132]	@ (800c798 <EE_Init+0x3b8>)
 800c712:	2001      	movs	r0, #1
 800c714:	f001 ff28 	bl	800e568 <HAL_FLASH_Program>
 800c718:	4603      	mov	r3, r0
 800c71a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c71c:	7efb      	ldrb	r3, [r7, #27]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <EE_Init+0x348>
        {
          return FlashStatus;
 800c722:	7efb      	ldrb	r3, [r7, #27]
 800c724:	b29b      	uxth	r3, r3
 800c726:	e02c      	b.n	800c782 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 800c728:	2302      	movs	r3, #2
 800c72a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c72c:	2301      	movs	r3, #1
 800c72e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c730:	2302      	movs	r3, #2
 800c732:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c734:	4819      	ldr	r0, [pc, #100]	@ (800c79c <EE_Init+0x3bc>)
 800c736:	f000 f833 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d11c      	bne.n	800c77a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c740:	f107 0214 	add.w	r2, r7, #20
 800c744:	463b      	mov	r3, r7
 800c746:	4611      	mov	r1, r2
 800c748:	4618      	mov	r0, r3
 800c74a:	f002 f8c3 	bl	800e8d4 <HAL_FLASHEx_Erase>
 800c74e:	4603      	mov	r3, r0
 800c750:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c752:	7efb      	ldrb	r3, [r7, #27]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d010      	beq.n	800c77a <EE_Init+0x39a>
          {
            return FlashStatus;
 800c758:	7efb      	ldrb	r3, [r7, #27]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	e011      	b.n	800c782 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800c75e:	f000 f8b5 	bl	800c8cc <EE_Format>
 800c762:	4603      	mov	r3, r0
 800c764:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800c766:	7efb      	ldrb	r3, [r7, #27]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d008      	beq.n	800c77e <EE_Init+0x39e>
      {
        return FlashStatus;
 800c76c:	7efb      	ldrb	r3, [r7, #27]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	e007      	b.n	800c782 <EE_Init+0x3a2>
      break;
 800c772:	bf00      	nop
 800c774:	e004      	b.n	800c780 <EE_Init+0x3a0>
      break;
 800c776:	bf00      	nop
 800c778:	e002      	b.n	800c780 <EE_Init+0x3a0>
      break;
 800c77a:	bf00      	nop
 800c77c:	e000      	b.n	800c780 <EE_Init+0x3a0>
      }
      break;
 800c77e:	bf00      	nop
  }

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3728      	adds	r7, #40	@ 0x28
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08008006 	.word	0x08008006
 800c790:	20000430 	.word	0x20000430
 800c794:	20000090 	.word	0x20000090
 800c798:	08008000 	.word	0x08008000
 800c79c:	08004000 	.word	0x08004000

0800c7a0 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 800c7b0:	f245 5355 	movw	r3, #21845	@ 0x5555
 800c7b4:	81fb      	strh	r3, [r7, #14]
    
  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800c7b6:	e00d      	b.n	800c7d4 <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	881b      	ldrh	r3, [r3, #0]
 800c7bc:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800c7be:	89fb      	ldrh	r3, [r7, #14]
 800c7c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d002      	beq.n	800c7ce <EE_VerifyPageFullyErased+0x2e>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	617b      	str	r3, [r7, #20]

      break;
 800c7cc:	e009      	b.n	800c7e2 <EE_VerifyPageFullyErased+0x42>
    }
    /* Next address location */
    Address = Address + 4;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800c7da:	333f      	adds	r3, #63	@ 0x3f
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d9ea      	bls.n	800c7b8 <EE_VerifyPageFullyErased+0x18>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	b29b      	uxth	r3, r3
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	371c      	adds	r7, #28
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	6039      	str	r1, [r7, #0]
 800c7fe:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 800c800:	2300      	movs	r3, #0
 800c802:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800c804:	f245 5355 	movw	r3, #21845	@ 0x5555
 800c808:	81bb      	strh	r3, [r7, #12]
 800c80a:	2301      	movs	r3, #1
 800c80c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800c80e:	4b1c      	ldr	r3, [pc, #112]	@ (800c880 <EE_ReadVariable+0x8c>)
 800c810:	613b      	str	r3, [r7, #16]
 800c812:	4b1b      	ldr	r3, [pc, #108]	@ (800c880 <EE_ReadVariable+0x8c>)
 800c814:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800c816:	2000      	movs	r0, #0
 800c818:	f000 f8aa 	bl	800c970 <EE_FindValidPage>
 800c81c:	4603      	mov	r3, r0
 800c81e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800c820:	89fb      	ldrh	r3, [r7, #14]
 800c822:	2bab      	cmp	r3, #171	@ 0xab
 800c824:	d101      	bne.n	800c82a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800c826:	23ab      	movs	r3, #171	@ 0xab
 800c828:	e025      	b.n	800c876 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800c82a:	89fb      	ldrh	r3, [r7, #14]
 800c82c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c830:	3301      	adds	r3, #1
 800c832:	039b      	lsls	r3, r3, #14
 800c834:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800c836:	89fb      	ldrh	r3, [r7, #14]
 800c838:	3301      	adds	r3, #1
 800c83a:	039a      	lsls	r2, r3, #14
 800c83c:	4b11      	ldr	r3, [pc, #68]	@ (800c884 <EE_ReadVariable+0x90>)
 800c83e:	4413      	add	r3, r2
 800c840:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800c842:	e012      	b.n	800c86a <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800c84a:	89ba      	ldrh	r2, [r7, #12]
 800c84c:	88fb      	ldrh	r3, [r7, #6]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d108      	bne.n	800c864 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	3b02      	subs	r3, #2
 800c856:	881b      	ldrh	r3, [r3, #0]
 800c858:	b29a      	uxth	r2, r3
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	82fb      	strh	r3, [r7, #22]

      break;
 800c862:	e007      	b.n	800c874 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	3b04      	subs	r3, #4
 800c868:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	3302      	adds	r3, #2
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	429a      	cmp	r2, r3
 800c872:	d8e7      	bhi.n	800c844 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800c874:	8afb      	ldrh	r3, [r7, #22]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	08004000 	.word	0x08004000
 800c884:	08003ffe 	.word	0x08003ffe

0800c888 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	460a      	mov	r2, r1
 800c892:	80fb      	strh	r3, [r7, #6]
 800c894:	4613      	mov	r3, r2
 800c896:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800c89c:	88ba      	ldrh	r2, [r7, #4]
 800c89e:	88fb      	ldrh	r3, [r7, #6]
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 f8aa 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800c8ac:	89fb      	ldrh	r3, [r7, #14]
 800c8ae:	2b80      	cmp	r3, #128	@ 0x80
 800c8b0:	d107      	bne.n	800c8c2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800c8b2:	88ba      	ldrh	r2, [r7, #4]
 800c8b4:	88fb      	ldrh	r3, [r7, #6]
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 f901 	bl	800cac0 <EE_PageTransfer>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800c8c2:	89fb      	ldrh	r3, [r7, #14]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 800c8da:	2300      	movs	r3, #0
 800c8dc:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 800c8de:	2302      	movs	r3, #2
 800c8e0:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c8e6:	2302      	movs	r3, #2
 800c8e8:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c8ea:	481f      	ldr	r0, [pc, #124]	@ (800c968 <EE_Format+0x9c>)
 800c8ec:	f7ff ff58 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10d      	bne.n	800c912 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800c8f6:	f107 0218 	add.w	r2, r7, #24
 800c8fa:	1d3b      	adds	r3, r7, #4
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	4618      	mov	r0, r3
 800c900:	f001 ffe8 	bl	800e8d4 <HAL_FLASHEx_Erase>
 800c904:	4603      	mov	r3, r0
 800c906:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800c908:	7ffb      	ldrb	r3, [r7, #31]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <EE_Format+0x46>
    {
      return FlashStatus;
 800c90e:	7ffb      	ldrb	r3, [r7, #31]
 800c910:	e025      	b.n	800c95e <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800c912:	f04f 0200 	mov.w	r2, #0
 800c916:	f04f 0300 	mov.w	r3, #0
 800c91a:	4913      	ldr	r1, [pc, #76]	@ (800c968 <EE_Format+0x9c>)
 800c91c:	2001      	movs	r0, #1
 800c91e:	f001 fe23 	bl	800e568 <HAL_FLASH_Program>
 800c922:	4603      	mov	r3, r0
 800c924:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800c926:	7ffb      	ldrb	r3, [r7, #31]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d001      	beq.n	800c930 <EE_Format+0x64>
  {
    return FlashStatus;
 800c92c:	7ffb      	ldrb	r3, [r7, #31]
 800c92e:	e016      	b.n	800c95e <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 800c930:	2303      	movs	r3, #3
 800c932:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c934:	480d      	ldr	r0, [pc, #52]	@ (800c96c <EE_Format+0xa0>)
 800c936:	f7ff ff33 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10d      	bne.n	800c95c <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800c940:	f107 0218 	add.w	r2, r7, #24
 800c944:	1d3b      	adds	r3, r7, #4
 800c946:	4611      	mov	r1, r2
 800c948:	4618      	mov	r0, r3
 800c94a:	f001 ffc3 	bl	800e8d4 <HAL_FLASHEx_Erase>
 800c94e:	4603      	mov	r3, r0
 800c950:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800c952:	7ffb      	ldrb	r3, [r7, #31]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <EE_Format+0x90>
    {
      return FlashStatus;
 800c958:	7ffb      	ldrb	r3, [r7, #31]
 800c95a:	e000      	b.n	800c95e <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3720      	adds	r7, #32
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	08004000 	.word	0x08004000
 800c96c:	08008000 	.word	0x08008000

0800c970 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	4603      	mov	r3, r0
 800c978:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800c97a:	2306      	movs	r3, #6
 800c97c:	81fb      	strh	r3, [r7, #14]
 800c97e:	2306      	movs	r3, #6
 800c980:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800c982:	4b1c      	ldr	r3, [pc, #112]	@ (800c9f4 <EE_FindValidPage+0x84>)
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800c988:	4b1b      	ldr	r3, [pc, #108]	@ (800c9f8 <EE_FindValidPage+0x88>)
 800c98a:	881b      	ldrh	r3, [r3, #0]
 800c98c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d01b      	beq.n	800c9cc <EE_FindValidPage+0x5c>
 800c994:	2b01      	cmp	r3, #1
 800c996:	d125      	bne.n	800c9e4 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800c998:	89bb      	ldrh	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d108      	bne.n	800c9b0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800c99e:	89fb      	ldrh	r3, [r7, #14]
 800c9a0:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d101      	bne.n	800c9ac <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	e01c      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e01a      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 800c9b0:	89fb      	ldrh	r3, [r7, #14]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d108      	bne.n	800c9c8 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800c9b6:	89bb      	ldrh	r3, [r7, #12]
 800c9b8:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d101      	bne.n	800c9c4 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e010      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	e00e      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800c9c8:	23ab      	movs	r3, #171	@ 0xab
 800c9ca:	e00c      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 800c9cc:	89fb      	ldrh	r3, [r7, #14]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	e007      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800c9d6:	89bb      	ldrh	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e002      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 800c9e0:	23ab      	movs	r3, #171	@ 0xab
 800c9e2:	e000      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800c9e4:	2300      	movs	r3, #0
  }
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	08004000 	.word	0x08004000
 800c9f8:	08008000 	.word	0x08008000

0800c9fc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800c9fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ca00:	b086      	sub	sp, #24
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	4603      	mov	r3, r0
 800ca06:	460a      	mov	r2, r1
 800ca08:	80fb      	strh	r3, [r7, #6]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800ca16:	4b27      	ldr	r3, [pc, #156]	@ (800cab4 <EE_VerifyPageFullWriteVariable+0xb8>)
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	4b27      	ldr	r3, [pc, #156]	@ (800cab8 <EE_VerifyPageFullWriteVariable+0xbc>)
 800ca1c:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800ca1e:	2001      	movs	r0, #1
 800ca20:	f7ff ffa6 	bl	800c970 <EE_FindValidPage>
 800ca24:	4603      	mov	r3, r0
 800ca26:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800ca28:	8a3b      	ldrh	r3, [r7, #16]
 800ca2a:	2bab      	cmp	r3, #171	@ 0xab
 800ca2c:	d101      	bne.n	800ca32 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800ca2e:	23ab      	movs	r3, #171	@ 0xab
 800ca30:	e03b      	b.n	800caaa <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800ca32:	8a3b      	ldrh	r3, [r7, #16]
 800ca34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ca38:	3301      	adds	r3, #1
 800ca3a:	039b      	lsls	r3, r3, #14
 800ca3c:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800ca3e:	8a3b      	ldrh	r3, [r7, #16]
 800ca40:	3301      	adds	r3, #1
 800ca42:	039a      	lsls	r2, r3, #14
 800ca44:	4b1d      	ldr	r3, [pc, #116]	@ (800cabc <EE_VerifyPageFullWriteVariable+0xc0>)
 800ca46:	4413      	add	r3, r2
 800ca48:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800ca4a:	e029      	b.n	800caa0 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca54:	d121      	bne.n	800ca9a <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 800ca56:	88bb      	ldrh	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	4615      	mov	r5, r2
 800ca5e:	4622      	mov	r2, r4
 800ca60:	462b      	mov	r3, r5
 800ca62:	6979      	ldr	r1, [r7, #20]
 800ca64:	2001      	movs	r0, #1
 800ca66:	f001 fd7f 	bl	800e568 <HAL_FLASH_Program>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800ca6e:	7cfb      	ldrb	r3, [r7, #19]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 800ca74:	7cfb      	ldrb	r3, [r7, #19]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	e017      	b.n	800caaa <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	1c99      	adds	r1, r3, #2
 800ca7e:	88fb      	ldrh	r3, [r7, #6]
 800ca80:	2200      	movs	r2, #0
 800ca82:	4698      	mov	r8, r3
 800ca84:	4691      	mov	r9, r2
 800ca86:	4642      	mov	r2, r8
 800ca88:	464b      	mov	r3, r9
 800ca8a:	2001      	movs	r0, #1
 800ca8c:	f001 fd6c 	bl	800e568 <HAL_FLASH_Program>
 800ca90:	4603      	mov	r3, r0
 800ca92:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800ca94:	7cfb      	ldrb	r3, [r7, #19]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	e007      	b.n	800caaa <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800caa0:	697a      	ldr	r2, [r7, #20]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d3d1      	bcc.n	800ca4c <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800caa8:	2380      	movs	r3, #128	@ 0x80
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cab4:	08004000 	.word	0x08004000
 800cab8:	08008000 	.word	0x08008000
 800cabc:	08003ffe 	.word	0x08003ffe

0800cac0 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b08c      	sub	sp, #48	@ 0x30
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	4603      	mov	r3, r0
 800cac8:	460a      	mov	r2, r1
 800caca:	80fb      	strh	r3, [r7, #6]
 800cacc:	4613      	mov	r3, r2
 800cace:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800cad6:	4b54      	ldr	r3, [pc, #336]	@ (800cc28 <EE_PageTransfer+0x168>)
 800cad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t OldPageId=0;
 800cada:	2300      	movs	r3, #0
 800cadc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cae2:	2300      	movs	r3, #0
 800cae4:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800caea:	2300      	movs	r3, #0
 800caec:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800caf2:	2000      	movs	r0, #0
 800caf4:	f7ff ff3c 	bl	800c970 <EE_FindValidPage>
 800caf8:	4603      	mov	r3, r0
 800cafa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 800cafc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d104      	bne.n	800cb0c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 800cb02:	4b49      	ldr	r3, [pc, #292]	@ (800cc28 <EE_PageTransfer+0x168>)
 800cb04:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800cb06:	2303      	movs	r3, #3
 800cb08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cb0a:	e009      	b.n	800cb20 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 800cb0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d104      	bne.n	800cb1c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 800cb12:	4b46      	ldr	r3, [pc, #280]	@ (800cc2c <EE_PageTransfer+0x16c>)
 800cb14:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 800cb16:	2302      	movs	r3, #2
 800cb18:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cb1a:	e001      	b.n	800cb20 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800cb1c:	23ab      	movs	r3, #171	@ 0xab
 800cb1e:	e07e      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 800cb20:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800cb24:	f04f 0300 	mov.w	r3, #0
 800cb28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	f001 fd1c 	bl	800e568 <HAL_FLASH_Program>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cb36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 800cb3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	e06b      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800cb46:	88ba      	ldrh	r2, [r7, #4]
 800cb48:	88fb      	ldrh	r3, [r7, #6]
 800cb4a:	4611      	mov	r1, r2
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7ff ff55 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800cb52:	4603      	mov	r3, r0
 800cb54:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800cb56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 800cb5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb5e:	e05e      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800cb60:	2300      	movs	r3, #0
 800cb62:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb64:	e027      	b.n	800cbb6 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800cb66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb68:	4a31      	ldr	r2, [pc, #196]	@ (800cc30 <EE_PageTransfer+0x170>)
 800cb6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb6e:	88fa      	ldrh	r2, [r7, #6]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d01d      	beq.n	800cbb0 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800cb74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb76:	4a2e      	ldr	r2, [pc, #184]	@ (800cc30 <EE_PageTransfer+0x170>)
 800cb78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb7c:	492d      	ldr	r1, [pc, #180]	@ (800cc34 <EE_PageTransfer+0x174>)
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff fe38 	bl	800c7f4 <EE_ReadVariable>
 800cb84:	4603      	mov	r3, r0
 800cb86:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800cb88:	8c3b      	ldrh	r3, [r7, #32]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d010      	beq.n	800cbb0 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800cb8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb90:	4a27      	ldr	r2, [pc, #156]	@ (800cc30 <EE_PageTransfer+0x170>)
 800cb92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb96:	4a27      	ldr	r2, [pc, #156]	@ (800cc34 <EE_PageTransfer+0x174>)
 800cb98:	8812      	ldrh	r2, [r2, #0]
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff ff2d 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800cba2:	4603      	mov	r3, r0
 800cba4:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800cba6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 800cbac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cbae:	e036      	b.n	800cc1e <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800cbb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cbb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbb8:	2b31      	cmp	r3, #49	@ 0x31
 800cbba:	d9d4      	bls.n	800cb66 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 800cbc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cbc2:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800cbc8:	2302      	movs	r3, #2
 800cbca:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 800cbcc:	f107 021c 	add.w	r2, r7, #28
 800cbd0:	f107 0308 	add.w	r3, r7, #8
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f001 fe7c 	bl	800e8d4 <HAL_FLASHEx_Erase>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cbe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 800cbea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	e015      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	f04f 0300 	mov.w	r3, #0
 800cbfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbfc:	2001      	movs	r0, #1
 800cbfe:	f001 fcb3 	bl	800e568 <HAL_FLASH_Program>
 800cc02:	4603      	mov	r3, r0
 800cc04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cc08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 800cc10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	e002      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 800cc18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc1c:	b29b      	uxth	r3, r3
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3730      	adds	r7, #48	@ 0x30
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	08004000 	.word	0x08004000
 800cc2c:	08008000 	.word	0x08008000
 800cc30:	20000430 	.word	0x20000430
 800cc34:	20000090 	.word	0x20000090

0800cc38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4a07      	ldr	r2, [pc, #28]	@ (800cc64 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	4a06      	ldr	r2, [pc, #24]	@ (800cc68 <vApplicationGetIdleTaskMemory+0x30>)
 800cc4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2280      	movs	r2, #128	@ 0x80
 800cc54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800cc56:	bf00      	nop
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	20000094 	.word	0x20000094
 800cc68:	20000134 	.word	0x20000134

0800cc6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cc6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc70:	b0ba      	sub	sp, #232	@ 0xe8
 800cc72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cc74:	f001 fa82 	bl	800e17c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cc78:	f000 f93c 	bl	800cef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cc7c:	f000 fa60 	bl	800d140 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800cc80:	f000 fa34 	bl	800d0ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800cc84:	f000 f9b6 	bl	800cff4 <MX_TIM1_Init>
  MX_CRC_Init();
 800cc88:	f000 f9a0 	bl	800cfcc <MX_CRC_Init>
  MX_USART1_UART_Init();
 800cc8c:	f000 fa04 	bl	800d098 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800cc90:	488b      	ldr	r0, [pc, #556]	@ (800cec0 <main+0x254>)
 800cc92:	f001 f81f 	bl	800dcd4 <RetargetInit>
  printf("--------F401: Starting up.....\r\n");
 800cc96:	488b      	ldr	r0, [pc, #556]	@ (800cec4 <main+0x258>)
 800cc98:	f005 fbd0 	bl	801243c <puts>

  // Write initial data to EEPROM
  char data[50] = "This is the original data";
 800cc9c:	4b8a      	ldr	r3, [pc, #552]	@ (800cec8 <main+0x25c>)
 800cc9e:	f107 04a4 	add.w	r4, r7, #164	@ 0xa4
 800cca2:	461d      	mov	r5, r3
 800cca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cca8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ccac:	c403      	stmia	r4!, {r0, r1}
 800ccae:	8022      	strh	r2, [r4, #0]
 800ccb0:	f107 03be 	add.w	r3, r7, #190	@ 0xbe
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	601a      	str	r2, [r3, #0]
 800ccb8:	605a      	str	r2, [r3, #4]
 800ccba:	609a      	str	r2, [r3, #8]
 800ccbc:	60da      	str	r2, [r3, #12]
 800ccbe:	611a      	str	r2, [r3, #16]
 800ccc0:	615a      	str	r2, [r3, #20]
  dataLengthOrig = strlen(data);
 800ccc2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7ff fa0a 	bl	800c0e0 <strlen>
 800cccc:	4603      	mov	r3, r0
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	4b7e      	ldr	r3, [pc, #504]	@ (800cecc <main+0x260>)
 800ccd2:	701a      	strb	r2, [r3, #0]

	// Fill EEPROM variables addresses
	uint16_t VirtAddVarTab[dataLengthOrig];
 800ccd4:	4b7d      	ldr	r3, [pc, #500]	@ (800cecc <main+0x260>)
 800ccd6:	7819      	ldrb	r1, [r3, #0]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800cce0:	b2cb      	uxtb	r3, r1
 800cce2:	2200      	movs	r2, #0
 800cce4:	469a      	mov	sl, r3
 800cce6:	4693      	mov	fp, r2
 800cce8:	f04f 0200 	mov.w	r2, #0
 800ccec:	f04f 0300 	mov.w	r3, #0
 800ccf0:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800ccf4:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800ccf8:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800ccfc:	b2cb      	uxtb	r3, r1
 800ccfe:	2200      	movs	r2, #0
 800cd00:	4698      	mov	r8, r3
 800cd02:	4691      	mov	r9, r2
 800cd04:	f04f 0200 	mov.w	r2, #0
 800cd08:	f04f 0300 	mov.w	r3, #0
 800cd0c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 800cd10:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800cd14:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800cd18:	460b      	mov	r3, r1
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	3307      	adds	r3, #7
 800cd1e:	08db      	lsrs	r3, r3, #3
 800cd20:	00db      	lsls	r3, r3, #3
 800cd22:	ebad 0d03 	sub.w	sp, sp, r3
 800cd26:	466b      	mov	r3, sp
 800cd28:	3301      	adds	r3, #1
 800cd2a:	085b      	lsrs	r3, r3, #1
 800cd2c:	005b      	lsls	r3, r3, #1
 800cd2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
	uint8_t VarDataTabRead[50];
	uint8_t dataLength = strlen(data);
 800cd32:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7ff f9d2 	bl	800c0e0 <strlen>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

	HAL_Delay(2000);
 800cd42:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800cd46:	f001 fa8b 	bl	800e260 <HAL_Delay>

		// Unlock the Flash Program Erase controller
		HAL_FLASH_Unlock();
 800cd4a:	f001 fc61 	bl	800e610 <HAL_FLASH_Unlock>

		/* EEPROM Init */
		if (EE_Init() != EE_OK) {
 800cd4e:	f7ff fb47 	bl	800c3e0 <EE_Init>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <main+0xf0>
			Error_Handler();
 800cd58:	f000 ffac 	bl	800dcb4 <Error_Handler>
		}

		// Fill EEPROM variables addresses
		for (uint16_t i = 1; i <= dataLength; i++) {
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
 800cd62:	e00d      	b.n	800cd80 <main+0x114>
			VirtAddVarTab[i - 1] = i;
 800cd64:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 800cd68:	1e5a      	subs	r2, r3, #1
 800cd6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cd6e:	f8b7 10e6 	ldrh.w	r1, [r7, #230]	@ 0xe6
 800cd72:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint16_t i = 1; i <= dataLength; i++) {
 800cd76:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	@ 0xe6
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
 800cd80:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	@ 0xe6
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d9ea      	bls.n	800cd64 <main+0xf8>
		}

		// Store Values in EEPROM emulation
		for (uint16_t i = 0; i < dataLength; i++) {
 800cd8e:	2300      	movs	r3, #0
 800cd90:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
 800cd94:	e019      	b.n	800cdca <main+0x15e>
			/* Sequence 1 */
			if ((EE_WriteVariable(VirtAddVarTab[i], data[i]))
 800cd96:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 800cd9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cd9e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800cda2:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 800cda6:	33e8      	adds	r3, #232	@ 0xe8
 800cda8:	443b      	add	r3, r7
 800cdaa:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800cdae:	4619      	mov	r1, r3
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	f7ff fd69 	bl	800c888 <EE_WriteVariable>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d001      	beq.n	800cdc0 <main+0x154>
					!= HAL_OK) {
				Error_Handler();
 800cdbc:	f000 ff7a 	bl	800dcb4 <Error_Handler>
		for (uint16_t i = 0; i < dataLength; i++) {
 800cdc0:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
 800cdca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	@ 0xe4
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d3de      	bcc.n	800cd96 <main+0x12a>
			}
		}

		// Read values
		for (uint16_t i = 0; i < dataLength; i++) {
 800cdd8:	2300      	movs	r3, #0
 800cdda:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
 800cdde:	e017      	b.n	800ce10 <main+0x1a4>
			if ((EE_ReadVariable(VirtAddVarTab[i],
 800cde0:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 800cde4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cde8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
					&VarDataTabRead[i])) != HAL_OK) {
 800cdec:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 800cdf0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800cdf4:	4413      	add	r3, r2
			if ((EE_ReadVariable(VirtAddVarTab[i],
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	f7ff fcfc 	bl	800c7f4 <EE_ReadVariable>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <main+0x19a>
				Error_Handler();
 800ce02:	f000 ff57 	bl	800dcb4 <Error_Handler>
		for (uint16_t i = 0; i < dataLength; i++) {
 800ce06:	f8b7 30e2 	ldrh.w	r3, [r7, #226]	@ 0xe2
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	f8a7 30e2 	strh.w	r3, [r7, #226]	@ 0xe2
 800ce10:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	@ 0xe2
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d3e0      	bcc.n	800cde0 <main+0x174>
			}
		}

	printf("	Startup: Successfully saved original data to EEPROM \r\n");
 800ce1e:	482c      	ldr	r0, [pc, #176]	@ (800ced0 <main+0x264>)
 800ce20:	f005 fb0c 	bl	801243c <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800ce24:	4b2b      	ldr	r3, [pc, #172]	@ (800ced4 <main+0x268>)
 800ce26:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800ce2a:	461d      	mov	r5, r3
 800ce2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce30:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ce34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800ce38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800ce3c:	2100      	movs	r1, #0
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f003 fc3d 	bl	80106be <osThreadCreate>
 800ce44:	4603      	mov	r3, r0
 800ce46:	4a24      	ldr	r2, [pc, #144]	@ (800ced8 <main+0x26c>)
 800ce48:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 128);
 800ce4a:	4b24      	ldr	r3, [pc, #144]	@ (800cedc <main+0x270>)
 800ce4c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800ce50:	461d      	mov	r5, r3
 800ce52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ce5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800ce5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800ce62:	2100      	movs	r1, #0
 800ce64:	4618      	mov	r0, r3
 800ce66:	f003 fc2a 	bl	80106be <osThreadCreate>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	4a1c      	ldr	r2, [pc, #112]	@ (800cee0 <main+0x274>)
 800ce6e:	6013      	str	r3, [r2, #0]

  /* definition and creation of statusTask */
  osThreadDef(statusTask, StartStatusTask, osPriorityNormal, 0, 128);
 800ce70:	4b1c      	ldr	r3, [pc, #112]	@ (800cee4 <main+0x278>)
 800ce72:	f107 041c 	add.w	r4, r7, #28
 800ce76:	461d      	mov	r5, r3
 800ce78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ce7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ce80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  statusTaskHandle = osThreadCreate(osThread(statusTask), NULL);
 800ce84:	f107 031c 	add.w	r3, r7, #28
 800ce88:	2100      	movs	r1, #0
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f003 fc17 	bl	80106be <osThreadCreate>
 800ce90:	4603      	mov	r3, r0
 800ce92:	4a15      	ldr	r2, [pc, #84]	@ (800cee8 <main+0x27c>)
 800ce94:	6013      	str	r3, [r2, #0]

  /* definition and creation of updateTask */
  osThreadDef(updateTask, StartUpdateTask, osPriorityNormal, 0, 128);
 800ce96:	4b15      	ldr	r3, [pc, #84]	@ (800ceec <main+0x280>)
 800ce98:	463c      	mov	r4, r7
 800ce9a:	461d      	mov	r5, r3
 800ce9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cea0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cea4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  updateTaskHandle = osThreadCreate(osThread(updateTask), NULL);
 800cea8:	463b      	mov	r3, r7
 800ceaa:	2100      	movs	r1, #0
 800ceac:	4618      	mov	r0, r3
 800ceae:	f003 fc06 	bl	80106be <osThreadCreate>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	4a0e      	ldr	r2, [pc, #56]	@ (800cef0 <main+0x284>)
 800ceb6:	6013      	str	r3, [r2, #0]
  //vTaskSuspend(receiveTaskHandle);
  //vTaskSuspend(updateTaskHandle);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800ceb8:	f003 fbfa 	bl	80106b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800cebc:	bf00      	nop
 800cebe:	e7fd      	b.n	800cebc <main+0x250>
 800cec0:	200003cc 	.word	0x200003cc
 800cec4:	08013460 	.word	0x08013460
 800cec8:	080134b8 	.word	0x080134b8
 800cecc:	20000424 	.word	0x20000424
 800ced0:	08013480 	.word	0x08013480
 800ced4:	080134f8 	.word	0x080134f8
 800ced8:	20000414 	.word	0x20000414
 800cedc:	08013520 	.word	0x08013520
 800cee0:	20000418 	.word	0x20000418
 800cee4:	08013548 	.word	0x08013548
 800cee8:	2000041c 	.word	0x2000041c
 800ceec:	08013570 	.word	0x08013570
 800cef0:	20000420 	.word	0x20000420

0800cef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b094      	sub	sp, #80	@ 0x50
 800cef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cefa:	f107 0320 	add.w	r3, r7, #32
 800cefe:	2230      	movs	r2, #48	@ 0x30
 800cf00:	2100      	movs	r1, #0
 800cf02:	4618      	mov	r0, r3
 800cf04:	f005 fcb0 	bl	8012868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cf08:	f107 030c 	add.w	r3, r7, #12
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	601a      	str	r2, [r3, #0]
 800cf10:	605a      	str	r2, [r3, #4]
 800cf12:	609a      	str	r2, [r3, #8]
 800cf14:	60da      	str	r2, [r3, #12]
 800cf16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60bb      	str	r3, [r7, #8]
 800cf1c:	4b29      	ldr	r3, [pc, #164]	@ (800cfc4 <SystemClock_Config+0xd0>)
 800cf1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf20:	4a28      	ldr	r2, [pc, #160]	@ (800cfc4 <SystemClock_Config+0xd0>)
 800cf22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf26:	6413      	str	r3, [r2, #64]	@ 0x40
 800cf28:	4b26      	ldr	r3, [pc, #152]	@ (800cfc4 <SystemClock_Config+0xd0>)
 800cf2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf30:	60bb      	str	r3, [r7, #8]
 800cf32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800cf34:	2300      	movs	r3, #0
 800cf36:	607b      	str	r3, [r7, #4]
 800cf38:	4b23      	ldr	r3, [pc, #140]	@ (800cfc8 <SystemClock_Config+0xd4>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800cf40:	4a21      	ldr	r2, [pc, #132]	@ (800cfc8 <SystemClock_Config+0xd4>)
 800cf42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf46:	6013      	str	r3, [r2, #0]
 800cf48:	4b1f      	ldr	r3, [pc, #124]	@ (800cfc8 <SystemClock_Config+0xd4>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cf50:	607b      	str	r3, [r7, #4]
 800cf52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800cf54:	2302      	movs	r3, #2
 800cf56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800cf5c:	2310      	movs	r3, #16
 800cf5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800cf60:	2302      	movs	r3, #2
 800cf62:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800cf64:	2300      	movs	r3, #0
 800cf66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800cf68:	2310      	movs	r3, #16
 800cf6a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800cf6c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800cf70:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800cf72:	2304      	movs	r3, #4
 800cf74:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800cf76:	2307      	movs	r3, #7
 800cf78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800cf7a:	f107 0320 	add.w	r3, r7, #32
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f001 ff9a 	bl	800eeb8 <HAL_RCC_OscConfig>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800cf8a:	f000 fe93 	bl	800dcb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800cf8e:	230f      	movs	r3, #15
 800cf90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800cf92:	2302      	movs	r3, #2
 800cf94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800cf96:	2300      	movs	r3, #0
 800cf98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800cf9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800cfa4:	f107 030c 	add.w	r3, r7, #12
 800cfa8:	2102      	movs	r1, #2
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f002 f9fc 	bl	800f3a8 <HAL_RCC_ClockConfig>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800cfb6:	f000 fe7d 	bl	800dcb4 <Error_Handler>
  }
}
 800cfba:	bf00      	nop
 800cfbc:	3750      	adds	r7, #80	@ 0x50
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	40023800 	.word	0x40023800
 800cfc8:	40007000 	.word	0x40007000

0800cfcc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800cfd0:	4b06      	ldr	r3, [pc, #24]	@ (800cfec <MX_CRC_Init+0x20>)
 800cfd2:	4a07      	ldr	r2, [pc, #28]	@ (800cff0 <MX_CRC_Init+0x24>)
 800cfd4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800cfd6:	4805      	ldr	r0, [pc, #20]	@ (800cfec <MX_CRC_Init+0x20>)
 800cfd8:	f001 fa77 	bl	800e4ca <HAL_CRC_Init>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800cfe2:	f000 fe67 	bl	800dcb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
  /* USER CODE END CRC_Init 2 */

}
 800cfe6:	bf00      	nop
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	20000334 	.word	0x20000334
 800cff0:	40023000 	.word	0x40023000

0800cff4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b086      	sub	sp, #24
 800cff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cffa:	f107 0308 	add.w	r3, r7, #8
 800cffe:	2200      	movs	r2, #0
 800d000:	601a      	str	r2, [r3, #0]
 800d002:	605a      	str	r2, [r3, #4]
 800d004:	609a      	str	r2, [r3, #8]
 800d006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d008:	463b      	mov	r3, r7
 800d00a:	2200      	movs	r2, #0
 800d00c:	601a      	str	r2, [r3, #0]
 800d00e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800d010:	4b1f      	ldr	r3, [pc, #124]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d012:	4a20      	ldr	r2, [pc, #128]	@ (800d094 <MX_TIM1_Init+0xa0>)
 800d014:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800d016:	4b1e      	ldr	r3, [pc, #120]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d018:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800d01c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d01e:	4b1c      	ldr	r3, [pc, #112]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d020:	2200      	movs	r2, #0
 800d022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 800d024:	4b1a      	ldr	r3, [pc, #104]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d026:	f245 2207 	movw	r2, #20999	@ 0x5207
 800d02a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d02c:	4b18      	ldr	r3, [pc, #96]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d02e:	2200      	movs	r2, #0
 800d030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800d032:	4b17      	ldr	r3, [pc, #92]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d034:	2200      	movs	r2, #0
 800d036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800d038:	4b15      	ldr	r3, [pc, #84]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d03a:	2280      	movs	r2, #128	@ 0x80
 800d03c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800d03e:	4814      	ldr	r0, [pc, #80]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d040:	f002 fbd2 	bl	800f7e8 <HAL_TIM_Base_Init>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800d04a:	f000 fe33 	bl	800dcb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d04e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d052:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800d054:	f107 0308 	add.w	r3, r7, #8
 800d058:	4619      	mov	r1, r3
 800d05a:	480d      	ldr	r0, [pc, #52]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d05c:	f002 fc13 	bl	800f886 <HAL_TIM_ConfigClockSource>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800d066:	f000 fe25 	bl	800dcb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d06a:	2300      	movs	r3, #0
 800d06c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d06e:	2300      	movs	r3, #0
 800d070:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800d072:	463b      	mov	r3, r7
 800d074:	4619      	mov	r1, r3
 800d076:	4806      	ldr	r0, [pc, #24]	@ (800d090 <MX_TIM1_Init+0x9c>)
 800d078:	f002 fdf2 	bl	800fc60 <HAL_TIMEx_MasterConfigSynchronization>
 800d07c:	4603      	mov	r3, r0
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d001      	beq.n	800d086 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800d082:	f000 fe17 	bl	800dcb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800d086:	bf00      	nop
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	2000033c 	.word	0x2000033c
 800d094:	40010000 	.word	0x40010000

0800d098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d09c:	4b11      	ldr	r3, [pc, #68]	@ (800d0e4 <MX_USART1_UART_Init+0x4c>)
 800d09e:	4a12      	ldr	r2, [pc, #72]	@ (800d0e8 <MX_USART1_UART_Init+0x50>)
 800d0a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d0a2:	4b10      	ldr	r3, [pc, #64]	@ (800d0e4 <MX_USART1_UART_Init+0x4c>)
 800d0a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d0a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d0aa:	4b0e      	ldr	r3, [pc, #56]	@ (800d0e4 <MX_USART1_UART_Init+0x4c>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d0b0:	4b0c      	ldr	r3, [pc, #48]	@ (800d0e4 <MX_USART1_UART_Init+0x4c>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800d0e4 <MX_USART1_UART_Init+0x4c>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d0bc:	4b09      	ldr	r3, [pc, #36]	@ (800d0e4 <MX_USART1_UART_Init+0x4c>)
 800d0be:	220c      	movs	r2, #12
 800d0c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d0c2:	4b08      	ldr	r3, [pc, #32]	@ (800d0e4 <MX_USART1_UART_Init+0x4c>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d0c8:	4b06      	ldr	r3, [pc, #24]	@ (800d0e4 <MX_USART1_UART_Init+0x4c>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d0ce:	4805      	ldr	r0, [pc, #20]	@ (800d0e4 <MX_USART1_UART_Init+0x4c>)
 800d0d0:	f002 fe34 	bl	800fd3c <HAL_UART_Init>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d001      	beq.n	800d0de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d0da:	f000 fdeb 	bl	800dcb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800d0de:	bf00      	nop
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	20000384 	.word	0x20000384
 800d0e8:	40011000 	.word	0x40011000

0800d0ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d0f0:	4b11      	ldr	r3, [pc, #68]	@ (800d138 <MX_USART2_UART_Init+0x4c>)
 800d0f2:	4a12      	ldr	r2, [pc, #72]	@ (800d13c <MX_USART2_UART_Init+0x50>)
 800d0f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d0f6:	4b10      	ldr	r3, [pc, #64]	@ (800d138 <MX_USART2_UART_Init+0x4c>)
 800d0f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d0fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800d138 <MX_USART2_UART_Init+0x4c>)
 800d100:	2200      	movs	r2, #0
 800d102:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d104:	4b0c      	ldr	r3, [pc, #48]	@ (800d138 <MX_USART2_UART_Init+0x4c>)
 800d106:	2200      	movs	r2, #0
 800d108:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d10a:	4b0b      	ldr	r3, [pc, #44]	@ (800d138 <MX_USART2_UART_Init+0x4c>)
 800d10c:	2200      	movs	r2, #0
 800d10e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d110:	4b09      	ldr	r3, [pc, #36]	@ (800d138 <MX_USART2_UART_Init+0x4c>)
 800d112:	220c      	movs	r2, #12
 800d114:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d116:	4b08      	ldr	r3, [pc, #32]	@ (800d138 <MX_USART2_UART_Init+0x4c>)
 800d118:	2200      	movs	r2, #0
 800d11a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d11c:	4b06      	ldr	r3, [pc, #24]	@ (800d138 <MX_USART2_UART_Init+0x4c>)
 800d11e:	2200      	movs	r2, #0
 800d120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d122:	4805      	ldr	r0, [pc, #20]	@ (800d138 <MX_USART2_UART_Init+0x4c>)
 800d124:	f002 fe0a 	bl	800fd3c <HAL_UART_Init>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d12e:	f000 fdc1 	bl	800dcb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800d132:	bf00      	nop
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	200003cc 	.word	0x200003cc
 800d13c:	40004400 	.word	0x40004400

0800d140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08a      	sub	sp, #40	@ 0x28
 800d144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d146:	f107 0314 	add.w	r3, r7, #20
 800d14a:	2200      	movs	r2, #0
 800d14c:	601a      	str	r2, [r3, #0]
 800d14e:	605a      	str	r2, [r3, #4]
 800d150:	609a      	str	r2, [r3, #8]
 800d152:	60da      	str	r2, [r3, #12]
 800d154:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d156:	2300      	movs	r3, #0
 800d158:	613b      	str	r3, [r7, #16]
 800d15a:	4b31      	ldr	r3, [pc, #196]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d15e:	4a30      	ldr	r2, [pc, #192]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d160:	f043 0304 	orr.w	r3, r3, #4
 800d164:	6313      	str	r3, [r2, #48]	@ 0x30
 800d166:	4b2e      	ldr	r3, [pc, #184]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d16a:	f003 0304 	and.w	r3, r3, #4
 800d16e:	613b      	str	r3, [r7, #16]
 800d170:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d172:	2300      	movs	r3, #0
 800d174:	60fb      	str	r3, [r7, #12]
 800d176:	4b2a      	ldr	r3, [pc, #168]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d17a:	4a29      	ldr	r2, [pc, #164]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d17c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d180:	6313      	str	r3, [r2, #48]	@ 0x30
 800d182:	4b27      	ldr	r3, [pc, #156]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d18a:	60fb      	str	r3, [r7, #12]
 800d18c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d18e:	2300      	movs	r3, #0
 800d190:	60bb      	str	r3, [r7, #8]
 800d192:	4b23      	ldr	r3, [pc, #140]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d196:	4a22      	ldr	r2, [pc, #136]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d198:	f043 0301 	orr.w	r3, r3, #1
 800d19c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d19e:	4b20      	ldr	r3, [pc, #128]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d1a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1a2:	f003 0301 	and.w	r3, r3, #1
 800d1a6:	60bb      	str	r3, [r7, #8]
 800d1a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	607b      	str	r3, [r7, #4]
 800d1ae:	4b1c      	ldr	r3, [pc, #112]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d1b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1b2:	4a1b      	ldr	r2, [pc, #108]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d1b4:	f043 0302 	orr.w	r3, r3, #2
 800d1b8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d1ba:	4b19      	ldr	r3, [pc, #100]	@ (800d220 <MX_GPIO_Init+0xe0>)
 800d1bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1be:	f003 0302 	and.w	r3, r3, #2
 800d1c2:	607b      	str	r3, [r7, #4]
 800d1c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	2120      	movs	r1, #32
 800d1ca:	4816      	ldr	r0, [pc, #88]	@ (800d224 <MX_GPIO_Init+0xe4>)
 800d1cc:	f001 fe28 	bl	800ee20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800d1d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d1d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d1d6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d1da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800d1e0:	f107 0314 	add.w	r3, r7, #20
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	4810      	ldr	r0, [pc, #64]	@ (800d228 <MX_GPIO_Init+0xe8>)
 800d1e8:	f001 fc96 	bl	800eb18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800d1ec:	2320      	movs	r3, #32
 800d1ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d1f0:	2301      	movs	r3, #1
 800d1f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800d1fc:	f107 0314 	add.w	r3, r7, #20
 800d200:	4619      	mov	r1, r3
 800d202:	4808      	ldr	r0, [pc, #32]	@ (800d224 <MX_GPIO_Init+0xe4>)
 800d204:	f001 fc88 	bl	800eb18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800d208:	2200      	movs	r2, #0
 800d20a:	2105      	movs	r1, #5
 800d20c:	2028      	movs	r0, #40	@ 0x28
 800d20e:	f001 f926 	bl	800e45e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d212:	2028      	movs	r0, #40	@ 0x28
 800d214:	f001 f93f 	bl	800e496 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d218:	bf00      	nop
 800d21a:	3728      	adds	r7, #40	@ 0x28
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	40023800 	.word	0x40023800
 800d224:	40020000 	.word	0x40020000
 800d228:	40020800 	.word	0x40020800

0800d22c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// Interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af02      	add	r7, sp, #8
 800d232:	4603      	mov	r3, r0
 800d234:	80fb      	strh	r3, [r7, #6]
	uint32_t ulStatusRegister;
  // Execute when blue push button pressed
  if(GPIO_Pin == GPIO_PIN_13) {
 800d236:	88fb      	ldrh	r3, [r7, #6]
 800d238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d23c:	d10c      	bne.n	800d258 <HAL_GPIO_EXTI_Callback+0x2c>
	  printf("-- Button pressed, starting receive task \r\n");
 800d23e:	4809      	ldr	r0, [pc, #36]	@ (800d264 <HAL_GPIO_EXTI_Callback+0x38>)
 800d240:	f005 f8fc 	bl	801243c <puts>

	  //ulStatusRegister = ulReadPeripheralInterruptStatus();
	  //vClearPeripheralInterruptStatus( ulStatusRegister );
	  xTaskNotifyFromISR( receiveTaskHandle, 0x01, eSetBits, NULL );
 800d244:	4b08      	ldr	r3, [pc, #32]	@ (800d268 <HAL_GPIO_EXTI_Callback+0x3c>)
 800d246:	6818      	ldr	r0, [r3, #0]
 800d248:	2300      	movs	r3, #0
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	2300      	movs	r3, #0
 800d24e:	2201      	movs	r2, #1
 800d250:	2101      	movs	r1, #1
 800d252:	f004 f9c9 	bl	80115e8 <xTaskGenericNotifyFromISR>
	  //vTaskResume(receiveTaskHandle);
  } else {
      __NOP();
  }
}
 800d256:	e000      	b.n	800d25a <HAL_GPIO_EXTI_Callback+0x2e>
      __NOP();
 800d258:	bf00      	nop
}
 800d25a:	bf00      	nop
 800d25c:	3708      	adds	r7, #8
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}
 800d262:	bf00      	nop
 800d264:	0801358c 	.word	0x0801358c
 800d268:	20000418 	.word	0x20000418

0800d26c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800d274:	2120      	movs	r1, #32
 800d276:	4804      	ldr	r0, [pc, #16]	@ (800d288 <StartDefaultTask+0x1c>)
 800d278:	f001 fdeb 	bl	800ee52 <HAL_GPIO_TogglePin>
	  //printf("F401: Normal operation \r\n");
	  osDelay(200);
 800d27c:	20c8      	movs	r0, #200	@ 0xc8
 800d27e:	f003 fa6a 	bl	8010756 <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800d282:	bf00      	nop
 800d284:	e7f6      	b.n	800d274 <StartDefaultTask+0x8>
 800d286:	bf00      	nop
 800d288:	40020000 	.word	0x40020000

0800d28c <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 800d28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d290:	b0af      	sub	sp, #188	@ 0xbc
 800d292:	af00      	add	r7, sp, #0
 800d294:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartReceiveTask */
	char input[100];
	/* Infinite loop */
	for (;;) {
		// Wait until button is pressed
		xTaskNotifyWait( 0x00, 0xffffffff, NULL, pdMS_TO_TICKS(100000));
 800d296:	4bbc      	ldr	r3, [pc, #752]	@ (800d588 <StartReceiveTask+0x2fc>)
 800d298:	2200      	movs	r2, #0
 800d29a:	f04f 31ff 	mov.w	r1, #4294967295
 800d29e:	2000      	movs	r0, #0
 800d2a0:	f004 f880 	bl	80113a4 <xTaskNotifyWait>

		// For debugging purposes disable watchdog
		//vTaskSuspend(statusTaskHandle);

		// Read the user input
		printf("\r\n 	Provide update code: \r\n");
 800d2a4:	48b9      	ldr	r0, [pc, #740]	@ (800d58c <StartReceiveTask+0x300>)
 800d2a6:	f005 f8c9 	bl	801243c <puts>
		if (fgets(input, 10, stdin)) {
 800d2aa:	4bb9      	ldr	r3, [pc, #740]	@ (800d590 <StartReceiveTask+0x304>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	210a      	movs	r1, #10
 800d2b8:	f004 ff8c 	bl	80121d4 <fgets>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 81c7 	beq.w	800d652 <StartReceiveTask+0x3c6>
 800d2c4:	466b      	mov	r3, sp
 800d2c6:	461e      	mov	r6, r3
			printf("	Code received:  %s \r\n", input);
 800d2c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2cc:	4619      	mov	r1, r3
 800d2ce:	48b1      	ldr	r0, [pc, #708]	@ (800d594 <StartReceiveTask+0x308>)
 800d2d0:	f005 f84c 	bl	801236c <iprintf>
			uint16_t len = strlen(input);
 800d2d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7fe ff01 	bl	800c0e0 <strlen>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae

			//---- CRC ----
			uint32_t data32bit[len];
 800d2e4:	f8b7 10ae 	ldrh.w	r1, [r7, #174]	@ 0xae
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	3b01      	subs	r3, #1
 800d2ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d2f0:	b28b      	uxth	r3, r1
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	461c      	mov	r4, r3
 800d2f6:	4615      	mov	r5, r2
 800d2f8:	f04f 0200 	mov.w	r2, #0
 800d2fc:	f04f 0300 	mov.w	r3, #0
 800d300:	016b      	lsls	r3, r5, #5
 800d302:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800d306:	0162      	lsls	r2, r4, #5
 800d308:	b28b      	uxth	r3, r1
 800d30a:	2200      	movs	r2, #0
 800d30c:	4698      	mov	r8, r3
 800d30e:	4691      	mov	r9, r2
 800d310:	f04f 0200 	mov.w	r2, #0
 800d314:	f04f 0300 	mov.w	r3, #0
 800d318:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800d31c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800d320:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800d324:	460b      	mov	r3, r1
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	3307      	adds	r3, #7
 800d32a:	08db      	lsrs	r3, r3, #3
 800d32c:	00db      	lsls	r3, r3, #3
 800d32e:	ebad 0d03 	sub.w	sp, sp, r3
 800d332:	466b      	mov	r3, sp
 800d334:	3303      	adds	r3, #3
 800d336:	089b      	lsrs	r3, r3, #2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			for(uint16_t i = 0; i < len; i++){
 800d33e:	2300      	movs	r3, #0
 800d340:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 800d344:	e013      	b.n	800d36e <StartReceiveTask+0xe2>
				data32bit[i] = (uint32_t) input[i];
 800d346:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800d34a:	33a0      	adds	r3, #160	@ 0xa0
 800d34c:	f107 0218 	add.w	r2, r7, #24
 800d350:	4413      	add	r3, r2
 800d352:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800d356:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 800d35a:	4619      	mov	r1, r3
 800d35c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(uint16_t i = 0; i < len; i++){
 800d364:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800d368:	3301      	adds	r3, #1
 800d36a:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 800d36e:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 800d372:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800d376:	429a      	cmp	r2, r3
 800d378:	d3e5      	bcc.n	800d346 <StartReceiveTask+0xba>
			}

			uint32_t crcValue = HAL_CRC_Calculate(&hcrc, data32bit, len);
 800d37a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800d37e:	461a      	mov	r2, r3
 800d380:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d384:	4884      	ldr	r0, [pc, #528]	@ (800d598 <StartReceiveTask+0x30c>)
 800d386:	f001 f8bc 	bl	800e502 <HAL_CRC_Calculate>
 800d38a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
			printf("		crcValue: %lu \r\n", crcValue);
 800d38e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 800d392:	4882      	ldr	r0, [pc, #520]	@ (800d59c <StartReceiveTask+0x310>)
 800d394:	f004 ffea 	bl	801236c <iprintf>

			// Split CRC for storage in EEPROM
			uint8_t a,b,c,d;
			a=(crcValue >> 24) & 0xFF;
 800d398:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d39c:	0e1b      	lsrs	r3, r3, #24
 800d39e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			b=(crcValue >> 16) & 0xFF;
 800d3a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d3a6:	0c1b      	lsrs	r3, r3, #16
 800d3a8:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
			c=(crcValue >> 8) & 0xFF;
 800d3ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d3b0:	0a1b      	lsrs	r3, r3, #8
 800d3b2:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
			d=(crcValue) & 0xFF;
 800d3b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d3ba:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c

			input[len] = a;
 800d3be:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800d3c2:	33a0      	adds	r3, #160	@ 0xa0
 800d3c4:	f107 0218 	add.w	r2, r7, #24
 800d3c8:	189a      	adds	r2, r3, r2
 800d3ca:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800d3ce:	f802 3c94 	strb.w	r3, [r2, #-148]
			input[len+1] = b;
 800d3d2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	33a0      	adds	r3, #160	@ 0xa0
 800d3da:	f107 0218 	add.w	r2, r7, #24
 800d3de:	189a      	adds	r2, r3, r2
 800d3e0:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800d3e4:	f802 3c94 	strb.w	r3, [r2, #-148]
			input[len+2] = c;
 800d3e8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800d3ec:	3302      	adds	r3, #2
 800d3ee:	33a0      	adds	r3, #160	@ 0xa0
 800d3f0:	f107 0218 	add.w	r2, r7, #24
 800d3f4:	189a      	adds	r2, r3, r2
 800d3f6:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 800d3fa:	f802 3c94 	strb.w	r3, [r2, #-148]
			input[len+3] = d;
 800d3fe:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800d402:	3303      	adds	r3, #3
 800d404:	33a0      	adds	r3, #160	@ 0xa0
 800d406:	f107 0218 	add.w	r2, r7, #24
 800d40a:	189a      	adds	r2, r3, r2
 800d40c:	f897 309c 	ldrb.w	r3, [r7, #156]	@ 0x9c
 800d410:	f802 3c94 	strb.w	r3, [r2, #-148]

			//---- Write to EEPROM ----
			dataLengthNew = strlen(input);
 800d414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d418:	4618      	mov	r0, r3
 800d41a:	f7fe fe61 	bl	800c0e0 <strlen>
 800d41e:	4603      	mov	r3, r0
 800d420:	b2db      	uxtb	r3, r3
 800d422:	4a5f      	ldr	r2, [pc, #380]	@ (800d5a0 <StartReceiveTask+0x314>)
 800d424:	7013      	strb	r3, [r2, #0]
			uint16_t VirtAddVarTab[dataLengthNew];
 800d426:	4b5e      	ldr	r3, [pc, #376]	@ (800d5a0 <StartReceiveTask+0x314>)
 800d428:	7819      	ldrb	r1, [r3, #0]
 800d42a:	460b      	mov	r3, r1
 800d42c:	3b01      	subs	r3, #1
 800d42e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d432:	b2cb      	uxtb	r3, r1
 800d434:	2200      	movs	r2, #0
 800d436:	469a      	mov	sl, r3
 800d438:	4693      	mov	fp, r2
 800d43a:	f04f 0200 	mov.w	r2, #0
 800d43e:	f04f 0300 	mov.w	r3, #0
 800d442:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800d446:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800d44a:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800d44e:	b2cb      	uxtb	r3, r1
 800d450:	2200      	movs	r2, #0
 800d452:	613b      	str	r3, [r7, #16]
 800d454:	617a      	str	r2, [r7, #20]
 800d456:	f04f 0200 	mov.w	r2, #0
 800d45a:	f04f 0300 	mov.w	r3, #0
 800d45e:	6978      	ldr	r0, [r7, #20]
 800d460:	0103      	lsls	r3, r0, #4
 800d462:	6938      	ldr	r0, [r7, #16]
 800d464:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800d468:	6938      	ldr	r0, [r7, #16]
 800d46a:	0102      	lsls	r2, r0, #4
 800d46c:	460b      	mov	r3, r1
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	3307      	adds	r3, #7
 800d472:	08db      	lsrs	r3, r3, #3
 800d474:	00db      	lsls	r3, r3, #3
 800d476:	ebad 0d03 	sub.w	sp, sp, r3
 800d47a:	466b      	mov	r3, sp
 800d47c:	3301      	adds	r3, #1
 800d47e:	085b      	lsrs	r3, r3, #1
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

			// Unlock the Flash Program Erase controller
			HAL_FLASH_Unlock();
 800d486:	f001 f8c3 	bl	800e610 <HAL_FLASH_Unlock>

			// EEPROM Init
			if (EE_Init() != EE_OK) {
 800d48a:	f7fe ffa9 	bl	800c3e0 <EE_Init>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <StartReceiveTask+0x20c>
				Error_Handler();
 800d494:	f000 fc0e 	bl	800dcb4 <Error_Handler>
			}

			// Fill EEPROM variables addresses with offset from original data
			for (uint16_t i = 1; i <= dataLengthNew; i++) {
 800d498:	2301      	movs	r3, #1
 800d49a:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 800d49e:	e00f      	b.n	800d4c0 <StartReceiveTask+0x234>
				VirtAddVarTab[i - 1] = 100 + i;
 800d4a0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800d4a4:	1e59      	subs	r1, r3, #1
 800d4a6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800d4aa:	3364      	adds	r3, #100	@ 0x64
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d4b2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			for (uint16_t i = 1; i <= dataLengthNew; i++) {
 800d4b6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 800d4c0:	4b37      	ldr	r3, [pc, #220]	@ (800d5a0 <StartReceiveTask+0x314>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800d4ca:	4293      	cmp	r3, r2
 800d4cc:	d9e8      	bls.n	800d4a0 <StartReceiveTask+0x214>
			}

			// Store values in EEPROM emulation
			for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800d4d4:	e01e      	b.n	800d514 <StartReceiveTask+0x288>
				// Sequence 1
				if ((EE_WriteVariable(VirtAddVarTab[i], input[i])) != HAL_OK) {
 800d4d6:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 800d4da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d4de:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d4e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d4e6:	33a0      	adds	r3, #160	@ 0xa0
 800d4e8:	f107 0118 	add.w	r1, r7, #24
 800d4ec:	440b      	add	r3, r1
 800d4ee:	f813 3c94 	ldrb.w	r3, [r3, #-148]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	f7ff f9c7 	bl	800c888 <EE_WriteVariable>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d004      	beq.n	800d50a <StartReceiveTask+0x27e>
					printf("! Error in saving update data to EEPROM \r\n");
 800d500:	4828      	ldr	r0, [pc, #160]	@ (800d5a4 <StartReceiveTask+0x318>)
 800d502:	f004 ff9b 	bl	801243c <puts>
					Error_Handler();
 800d506:	f000 fbd5 	bl	800dcb4 <Error_Handler>
			for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d50a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d50e:	3301      	adds	r3, #1
 800d510:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800d514:	4b22      	ldr	r3, [pc, #136]	@ (800d5a0 <StartReceiveTask+0x314>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	461a      	mov	r2, r3
 800d51a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d51e:	4293      	cmp	r3, r2
 800d520:	d3d9      	bcc.n	800d4d6 <StartReceiveTask+0x24a>
				}
			}
			//printf("	Update data and CRC saved on EEPROM \r\n");

			// Read values for debugging:
			uint8_t VarDataTabRead[dataLengthNew+10];
 800d522:	4b1f      	ldr	r3, [pc, #124]	@ (800d5a0 <StartReceiveTask+0x314>)
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	f103 010a 	add.w	r1, r3, #10
 800d52a:	1e4b      	subs	r3, r1, #1
 800d52c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d530:	460a      	mov	r2, r1
 800d532:	2300      	movs	r3, #0
 800d534:	60ba      	str	r2, [r7, #8]
 800d536:	60fb      	str	r3, [r7, #12]
 800d538:	f04f 0200 	mov.w	r2, #0
 800d53c:	f04f 0300 	mov.w	r3, #0
 800d540:	68f8      	ldr	r0, [r7, #12]
 800d542:	00c3      	lsls	r3, r0, #3
 800d544:	68b8      	ldr	r0, [r7, #8]
 800d546:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d54a:	68b8      	ldr	r0, [r7, #8]
 800d54c:	00c2      	lsls	r2, r0, #3
 800d54e:	460a      	mov	r2, r1
 800d550:	2300      	movs	r3, #0
 800d552:	603a      	str	r2, [r7, #0]
 800d554:	607b      	str	r3, [r7, #4]
 800d556:	f04f 0200 	mov.w	r2, #0
 800d55a:	f04f 0300 	mov.w	r3, #0
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	00c3      	lsls	r3, r0, #3
 800d562:	6838      	ldr	r0, [r7, #0]
 800d564:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800d568:	6838      	ldr	r0, [r7, #0]
 800d56a:	00c2      	lsls	r2, r0, #3
 800d56c:	460b      	mov	r3, r1
 800d56e:	3307      	adds	r3, #7
 800d570:	08db      	lsrs	r3, r3, #3
 800d572:	00db      	lsls	r3, r3, #3
 800d574:	ebad 0d03 	sub.w	sp, sp, r3
 800d578:	466b      	mov	r3, sp
 800d57a:	3300      	adds	r3, #0
 800d57c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d580:	2300      	movs	r3, #0
 800d582:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 800d586:	e02a      	b.n	800d5de <StartReceiveTask+0x352>
 800d588:	000186a0 	.word	0x000186a0
 800d58c:	080135b8 	.word	0x080135b8
 800d590:	20000024 	.word	0x20000024
 800d594:	080135d4 	.word	0x080135d4
 800d598:	20000334 	.word	0x20000334
 800d59c:	080135ec 	.word	0x080135ec
 800d5a0:	20000425 	.word	0x20000425
 800d5a4:	08013600 	.word	0x08013600
				if ((EE_ReadVariable(VirtAddVarTab[i], &VarDataTabRead[i])) != HAL_OK) {
 800d5a8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 800d5ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d5b0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800d5b4:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 800d5b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d5bc:	4413      	add	r3, r2
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f7ff f918 	bl	800c7f4 <EE_ReadVariable>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d004      	beq.n	800d5d4 <StartReceiveTask+0x348>
					printf("! Error in reading update data from EEPROM \r\n");
 800d5ca:	4825      	ldr	r0, [pc, #148]	@ (800d660 <StartReceiveTask+0x3d4>)
 800d5cc:	f004 ff36 	bl	801243c <puts>
					Error_Handler();
 800d5d0:	f000 fb70 	bl	800dcb4 <Error_Handler>
			for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d5d4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800d5d8:	3301      	adds	r3, #1
 800d5da:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 800d5de:	4b21      	ldr	r3, [pc, #132]	@ (800d664 <StartReceiveTask+0x3d8>)
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800d5e8:	4293      	cmp	r3, r2
 800d5ea:	d3dd      	bcc.n	800d5a8 <StartReceiveTask+0x31c>
				}
			}
			printf("	Successfully read update data: %s \r\n", VarDataTabRead);
 800d5ec:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d5f0:	481d      	ldr	r0, [pc, #116]	@ (800d668 <StartReceiveTask+0x3dc>)
 800d5f2:	f004 febb 	bl	801236c <iprintf>
			uint32_t storedCrc = (((uint32_t)VarDataTabRead[dataLengthNew-4]) << 24) | (((uint32_t)VarDataTabRead[dataLengthNew-3]) << 16) | (((uint32_t)VarDataTabRead[dataLengthNew-2]) << 8) | ((uint32_t)VarDataTabRead[dataLengthNew-1]);
 800d5f6:	4b1b      	ldr	r3, [pc, #108]	@ (800d664 <StartReceiveTask+0x3d8>)
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	1f1a      	subs	r2, r3, #4
 800d5fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d600:	5c9b      	ldrb	r3, [r3, r2]
 800d602:	0619      	lsls	r1, r3, #24
 800d604:	4b17      	ldr	r3, [pc, #92]	@ (800d664 <StartReceiveTask+0x3d8>)
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	1eda      	subs	r2, r3, #3
 800d60a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d60e:	5c9b      	ldrb	r3, [r3, r2]
 800d610:	041b      	lsls	r3, r3, #16
 800d612:	4319      	orrs	r1, r3
 800d614:	4b13      	ldr	r3, [pc, #76]	@ (800d664 <StartReceiveTask+0x3d8>)
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	1e9a      	subs	r2, r3, #2
 800d61a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d61e:	5c9b      	ldrb	r3, [r3, r2]
 800d620:	021b      	lsls	r3, r3, #8
 800d622:	4319      	orrs	r1, r3
 800d624:	4b0f      	ldr	r3, [pc, #60]	@ (800d664 <StartReceiveTask+0x3d8>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	1e5a      	subs	r2, r3, #1
 800d62a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d62e:	5c9b      	ldrb	r3, [r3, r2]
 800d630:	430b      	orrs	r3, r1
 800d632:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			printf("	crc value: %lu \r\n", storedCrc);
 800d636:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800d63a:	480c      	ldr	r0, [pc, #48]	@ (800d66c <StartReceiveTask+0x3e0>)
 800d63c:	f004 fe96 	bl	801236c <iprintf>

			//vTaskSuspend(receiveTaskHandle);
			xTaskNotifyGive(updateTaskHandle);
 800d640:	4b0b      	ldr	r3, [pc, #44]	@ (800d670 <StartReceiveTask+0x3e4>)
 800d642:	6818      	ldr	r0, [r3, #0]
 800d644:	2300      	movs	r3, #0
 800d646:	2202      	movs	r2, #2
 800d648:	2100      	movs	r1, #0
 800d64a:	f003 ff0b 	bl	8011464 <xTaskGenericNotify>
 800d64e:	46b5      	mov	sp, r6
 800d650:	e002      	b.n	800d658 <StartReceiveTask+0x3cc>

		} else {
			printf("! Invalid input \r\n");
 800d652:	4808      	ldr	r0, [pc, #32]	@ (800d674 <StartReceiveTask+0x3e8>)
 800d654:	f004 fef2 	bl	801243c <puts>
		}
		//printf("-- receiveTask finished \r\n");
		osDelay(1);
 800d658:	2001      	movs	r0, #1
 800d65a:	f003 f87c 	bl	8010756 <osDelay>
		xTaskNotifyWait( 0x00, 0xffffffff, NULL, pdMS_TO_TICKS(100000));
 800d65e:	e61a      	b.n	800d296 <StartReceiveTask+0xa>
 800d660:	0801362c 	.word	0x0801362c
 800d664:	20000425 	.word	0x20000425
 800d668:	0801365c 	.word	0x0801365c
 800d66c:	08013684 	.word	0x08013684
 800d670:	20000420 	.word	0x20000420
 800d674:	08013698 	.word	0x08013698

0800d678 <StartStatusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusTask */
void StartStatusTask(void const * argument)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b086      	sub	sp, #24
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusTask */
  int prevTime = HAL_GetTick();
 800d680:	f000 fde2 	bl	800e248 <HAL_GetTick>
 800d684:	4603      	mov	r3, r0
 800d686:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int currentTime = HAL_GetTick();
 800d688:	f000 fdde 	bl	800e248 <HAL_GetTick>
 800d68c:	4603      	mov	r3, r0
 800d68e:	613b      	str	r3, [r7, #16]
	  if(currentTime < prevTime + statusDelay) {
 800d690:	4b16      	ldr	r3, [pc, #88]	@ (800d6ec <StartStatusTask+0x74>)
 800d692:	681a      	ldr	r2, [r3, #0]
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	4413      	add	r3, r2
 800d698:	693a      	ldr	r2, [r7, #16]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	da05      	bge.n	800d6aa <StartStatusTask+0x32>
		  osDelay(currentTime + statusDelay - currentTime);
 800d69e:	4b13      	ldr	r3, [pc, #76]	@ (800d6ec <StartStatusTask+0x74>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f003 f857 	bl	8010756 <osDelay>
 800d6a8:	e7ee      	b.n	800d688 <StartStatusTask+0x10>
	  } else {
		  printf("	F401: Starting status transmission \r\n");
 800d6aa:	4811      	ldr	r0, [pc, #68]	@ (800d6f0 <StartStatusTask+0x78>)
 800d6ac:	f004 fec6 	bl	801243c <puts>
		  uint8_t checkSum = 2+version;
 800d6b0:	4b10      	ldr	r3, [pc, #64]	@ (800d6f4 <StartStatusTask+0x7c>)
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	3302      	adds	r3, #2
 800d6b6:	73fb      	strb	r3, [r7, #15]
		  uint8_t tx_buff[]={1,0,1,0,version,checkSum};
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	723b      	strb	r3, [r7, #8]
 800d6bc:	2300      	movs	r3, #0
 800d6be:	727b      	strb	r3, [r7, #9]
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	72bb      	strb	r3, [r7, #10]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	72fb      	strb	r3, [r7, #11]
 800d6c8:	4b0a      	ldr	r3, [pc, #40]	@ (800d6f4 <StartStatusTask+0x7c>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	733b      	strb	r3, [r7, #12]
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	737b      	strb	r3, [r7, #13]
		  HAL_UART_Transmit(&huart1, tx_buff, 6, 1000);
 800d6d2:	f107 0108 	add.w	r1, r7, #8
 800d6d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6da:	2206      	movs	r2, #6
 800d6dc:	4806      	ldr	r0, [pc, #24]	@ (800d6f8 <StartStatusTask+0x80>)
 800d6de:	f002 fb7d 	bl	800fddc <HAL_UART_Transmit>
		  osDelay(10000);
 800d6e2:	f242 7010 	movw	r0, #10000	@ 0x2710
 800d6e6:	f003 f836 	bl	8010756 <osDelay>
  {
 800d6ea:	e7cd      	b.n	800d688 <StartStatusTask+0x10>
 800d6ec:	20000004 	.word	0x20000004
 800d6f0:	080136ac 	.word	0x080136ac
 800d6f4:	20000000 	.word	0x20000000
 800d6f8:	20000384 	.word	0x20000384

0800d6fc <StartUpdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateTask */
void StartUpdateTask(void const * argument)
{
 800d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	b0af      	sub	sp, #188	@ 0xbc
 800d702:	af00      	add	r7, sp, #0
 800d704:	63f8      	str	r0, [r7, #60]	@ 0x3c
  /* USER CODE BEGIN StartUpdateTask */
  /* Infinite loop */
  for(;;)
  {
 800d706:	466b      	mov	r3, sp
 800d708:	461e      	mov	r6, r3
	  //printf("Task Handle: %s", xTaskGetCurrentTaskHandle());
	  ulTaskNotifyTake( 0x00, pdMS_TO_TICKS(100000) );
 800d70a:	49b6      	ldr	r1, [pc, #728]	@ (800d9e4 <StartUpdateTask+0x2e8>)
 800d70c:	2000      	movs	r0, #0
 800d70e:	f003 fdfd 	bl	801130c <ulTaskNotifyTake>
	  osDelay(500);
 800d712:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800d716:	f003 f81e 	bl	8010756 <osDelay>

	  printf("-- updateTask started \r\n");
 800d71a:	48b3      	ldr	r0, [pc, #716]	@ (800d9e8 <StartUpdateTask+0x2ec>)
 800d71c:	f004 fe8e 	bl	801243c <puts>

	  HAL_FLASH_Unlock();
 800d720:	f000 ff76 	bl	800e610 <HAL_FLASH_Unlock>

		/* EEPROM Init */
		if (EE_Init() != EE_OK) {
 800d724:	f7fe fe5c 	bl	800c3e0 <EE_Init>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d001      	beq.n	800d732 <StartUpdateTask+0x36>
			Error_Handler();
 800d72e:	f000 fac1 	bl	800dcb4 <Error_Handler>
		}

	  // Read from EEPROM
	  // Fill EEPROM variables addresses on the update data
		uint16_t VirtAddNew[dataLengthNew];
 800d732:	4bae      	ldr	r3, [pc, #696]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d734:	7819      	ldrb	r1, [r3, #0]
 800d736:	460b      	mov	r3, r1
 800d738:	3b01      	subs	r3, #1
 800d73a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d73e:	b2cb      	uxtb	r3, r1
 800d740:	2200      	movs	r2, #0
 800d742:	633b      	str	r3, [r7, #48]	@ 0x30
 800d744:	637a      	str	r2, [r7, #52]	@ 0x34
 800d746:	f04f 0200 	mov.w	r2, #0
 800d74a:	f04f 0300 	mov.w	r3, #0
 800d74e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d750:	0103      	lsls	r3, r0, #4
 800d752:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d754:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800d758:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d75a:	0102      	lsls	r2, r0, #4
 800d75c:	b2cb      	uxtb	r3, r1
 800d75e:	2200      	movs	r2, #0
 800d760:	469a      	mov	sl, r3
 800d762:	4693      	mov	fp, r2
 800d764:	f04f 0200 	mov.w	r2, #0
 800d768:	f04f 0300 	mov.w	r3, #0
 800d76c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800d770:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800d774:	ea4f 120a 	mov.w	r2, sl, lsl #4
 800d778:	460b      	mov	r3, r1
 800d77a:	005b      	lsls	r3, r3, #1
 800d77c:	3307      	adds	r3, #7
 800d77e:	08db      	lsrs	r3, r3, #3
 800d780:	00db      	lsls	r3, r3, #3
 800d782:	ebad 0d03 	sub.w	sp, sp, r3
 800d786:	466b      	mov	r3, sp
 800d788:	3301      	adds	r3, #1
 800d78a:	085b      	lsrs	r3, r3, #1
 800d78c:	005b      	lsls	r3, r3, #1
 800d78e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (uint16_t i = 1; i <= dataLengthNew; i++) {
 800d792:	2301      	movs	r3, #1
 800d794:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 800d798:	e00f      	b.n	800d7ba <StartUpdateTask+0xbe>
			VirtAddNew[i - 1] = 100 + i;
 800d79a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800d79e:	1e59      	subs	r1, r3, #1
 800d7a0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800d7a4:	3364      	adds	r3, #100	@ 0x64
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800d7ac:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		for (uint16_t i = 1; i <= dataLengthNew; i++) {
 800d7b0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 800d7ba:	4b8c      	ldr	r3, [pc, #560]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	461a      	mov	r2, r3
 800d7c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d9e8      	bls.n	800d79a <StartUpdateTask+0x9e>
		}
	  char data[50] = "Hallokes";
 800d7c8:	4b89      	ldr	r3, [pc, #548]	@ (800d9f0 <StartUpdateTask+0x2f4>)
 800d7ca:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800d7ce:	6818      	ldr	r0, [r3, #0]
 800d7d0:	6859      	ldr	r1, [r3, #4]
 800d7d2:	c203      	stmia	r2!, {r0, r1}
 800d7d4:	7a1b      	ldrb	r3, [r3, #8]
 800d7d6:	7013      	strb	r3, [r2, #0]
 800d7d8:	f107 0049 	add.w	r0, r7, #73	@ 0x49
 800d7dc:	2329      	movs	r3, #41	@ 0x29
 800d7de:	461a      	mov	r2, r3
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	f005 f841 	bl	8012868 <memset>
	  //uint8_t data[50];
	  for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 800d7ec:	e01a      	b.n	800d824 <StartUpdateTask+0x128>
	  		if ((EE_ReadVariable(VirtAddNew[i], &data[i])) != HAL_OK) {
 800d7ee:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 800d7f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d7f6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800d7fa:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 800d7fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d802:	4413      	add	r3, r2
 800d804:	4619      	mov	r1, r3
 800d806:	f7fe fff5 	bl	800c7f4 <EE_ReadVariable>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d004      	beq.n	800d81a <StartUpdateTask+0x11e>
	  			printf("! Error reading update data \r\n");
 800d810:	4878      	ldr	r0, [pc, #480]	@ (800d9f4 <StartUpdateTask+0x2f8>)
 800d812:	f004 fe13 	bl	801243c <puts>
	  			Error_Handler();
 800d816:	f000 fa4d 	bl	800dcb4 <Error_Handler>
	  for (uint16_t i = 0; i < dataLengthNew; i++) {
 800d81a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800d81e:	3301      	adds	r3, #1
 800d820:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
 800d824:	4b71      	ldr	r3, [pc, #452]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	461a      	mov	r2, r3
 800d82a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800d82e:	4293      	cmp	r3, r2
 800d830:	d3dd      	bcc.n	800d7ee <StartUpdateTask+0xf2>
	  		}
	  }

	  printf("	Update data read from EEPROM: %s \r\n", data);
 800d832:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d836:	4619      	mov	r1, r3
 800d838:	486f      	ldr	r0, [pc, #444]	@ (800d9f8 <StartUpdateTask+0x2fc>)
 800d83a:	f004 fd97 	bl	801236c <iprintf>
	  data[0] ^= faultMask;
	  printf("%i \r\n", data[0]);*/

	  //CRC

	  uint32_t origCRC = (((uint32_t)data[dataLengthNew-4]) << 24) | (((uint32_t)data[dataLengthNew-3]) << 16) | (((uint32_t)data[dataLengthNew-2]) << 8) | ((uint32_t)data[dataLengthNew-1]);
 800d83e:	4b6b      	ldr	r3, [pc, #428]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	3b04      	subs	r3, #4
 800d844:	3380      	adds	r3, #128	@ 0x80
 800d846:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d84a:	4413      	add	r3, r2
 800d84c:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 800d850:	061a      	lsls	r2, r3, #24
 800d852:	4b66      	ldr	r3, [pc, #408]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	3b03      	subs	r3, #3
 800d858:	3380      	adds	r3, #128	@ 0x80
 800d85a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800d85e:	440b      	add	r3, r1
 800d860:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 800d864:	041b      	lsls	r3, r3, #16
 800d866:	431a      	orrs	r2, r3
 800d868:	4b60      	ldr	r3, [pc, #384]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	3b02      	subs	r3, #2
 800d86e:	3380      	adds	r3, #128	@ 0x80
 800d870:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800d874:	440b      	add	r3, r1
 800d876:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 800d87a:	021b      	lsls	r3, r3, #8
 800d87c:	431a      	orrs	r2, r3
 800d87e:	4b5b      	ldr	r3, [pc, #364]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	3b01      	subs	r3, #1
 800d884:	3380      	adds	r3, #128	@ 0x80
 800d886:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800d88a:	440b      	add	r3, r1
 800d88c:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 800d890:	4313      	orrs	r3, r2
 800d892:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	  printf("		Orig CRC: %lu \r\n", origCRC);
 800d896:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800d89a:	4858      	ldr	r0, [pc, #352]	@ (800d9fc <StartUpdateTask+0x300>)
 800d89c:	f004 fd66 	bl	801236c <iprintf>

	  uint32_t data32bit[dataLengthNew-4];
 800d8a0:	4b52      	ldr	r3, [pc, #328]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	1f19      	subs	r1, r3, #4
 800d8a6:	1e4b      	subs	r3, r1, #1
 800d8a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d8ac:	460a      	mov	r2, r1
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800d8b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8b4:	f04f 0200 	mov.w	r2, #0
 800d8b8:	f04f 0300 	mov.w	r3, #0
 800d8bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8be:	0143      	lsls	r3, r0, #5
 800d8c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d8c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8c8:	0142      	lsls	r2, r0, #5
 800d8ca:	460a      	mov	r2, r1
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	623a      	str	r2, [r7, #32]
 800d8d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8d2:	f04f 0200 	mov.w	r2, #0
 800d8d6:	f04f 0300 	mov.w	r3, #0
 800d8da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d8dc:	0143      	lsls	r3, r0, #5
 800d8de:	6a38      	ldr	r0, [r7, #32]
 800d8e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800d8e4:	6a38      	ldr	r0, [r7, #32]
 800d8e6:	0142      	lsls	r2, r0, #5
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	3307      	adds	r3, #7
 800d8ee:	08db      	lsrs	r3, r3, #3
 800d8f0:	00db      	lsls	r3, r3, #3
 800d8f2:	ebad 0d03 	sub.w	sp, sp, r3
 800d8f6:	466b      	mov	r3, sp
 800d8f8:	3303      	adds	r3, #3
 800d8fa:	089b      	lsrs	r3, r3, #2
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	  for(uint16_t i = 0; i < dataLengthNew - 4; i++){
 800d902:	2300      	movs	r3, #0
 800d904:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800d908:	e013      	b.n	800d932 <StartUpdateTask+0x236>
		  data32bit[i] = (uint32_t) data[i];
 800d90a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d90e:	3380      	adds	r3, #128	@ 0x80
 800d910:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d914:	4413      	add	r3, r2
 800d916:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 800d91a:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 800d91e:	4619      	mov	r1, r3
 800d920:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for(uint16_t i = 0; i < dataLengthNew - 4; i++){
 800d928:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800d92c:	3301      	adds	r3, #1
 800d92e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800d932:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	@ 0xb2
 800d936:	4b2d      	ldr	r3, [pc, #180]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	3b04      	subs	r3, #4
 800d93c:	429a      	cmp	r2, r3
 800d93e:	dbe4      	blt.n	800d90a <StartUpdateTask+0x20e>
	  }

	  uint32_t crcValue = HAL_CRC_Calculate(&hcrc, data32bit, dataLengthNew-4);
 800d940:	4b2a      	ldr	r3, [pc, #168]	@ (800d9ec <StartUpdateTask+0x2f0>)
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	3b04      	subs	r3, #4
 800d946:	461a      	mov	r2, r3
 800d948:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d94c:	482c      	ldr	r0, [pc, #176]	@ (800da00 <StartUpdateTask+0x304>)
 800d94e:	f000 fdd8 	bl	800e502 <HAL_CRC_Calculate>
 800d952:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	  printf("		CRC: %lu \r\n", crcValue);
 800d956:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800d95a:	482a      	ldr	r0, [pc, #168]	@ (800da04 <StartUpdateTask+0x308>)
 800d95c:	f004 fd06 	bl	801236c <iprintf>


	  if(crcValue == origCRC){
 800d960:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d968:	429a      	cmp	r2, r3
 800d96a:	d103      	bne.n	800d974 <StartUpdateTask+0x278>
		  printf("		CRC matches memory value \r\n");
 800d96c:	4826      	ldr	r0, [pc, #152]	@ (800da08 <StartUpdateTask+0x30c>)
 800d96e:	f004 fd65 	bl	801243c <puts>
 800d972:	e002      	b.n	800d97a <StartUpdateTask+0x27e>
	  } else {
		  printf("! CRC doesn't match memory, update should be cancelled \r\n");
 800d974:	4825      	ldr	r0, [pc, #148]	@ (800da0c <StartUpdateTask+0x310>)
 800d976:	f004 fd61 	bl	801243c <puts>
	  }

	  // Write to EEPROM
	  // Unlock the Flash Program Erase controller
		uint16_t VirtAddOrig[dataLengthOrig];
 800d97a:	4b25      	ldr	r3, [pc, #148]	@ (800da10 <StartUpdateTask+0x314>)
 800d97c:	7819      	ldrb	r1, [r3, #0]
 800d97e:	460b      	mov	r3, r1
 800d980:	3b01      	subs	r3, #1
 800d982:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d986:	b2cb      	uxtb	r3, r1
 800d988:	2200      	movs	r2, #0
 800d98a:	61bb      	str	r3, [r7, #24]
 800d98c:	61fa      	str	r2, [r7, #28]
 800d98e:	f04f 0200 	mov.w	r2, #0
 800d992:	f04f 0300 	mov.w	r3, #0
 800d996:	69f8      	ldr	r0, [r7, #28]
 800d998:	0103      	lsls	r3, r0, #4
 800d99a:	69b8      	ldr	r0, [r7, #24]
 800d99c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800d9a0:	69b8      	ldr	r0, [r7, #24]
 800d9a2:	0102      	lsls	r2, r0, #4
 800d9a4:	b2cb      	uxtb	r3, r1
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	613b      	str	r3, [r7, #16]
 800d9aa:	617a      	str	r2, [r7, #20]
 800d9ac:	f04f 0200 	mov.w	r2, #0
 800d9b0:	f04f 0300 	mov.w	r3, #0
 800d9b4:	6978      	ldr	r0, [r7, #20]
 800d9b6:	0103      	lsls	r3, r0, #4
 800d9b8:	6938      	ldr	r0, [r7, #16]
 800d9ba:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800d9be:	6938      	ldr	r0, [r7, #16]
 800d9c0:	0102      	lsls	r2, r0, #4
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	005b      	lsls	r3, r3, #1
 800d9c6:	3307      	adds	r3, #7
 800d9c8:	08db      	lsrs	r3, r3, #3
 800d9ca:	00db      	lsls	r3, r3, #3
 800d9cc:	ebad 0d03 	sub.w	sp, sp, r3
 800d9d0:	466b      	mov	r3, sp
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	085b      	lsrs	r3, r3, #1
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			for (uint16_t i = 1; i <= dataLengthOrig; i++) {
 800d9dc:	2301      	movs	r3, #1
 800d9de:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 800d9e2:	e025      	b.n	800da30 <StartUpdateTask+0x334>
 800d9e4:	000186a0 	.word	0x000186a0
 800d9e8:	080136d4 	.word	0x080136d4
 800d9ec:	20000425 	.word	0x20000425
 800d9f0:	080138cc 	.word	0x080138cc
 800d9f4:	080136ec 	.word	0x080136ec
 800d9f8:	0801370c 	.word	0x0801370c
 800d9fc:	08013734 	.word	0x08013734
 800da00:	20000334 	.word	0x20000334
 800da04:	08013748 	.word	0x08013748
 800da08:	08013758 	.word	0x08013758
 800da0c:	08013778 	.word	0x08013778
 800da10:	20000424 	.word	0x20000424
				VirtAddOrig[i - 1] = i;
 800da14:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800da18:	1e59      	subs	r1, r3, #1
 800da1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800da1e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800da22:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			for (uint16_t i = 1; i <= dataLengthOrig; i++) {
 800da26:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800da2a:	3301      	adds	r3, #1
 800da2c:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 800da30:	4b94      	ldr	r3, [pc, #592]	@ (800dc84 <StartUpdateTask+0x588>)
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	461a      	mov	r2, r3
 800da36:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 800da3a:	4293      	cmp	r3, r2
 800da3c:	d9ea      	bls.n	800da14 <StartUpdateTask+0x318>
			}

		// Read values for debugging:
		uint8_t VarDataTabReadA[dataLengthOrig];
 800da3e:	4b91      	ldr	r3, [pc, #580]	@ (800dc84 <StartUpdateTask+0x588>)
 800da40:	7819      	ldrb	r1, [r3, #0]
 800da42:	460b      	mov	r3, r1
 800da44:	3b01      	subs	r3, #1
 800da46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800da4a:	b2cb      	uxtb	r3, r1
 800da4c:	2200      	movs	r2, #0
 800da4e:	60bb      	str	r3, [r7, #8]
 800da50:	60fa      	str	r2, [r7, #12]
 800da52:	f04f 0200 	mov.w	r2, #0
 800da56:	f04f 0300 	mov.w	r3, #0
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	00c3      	lsls	r3, r0, #3
 800da5e:	68b8      	ldr	r0, [r7, #8]
 800da60:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800da64:	68b8      	ldr	r0, [r7, #8]
 800da66:	00c2      	lsls	r2, r0, #3
 800da68:	b2cb      	uxtb	r3, r1
 800da6a:	2200      	movs	r2, #0
 800da6c:	461c      	mov	r4, r3
 800da6e:	4615      	mov	r5, r2
 800da70:	f04f 0200 	mov.w	r2, #0
 800da74:	f04f 0300 	mov.w	r3, #0
 800da78:	00eb      	lsls	r3, r5, #3
 800da7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800da7e:	00e2      	lsls	r2, r4, #3
 800da80:	460b      	mov	r3, r1
 800da82:	3307      	adds	r3, #7
 800da84:	08db      	lsrs	r3, r3, #3
 800da86:	00db      	lsls	r3, r3, #3
 800da88:	ebad 0d03 	sub.w	sp, sp, r3
 800da8c:	466b      	mov	r3, sp
 800da8e:	3300      	adds	r3, #0
 800da90:	67fb      	str	r3, [r7, #124]	@ 0x7c
		for (uint16_t i = 0; i < dataLengthOrig; i++) {
 800da92:	2300      	movs	r3, #0
 800da94:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 800da98:	e019      	b.n	800dace <StartUpdateTask+0x3d2>
			if ((EE_ReadVariable(VirtAddOrig[i], &VarDataTabReadA[i])) != HAL_OK) {
 800da9a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800da9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800daa2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800daa6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800daaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800daac:	4413      	add	r3, r2
 800daae:	4619      	mov	r1, r3
 800dab0:	f7fe fea0 	bl	800c7f4 <EE_ReadVariable>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d004      	beq.n	800dac4 <StartUpdateTask+0x3c8>
				printf("! Error in reading update data after update \r\n");
 800daba:	4873      	ldr	r0, [pc, #460]	@ (800dc88 <StartUpdateTask+0x58c>)
 800dabc:	f004 fcbe 	bl	801243c <puts>
				Error_Handler();
 800dac0:	f000 f8f8 	bl	800dcb4 <Error_Handler>
		for (uint16_t i = 0; i < dataLengthOrig; i++) {
 800dac4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800dac8:	3301      	adds	r3, #1
 800daca:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
 800dace:	4b6d      	ldr	r3, [pc, #436]	@ (800dc84 <StartUpdateTask+0x588>)
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	461a      	mov	r2, r3
 800dad4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 800dad8:	4293      	cmp	r3, r2
 800dada:	d3de      	bcc.n	800da9a <StartUpdateTask+0x39e>
			}
		}
		printf("	Successfully read data prior to update: %s \r\n", VarDataTabReadA);
 800dadc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800dade:	486b      	ldr	r0, [pc, #428]	@ (800dc8c <StartUpdateTask+0x590>)
 800dae0:	f004 fc44 	bl	801236c <iprintf>

		for(uint16_t i = 0; i < dataLengthOrig; i++){
 800dae4:	2300      	movs	r3, #0
 800dae6:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
 800daea:	e00c      	b.n	800db06 <StartUpdateTask+0x40a>
			printf("%u", VarDataTabReadA[i]);
 800daec:	f8b7 20ac 	ldrh.w	r2, [r7, #172]	@ 0xac
 800daf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800daf2:	5c9b      	ldrb	r3, [r3, r2]
 800daf4:	4619      	mov	r1, r3
 800daf6:	4866      	ldr	r0, [pc, #408]	@ (800dc90 <StartUpdateTask+0x594>)
 800daf8:	f004 fc38 	bl	801236c <iprintf>
		for(uint16_t i = 0; i < dataLengthOrig; i++){
 800dafc:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 800db00:	3301      	adds	r3, #1
 800db02:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
 800db06:	4b5f      	ldr	r3, [pc, #380]	@ (800dc84 <StartUpdateTask+0x588>)
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	461a      	mov	r2, r3
 800db0c:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 800db10:	4293      	cmp	r3, r2
 800db12:	d3eb      	bcc.n	800daec <StartUpdateTask+0x3f0>
		}
		printf("\r\n");
 800db14:	485f      	ldr	r0, [pc, #380]	@ (800dc94 <StartUpdateTask+0x598>)
 800db16:	f004 fc91 	bl	801243c <puts>

		//---- UPDATE ----
		printf("	Start writing update data \r\n");
 800db1a:	485f      	ldr	r0, [pc, #380]	@ (800dc98 <StartUpdateTask+0x59c>)
 800db1c:	f004 fc8e 	bl	801243c <puts>
		// Store values in EEPROM emulation except CRC
		for (uint16_t i = 0; i < dataLengthNew - 5; i++) {
 800db20:	2300      	movs	r3, #0
 800db22:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 800db26:	e01e      	b.n	800db66 <StartUpdateTask+0x46a>
			/* Sequence 1 */
			if ((EE_WriteVariable(VirtAddOrig[i], data[i])) != HAL_OK) {
 800db28:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	@ 0xaa
 800db2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800db30:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800db34:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800db38:	3380      	adds	r3, #128	@ 0x80
 800db3a:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800db3e:	440b      	add	r3, r1
 800db40:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 800db44:	4619      	mov	r1, r3
 800db46:	4610      	mov	r0, r2
 800db48:	f7fe fe9e 	bl	800c888 <EE_WriteVariable>
 800db4c:	4603      	mov	r3, r0
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d004      	beq.n	800db5c <StartUpdateTask+0x460>
				printf("! Error in writing update data \r\n");
 800db52:	4852      	ldr	r0, [pc, #328]	@ (800dc9c <StartUpdateTask+0x5a0>)
 800db54:	f004 fc72 	bl	801243c <puts>
				Error_Handler();
 800db58:	f000 f8ac 	bl	800dcb4 <Error_Handler>
		for (uint16_t i = 0; i < dataLengthNew - 5; i++) {
 800db5c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800db60:	3301      	adds	r3, #1
 800db62:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 800db66:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	@ 0xaa
 800db6a:	4b4d      	ldr	r3, [pc, #308]	@ (800dca0 <StartUpdateTask+0x5a4>)
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	3b05      	subs	r3, #5
 800db70:	429a      	cmp	r2, r3
 800db72:	dbd9      	blt.n	800db28 <StartUpdateTask+0x42c>
			}
		}
		printf("	Update data written on EEPROM \r\n");
 800db74:	484b      	ldr	r0, [pc, #300]	@ (800dca4 <StartUpdateTask+0x5a8>)
 800db76:	f004 fc61 	bl	801243c <puts>

		// Read values for debugging:
		uint8_t VarDataTabRead[dataLengthOrig];
 800db7a:	4b42      	ldr	r3, [pc, #264]	@ (800dc84 <StartUpdateTask+0x588>)
 800db7c:	7819      	ldrb	r1, [r3, #0]
 800db7e:	460b      	mov	r3, r1
 800db80:	3b01      	subs	r3, #1
 800db82:	67bb      	str	r3, [r7, #120]	@ 0x78
 800db84:	b2cb      	uxtb	r3, r1
 800db86:	2200      	movs	r2, #0
 800db88:	603b      	str	r3, [r7, #0]
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	f04f 0200 	mov.w	r2, #0
 800db90:	f04f 0300 	mov.w	r3, #0
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	00c3      	lsls	r3, r0, #3
 800db98:	6838      	ldr	r0, [r7, #0]
 800db9a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800db9e:	6838      	ldr	r0, [r7, #0]
 800dba0:	00c2      	lsls	r2, r0, #3
 800dba2:	b2cb      	uxtb	r3, r1
 800dba4:	2200      	movs	r2, #0
 800dba6:	4698      	mov	r8, r3
 800dba8:	4691      	mov	r9, r2
 800dbaa:	f04f 0200 	mov.w	r2, #0
 800dbae:	f04f 0300 	mov.w	r3, #0
 800dbb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dbb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dbba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	3307      	adds	r3, #7
 800dbc2:	08db      	lsrs	r3, r3, #3
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	ebad 0d03 	sub.w	sp, sp, r3
 800dbca:	466b      	mov	r3, sp
 800dbcc:	3300      	adds	r3, #0
 800dbce:	677b      	str	r3, [r7, #116]	@ 0x74
		for (uint16_t i = 0; i < dataLengthOrig; i++) {
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 800dbd6:	e019      	b.n	800dc0c <StartUpdateTask+0x510>
			if ((EE_ReadVariable(VirtAddOrig[i], &VarDataTabRead[i])) != HAL_OK) {
 800dbd8:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	@ 0xa8
 800dbdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dbe0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800dbe4:	f8b7 20a8 	ldrh.w	r2, [r7, #168]	@ 0xa8
 800dbe8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dbea:	4413      	add	r3, r2
 800dbec:	4619      	mov	r1, r3
 800dbee:	f7fe fe01 	bl	800c7f4 <EE_ReadVariable>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d004      	beq.n	800dc02 <StartUpdateTask+0x506>
				printf("! Error in reading update data after update \r\n");
 800dbf8:	4823      	ldr	r0, [pc, #140]	@ (800dc88 <StartUpdateTask+0x58c>)
 800dbfa:	f004 fc1f 	bl	801243c <puts>
				Error_Handler();
 800dbfe:	f000 f859 	bl	800dcb4 <Error_Handler>
		for (uint16_t i = 0; i < dataLengthOrig; i++) {
 800dc02:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 800dc06:	3301      	adds	r3, #1
 800dc08:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
 800dc0c:	4b1d      	ldr	r3, [pc, #116]	@ (800dc84 <StartUpdateTask+0x588>)
 800dc0e:	781b      	ldrb	r3, [r3, #0]
 800dc10:	461a      	mov	r2, r3
 800dc12:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d3de      	bcc.n	800dbd8 <StartUpdateTask+0x4dc>
			}
		}

		printf("\r\n");
 800dc1a:	481e      	ldr	r0, [pc, #120]	@ (800dc94 <StartUpdateTask+0x598>)
 800dc1c:	f004 fc0e 	bl	801243c <puts>
		printf("Successfully read data after update: %s \r\n", VarDataTabRead);
 800dc20:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 800dc22:	4821      	ldr	r0, [pc, #132]	@ (800dca8 <StartUpdateTask+0x5ac>)
 800dc24:	f004 fba2 	bl	801236c <iprintf>
		printf("\r\n");
 800dc28:	481a      	ldr	r0, [pc, #104]	@ (800dc94 <StartUpdateTask+0x598>)
 800dc2a:	f004 fc07 	bl	801243c <puts>

		for(uint16_t i = 0; i < dataLengthOrig+10; i++){
 800dc2e:	2300      	movs	r3, #0
 800dc30:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800dc34:	e00c      	b.n	800dc50 <StartUpdateTask+0x554>
			printf("%u", VarDataTabRead[i]);
 800dc36:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800dc3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dc3c:	5c9b      	ldrb	r3, [r3, r2]
 800dc3e:	4619      	mov	r1, r3
 800dc40:	4813      	ldr	r0, [pc, #76]	@ (800dc90 <StartUpdateTask+0x594>)
 800dc42:	f004 fb93 	bl	801236c <iprintf>
		for(uint16_t i = 0; i < dataLengthOrig+10; i++){
 800dc46:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800dc50:	4b0c      	ldr	r3, [pc, #48]	@ (800dc84 <StartUpdateTask+0x588>)
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	f103 0209 	add.w	r2, r3, #9
 800dc58:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	daea      	bge.n	800dc36 <StartUpdateTask+0x53a>
		}
		printf("\r\n");
 800dc60:	480c      	ldr	r0, [pc, #48]	@ (800dc94 <StartUpdateTask+0x598>)
 800dc62:	f004 fbeb 	bl	801243c <puts>

	  version++;
 800dc66:	4b11      	ldr	r3, [pc, #68]	@ (800dcac <StartUpdateTask+0x5b0>)
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	4a0f      	ldr	r2, [pc, #60]	@ (800dcac <StartUpdateTask+0x5b0>)
 800dc70:	7013      	strb	r3, [r2, #0]
	  printf("Code update successful \r\n");
 800dc72:	480f      	ldr	r0, [pc, #60]	@ (800dcb0 <StartUpdateTask+0x5b4>)
 800dc74:	f004 fbe2 	bl	801243c <puts>


	  // Resume watchdog:
	  //vTaskResume(statusTaskHandle);

	  osDelay(1);
 800dc78:	2001      	movs	r0, #1
 800dc7a:	f002 fd6c 	bl	8010756 <osDelay>
 800dc7e:	46b5      	mov	sp, r6
  {
 800dc80:	e541      	b.n	800d706 <StartUpdateTask+0xa>
 800dc82:	bf00      	nop
 800dc84:	20000424 	.word	0x20000424
 800dc88:	080137b4 	.word	0x080137b4
 800dc8c:	080137e4 	.word	0x080137e4
 800dc90:	08013814 	.word	0x08013814
 800dc94:	08013818 	.word	0x08013818
 800dc98:	0801381c 	.word	0x0801381c
 800dc9c:	0801383c 	.word	0x0801383c
 800dca0:	20000425 	.word	0x20000425
 800dca4:	08013860 	.word	0x08013860
 800dca8:	08013884 	.word	0x08013884
 800dcac:	20000000 	.word	0x20000000
 800dcb0:	080138b0 	.word	0x080138b0

0800dcb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800dcb8:	b672      	cpsid	i
}
 800dcba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  osDelay(1000);
 800dcbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800dcc0:	f002 fd49 	bl	8010756 <osDelay>
  printf("HAL ERROR \r\n");
 800dcc4:	4802      	ldr	r0, [pc, #8]	@ (800dcd0 <Error_Handler+0x1c>)
 800dcc6:	f004 fbb9 	bl	801243c <puts>
  while (1)
 800dcca:	bf00      	nop
 800dccc:	e7fd      	b.n	800dcca <Error_Handler+0x16>
 800dcce:	bf00      	nop
 800dcd0:	080138d8 	.word	0x080138d8

0800dcd4 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800dcdc:	4a07      	ldr	r2, [pc, #28]	@ (800dcfc <RetargetInit+0x28>)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800dce2:	4b07      	ldr	r3, [pc, #28]	@ (800dd00 <RetargetInit+0x2c>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	6898      	ldr	r0, [r3, #8]
 800dce8:	2300      	movs	r3, #0
 800dcea:	2202      	movs	r2, #2
 800dcec:	2100      	movs	r1, #0
 800dcee:	f004 fc2f 	bl	8012550 <setvbuf>
}
 800dcf2:	bf00      	nop
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20000428 	.word	0x20000428
 800dd00:	20000024 	.word	0x20000024

0800dd04 <_isatty>:

int _isatty(int fd) {
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b082      	sub	sp, #8
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	db04      	blt.n	800dd1c <_isatty+0x18>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	dc01      	bgt.n	800dd1c <_isatty+0x18>
    return 1;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	e005      	b.n	800dd28 <_isatty+0x24>

  errno = EBADF;
 800dd1c:	f004 fe48 	bl	80129b0 <__errno>
 800dd20:	4603      	mov	r3, r0
 800dd22:	2209      	movs	r2, #9
 800dd24:	601a      	str	r2, [r3, #0]
  return 0;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <_write>:

int _write(int fd, char* ptr, int len) {
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b086      	sub	sp, #24
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d002      	beq.n	800dd48 <_write+0x18>
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d111      	bne.n	800dd6c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800dd48:	4b0e      	ldr	r3, [pc, #56]	@ (800dd84 <_write+0x54>)
 800dd4a:	6818      	ldr	r0, [r3, #0]
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	f04f 33ff 	mov.w	r3, #4294967295
 800dd54:	68b9      	ldr	r1, [r7, #8]
 800dd56:	f002 f841 	bl	800fddc <HAL_UART_Transmit>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800dd5e:	7dfb      	ldrb	r3, [r7, #23]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <_write+0x38>
      return len;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	e008      	b.n	800dd7a <_write+0x4a>
    else
      return EIO;
 800dd68:	2305      	movs	r3, #5
 800dd6a:	e006      	b.n	800dd7a <_write+0x4a>
  }
  errno = EBADF;
 800dd6c:	f004 fe20 	bl	80129b0 <__errno>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2209      	movs	r2, #9
 800dd74:	601a      	str	r2, [r3, #0]
  return -1;
 800dd76:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3718      	adds	r7, #24
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	20000428 	.word	0x20000428

0800dd88 <_close>:

int _close(int fd) {
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b082      	sub	sp, #8
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	db04      	blt.n	800dda0 <_close+0x18>
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2b02      	cmp	r3, #2
 800dd9a:	dc01      	bgt.n	800dda0 <_close+0x18>
    return 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e006      	b.n	800ddae <_close+0x26>

  errno = EBADF;
 800dda0:	f004 fe06 	bl	80129b0 <__errno>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2209      	movs	r2, #9
 800dda8:	601a      	str	r2, [r3, #0]
  return -1;
 800ddaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b084      	sub	sp, #16
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	60f8      	str	r0, [r7, #12]
 800ddbe:	60b9      	str	r1, [r7, #8]
 800ddc0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800ddc2:	f004 fdf5 	bl	80129b0 <__errno>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2209      	movs	r2, #9
 800ddca:	601a      	str	r2, [r3, #0]
  return -1;
 800ddcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <_read>:

int _read(int fd, char* ptr, int len) {
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b086      	sub	sp, #24
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d110      	bne.n	800de0c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800ddea:	4b0e      	ldr	r3, [pc, #56]	@ (800de24 <_read+0x4c>)
 800ddec:	6818      	ldr	r0, [r3, #0]
 800ddee:	f04f 33ff 	mov.w	r3, #4294967295
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	68b9      	ldr	r1, [r7, #8]
 800ddf6:	f002 f87c 	bl	800fef2 <HAL_UART_Receive>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d101      	bne.n	800de08 <_read+0x30>
      return 1;
 800de04:	2301      	movs	r3, #1
 800de06:	e008      	b.n	800de1a <_read+0x42>
    else
      return EIO;
 800de08:	2305      	movs	r3, #5
 800de0a:	e006      	b.n	800de1a <_read+0x42>
  }
  errno = EBADF;
 800de0c:	f004 fdd0 	bl	80129b0 <__errno>
 800de10:	4603      	mov	r3, r0
 800de12:	2209      	movs	r2, #9
 800de14:	601a      	str	r2, [r3, #0]
  return -1;
 800de16:	f04f 33ff 	mov.w	r3, #4294967295
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3718      	adds	r7, #24
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
 800de22:	bf00      	nop
 800de24:	20000428 	.word	0x20000428

0800de28 <_fstat>:

int _fstat(int fd, struct stat* st) {
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	db08      	blt.n	800de4a <_fstat+0x22>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	dc05      	bgt.n	800de4a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800de44:	605a      	str	r2, [r3, #4]
    return 0;
 800de46:	2300      	movs	r3, #0
 800de48:	e005      	b.n	800de56 <_fstat+0x2e>
  }

  errno = EBADF;
 800de4a:	f004 fdb1 	bl	80129b0 <__errno>
 800de4e:	4603      	mov	r3, r0
 800de50:	2209      	movs	r2, #9
 800de52:	601a      	str	r2, [r3, #0]
  return 0;
 800de54:	2300      	movs	r3, #0
}
 800de56:	4618      	mov	r0, r3
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
	...

0800de60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800de66:	2300      	movs	r3, #0
 800de68:	607b      	str	r3, [r7, #4]
 800de6a:	4b12      	ldr	r3, [pc, #72]	@ (800deb4 <HAL_MspInit+0x54>)
 800de6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de6e:	4a11      	ldr	r2, [pc, #68]	@ (800deb4 <HAL_MspInit+0x54>)
 800de70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800de74:	6453      	str	r3, [r2, #68]	@ 0x44
 800de76:	4b0f      	ldr	r3, [pc, #60]	@ (800deb4 <HAL_MspInit+0x54>)
 800de78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de7e:	607b      	str	r3, [r7, #4]
 800de80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800de82:	2300      	movs	r3, #0
 800de84:	603b      	str	r3, [r7, #0]
 800de86:	4b0b      	ldr	r3, [pc, #44]	@ (800deb4 <HAL_MspInit+0x54>)
 800de88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de8a:	4a0a      	ldr	r2, [pc, #40]	@ (800deb4 <HAL_MspInit+0x54>)
 800de8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de90:	6413      	str	r3, [r2, #64]	@ 0x40
 800de92:	4b08      	ldr	r3, [pc, #32]	@ (800deb4 <HAL_MspInit+0x54>)
 800de94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800de9a:	603b      	str	r3, [r7, #0]
 800de9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800de9e:	2200      	movs	r2, #0
 800dea0:	210f      	movs	r1, #15
 800dea2:	f06f 0001 	mvn.w	r0, #1
 800dea6:	f000 fada 	bl	800e45e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800deaa:	bf00      	nop
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	40023800 	.word	0x40023800

0800deb8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a0b      	ldr	r2, [pc, #44]	@ (800def4 <HAL_CRC_MspInit+0x3c>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d10d      	bne.n	800dee6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800deca:	2300      	movs	r3, #0
 800decc:	60fb      	str	r3, [r7, #12]
 800dece:	4b0a      	ldr	r3, [pc, #40]	@ (800def8 <HAL_CRC_MspInit+0x40>)
 800ded0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ded2:	4a09      	ldr	r2, [pc, #36]	@ (800def8 <HAL_CRC_MspInit+0x40>)
 800ded4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ded8:	6313      	str	r3, [r2, #48]	@ 0x30
 800deda:	4b07      	ldr	r3, [pc, #28]	@ (800def8 <HAL_CRC_MspInit+0x40>)
 800dedc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dee2:	60fb      	str	r3, [r7, #12]
 800dee4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800dee6:	bf00      	nop
 800dee8:	3714      	adds	r7, #20
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr
 800def2:	bf00      	nop
 800def4:	40023000 	.word	0x40023000
 800def8:	40023800 	.word	0x40023800

0800defc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	4a0b      	ldr	r2, [pc, #44]	@ (800df38 <HAL_TIM_Base_MspInit+0x3c>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d10d      	bne.n	800df2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800df0e:	2300      	movs	r3, #0
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	4b0a      	ldr	r3, [pc, #40]	@ (800df3c <HAL_TIM_Base_MspInit+0x40>)
 800df14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df16:	4a09      	ldr	r2, [pc, #36]	@ (800df3c <HAL_TIM_Base_MspInit+0x40>)
 800df18:	f043 0301 	orr.w	r3, r3, #1
 800df1c:	6453      	str	r3, [r2, #68]	@ 0x44
 800df1e:	4b07      	ldr	r3, [pc, #28]	@ (800df3c <HAL_TIM_Base_MspInit+0x40>)
 800df20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800df2a:	bf00      	nop
 800df2c:	3714      	adds	r7, #20
 800df2e:	46bd      	mov	sp, r7
 800df30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	40010000 	.word	0x40010000
 800df3c:	40023800 	.word	0x40023800

0800df40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08c      	sub	sp, #48	@ 0x30
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df48:	f107 031c 	add.w	r3, r7, #28
 800df4c:	2200      	movs	r2, #0
 800df4e:	601a      	str	r2, [r3, #0]
 800df50:	605a      	str	r2, [r3, #4]
 800df52:	609a      	str	r2, [r3, #8]
 800df54:	60da      	str	r2, [r3, #12]
 800df56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	4a32      	ldr	r2, [pc, #200]	@ (800e028 <HAL_UART_MspInit+0xe8>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d12d      	bne.n	800dfbe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800df62:	2300      	movs	r3, #0
 800df64:	61bb      	str	r3, [r7, #24]
 800df66:	4b31      	ldr	r3, [pc, #196]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800df68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df6a:	4a30      	ldr	r2, [pc, #192]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800df6c:	f043 0310 	orr.w	r3, r3, #16
 800df70:	6453      	str	r3, [r2, #68]	@ 0x44
 800df72:	4b2e      	ldr	r3, [pc, #184]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800df74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df76:	f003 0310 	and.w	r3, r3, #16
 800df7a:	61bb      	str	r3, [r7, #24]
 800df7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df7e:	2300      	movs	r3, #0
 800df80:	617b      	str	r3, [r7, #20]
 800df82:	4b2a      	ldr	r3, [pc, #168]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800df84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df86:	4a29      	ldr	r2, [pc, #164]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800df88:	f043 0301 	orr.w	r3, r3, #1
 800df8c:	6313      	str	r3, [r2, #48]	@ 0x30
 800df8e:	4b27      	ldr	r3, [pc, #156]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800df90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df92:	f003 0301 	and.w	r3, r3, #1
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800df9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800df9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800dfac:	2307      	movs	r3, #7
 800dfae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfb0:	f107 031c 	add.w	r3, r7, #28
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	481e      	ldr	r0, [pc, #120]	@ (800e030 <HAL_UART_MspInit+0xf0>)
 800dfb8:	f000 fdae 	bl	800eb18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800dfbc:	e030      	b.n	800e020 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a1c      	ldr	r2, [pc, #112]	@ (800e034 <HAL_UART_MspInit+0xf4>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d12b      	bne.n	800e020 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800dfc8:	2300      	movs	r3, #0
 800dfca:	613b      	str	r3, [r7, #16]
 800dfcc:	4b17      	ldr	r3, [pc, #92]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800dfce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfd0:	4a16      	ldr	r2, [pc, #88]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800dfd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dfd6:	6413      	str	r3, [r2, #64]	@ 0x40
 800dfd8:	4b14      	ldr	r3, [pc, #80]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800dfda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dfe0:	613b      	str	r3, [r7, #16]
 800dfe2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	60fb      	str	r3, [r7, #12]
 800dfe8:	4b10      	ldr	r3, [pc, #64]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800dfea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfec:	4a0f      	ldr	r2, [pc, #60]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800dfee:	f043 0301 	orr.w	r3, r3, #1
 800dff2:	6313      	str	r3, [r2, #48]	@ 0x30
 800dff4:	4b0d      	ldr	r3, [pc, #52]	@ (800e02c <HAL_UART_MspInit+0xec>)
 800dff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dff8:	f003 0301 	and.w	r3, r3, #1
 800dffc:	60fb      	str	r3, [r7, #12]
 800dffe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800e000:	230c      	movs	r3, #12
 800e002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e004:	2302      	movs	r3, #2
 800e006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e008:	2300      	movs	r3, #0
 800e00a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e00c:	2300      	movs	r3, #0
 800e00e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e010:	2307      	movs	r3, #7
 800e012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e014:	f107 031c 	add.w	r3, r7, #28
 800e018:	4619      	mov	r1, r3
 800e01a:	4805      	ldr	r0, [pc, #20]	@ (800e030 <HAL_UART_MspInit+0xf0>)
 800e01c:	f000 fd7c 	bl	800eb18 <HAL_GPIO_Init>
}
 800e020:	bf00      	nop
 800e022:	3730      	adds	r7, #48	@ 0x30
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	40011000 	.word	0x40011000
 800e02c:	40023800 	.word	0x40023800
 800e030:	40020000 	.word	0x40020000
 800e034:	40004400 	.word	0x40004400

0800e038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e038:	b480      	push	{r7}
 800e03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800e03c:	bf00      	nop
 800e03e:	e7fd      	b.n	800e03c <NMI_Handler+0x4>

0800e040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e040:	b480      	push	{r7}
 800e042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e044:	bf00      	nop
 800e046:	e7fd      	b.n	800e044 <HardFault_Handler+0x4>

0800e048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e048:	b480      	push	{r7}
 800e04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e04c:	bf00      	nop
 800e04e:	e7fd      	b.n	800e04c <MemManage_Handler+0x4>

0800e050 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e050:	b480      	push	{r7}
 800e052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e054:	bf00      	nop
 800e056:	e7fd      	b.n	800e054 <BusFault_Handler+0x4>

0800e058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e058:	b480      	push	{r7}
 800e05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e05c:	bf00      	nop
 800e05e:	e7fd      	b.n	800e05c <UsageFault_Handler+0x4>

0800e060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e060:	b480      	push	{r7}
 800e062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e064:	bf00      	nop
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr

0800e06e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e072:	f000 f8d5 	bl	800e220 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e076:	f003 f92b 	bl	80112d0 <xTaskGetSchedulerState>
 800e07a:	4603      	mov	r3, r0
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	d001      	beq.n	800e084 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800e080:	f003 fdc2 	bl	8011c08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e084:	bf00      	nop
 800e086:	bd80      	pop	{r7, pc}

0800e088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800e08c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e090:	f000 fefa 	bl	800ee88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e094:	bf00      	nop
 800e096:	bd80      	pop	{r7, pc}

0800e098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b086      	sub	sp, #24
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e0a0:	4a14      	ldr	r2, [pc, #80]	@ (800e0f4 <_sbrk+0x5c>)
 800e0a2:	4b15      	ldr	r3, [pc, #84]	@ (800e0f8 <_sbrk+0x60>)
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e0ac:	4b13      	ldr	r3, [pc, #76]	@ (800e0fc <_sbrk+0x64>)
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d102      	bne.n	800e0ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e0b4:	4b11      	ldr	r3, [pc, #68]	@ (800e0fc <_sbrk+0x64>)
 800e0b6:	4a12      	ldr	r2, [pc, #72]	@ (800e100 <_sbrk+0x68>)
 800e0b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e0ba:	4b10      	ldr	r3, [pc, #64]	@ (800e0fc <_sbrk+0x64>)
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	4413      	add	r3, r2
 800e0c2:	693a      	ldr	r2, [r7, #16]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	d207      	bcs.n	800e0d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e0c8:	f004 fc72 	bl	80129b0 <__errno>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	220c      	movs	r2, #12
 800e0d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800e0d6:	e009      	b.n	800e0ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e0d8:	4b08      	ldr	r3, [pc, #32]	@ (800e0fc <_sbrk+0x64>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e0de:	4b07      	ldr	r3, [pc, #28]	@ (800e0fc <_sbrk+0x64>)
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	4a05      	ldr	r2, [pc, #20]	@ (800e0fc <_sbrk+0x64>)
 800e0e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3718      	adds	r7, #24
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	20018000 	.word	0x20018000
 800e0f8:	00000512 	.word	0x00000512
 800e0fc:	2000042c 	.word	0x2000042c
 800e100:	20004358 	.word	0x20004358

0800e104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800e108:	4b06      	ldr	r3, [pc, #24]	@ (800e124 <SystemInit+0x20>)
 800e10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e10e:	4a05      	ldr	r2, [pc, #20]	@ (800e124 <SystemInit+0x20>)
 800e110:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e114:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e118:	bf00      	nop
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop
 800e124:	e000ed00 	.word	0xe000ed00

0800e128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800e128:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800e160 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800e12c:	f7ff ffea 	bl	800e104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e130:	480c      	ldr	r0, [pc, #48]	@ (800e164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800e132:	490d      	ldr	r1, [pc, #52]	@ (800e168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800e134:	4a0d      	ldr	r2, [pc, #52]	@ (800e16c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800e136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e138:	e002      	b.n	800e140 <LoopCopyDataInit>

0800e13a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e13a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e13c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e13e:	3304      	adds	r3, #4

0800e140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e144:	d3f9      	bcc.n	800e13a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e146:	4a0a      	ldr	r2, [pc, #40]	@ (800e170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800e148:	4c0a      	ldr	r4, [pc, #40]	@ (800e174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800e14a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e14c:	e001      	b.n	800e152 <LoopFillZerobss>

0800e14e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e14e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e150:	3204      	adds	r2, #4

0800e152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e154:	d3fb      	bcc.n	800e14e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800e156:	f004 fc31 	bl	80129bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e15a:	f7fe fd87 	bl	800cc6c <main>
  bx  lr    
 800e15e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800e160:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800e164:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e168:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800e16c:	08013948 	.word	0x08013948
  ldr r2, =_sbss
 800e170:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800e174:	20004358 	.word	0x20004358

0800e178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e178:	e7fe      	b.n	800e178 <ADC_IRQHandler>
	...

0800e17c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e180:	4b0e      	ldr	r3, [pc, #56]	@ (800e1bc <HAL_Init+0x40>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	4a0d      	ldr	r2, [pc, #52]	@ (800e1bc <HAL_Init+0x40>)
 800e186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e18a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e18c:	4b0b      	ldr	r3, [pc, #44]	@ (800e1bc <HAL_Init+0x40>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a0a      	ldr	r2, [pc, #40]	@ (800e1bc <HAL_Init+0x40>)
 800e192:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e196:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e198:	4b08      	ldr	r3, [pc, #32]	@ (800e1bc <HAL_Init+0x40>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a07      	ldr	r2, [pc, #28]	@ (800e1bc <HAL_Init+0x40>)
 800e19e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e1a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e1a4:	2003      	movs	r0, #3
 800e1a6:	f000 f94f 	bl	800e448 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e1aa:	200f      	movs	r0, #15
 800e1ac:	f000 f808 	bl	800e1c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e1b0:	f7ff fe56 	bl	800de60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	40023c00 	.word	0x40023c00

0800e1c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e1c8:	4b12      	ldr	r3, [pc, #72]	@ (800e214 <HAL_InitTick+0x54>)
 800e1ca:	681a      	ldr	r2, [r3, #0]
 800e1cc:	4b12      	ldr	r3, [pc, #72]	@ (800e218 <HAL_InitTick+0x58>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e1d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1da:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f000 f967 	bl	800e4b2 <HAL_SYSTICK_Config>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d001      	beq.n	800e1ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	e00e      	b.n	800e20c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b0f      	cmp	r3, #15
 800e1f2:	d80a      	bhi.n	800e20a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	6879      	ldr	r1, [r7, #4]
 800e1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1fc:	f000 f92f 	bl	800e45e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800e200:	4a06      	ldr	r2, [pc, #24]	@ (800e21c <HAL_InitTick+0x5c>)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800e206:	2300      	movs	r3, #0
 800e208:	e000      	b.n	800e20c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800e20a:	2301      	movs	r3, #1
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	20000008 	.word	0x20000008
 800e218:	20000010 	.word	0x20000010
 800e21c:	2000000c 	.word	0x2000000c

0800e220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e220:	b480      	push	{r7}
 800e222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e224:	4b06      	ldr	r3, [pc, #24]	@ (800e240 <HAL_IncTick+0x20>)
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	461a      	mov	r2, r3
 800e22a:	4b06      	ldr	r3, [pc, #24]	@ (800e244 <HAL_IncTick+0x24>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4413      	add	r3, r2
 800e230:	4a04      	ldr	r2, [pc, #16]	@ (800e244 <HAL_IncTick+0x24>)
 800e232:	6013      	str	r3, [r2, #0]
}
 800e234:	bf00      	nop
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop
 800e240:	20000010 	.word	0x20000010
 800e244:	20000494 	.word	0x20000494

0800e248 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e248:	b480      	push	{r7}
 800e24a:	af00      	add	r7, sp, #0
  return uwTick;
 800e24c:	4b03      	ldr	r3, [pc, #12]	@ (800e25c <HAL_GetTick+0x14>)
 800e24e:	681b      	ldr	r3, [r3, #0]
}
 800e250:	4618      	mov	r0, r3
 800e252:	46bd      	mov	sp, r7
 800e254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e258:	4770      	bx	lr
 800e25a:	bf00      	nop
 800e25c:	20000494 	.word	0x20000494

0800e260 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800e268:	f7ff ffee 	bl	800e248 <HAL_GetTick>
 800e26c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e278:	d005      	beq.n	800e286 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800e27a:	4b0a      	ldr	r3, [pc, #40]	@ (800e2a4 <HAL_Delay+0x44>)
 800e27c:	781b      	ldrb	r3, [r3, #0]
 800e27e:	461a      	mov	r2, r3
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	4413      	add	r3, r2
 800e284:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800e286:	bf00      	nop
 800e288:	f7ff ffde 	bl	800e248 <HAL_GetTick>
 800e28c:	4602      	mov	r2, r0
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	1ad3      	subs	r3, r2, r3
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	429a      	cmp	r2, r3
 800e296:	d8f7      	bhi.n	800e288 <HAL_Delay+0x28>
  {
  }
}
 800e298:	bf00      	nop
 800e29a:	bf00      	nop
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20000010 	.word	0x20000010

0800e2a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f003 0307 	and.w	r3, r3, #7
 800e2b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e2b8:	4b0c      	ldr	r3, [pc, #48]	@ (800e2ec <__NVIC_SetPriorityGrouping+0x44>)
 800e2ba:	68db      	ldr	r3, [r3, #12]
 800e2bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e2be:	68ba      	ldr	r2, [r7, #8]
 800e2c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800e2c4:	4013      	ands	r3, r2
 800e2c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800e2d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800e2d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800e2d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800e2da:	4a04      	ldr	r2, [pc, #16]	@ (800e2ec <__NVIC_SetPriorityGrouping+0x44>)
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	60d3      	str	r3, [r2, #12]
}
 800e2e0:	bf00      	nop
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr
 800e2ec:	e000ed00 	.word	0xe000ed00

0800e2f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800e2f4:	4b04      	ldr	r3, [pc, #16]	@ (800e308 <__NVIC_GetPriorityGrouping+0x18>)
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	0a1b      	lsrs	r3, r3, #8
 800e2fa:	f003 0307 	and.w	r3, r3, #7
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr
 800e308:	e000ed00 	.word	0xe000ed00

0800e30c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	4603      	mov	r3, r0
 800e314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	db0b      	blt.n	800e336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e31e:	79fb      	ldrb	r3, [r7, #7]
 800e320:	f003 021f 	and.w	r2, r3, #31
 800e324:	4907      	ldr	r1, [pc, #28]	@ (800e344 <__NVIC_EnableIRQ+0x38>)
 800e326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e32a:	095b      	lsrs	r3, r3, #5
 800e32c:	2001      	movs	r0, #1
 800e32e:	fa00 f202 	lsl.w	r2, r0, r2
 800e332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800e336:	bf00      	nop
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	e000e100 	.word	0xe000e100

0800e348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	4603      	mov	r3, r0
 800e350:	6039      	str	r1, [r7, #0]
 800e352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	db0a      	blt.n	800e372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	b2da      	uxtb	r2, r3
 800e360:	490c      	ldr	r1, [pc, #48]	@ (800e394 <__NVIC_SetPriority+0x4c>)
 800e362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e366:	0112      	lsls	r2, r2, #4
 800e368:	b2d2      	uxtb	r2, r2
 800e36a:	440b      	add	r3, r1
 800e36c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800e370:	e00a      	b.n	800e388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	b2da      	uxtb	r2, r3
 800e376:	4908      	ldr	r1, [pc, #32]	@ (800e398 <__NVIC_SetPriority+0x50>)
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	f003 030f 	and.w	r3, r3, #15
 800e37e:	3b04      	subs	r3, #4
 800e380:	0112      	lsls	r2, r2, #4
 800e382:	b2d2      	uxtb	r2, r2
 800e384:	440b      	add	r3, r1
 800e386:	761a      	strb	r2, [r3, #24]
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr
 800e394:	e000e100 	.word	0xe000e100
 800e398:	e000ed00 	.word	0xe000ed00

0800e39c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b089      	sub	sp, #36	@ 0x24
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f003 0307 	and.w	r3, r3, #7
 800e3ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	f1c3 0307 	rsb	r3, r3, #7
 800e3b6:	2b04      	cmp	r3, #4
 800e3b8:	bf28      	it	cs
 800e3ba:	2304      	movcs	r3, #4
 800e3bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800e3be:	69fb      	ldr	r3, [r7, #28]
 800e3c0:	3304      	adds	r3, #4
 800e3c2:	2b06      	cmp	r3, #6
 800e3c4:	d902      	bls.n	800e3cc <NVIC_EncodePriority+0x30>
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	3b03      	subs	r3, #3
 800e3ca:	e000      	b.n	800e3ce <NVIC_EncodePriority+0x32>
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	fa02 f303 	lsl.w	r3, r2, r3
 800e3da:	43da      	mvns	r2, r3
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	401a      	ands	r2, r3
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800e3e4:	f04f 31ff 	mov.w	r1, #4294967295
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	fa01 f303 	lsl.w	r3, r1, r3
 800e3ee:	43d9      	mvns	r1, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800e3f4:	4313      	orrs	r3, r2
         );
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3724      	adds	r7, #36	@ 0x24
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
	...

0800e404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b082      	sub	sp, #8
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	3b01      	subs	r3, #1
 800e410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e414:	d301      	bcc.n	800e41a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800e416:	2301      	movs	r3, #1
 800e418:	e00f      	b.n	800e43a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800e41a:	4a0a      	ldr	r2, [pc, #40]	@ (800e444 <SysTick_Config+0x40>)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3b01      	subs	r3, #1
 800e420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800e422:	210f      	movs	r1, #15
 800e424:	f04f 30ff 	mov.w	r0, #4294967295
 800e428:	f7ff ff8e 	bl	800e348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800e42c:	4b05      	ldr	r3, [pc, #20]	@ (800e444 <SysTick_Config+0x40>)
 800e42e:	2200      	movs	r2, #0
 800e430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800e432:	4b04      	ldr	r3, [pc, #16]	@ (800e444 <SysTick_Config+0x40>)
 800e434:	2207      	movs	r2, #7
 800e436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3708      	adds	r7, #8
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	e000e010 	.word	0xe000e010

0800e448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7ff ff29 	bl	800e2a8 <__NVIC_SetPriorityGrouping>
}
 800e456:	bf00      	nop
 800e458:	3708      	adds	r7, #8
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}

0800e45e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800e45e:	b580      	push	{r7, lr}
 800e460:	b086      	sub	sp, #24
 800e462:	af00      	add	r7, sp, #0
 800e464:	4603      	mov	r3, r0
 800e466:	60b9      	str	r1, [r7, #8]
 800e468:	607a      	str	r2, [r7, #4]
 800e46a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800e46c:	2300      	movs	r3, #0
 800e46e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800e470:	f7ff ff3e 	bl	800e2f0 <__NVIC_GetPriorityGrouping>
 800e474:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800e476:	687a      	ldr	r2, [r7, #4]
 800e478:	68b9      	ldr	r1, [r7, #8]
 800e47a:	6978      	ldr	r0, [r7, #20]
 800e47c:	f7ff ff8e 	bl	800e39c <NVIC_EncodePriority>
 800e480:	4602      	mov	r2, r0
 800e482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e486:	4611      	mov	r1, r2
 800e488:	4618      	mov	r0, r3
 800e48a:	f7ff ff5d 	bl	800e348 <__NVIC_SetPriority>
}
 800e48e:	bf00      	nop
 800e490:	3718      	adds	r7, #24
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b082      	sub	sp, #8
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	4603      	mov	r3, r0
 800e49e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800e4a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7ff ff31 	bl	800e30c <__NVIC_EnableIRQ>
}
 800e4aa:	bf00      	nop
 800e4ac:	3708      	adds	r7, #8
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b082      	sub	sp, #8
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f7ff ffa2 	bl	800e404 <SysTick_Config>
 800e4c0:	4603      	mov	r3, r0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3708      	adds	r7, #8
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b082      	sub	sp, #8
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d101      	bne.n	800e4dc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	e00e      	b.n	800e4fa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	795b      	ldrb	r3, [r3, #5]
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d105      	bne.n	800e4f2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f7ff fce3 	bl	800deb8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800e4f8:	2300      	movs	r3, #0
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3708      	adds	r7, #8
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}

0800e502 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800e502:	b480      	push	{r7}
 800e504:	b087      	sub	sp, #28
 800e506:	af00      	add	r7, sp, #0
 800e508:	60f8      	str	r0, [r7, #12]
 800e50a:	60b9      	str	r1, [r7, #8]
 800e50c:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800e50e:	2300      	movs	r3, #0
 800e510:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2202      	movs	r2, #2
 800e516:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	689a      	ldr	r2, [r3, #8]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f042 0201 	orr.w	r2, r2, #1
 800e526:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800e528:	2300      	movs	r3, #0
 800e52a:	617b      	str	r3, [r7, #20]
 800e52c:	e00a      	b.n	800e544 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	441a      	add	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	6812      	ldr	r2, [r2, #0]
 800e53c:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	3301      	adds	r3, #1
 800e542:	617b      	str	r3, [r7, #20]
 800e544:	697a      	ldr	r2, [r7, #20]
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	429a      	cmp	r2, r3
 800e54a:	d3f0      	bcc.n	800e52e <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2201      	movs	r2, #1
 800e558:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800e55a:	693b      	ldr	r3, [r7, #16]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	371c      	adds	r7, #28
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e57a:	4b23      	ldr	r3, [pc, #140]	@ (800e608 <HAL_FLASH_Program+0xa0>)
 800e57c:	7e1b      	ldrb	r3, [r3, #24]
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d101      	bne.n	800e586 <HAL_FLASH_Program+0x1e>
 800e582:	2302      	movs	r3, #2
 800e584:	e03b      	b.n	800e5fe <HAL_FLASH_Program+0x96>
 800e586:	4b20      	ldr	r3, [pc, #128]	@ (800e608 <HAL_FLASH_Program+0xa0>)
 800e588:	2201      	movs	r2, #1
 800e58a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e58c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e590:	f000 f860 	bl	800e654 <FLASH_WaitForLastOperation>
 800e594:	4603      	mov	r3, r0
 800e596:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800e598:	7dfb      	ldrb	r3, [r7, #23]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d12b      	bne.n	800e5f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d105      	bne.n	800e5b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800e5a4:	783b      	ldrb	r3, [r7, #0]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	68b8      	ldr	r0, [r7, #8]
 800e5aa:	f000 f90b 	bl	800e7c4 <FLASH_Program_Byte>
 800e5ae:	e016      	b.n	800e5de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d105      	bne.n	800e5c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800e5b6:	883b      	ldrh	r3, [r7, #0]
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	68b8      	ldr	r0, [r7, #8]
 800e5bc:	f000 f8de 	bl	800e77c <FLASH_Program_HalfWord>
 800e5c0:	e00d      	b.n	800e5de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2b02      	cmp	r3, #2
 800e5c6:	d105      	bne.n	800e5d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	68b8      	ldr	r0, [r7, #8]
 800e5ce:	f000 f8b3 	bl	800e738 <FLASH_Program_Word>
 800e5d2:	e004      	b.n	800e5de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800e5d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e5d8:	68b8      	ldr	r0, [r7, #8]
 800e5da:	f000 f87b 	bl	800e6d4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e5de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e5e2:	f000 f837 	bl	800e654 <FLASH_WaitForLastOperation>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800e5ea:	4b08      	ldr	r3, [pc, #32]	@ (800e60c <HAL_FLASH_Program+0xa4>)
 800e5ec:	691b      	ldr	r3, [r3, #16]
 800e5ee:	4a07      	ldr	r2, [pc, #28]	@ (800e60c <HAL_FLASH_Program+0xa4>)
 800e5f0:	f023 0301 	bic.w	r3, r3, #1
 800e5f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e5f6:	4b04      	ldr	r3, [pc, #16]	@ (800e608 <HAL_FLASH_Program+0xa0>)
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 800e5fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3718      	adds	r7, #24
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	20000498 	.word	0x20000498
 800e60c:	40023c00 	.word	0x40023c00

0800e610 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e616:	2300      	movs	r3, #0
 800e618:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800e61a:	4b0b      	ldr	r3, [pc, #44]	@ (800e648 <HAL_FLASH_Unlock+0x38>)
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	da0b      	bge.n	800e63a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e622:	4b09      	ldr	r3, [pc, #36]	@ (800e648 <HAL_FLASH_Unlock+0x38>)
 800e624:	4a09      	ldr	r2, [pc, #36]	@ (800e64c <HAL_FLASH_Unlock+0x3c>)
 800e626:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e628:	4b07      	ldr	r3, [pc, #28]	@ (800e648 <HAL_FLASH_Unlock+0x38>)
 800e62a:	4a09      	ldr	r2, [pc, #36]	@ (800e650 <HAL_FLASH_Unlock+0x40>)
 800e62c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800e62e:	4b06      	ldr	r3, [pc, #24]	@ (800e648 <HAL_FLASH_Unlock+0x38>)
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	2b00      	cmp	r3, #0
 800e634:	da01      	bge.n	800e63a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e636:	2301      	movs	r3, #1
 800e638:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e63a:	79fb      	ldrb	r3, [r7, #7]
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	370c      	adds	r7, #12
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr
 800e648:	40023c00 	.word	0x40023c00
 800e64c:	45670123 	.word	0x45670123
 800e650:	cdef89ab 	.word	0xcdef89ab

0800e654 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e65c:	2300      	movs	r3, #0
 800e65e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e660:	4b1a      	ldr	r3, [pc, #104]	@ (800e6cc <FLASH_WaitForLastOperation+0x78>)
 800e662:	2200      	movs	r2, #0
 800e664:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800e666:	f7ff fdef 	bl	800e248 <HAL_GetTick>
 800e66a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800e66c:	e010      	b.n	800e690 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e674:	d00c      	beq.n	800e690 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d007      	beq.n	800e68c <FLASH_WaitForLastOperation+0x38>
 800e67c:	f7ff fde4 	bl	800e248 <HAL_GetTick>
 800e680:	4602      	mov	r2, r0
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d201      	bcs.n	800e690 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800e68c:	2303      	movs	r3, #3
 800e68e:	e019      	b.n	800e6c4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800e690:	4b0f      	ldr	r3, [pc, #60]	@ (800e6d0 <FLASH_WaitForLastOperation+0x7c>)
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1e8      	bne.n	800e66e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800e69c:	4b0c      	ldr	r3, [pc, #48]	@ (800e6d0 <FLASH_WaitForLastOperation+0x7c>)
 800e69e:	68db      	ldr	r3, [r3, #12]
 800e6a0:	f003 0301 	and.w	r3, r3, #1
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d002      	beq.n	800e6ae <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e6a8:	4b09      	ldr	r3, [pc, #36]	@ (800e6d0 <FLASH_WaitForLastOperation+0x7c>)
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800e6ae:	4b08      	ldr	r3, [pc, #32]	@ (800e6d0 <FLASH_WaitForLastOperation+0x7c>)
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d003      	beq.n	800e6c2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800e6ba:	f000 f8a5 	bl	800e808 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800e6be:	2301      	movs	r3, #1
 800e6c0:	e000      	b.n	800e6c4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800e6c2:	2300      	movs	r3, #0
  
}  
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3710      	adds	r7, #16
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	20000498 	.word	0x20000498
 800e6d0:	40023c00 	.word	0x40023c00

0800e6d4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e6e0:	4b14      	ldr	r3, [pc, #80]	@ (800e734 <FLASH_Program_DoubleWord+0x60>)
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	4a13      	ldr	r2, [pc, #76]	@ (800e734 <FLASH_Program_DoubleWord+0x60>)
 800e6e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800e6ec:	4b11      	ldr	r3, [pc, #68]	@ (800e734 <FLASH_Program_DoubleWord+0x60>)
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	4a10      	ldr	r2, [pc, #64]	@ (800e734 <FLASH_Program_DoubleWord+0x60>)
 800e6f2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800e6f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e6f8:	4b0e      	ldr	r3, [pc, #56]	@ (800e734 <FLASH_Program_DoubleWord+0x60>)
 800e6fa:	691b      	ldr	r3, [r3, #16]
 800e6fc:	4a0d      	ldr	r2, [pc, #52]	@ (800e734 <FLASH_Program_DoubleWord+0x60>)
 800e6fe:	f043 0301 	orr.w	r3, r3, #1
 800e702:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	683a      	ldr	r2, [r7, #0]
 800e708:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800e70a:	f3bf 8f6f 	isb	sy
}
 800e70e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800e710:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e714:	f04f 0200 	mov.w	r2, #0
 800e718:	f04f 0300 	mov.w	r3, #0
 800e71c:	000a      	movs	r2, r1
 800e71e:	2300      	movs	r3, #0
 800e720:	68f9      	ldr	r1, [r7, #12]
 800e722:	3104      	adds	r1, #4
 800e724:	4613      	mov	r3, r2
 800e726:	600b      	str	r3, [r1, #0]
}
 800e728:	bf00      	nop
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr
 800e734:	40023c00 	.word	0x40023c00

0800e738 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e742:	4b0d      	ldr	r3, [pc, #52]	@ (800e778 <FLASH_Program_Word+0x40>)
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	4a0c      	ldr	r2, [pc, #48]	@ (800e778 <FLASH_Program_Word+0x40>)
 800e748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e74c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800e74e:	4b0a      	ldr	r3, [pc, #40]	@ (800e778 <FLASH_Program_Word+0x40>)
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	4a09      	ldr	r2, [pc, #36]	@ (800e778 <FLASH_Program_Word+0x40>)
 800e754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e758:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e75a:	4b07      	ldr	r3, [pc, #28]	@ (800e778 <FLASH_Program_Word+0x40>)
 800e75c:	691b      	ldr	r3, [r3, #16]
 800e75e:	4a06      	ldr	r2, [pc, #24]	@ (800e778 <FLASH_Program_Word+0x40>)
 800e760:	f043 0301 	orr.w	r3, r3, #1
 800e764:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	601a      	str	r2, [r3, #0]
}
 800e76c:	bf00      	nop
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr
 800e778:	40023c00 	.word	0x40023c00

0800e77c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b083      	sub	sp, #12
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
 800e784:	460b      	mov	r3, r1
 800e786:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e788:	4b0d      	ldr	r3, [pc, #52]	@ (800e7c0 <FLASH_Program_HalfWord+0x44>)
 800e78a:	691b      	ldr	r3, [r3, #16]
 800e78c:	4a0c      	ldr	r2, [pc, #48]	@ (800e7c0 <FLASH_Program_HalfWord+0x44>)
 800e78e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e792:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800e794:	4b0a      	ldr	r3, [pc, #40]	@ (800e7c0 <FLASH_Program_HalfWord+0x44>)
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	4a09      	ldr	r2, [pc, #36]	@ (800e7c0 <FLASH_Program_HalfWord+0x44>)
 800e79a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e79e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e7a0:	4b07      	ldr	r3, [pc, #28]	@ (800e7c0 <FLASH_Program_HalfWord+0x44>)
 800e7a2:	691b      	ldr	r3, [r3, #16]
 800e7a4:	4a06      	ldr	r2, [pc, #24]	@ (800e7c0 <FLASH_Program_HalfWord+0x44>)
 800e7a6:	f043 0301 	orr.w	r3, r3, #1
 800e7aa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	887a      	ldrh	r2, [r7, #2]
 800e7b0:	801a      	strh	r2, [r3, #0]
}
 800e7b2:	bf00      	nop
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	40023c00 	.word	0x40023c00

0800e7c4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800e804 <FLASH_Program_Byte+0x40>)
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	4a0b      	ldr	r2, [pc, #44]	@ (800e804 <FLASH_Program_Byte+0x40>)
 800e7d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e7da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800e7dc:	4b09      	ldr	r3, [pc, #36]	@ (800e804 <FLASH_Program_Byte+0x40>)
 800e7de:	4a09      	ldr	r2, [pc, #36]	@ (800e804 <FLASH_Program_Byte+0x40>)
 800e7e0:	691b      	ldr	r3, [r3, #16]
 800e7e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e7e4:	4b07      	ldr	r3, [pc, #28]	@ (800e804 <FLASH_Program_Byte+0x40>)
 800e7e6:	691b      	ldr	r3, [r3, #16]
 800e7e8:	4a06      	ldr	r2, [pc, #24]	@ (800e804 <FLASH_Program_Byte+0x40>)
 800e7ea:	f043 0301 	orr.w	r3, r3, #1
 800e7ee:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	78fa      	ldrb	r2, [r7, #3]
 800e7f4:	701a      	strb	r2, [r3, #0]
}
 800e7f6:	bf00      	nop
 800e7f8:	370c      	adds	r7, #12
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	40023c00 	.word	0x40023c00

0800e808 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800e808:	b480      	push	{r7}
 800e80a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800e80c:	4b2f      	ldr	r3, [pc, #188]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	f003 0310 	and.w	r3, r3, #16
 800e814:	2b00      	cmp	r3, #0
 800e816:	d008      	beq.n	800e82a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e818:	4b2d      	ldr	r3, [pc, #180]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e81a:	69db      	ldr	r3, [r3, #28]
 800e81c:	f043 0310 	orr.w	r3, r3, #16
 800e820:	4a2b      	ldr	r2, [pc, #172]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e822:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800e824:	4b29      	ldr	r3, [pc, #164]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e826:	2210      	movs	r2, #16
 800e828:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800e82a:	4b28      	ldr	r3, [pc, #160]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	f003 0320 	and.w	r3, r3, #32
 800e832:	2b00      	cmp	r3, #0
 800e834:	d008      	beq.n	800e848 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e836:	4b26      	ldr	r3, [pc, #152]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e838:	69db      	ldr	r3, [r3, #28]
 800e83a:	f043 0308 	orr.w	r3, r3, #8
 800e83e:	4a24      	ldr	r2, [pc, #144]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e840:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800e842:	4b22      	ldr	r3, [pc, #136]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e844:	2220      	movs	r2, #32
 800e846:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800e848:	4b20      	ldr	r3, [pc, #128]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e850:	2b00      	cmp	r3, #0
 800e852:	d008      	beq.n	800e866 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800e854:	4b1e      	ldr	r3, [pc, #120]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e856:	69db      	ldr	r3, [r3, #28]
 800e858:	f043 0304 	orr.w	r3, r3, #4
 800e85c:	4a1c      	ldr	r2, [pc, #112]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e85e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800e860:	4b1a      	ldr	r3, [pc, #104]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e862:	2240      	movs	r2, #64	@ 0x40
 800e864:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800e866:	4b19      	ldr	r3, [pc, #100]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e868:	68db      	ldr	r3, [r3, #12]
 800e86a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d008      	beq.n	800e884 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800e872:	4b17      	ldr	r3, [pc, #92]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e874:	69db      	ldr	r3, [r3, #28]
 800e876:	f043 0302 	orr.w	r3, r3, #2
 800e87a:	4a15      	ldr	r2, [pc, #84]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e87c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800e87e:	4b13      	ldr	r3, [pc, #76]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e880:	2280      	movs	r2, #128	@ 0x80
 800e882:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800e884:	4b11      	ldr	r3, [pc, #68]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d009      	beq.n	800e8a4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e890:	4b0f      	ldr	r3, [pc, #60]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e892:	69db      	ldr	r3, [r3, #28]
 800e894:	f043 0301 	orr.w	r3, r3, #1
 800e898:	4a0d      	ldr	r2, [pc, #52]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e89a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800e89c:	4b0b      	ldr	r3, [pc, #44]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e89e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e8a2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800e8a4:	4b09      	ldr	r3, [pc, #36]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e8a6:	68db      	ldr	r3, [r3, #12]
 800e8a8:	f003 0302 	and.w	r3, r3, #2
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d008      	beq.n	800e8c2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800e8b0:	4b07      	ldr	r3, [pc, #28]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e8b2:	69db      	ldr	r3, [r3, #28]
 800e8b4:	f043 0320 	orr.w	r3, r3, #32
 800e8b8:	4a05      	ldr	r2, [pc, #20]	@ (800e8d0 <FLASH_SetErrorCode+0xc8>)
 800e8ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800e8bc:	4b03      	ldr	r3, [pc, #12]	@ (800e8cc <FLASH_SetErrorCode+0xc4>)
 800e8be:	2202      	movs	r2, #2
 800e8c0:	60da      	str	r2, [r3, #12]
  }
}
 800e8c2:	bf00      	nop
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr
 800e8cc:	40023c00 	.word	0x40023c00
 800e8d0:	20000498 	.word	0x20000498

0800e8d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b084      	sub	sp, #16
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e8de:	2301      	movs	r3, #1
 800e8e0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e8e6:	4b31      	ldr	r3, [pc, #196]	@ (800e9ac <HAL_FLASHEx_Erase+0xd8>)
 800e8e8:	7e1b      	ldrb	r3, [r3, #24]
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d101      	bne.n	800e8f2 <HAL_FLASHEx_Erase+0x1e>
 800e8ee:	2302      	movs	r3, #2
 800e8f0:	e058      	b.n	800e9a4 <HAL_FLASHEx_Erase+0xd0>
 800e8f2:	4b2e      	ldr	r3, [pc, #184]	@ (800e9ac <HAL_FLASHEx_Erase+0xd8>)
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e8f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e8fc:	f7ff feaa 	bl	800e654 <FLASH_WaitForLastOperation>
 800e900:	4603      	mov	r3, r0
 800e902:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e904:	7bfb      	ldrb	r3, [r7, #15]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d148      	bne.n	800e99c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	f04f 32ff 	mov.w	r2, #4294967295
 800e910:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b01      	cmp	r3, #1
 800e918:	d115      	bne.n	800e946 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	691b      	ldr	r3, [r3, #16]
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	4619      	mov	r1, r3
 800e926:	4610      	mov	r0, r2
 800e928:	f000 f844 	bl	800e9b4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e92c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e930:	f7ff fe90 	bl	800e654 <FLASH_WaitForLastOperation>
 800e934:	4603      	mov	r3, r0
 800e936:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800e938:	4b1d      	ldr	r3, [pc, #116]	@ (800e9b0 <HAL_FLASHEx_Erase+0xdc>)
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	4a1c      	ldr	r2, [pc, #112]	@ (800e9b0 <HAL_FLASHEx_Erase+0xdc>)
 800e93e:	f023 0304 	bic.w	r3, r3, #4
 800e942:	6113      	str	r3, [r2, #16]
 800e944:	e028      	b.n	800e998 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	60bb      	str	r3, [r7, #8]
 800e94c:	e01c      	b.n	800e988 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	691b      	ldr	r3, [r3, #16]
 800e952:	b2db      	uxtb	r3, r3
 800e954:	4619      	mov	r1, r3
 800e956:	68b8      	ldr	r0, [r7, #8]
 800e958:	f000 f850 	bl	800e9fc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e95c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e960:	f7ff fe78 	bl	800e654 <FLASH_WaitForLastOperation>
 800e964:	4603      	mov	r3, r0
 800e966:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800e968:	4b11      	ldr	r3, [pc, #68]	@ (800e9b0 <HAL_FLASHEx_Erase+0xdc>)
 800e96a:	691b      	ldr	r3, [r3, #16]
 800e96c:	4a10      	ldr	r2, [pc, #64]	@ (800e9b0 <HAL_FLASHEx_Erase+0xdc>)
 800e96e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800e972:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800e974:	7bfb      	ldrb	r3, [r7, #15]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d003      	beq.n	800e982 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	601a      	str	r2, [r3, #0]
          break;
 800e980:	e00a      	b.n	800e998 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	3301      	adds	r3, #1
 800e986:	60bb      	str	r3, [r7, #8]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68da      	ldr	r2, [r3, #12]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	689b      	ldr	r3, [r3, #8]
 800e990:	4413      	add	r3, r2
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	429a      	cmp	r2, r3
 800e996:	d3da      	bcc.n	800e94e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e998:	f000 f878 	bl	800ea8c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e99c:	4b03      	ldr	r3, [pc, #12]	@ (800e9ac <HAL_FLASHEx_Erase+0xd8>)
 800e99e:	2200      	movs	r2, #0
 800e9a0:	761a      	strb	r2, [r3, #24]

  return status;
 800e9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3710      	adds	r7, #16
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	20000498 	.word	0x20000498
 800e9b0:	40023c00 	.word	0x40023c00

0800e9b4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800e9b4:	b480      	push	{r7}
 800e9b6:	b083      	sub	sp, #12
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	6039      	str	r1, [r7, #0]
 800e9be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e9c0:	4b0d      	ldr	r3, [pc, #52]	@ (800e9f8 <FLASH_MassErase+0x44>)
 800e9c2:	691b      	ldr	r3, [r3, #16]
 800e9c4:	4a0c      	ldr	r2, [pc, #48]	@ (800e9f8 <FLASH_MassErase+0x44>)
 800e9c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800e9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800e9f8 <FLASH_MassErase+0x44>)
 800e9ce:	691b      	ldr	r3, [r3, #16]
 800e9d0:	4a09      	ldr	r2, [pc, #36]	@ (800e9f8 <FLASH_MassErase+0x44>)
 800e9d2:	f043 0304 	orr.w	r3, r3, #4
 800e9d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800e9d8:	4b07      	ldr	r3, [pc, #28]	@ (800e9f8 <FLASH_MassErase+0x44>)
 800e9da:	691a      	ldr	r2, [r3, #16]
 800e9dc:	79fb      	ldrb	r3, [r7, #7]
 800e9de:	021b      	lsls	r3, r3, #8
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	4a05      	ldr	r2, [pc, #20]	@ (800e9f8 <FLASH_MassErase+0x44>)
 800e9e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e9e8:	6113      	str	r3, [r2, #16]
}
 800e9ea:	bf00      	nop
 800e9ec:	370c      	adds	r7, #12
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f4:	4770      	bx	lr
 800e9f6:	bf00      	nop
 800e9f8:	40023c00 	.word	0x40023c00

0800e9fc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b085      	sub	sp, #20
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	460b      	mov	r3, r1
 800ea06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800ea08:	2300      	movs	r3, #0
 800ea0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800ea0c:	78fb      	ldrb	r3, [r7, #3]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d102      	bne.n	800ea18 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800ea12:	2300      	movs	r3, #0
 800ea14:	60fb      	str	r3, [r7, #12]
 800ea16:	e010      	b.n	800ea3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800ea18:	78fb      	ldrb	r3, [r7, #3]
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d103      	bne.n	800ea26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ea1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ea22:	60fb      	str	r3, [r7, #12]
 800ea24:	e009      	b.n	800ea3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ea26:	78fb      	ldrb	r3, [r7, #3]
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	d103      	bne.n	800ea34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800ea2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	e002      	b.n	800ea3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ea34:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800ea38:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ea3a:	4b13      	ldr	r3, [pc, #76]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	4a12      	ldr	r2, [pc, #72]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800ea46:	4b10      	ldr	r3, [pc, #64]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea48:	691a      	ldr	r2, [r3, #16]
 800ea4a:	490f      	ldr	r1, [pc, #60]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ea52:	4b0d      	ldr	r3, [pc, #52]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	4a0c      	ldr	r2, [pc, #48]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea58:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ea5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800ea5e:	4b0a      	ldr	r3, [pc, #40]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea60:	691a      	ldr	r2, [r3, #16]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	00db      	lsls	r3, r3, #3
 800ea66:	4313      	orrs	r3, r2
 800ea68:	4a07      	ldr	r2, [pc, #28]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea6a:	f043 0302 	orr.w	r3, r3, #2
 800ea6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ea70:	4b05      	ldr	r3, [pc, #20]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea72:	691b      	ldr	r3, [r3, #16]
 800ea74:	4a04      	ldr	r2, [pc, #16]	@ (800ea88 <FLASH_Erase_Sector+0x8c>)
 800ea76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ea7a:	6113      	str	r3, [r2, #16]
}
 800ea7c:	bf00      	nop
 800ea7e:	3714      	adds	r7, #20
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr
 800ea88:	40023c00 	.word	0x40023c00

0800ea8c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800ea90:	4b20      	ldr	r3, [pc, #128]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d017      	beq.n	800eacc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ea9c:	4b1d      	ldr	r3, [pc, #116]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a1c      	ldr	r2, [pc, #112]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eaa2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eaa6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800eaa8:	4b1a      	ldr	r3, [pc, #104]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	4a19      	ldr	r2, [pc, #100]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eaae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800eab2:	6013      	str	r3, [r2, #0]
 800eab4:	4b17      	ldr	r3, [pc, #92]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	4a16      	ldr	r2, [pc, #88]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eaba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eabe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800eac0:	4b14      	ldr	r3, [pc, #80]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a13      	ldr	r2, [pc, #76]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800eaca:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800eacc:	4b11      	ldr	r3, [pc, #68]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d017      	beq.n	800eb08 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800ead8:	4b0e      	ldr	r3, [pc, #56]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	4a0d      	ldr	r2, [pc, #52]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eade:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eae2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800eae4:	4b0b      	ldr	r3, [pc, #44]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	4a0a      	ldr	r2, [pc, #40]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eaea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800eaee:	6013      	str	r3, [r2, #0]
 800eaf0:	4b08      	ldr	r3, [pc, #32]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a07      	ldr	r2, [pc, #28]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eaf6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eafa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800eafc:	4b05      	ldr	r3, [pc, #20]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a04      	ldr	r2, [pc, #16]	@ (800eb14 <FLASH_FlushCaches+0x88>)
 800eb02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800eb06:	6013      	str	r3, [r2, #0]
  }
}
 800eb08:	bf00      	nop
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	40023c00 	.word	0x40023c00

0800eb18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b089      	sub	sp, #36	@ 0x24
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800eb22:	2300      	movs	r3, #0
 800eb24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800eb26:	2300      	movs	r3, #0
 800eb28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800eb2e:	2300      	movs	r3, #0
 800eb30:	61fb      	str	r3, [r7, #28]
 800eb32:	e159      	b.n	800ede8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800eb34:	2201      	movs	r2, #1
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	fa02 f303 	lsl.w	r3, r2, r3
 800eb3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	697a      	ldr	r2, [r7, #20]
 800eb44:	4013      	ands	r3, r2
 800eb46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800eb48:	693a      	ldr	r2, [r7, #16]
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	f040 8148 	bne.w	800ede2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	f003 0303 	and.w	r3, r3, #3
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d005      	beq.n	800eb6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	d130      	bne.n	800ebcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	689b      	ldr	r3, [r3, #8]
 800eb6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	005b      	lsls	r3, r3, #1
 800eb74:	2203      	movs	r2, #3
 800eb76:	fa02 f303 	lsl.w	r3, r2, r3
 800eb7a:	43db      	mvns	r3, r3
 800eb7c:	69ba      	ldr	r2, [r7, #24]
 800eb7e:	4013      	ands	r3, r2
 800eb80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	68da      	ldr	r2, [r3, #12]
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	005b      	lsls	r3, r3, #1
 800eb8a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb8e:	69ba      	ldr	r2, [r7, #24]
 800eb90:	4313      	orrs	r3, r2
 800eb92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	69ba      	ldr	r2, [r7, #24]
 800eb98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800eba0:	2201      	movs	r2, #1
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	fa02 f303 	lsl.w	r3, r2, r3
 800eba8:	43db      	mvns	r3, r3
 800ebaa:	69ba      	ldr	r2, [r7, #24]
 800ebac:	4013      	ands	r3, r2
 800ebae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	685b      	ldr	r3, [r3, #4]
 800ebb4:	091b      	lsrs	r3, r3, #4
 800ebb6:	f003 0201 	and.w	r2, r3, #1
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	fa02 f303 	lsl.w	r3, r2, r3
 800ebc0:	69ba      	ldr	r2, [r7, #24]
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	69ba      	ldr	r2, [r7, #24]
 800ebca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	f003 0303 	and.w	r3, r3, #3
 800ebd4:	2b03      	cmp	r3, #3
 800ebd6:	d017      	beq.n	800ec08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	68db      	ldr	r3, [r3, #12]
 800ebdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	005b      	lsls	r3, r3, #1
 800ebe2:	2203      	movs	r2, #3
 800ebe4:	fa02 f303 	lsl.w	r3, r2, r3
 800ebe8:	43db      	mvns	r3, r3
 800ebea:	69ba      	ldr	r2, [r7, #24]
 800ebec:	4013      	ands	r3, r2
 800ebee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	689a      	ldr	r2, [r3, #8]
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	005b      	lsls	r3, r3, #1
 800ebf8:	fa02 f303 	lsl.w	r3, r2, r3
 800ebfc:	69ba      	ldr	r2, [r7, #24]
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	69ba      	ldr	r2, [r7, #24]
 800ec06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	f003 0303 	and.w	r3, r3, #3
 800ec10:	2b02      	cmp	r3, #2
 800ec12:	d123      	bne.n	800ec5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	08da      	lsrs	r2, r3, #3
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	3208      	adds	r2, #8
 800ec1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	f003 0307 	and.w	r3, r3, #7
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	220f      	movs	r2, #15
 800ec2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec30:	43db      	mvns	r3, r3
 800ec32:	69ba      	ldr	r2, [r7, #24]
 800ec34:	4013      	ands	r3, r2
 800ec36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	691a      	ldr	r2, [r3, #16]
 800ec3c:	69fb      	ldr	r3, [r7, #28]
 800ec3e:	f003 0307 	and.w	r3, r3, #7
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	fa02 f303 	lsl.w	r3, r2, r3
 800ec48:	69ba      	ldr	r2, [r7, #24]
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	08da      	lsrs	r2, r3, #3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	3208      	adds	r2, #8
 800ec56:	69b9      	ldr	r1, [r7, #24]
 800ec58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	005b      	lsls	r3, r3, #1
 800ec66:	2203      	movs	r2, #3
 800ec68:	fa02 f303 	lsl.w	r3, r2, r3
 800ec6c:	43db      	mvns	r3, r3
 800ec6e:	69ba      	ldr	r2, [r7, #24]
 800ec70:	4013      	ands	r3, r2
 800ec72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	f003 0203 	and.w	r2, r3, #3
 800ec7c:	69fb      	ldr	r3, [r7, #28]
 800ec7e:	005b      	lsls	r3, r3, #1
 800ec80:	fa02 f303 	lsl.w	r3, r2, r3
 800ec84:	69ba      	ldr	r2, [r7, #24]
 800ec86:	4313      	orrs	r3, r2
 800ec88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	69ba      	ldr	r2, [r7, #24]
 800ec8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	f000 80a2 	beq.w	800ede2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ec9e:	2300      	movs	r3, #0
 800eca0:	60fb      	str	r3, [r7, #12]
 800eca2:	4b57      	ldr	r3, [pc, #348]	@ (800ee00 <HAL_GPIO_Init+0x2e8>)
 800eca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eca6:	4a56      	ldr	r2, [pc, #344]	@ (800ee00 <HAL_GPIO_Init+0x2e8>)
 800eca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ecac:	6453      	str	r3, [r2, #68]	@ 0x44
 800ecae:	4b54      	ldr	r3, [pc, #336]	@ (800ee00 <HAL_GPIO_Init+0x2e8>)
 800ecb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ecb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ecb6:	60fb      	str	r3, [r7, #12]
 800ecb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ecba:	4a52      	ldr	r2, [pc, #328]	@ (800ee04 <HAL_GPIO_Init+0x2ec>)
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	089b      	lsrs	r3, r3, #2
 800ecc0:	3302      	adds	r3, #2
 800ecc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	f003 0303 	and.w	r3, r3, #3
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	220f      	movs	r2, #15
 800ecd2:	fa02 f303 	lsl.w	r3, r2, r3
 800ecd6:	43db      	mvns	r3, r3
 800ecd8:	69ba      	ldr	r2, [r7, #24]
 800ecda:	4013      	ands	r3, r2
 800ecdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	4a49      	ldr	r2, [pc, #292]	@ (800ee08 <HAL_GPIO_Init+0x2f0>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d019      	beq.n	800ed1a <HAL_GPIO_Init+0x202>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	4a48      	ldr	r2, [pc, #288]	@ (800ee0c <HAL_GPIO_Init+0x2f4>)
 800ecea:	4293      	cmp	r3, r2
 800ecec:	d013      	beq.n	800ed16 <HAL_GPIO_Init+0x1fe>
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	4a47      	ldr	r2, [pc, #284]	@ (800ee10 <HAL_GPIO_Init+0x2f8>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d00d      	beq.n	800ed12 <HAL_GPIO_Init+0x1fa>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4a46      	ldr	r2, [pc, #280]	@ (800ee14 <HAL_GPIO_Init+0x2fc>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d007      	beq.n	800ed0e <HAL_GPIO_Init+0x1f6>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4a45      	ldr	r2, [pc, #276]	@ (800ee18 <HAL_GPIO_Init+0x300>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d101      	bne.n	800ed0a <HAL_GPIO_Init+0x1f2>
 800ed06:	2304      	movs	r3, #4
 800ed08:	e008      	b.n	800ed1c <HAL_GPIO_Init+0x204>
 800ed0a:	2307      	movs	r3, #7
 800ed0c:	e006      	b.n	800ed1c <HAL_GPIO_Init+0x204>
 800ed0e:	2303      	movs	r3, #3
 800ed10:	e004      	b.n	800ed1c <HAL_GPIO_Init+0x204>
 800ed12:	2302      	movs	r3, #2
 800ed14:	e002      	b.n	800ed1c <HAL_GPIO_Init+0x204>
 800ed16:	2301      	movs	r3, #1
 800ed18:	e000      	b.n	800ed1c <HAL_GPIO_Init+0x204>
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	69fa      	ldr	r2, [r7, #28]
 800ed1e:	f002 0203 	and.w	r2, r2, #3
 800ed22:	0092      	lsls	r2, r2, #2
 800ed24:	4093      	lsls	r3, r2
 800ed26:	69ba      	ldr	r2, [r7, #24]
 800ed28:	4313      	orrs	r3, r2
 800ed2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ed2c:	4935      	ldr	r1, [pc, #212]	@ (800ee04 <HAL_GPIO_Init+0x2ec>)
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	089b      	lsrs	r3, r3, #2
 800ed32:	3302      	adds	r3, #2
 800ed34:	69ba      	ldr	r2, [r7, #24]
 800ed36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ed3a:	4b38      	ldr	r3, [pc, #224]	@ (800ee1c <HAL_GPIO_Init+0x304>)
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed40:	693b      	ldr	r3, [r7, #16]
 800ed42:	43db      	mvns	r3, r3
 800ed44:	69ba      	ldr	r2, [r7, #24]
 800ed46:	4013      	ands	r3, r2
 800ed48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d003      	beq.n	800ed5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800ed56:	69ba      	ldr	r2, [r7, #24]
 800ed58:	693b      	ldr	r3, [r7, #16]
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ed5e:	4a2f      	ldr	r2, [pc, #188]	@ (800ee1c <HAL_GPIO_Init+0x304>)
 800ed60:	69bb      	ldr	r3, [r7, #24]
 800ed62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ed64:	4b2d      	ldr	r3, [pc, #180]	@ (800ee1c <HAL_GPIO_Init+0x304>)
 800ed66:	68db      	ldr	r3, [r3, #12]
 800ed68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	43db      	mvns	r3, r3
 800ed6e:	69ba      	ldr	r2, [r7, #24]
 800ed70:	4013      	ands	r3, r2
 800ed72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d003      	beq.n	800ed88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ed80:	69ba      	ldr	r2, [r7, #24]
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	4313      	orrs	r3, r2
 800ed86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ed88:	4a24      	ldr	r2, [pc, #144]	@ (800ee1c <HAL_GPIO_Init+0x304>)
 800ed8a:	69bb      	ldr	r3, [r7, #24]
 800ed8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ed8e:	4b23      	ldr	r3, [pc, #140]	@ (800ee1c <HAL_GPIO_Init+0x304>)
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	43db      	mvns	r3, r3
 800ed98:	69ba      	ldr	r2, [r7, #24]
 800ed9a:	4013      	ands	r3, r2
 800ed9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d003      	beq.n	800edb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800edaa:	69ba      	ldr	r2, [r7, #24]
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	4313      	orrs	r3, r2
 800edb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800edb2:	4a1a      	ldr	r2, [pc, #104]	@ (800ee1c <HAL_GPIO_Init+0x304>)
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800edb8:	4b18      	ldr	r3, [pc, #96]	@ (800ee1c <HAL_GPIO_Init+0x304>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	43db      	mvns	r3, r3
 800edc2:	69ba      	ldr	r2, [r7, #24]
 800edc4:	4013      	ands	r3, r2
 800edc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d003      	beq.n	800eddc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800edd4:	69ba      	ldr	r2, [r7, #24]
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	4313      	orrs	r3, r2
 800edda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800eddc:	4a0f      	ldr	r2, [pc, #60]	@ (800ee1c <HAL_GPIO_Init+0x304>)
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ede2:	69fb      	ldr	r3, [r7, #28]
 800ede4:	3301      	adds	r3, #1
 800ede6:	61fb      	str	r3, [r7, #28]
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	2b0f      	cmp	r3, #15
 800edec:	f67f aea2 	bls.w	800eb34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800edf0:	bf00      	nop
 800edf2:	bf00      	nop
 800edf4:	3724      	adds	r7, #36	@ 0x24
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop
 800ee00:	40023800 	.word	0x40023800
 800ee04:	40013800 	.word	0x40013800
 800ee08:	40020000 	.word	0x40020000
 800ee0c:	40020400 	.word	0x40020400
 800ee10:	40020800 	.word	0x40020800
 800ee14:	40020c00 	.word	0x40020c00
 800ee18:	40021000 	.word	0x40021000
 800ee1c:	40013c00 	.word	0x40013c00

0800ee20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b083      	sub	sp, #12
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	460b      	mov	r3, r1
 800ee2a:	807b      	strh	r3, [r7, #2]
 800ee2c:	4613      	mov	r3, r2
 800ee2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ee30:	787b      	ldrb	r3, [r7, #1]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d003      	beq.n	800ee3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ee36:	887a      	ldrh	r2, [r7, #2]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ee3c:	e003      	b.n	800ee46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ee3e:	887b      	ldrh	r3, [r7, #2]
 800ee40:	041a      	lsls	r2, r3, #16
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	619a      	str	r2, [r3, #24]
}
 800ee46:	bf00      	nop
 800ee48:	370c      	adds	r7, #12
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ee52:	b480      	push	{r7}
 800ee54:	b085      	sub	sp, #20
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	695b      	ldr	r3, [r3, #20]
 800ee62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ee64:	887a      	ldrh	r2, [r7, #2]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	4013      	ands	r3, r2
 800ee6a:	041a      	lsls	r2, r3, #16
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	43d9      	mvns	r1, r3
 800ee70:	887b      	ldrh	r3, [r7, #2]
 800ee72:	400b      	ands	r3, r1
 800ee74:	431a      	orrs	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	619a      	str	r2, [r3, #24]
}
 800ee7a:	bf00      	nop
 800ee7c:	3714      	adds	r7, #20
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
	...

0800ee88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	4603      	mov	r3, r0
 800ee90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ee92:	4b08      	ldr	r3, [pc, #32]	@ (800eeb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ee94:	695a      	ldr	r2, [r3, #20]
 800ee96:	88fb      	ldrh	r3, [r7, #6]
 800ee98:	4013      	ands	r3, r2
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d006      	beq.n	800eeac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ee9e:	4a05      	ldr	r2, [pc, #20]	@ (800eeb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800eea0:	88fb      	ldrh	r3, [r7, #6]
 800eea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800eea4:	88fb      	ldrh	r3, [r7, #6]
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fe f9c0 	bl	800d22c <HAL_GPIO_EXTI_Callback>
  }
}
 800eeac:	bf00      	nop
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	40013c00 	.word	0x40013c00

0800eeb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b086      	sub	sp, #24
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d101      	bne.n	800eeca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800eec6:	2301      	movs	r3, #1
 800eec8:	e267      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 0301 	and.w	r3, r3, #1
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d075      	beq.n	800efc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800eed6:	4b88      	ldr	r3, [pc, #544]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	f003 030c 	and.w	r3, r3, #12
 800eede:	2b04      	cmp	r3, #4
 800eee0:	d00c      	beq.n	800eefc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eee2:	4b85      	ldr	r3, [pc, #532]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800eeea:	2b08      	cmp	r3, #8
 800eeec:	d112      	bne.n	800ef14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800eeee:	4b82      	ldr	r3, [pc, #520]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800eef0:	685b      	ldr	r3, [r3, #4]
 800eef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eef6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800eefa:	d10b      	bne.n	800ef14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800eefc:	4b7e      	ldr	r3, [pc, #504]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d05b      	beq.n	800efc0 <HAL_RCC_OscConfig+0x108>
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	685b      	ldr	r3, [r3, #4]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d157      	bne.n	800efc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	e242      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef1c:	d106      	bne.n	800ef2c <HAL_RCC_OscConfig+0x74>
 800ef1e:	4b76      	ldr	r3, [pc, #472]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a75      	ldr	r2, [pc, #468]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ef28:	6013      	str	r3, [r2, #0]
 800ef2a:	e01d      	b.n	800ef68 <HAL_RCC_OscConfig+0xb0>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ef34:	d10c      	bne.n	800ef50 <HAL_RCC_OscConfig+0x98>
 800ef36:	4b70      	ldr	r3, [pc, #448]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4a6f      	ldr	r2, [pc, #444]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ef40:	6013      	str	r3, [r2, #0]
 800ef42:	4b6d      	ldr	r3, [pc, #436]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a6c      	ldr	r2, [pc, #432]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ef4c:	6013      	str	r3, [r2, #0]
 800ef4e:	e00b      	b.n	800ef68 <HAL_RCC_OscConfig+0xb0>
 800ef50:	4b69      	ldr	r3, [pc, #420]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a68      	ldr	r2, [pc, #416]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ef5a:	6013      	str	r3, [r2, #0]
 800ef5c:	4b66      	ldr	r3, [pc, #408]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	4a65      	ldr	r2, [pc, #404]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ef66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d013      	beq.n	800ef98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef70:	f7ff f96a 	bl	800e248 <HAL_GetTick>
 800ef74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef76:	e008      	b.n	800ef8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ef78:	f7ff f966 	bl	800e248 <HAL_GetTick>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	2b64      	cmp	r3, #100	@ 0x64
 800ef84:	d901      	bls.n	800ef8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ef86:	2303      	movs	r3, #3
 800ef88:	e207      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ef8a:	4b5b      	ldr	r3, [pc, #364]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d0f0      	beq.n	800ef78 <HAL_RCC_OscConfig+0xc0>
 800ef96:	e014      	b.n	800efc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ef98:	f7ff f956 	bl	800e248 <HAL_GetTick>
 800ef9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ef9e:	e008      	b.n	800efb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800efa0:	f7ff f952 	bl	800e248 <HAL_GetTick>
 800efa4:	4602      	mov	r2, r0
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	1ad3      	subs	r3, r2, r3
 800efaa:	2b64      	cmp	r3, #100	@ 0x64
 800efac:	d901      	bls.n	800efb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800efae:	2303      	movs	r3, #3
 800efb0:	e1f3      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800efb2:	4b51      	ldr	r3, [pc, #324]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d1f0      	bne.n	800efa0 <HAL_RCC_OscConfig+0xe8>
 800efbe:	e000      	b.n	800efc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800efc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f003 0302 	and.w	r3, r3, #2
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d063      	beq.n	800f096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800efce:	4b4a      	ldr	r3, [pc, #296]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800efd0:	689b      	ldr	r3, [r3, #8]
 800efd2:	f003 030c 	and.w	r3, r3, #12
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d00b      	beq.n	800eff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800efda:	4b47      	ldr	r3, [pc, #284]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800efdc:	689b      	ldr	r3, [r3, #8]
 800efde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800efe2:	2b08      	cmp	r3, #8
 800efe4:	d11c      	bne.n	800f020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800efe6:	4b44      	ldr	r3, [pc, #272]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800efe8:	685b      	ldr	r3, [r3, #4]
 800efea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d116      	bne.n	800f020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800eff2:	4b41      	ldr	r3, [pc, #260]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	f003 0302 	and.w	r3, r3, #2
 800effa:	2b00      	cmp	r3, #0
 800effc:	d005      	beq.n	800f00a <HAL_RCC_OscConfig+0x152>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d001      	beq.n	800f00a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800f006:	2301      	movs	r3, #1
 800f008:	e1c7      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f00a:	4b3b      	ldr	r3, [pc, #236]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	691b      	ldr	r3, [r3, #16]
 800f016:	00db      	lsls	r3, r3, #3
 800f018:	4937      	ldr	r1, [pc, #220]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800f01a:	4313      	orrs	r3, r2
 800f01c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800f01e:	e03a      	b.n	800f096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	68db      	ldr	r3, [r3, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d020      	beq.n	800f06a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f028:	4b34      	ldr	r3, [pc, #208]	@ (800f0fc <HAL_RCC_OscConfig+0x244>)
 800f02a:	2201      	movs	r2, #1
 800f02c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f02e:	f7ff f90b 	bl	800e248 <HAL_GetTick>
 800f032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f034:	e008      	b.n	800f048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f036:	f7ff f907 	bl	800e248 <HAL_GetTick>
 800f03a:	4602      	mov	r2, r0
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	2b02      	cmp	r3, #2
 800f042:	d901      	bls.n	800f048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800f044:	2303      	movs	r3, #3
 800f046:	e1a8      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f048:	4b2b      	ldr	r3, [pc, #172]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 0302 	and.w	r3, r3, #2
 800f050:	2b00      	cmp	r3, #0
 800f052:	d0f0      	beq.n	800f036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f054:	4b28      	ldr	r3, [pc, #160]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	691b      	ldr	r3, [r3, #16]
 800f060:	00db      	lsls	r3, r3, #3
 800f062:	4925      	ldr	r1, [pc, #148]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800f064:	4313      	orrs	r3, r2
 800f066:	600b      	str	r3, [r1, #0]
 800f068:	e015      	b.n	800f096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f06a:	4b24      	ldr	r3, [pc, #144]	@ (800f0fc <HAL_RCC_OscConfig+0x244>)
 800f06c:	2200      	movs	r2, #0
 800f06e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f070:	f7ff f8ea 	bl	800e248 <HAL_GetTick>
 800f074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f076:	e008      	b.n	800f08a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800f078:	f7ff f8e6 	bl	800e248 <HAL_GetTick>
 800f07c:	4602      	mov	r2, r0
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	2b02      	cmp	r3, #2
 800f084:	d901      	bls.n	800f08a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800f086:	2303      	movs	r3, #3
 800f088:	e187      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800f08a:	4b1b      	ldr	r3, [pc, #108]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f003 0302 	and.w	r3, r3, #2
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1f0      	bne.n	800f078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f003 0308 	and.w	r3, r3, #8
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d036      	beq.n	800f110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d016      	beq.n	800f0d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f0aa:	4b15      	ldr	r3, [pc, #84]	@ (800f100 <HAL_RCC_OscConfig+0x248>)
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f0b0:	f7ff f8ca 	bl	800e248 <HAL_GetTick>
 800f0b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f0b6:	e008      	b.n	800f0ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f0b8:	f7ff f8c6 	bl	800e248 <HAL_GetTick>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	2b02      	cmp	r3, #2
 800f0c4:	d901      	bls.n	800f0ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800f0c6:	2303      	movs	r3, #3
 800f0c8:	e167      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800f0ca:	4b0b      	ldr	r3, [pc, #44]	@ (800f0f8 <HAL_RCC_OscConfig+0x240>)
 800f0cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0ce:	f003 0302 	and.w	r3, r3, #2
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d0f0      	beq.n	800f0b8 <HAL_RCC_OscConfig+0x200>
 800f0d6:	e01b      	b.n	800f110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f0d8:	4b09      	ldr	r3, [pc, #36]	@ (800f100 <HAL_RCC_OscConfig+0x248>)
 800f0da:	2200      	movs	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f0de:	f7ff f8b3 	bl	800e248 <HAL_GetTick>
 800f0e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f0e4:	e00e      	b.n	800f104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800f0e6:	f7ff f8af 	bl	800e248 <HAL_GetTick>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	2b02      	cmp	r3, #2
 800f0f2:	d907      	bls.n	800f104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800f0f4:	2303      	movs	r3, #3
 800f0f6:	e150      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
 800f0f8:	40023800 	.word	0x40023800
 800f0fc:	42470000 	.word	0x42470000
 800f100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800f104:	4b88      	ldr	r3, [pc, #544]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1ea      	bne.n	800f0e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f003 0304 	and.w	r3, r3, #4
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 8097 	beq.w	800f24c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f11e:	2300      	movs	r3, #0
 800f120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f122:	4b81      	ldr	r3, [pc, #516]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d10f      	bne.n	800f14e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f12e:	2300      	movs	r3, #0
 800f130:	60bb      	str	r3, [r7, #8]
 800f132:	4b7d      	ldr	r3, [pc, #500]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f136:	4a7c      	ldr	r2, [pc, #496]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f13c:	6413      	str	r3, [r2, #64]	@ 0x40
 800f13e:	4b7a      	ldr	r3, [pc, #488]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f146:	60bb      	str	r3, [r7, #8]
 800f148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f14a:	2301      	movs	r3, #1
 800f14c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f14e:	4b77      	ldr	r3, [pc, #476]	@ (800f32c <HAL_RCC_OscConfig+0x474>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f156:	2b00      	cmp	r3, #0
 800f158:	d118      	bne.n	800f18c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f15a:	4b74      	ldr	r3, [pc, #464]	@ (800f32c <HAL_RCC_OscConfig+0x474>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4a73      	ldr	r2, [pc, #460]	@ (800f32c <HAL_RCC_OscConfig+0x474>)
 800f160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f166:	f7ff f86f 	bl	800e248 <HAL_GetTick>
 800f16a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f16c:	e008      	b.n	800f180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f16e:	f7ff f86b 	bl	800e248 <HAL_GetTick>
 800f172:	4602      	mov	r2, r0
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	2b02      	cmp	r3, #2
 800f17a:	d901      	bls.n	800f180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800f17c:	2303      	movs	r3, #3
 800f17e:	e10c      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f180:	4b6a      	ldr	r3, [pc, #424]	@ (800f32c <HAL_RCC_OscConfig+0x474>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d0f0      	beq.n	800f16e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	2b01      	cmp	r3, #1
 800f192:	d106      	bne.n	800f1a2 <HAL_RCC_OscConfig+0x2ea>
 800f194:	4b64      	ldr	r3, [pc, #400]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f198:	4a63      	ldr	r2, [pc, #396]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f19a:	f043 0301 	orr.w	r3, r3, #1
 800f19e:	6713      	str	r3, [r2, #112]	@ 0x70
 800f1a0:	e01c      	b.n	800f1dc <HAL_RCC_OscConfig+0x324>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	2b05      	cmp	r3, #5
 800f1a8:	d10c      	bne.n	800f1c4 <HAL_RCC_OscConfig+0x30c>
 800f1aa:	4b5f      	ldr	r3, [pc, #380]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f1ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1ae:	4a5e      	ldr	r2, [pc, #376]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f1b0:	f043 0304 	orr.w	r3, r3, #4
 800f1b4:	6713      	str	r3, [r2, #112]	@ 0x70
 800f1b6:	4b5c      	ldr	r3, [pc, #368]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f1b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1ba:	4a5b      	ldr	r2, [pc, #364]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f1bc:	f043 0301 	orr.w	r3, r3, #1
 800f1c0:	6713      	str	r3, [r2, #112]	@ 0x70
 800f1c2:	e00b      	b.n	800f1dc <HAL_RCC_OscConfig+0x324>
 800f1c4:	4b58      	ldr	r3, [pc, #352]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f1c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1c8:	4a57      	ldr	r2, [pc, #348]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f1ca:	f023 0301 	bic.w	r3, r3, #1
 800f1ce:	6713      	str	r3, [r2, #112]	@ 0x70
 800f1d0:	4b55      	ldr	r3, [pc, #340]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f1d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f1d4:	4a54      	ldr	r2, [pc, #336]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f1d6:	f023 0304 	bic.w	r3, r3, #4
 800f1da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	689b      	ldr	r3, [r3, #8]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d015      	beq.n	800f210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f1e4:	f7ff f830 	bl	800e248 <HAL_GetTick>
 800f1e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f1ea:	e00a      	b.n	800f202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f1ec:	f7ff f82c 	bl	800e248 <HAL_GetTick>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	1ad3      	subs	r3, r2, r3
 800f1f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d901      	bls.n	800f202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800f1fe:	2303      	movs	r3, #3
 800f200:	e0cb      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800f202:	4b49      	ldr	r3, [pc, #292]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f206:	f003 0302 	and.w	r3, r3, #2
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d0ee      	beq.n	800f1ec <HAL_RCC_OscConfig+0x334>
 800f20e:	e014      	b.n	800f23a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800f210:	f7ff f81a 	bl	800e248 <HAL_GetTick>
 800f214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f216:	e00a      	b.n	800f22e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f218:	f7ff f816 	bl	800e248 <HAL_GetTick>
 800f21c:	4602      	mov	r2, r0
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f226:	4293      	cmp	r3, r2
 800f228:	d901      	bls.n	800f22e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800f22a:	2303      	movs	r3, #3
 800f22c:	e0b5      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800f22e:	4b3e      	ldr	r3, [pc, #248]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f232:	f003 0302 	and.w	r3, r3, #2
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1ee      	bne.n	800f218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f23a:	7dfb      	ldrb	r3, [r7, #23]
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d105      	bne.n	800f24c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f240:	4b39      	ldr	r3, [pc, #228]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f244:	4a38      	ldr	r2, [pc, #224]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f24a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	699b      	ldr	r3, [r3, #24]
 800f250:	2b00      	cmp	r3, #0
 800f252:	f000 80a1 	beq.w	800f398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800f256:	4b34      	ldr	r3, [pc, #208]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f258:	689b      	ldr	r3, [r3, #8]
 800f25a:	f003 030c 	and.w	r3, r3, #12
 800f25e:	2b08      	cmp	r3, #8
 800f260:	d05c      	beq.n	800f31c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	699b      	ldr	r3, [r3, #24]
 800f266:	2b02      	cmp	r3, #2
 800f268:	d141      	bne.n	800f2ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f26a:	4b31      	ldr	r3, [pc, #196]	@ (800f330 <HAL_RCC_OscConfig+0x478>)
 800f26c:	2200      	movs	r2, #0
 800f26e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f270:	f7fe ffea 	bl	800e248 <HAL_GetTick>
 800f274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f276:	e008      	b.n	800f28a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f278:	f7fe ffe6 	bl	800e248 <HAL_GetTick>
 800f27c:	4602      	mov	r2, r0
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	1ad3      	subs	r3, r2, r3
 800f282:	2b02      	cmp	r3, #2
 800f284:	d901      	bls.n	800f28a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800f286:	2303      	movs	r3, #3
 800f288:	e087      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f28a:	4b27      	ldr	r3, [pc, #156]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f292:	2b00      	cmp	r3, #0
 800f294:	d1f0      	bne.n	800f278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	69da      	ldr	r2, [r3, #28]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a1b      	ldr	r3, [r3, #32]
 800f29e:	431a      	orrs	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a4:	019b      	lsls	r3, r3, #6
 800f2a6:	431a      	orrs	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2ac:	085b      	lsrs	r3, r3, #1
 800f2ae:	3b01      	subs	r3, #1
 800f2b0:	041b      	lsls	r3, r3, #16
 800f2b2:	431a      	orrs	r2, r3
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b8:	061b      	lsls	r3, r3, #24
 800f2ba:	491b      	ldr	r1, [pc, #108]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f2c0:	4b1b      	ldr	r3, [pc, #108]	@ (800f330 <HAL_RCC_OscConfig+0x478>)
 800f2c2:	2201      	movs	r2, #1
 800f2c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f2c6:	f7fe ffbf 	bl	800e248 <HAL_GetTick>
 800f2ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f2cc:	e008      	b.n	800f2e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f2ce:	f7fe ffbb 	bl	800e248 <HAL_GetTick>
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	1ad3      	subs	r3, r2, r3
 800f2d8:	2b02      	cmp	r3, #2
 800f2da:	d901      	bls.n	800f2e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f2dc:	2303      	movs	r3, #3
 800f2de:	e05c      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f2e0:	4b11      	ldr	r3, [pc, #68]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d0f0      	beq.n	800f2ce <HAL_RCC_OscConfig+0x416>
 800f2ec:	e054      	b.n	800f398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f2ee:	4b10      	ldr	r3, [pc, #64]	@ (800f330 <HAL_RCC_OscConfig+0x478>)
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f2f4:	f7fe ffa8 	bl	800e248 <HAL_GetTick>
 800f2f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f2fa:	e008      	b.n	800f30e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800f2fc:	f7fe ffa4 	bl	800e248 <HAL_GetTick>
 800f300:	4602      	mov	r2, r0
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	1ad3      	subs	r3, r2, r3
 800f306:	2b02      	cmp	r3, #2
 800f308:	d901      	bls.n	800f30e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800f30a:	2303      	movs	r3, #3
 800f30c:	e045      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800f30e:	4b06      	ldr	r3, [pc, #24]	@ (800f328 <HAL_RCC_OscConfig+0x470>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f316:	2b00      	cmp	r3, #0
 800f318:	d1f0      	bne.n	800f2fc <HAL_RCC_OscConfig+0x444>
 800f31a:	e03d      	b.n	800f398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	699b      	ldr	r3, [r3, #24]
 800f320:	2b01      	cmp	r3, #1
 800f322:	d107      	bne.n	800f334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800f324:	2301      	movs	r3, #1
 800f326:	e038      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
 800f328:	40023800 	.word	0x40023800
 800f32c:	40007000 	.word	0x40007000
 800f330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800f334:	4b1b      	ldr	r3, [pc, #108]	@ (800f3a4 <HAL_RCC_OscConfig+0x4ec>)
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	699b      	ldr	r3, [r3, #24]
 800f33e:	2b01      	cmp	r3, #1
 800f340:	d028      	beq.n	800f394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f34c:	429a      	cmp	r2, r3
 800f34e:	d121      	bne.n	800f394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f35a:	429a      	cmp	r2, r3
 800f35c:	d11a      	bne.n	800f394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f35e:	68fa      	ldr	r2, [r7, #12]
 800f360:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800f364:	4013      	ands	r3, r2
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f36a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d111      	bne.n	800f394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f37a:	085b      	lsrs	r3, r3, #1
 800f37c:	3b01      	subs	r3, #1
 800f37e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800f380:	429a      	cmp	r2, r3
 800f382:	d107      	bne.n	800f394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f38e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800f390:	429a      	cmp	r2, r3
 800f392:	d001      	beq.n	800f398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800f394:	2301      	movs	r3, #1
 800f396:	e000      	b.n	800f39a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	3718      	adds	r7, #24
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	40023800 	.word	0x40023800

0800f3a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d101      	bne.n	800f3bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e0cc      	b.n	800f556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f3bc:	4b68      	ldr	r3, [pc, #416]	@ (800f560 <HAL_RCC_ClockConfig+0x1b8>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f003 0307 	and.w	r3, r3, #7
 800f3c4:	683a      	ldr	r2, [r7, #0]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d90c      	bls.n	800f3e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f3ca:	4b65      	ldr	r3, [pc, #404]	@ (800f560 <HAL_RCC_ClockConfig+0x1b8>)
 800f3cc:	683a      	ldr	r2, [r7, #0]
 800f3ce:	b2d2      	uxtb	r2, r2
 800f3d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f3d2:	4b63      	ldr	r3, [pc, #396]	@ (800f560 <HAL_RCC_ClockConfig+0x1b8>)
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f003 0307 	and.w	r3, r3, #7
 800f3da:	683a      	ldr	r2, [r7, #0]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d001      	beq.n	800f3e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e0b8      	b.n	800f556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	f003 0302 	and.w	r3, r3, #2
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d020      	beq.n	800f432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f003 0304 	and.w	r3, r3, #4
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d005      	beq.n	800f408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800f3fc:	4b59      	ldr	r3, [pc, #356]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	4a58      	ldr	r2, [pc, #352]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f402:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800f406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f003 0308 	and.w	r3, r3, #8
 800f410:	2b00      	cmp	r3, #0
 800f412:	d005      	beq.n	800f420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800f414:	4b53      	ldr	r3, [pc, #332]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f416:	689b      	ldr	r3, [r3, #8]
 800f418:	4a52      	ldr	r2, [pc, #328]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f41a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800f41e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f420:	4b50      	ldr	r3, [pc, #320]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	494d      	ldr	r1, [pc, #308]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f42e:	4313      	orrs	r3, r2
 800f430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f003 0301 	and.w	r3, r3, #1
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d044      	beq.n	800f4c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	685b      	ldr	r3, [r3, #4]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d107      	bne.n	800f456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800f446:	4b47      	ldr	r3, [pc, #284]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d119      	bne.n	800f486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f452:	2301      	movs	r3, #1
 800f454:	e07f      	b.n	800f556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	685b      	ldr	r3, [r3, #4]
 800f45a:	2b02      	cmp	r3, #2
 800f45c:	d003      	beq.n	800f466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800f462:	2b03      	cmp	r3, #3
 800f464:	d107      	bne.n	800f476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800f466:	4b3f      	ldr	r3, [pc, #252]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d109      	bne.n	800f486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f472:	2301      	movs	r3, #1
 800f474:	e06f      	b.n	800f556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800f476:	4b3b      	ldr	r3, [pc, #236]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f003 0302 	and.w	r3, r3, #2
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800f482:	2301      	movs	r3, #1
 800f484:	e067      	b.n	800f556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800f486:	4b37      	ldr	r3, [pc, #220]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	f023 0203 	bic.w	r2, r3, #3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	4934      	ldr	r1, [pc, #208]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f494:	4313      	orrs	r3, r2
 800f496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800f498:	f7fe fed6 	bl	800e248 <HAL_GetTick>
 800f49c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f49e:	e00a      	b.n	800f4b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f4a0:	f7fe fed2 	bl	800e248 <HAL_GetTick>
 800f4a4:	4602      	mov	r2, r0
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	1ad3      	subs	r3, r2, r3
 800f4aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f4ae:	4293      	cmp	r3, r2
 800f4b0:	d901      	bls.n	800f4b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800f4b2:	2303      	movs	r3, #3
 800f4b4:	e04f      	b.n	800f556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f4b6:	4b2b      	ldr	r3, [pc, #172]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f4b8:	689b      	ldr	r3, [r3, #8]
 800f4ba:	f003 020c 	and.w	r2, r3, #12
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	009b      	lsls	r3, r3, #2
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d1eb      	bne.n	800f4a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f4c8:	4b25      	ldr	r3, [pc, #148]	@ (800f560 <HAL_RCC_ClockConfig+0x1b8>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f003 0307 	and.w	r3, r3, #7
 800f4d0:	683a      	ldr	r2, [r7, #0]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d20c      	bcs.n	800f4f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f4d6:	4b22      	ldr	r3, [pc, #136]	@ (800f560 <HAL_RCC_ClockConfig+0x1b8>)
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	b2d2      	uxtb	r2, r2
 800f4dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f4de:	4b20      	ldr	r3, [pc, #128]	@ (800f560 <HAL_RCC_ClockConfig+0x1b8>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	f003 0307 	and.w	r3, r3, #7
 800f4e6:	683a      	ldr	r2, [r7, #0]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d001      	beq.n	800f4f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	e032      	b.n	800f556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	f003 0304 	and.w	r3, r3, #4
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d008      	beq.n	800f50e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f4fc:	4b19      	ldr	r3, [pc, #100]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	4916      	ldr	r1, [pc, #88]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f50a:	4313      	orrs	r3, r2
 800f50c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f003 0308 	and.w	r3, r3, #8
 800f516:	2b00      	cmp	r3, #0
 800f518:	d009      	beq.n	800f52e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f51a:	4b12      	ldr	r3, [pc, #72]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	00db      	lsls	r3, r3, #3
 800f528:	490e      	ldr	r1, [pc, #56]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f52a:	4313      	orrs	r3, r2
 800f52c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f52e:	f000 f821 	bl	800f574 <HAL_RCC_GetSysClockFreq>
 800f532:	4602      	mov	r2, r0
 800f534:	4b0b      	ldr	r3, [pc, #44]	@ (800f564 <HAL_RCC_ClockConfig+0x1bc>)
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	091b      	lsrs	r3, r3, #4
 800f53a:	f003 030f 	and.w	r3, r3, #15
 800f53e:	490a      	ldr	r1, [pc, #40]	@ (800f568 <HAL_RCC_ClockConfig+0x1c0>)
 800f540:	5ccb      	ldrb	r3, [r1, r3]
 800f542:	fa22 f303 	lsr.w	r3, r2, r3
 800f546:	4a09      	ldr	r2, [pc, #36]	@ (800f56c <HAL_RCC_ClockConfig+0x1c4>)
 800f548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800f54a:	4b09      	ldr	r3, [pc, #36]	@ (800f570 <HAL_RCC_ClockConfig+0x1c8>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fe fe36 	bl	800e1c0 <HAL_InitTick>

  return HAL_OK;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3710      	adds	r7, #16
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}
 800f55e:	bf00      	nop
 800f560:	40023c00 	.word	0x40023c00
 800f564:	40023800 	.word	0x40023800
 800f568:	080138ec 	.word	0x080138ec
 800f56c:	20000008 	.word	0x20000008
 800f570:	2000000c 	.word	0x2000000c

0800f574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f578:	b094      	sub	sp, #80	@ 0x50
 800f57a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800f57c:	2300      	movs	r3, #0
 800f57e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f580:	2300      	movs	r3, #0
 800f582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f584:	2300      	movs	r3, #0
 800f586:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800f588:	2300      	movs	r3, #0
 800f58a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f58c:	4b79      	ldr	r3, [pc, #484]	@ (800f774 <HAL_RCC_GetSysClockFreq+0x200>)
 800f58e:	689b      	ldr	r3, [r3, #8]
 800f590:	f003 030c 	and.w	r3, r3, #12
 800f594:	2b08      	cmp	r3, #8
 800f596:	d00d      	beq.n	800f5b4 <HAL_RCC_GetSysClockFreq+0x40>
 800f598:	2b08      	cmp	r3, #8
 800f59a:	f200 80e1 	bhi.w	800f760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d002      	beq.n	800f5a8 <HAL_RCC_GetSysClockFreq+0x34>
 800f5a2:	2b04      	cmp	r3, #4
 800f5a4:	d003      	beq.n	800f5ae <HAL_RCC_GetSysClockFreq+0x3a>
 800f5a6:	e0db      	b.n	800f760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800f5a8:	4b73      	ldr	r3, [pc, #460]	@ (800f778 <HAL_RCC_GetSysClockFreq+0x204>)
 800f5aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800f5ac:	e0db      	b.n	800f766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800f5ae:	4b73      	ldr	r3, [pc, #460]	@ (800f77c <HAL_RCC_GetSysClockFreq+0x208>)
 800f5b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f5b2:	e0d8      	b.n	800f766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800f5b4:	4b6f      	ldr	r3, [pc, #444]	@ (800f774 <HAL_RCC_GetSysClockFreq+0x200>)
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f5be:	4b6d      	ldr	r3, [pc, #436]	@ (800f774 <HAL_RCC_GetSysClockFreq+0x200>)
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d063      	beq.n	800f692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f5ca:	4b6a      	ldr	r3, [pc, #424]	@ (800f774 <HAL_RCC_GetSysClockFreq+0x200>)
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	099b      	lsrs	r3, r3, #6
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800f5de:	2300      	movs	r3, #0
 800f5e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800f5e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800f5e6:	4622      	mov	r2, r4
 800f5e8:	462b      	mov	r3, r5
 800f5ea:	f04f 0000 	mov.w	r0, #0
 800f5ee:	f04f 0100 	mov.w	r1, #0
 800f5f2:	0159      	lsls	r1, r3, #5
 800f5f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f5f8:	0150      	lsls	r0, r2, #5
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	4621      	mov	r1, r4
 800f600:	1a51      	subs	r1, r2, r1
 800f602:	6139      	str	r1, [r7, #16]
 800f604:	4629      	mov	r1, r5
 800f606:	eb63 0301 	sbc.w	r3, r3, r1
 800f60a:	617b      	str	r3, [r7, #20]
 800f60c:	f04f 0200 	mov.w	r2, #0
 800f610:	f04f 0300 	mov.w	r3, #0
 800f614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f618:	4659      	mov	r1, fp
 800f61a:	018b      	lsls	r3, r1, #6
 800f61c:	4651      	mov	r1, sl
 800f61e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800f622:	4651      	mov	r1, sl
 800f624:	018a      	lsls	r2, r1, #6
 800f626:	4651      	mov	r1, sl
 800f628:	ebb2 0801 	subs.w	r8, r2, r1
 800f62c:	4659      	mov	r1, fp
 800f62e:	eb63 0901 	sbc.w	r9, r3, r1
 800f632:	f04f 0200 	mov.w	r2, #0
 800f636:	f04f 0300 	mov.w	r3, #0
 800f63a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f63e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f646:	4690      	mov	r8, r2
 800f648:	4699      	mov	r9, r3
 800f64a:	4623      	mov	r3, r4
 800f64c:	eb18 0303 	adds.w	r3, r8, r3
 800f650:	60bb      	str	r3, [r7, #8]
 800f652:	462b      	mov	r3, r5
 800f654:	eb49 0303 	adc.w	r3, r9, r3
 800f658:	60fb      	str	r3, [r7, #12]
 800f65a:	f04f 0200 	mov.w	r2, #0
 800f65e:	f04f 0300 	mov.w	r3, #0
 800f662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800f666:	4629      	mov	r1, r5
 800f668:	024b      	lsls	r3, r1, #9
 800f66a:	4621      	mov	r1, r4
 800f66c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800f670:	4621      	mov	r1, r4
 800f672:	024a      	lsls	r2, r1, #9
 800f674:	4610      	mov	r0, r2
 800f676:	4619      	mov	r1, r3
 800f678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f67a:	2200      	movs	r2, #0
 800f67c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f67e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f684:	f7fc fd34 	bl	800c0f0 <__aeabi_uldivmod>
 800f688:	4602      	mov	r2, r0
 800f68a:	460b      	mov	r3, r1
 800f68c:	4613      	mov	r3, r2
 800f68e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f690:	e058      	b.n	800f744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800f692:	4b38      	ldr	r3, [pc, #224]	@ (800f774 <HAL_RCC_GetSysClockFreq+0x200>)
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	099b      	lsrs	r3, r3, #6
 800f698:	2200      	movs	r2, #0
 800f69a:	4618      	mov	r0, r3
 800f69c:	4611      	mov	r1, r2
 800f69e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800f6a2:	623b      	str	r3, [r7, #32]
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f6a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800f6ac:	4642      	mov	r2, r8
 800f6ae:	464b      	mov	r3, r9
 800f6b0:	f04f 0000 	mov.w	r0, #0
 800f6b4:	f04f 0100 	mov.w	r1, #0
 800f6b8:	0159      	lsls	r1, r3, #5
 800f6ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800f6be:	0150      	lsls	r0, r2, #5
 800f6c0:	4602      	mov	r2, r0
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	4641      	mov	r1, r8
 800f6c6:	ebb2 0a01 	subs.w	sl, r2, r1
 800f6ca:	4649      	mov	r1, r9
 800f6cc:	eb63 0b01 	sbc.w	fp, r3, r1
 800f6d0:	f04f 0200 	mov.w	r2, #0
 800f6d4:	f04f 0300 	mov.w	r3, #0
 800f6d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800f6dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800f6e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800f6e4:	ebb2 040a 	subs.w	r4, r2, sl
 800f6e8:	eb63 050b 	sbc.w	r5, r3, fp
 800f6ec:	f04f 0200 	mov.w	r2, #0
 800f6f0:	f04f 0300 	mov.w	r3, #0
 800f6f4:	00eb      	lsls	r3, r5, #3
 800f6f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f6fa:	00e2      	lsls	r2, r4, #3
 800f6fc:	4614      	mov	r4, r2
 800f6fe:	461d      	mov	r5, r3
 800f700:	4643      	mov	r3, r8
 800f702:	18e3      	adds	r3, r4, r3
 800f704:	603b      	str	r3, [r7, #0]
 800f706:	464b      	mov	r3, r9
 800f708:	eb45 0303 	adc.w	r3, r5, r3
 800f70c:	607b      	str	r3, [r7, #4]
 800f70e:	f04f 0200 	mov.w	r2, #0
 800f712:	f04f 0300 	mov.w	r3, #0
 800f716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800f71a:	4629      	mov	r1, r5
 800f71c:	028b      	lsls	r3, r1, #10
 800f71e:	4621      	mov	r1, r4
 800f720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800f724:	4621      	mov	r1, r4
 800f726:	028a      	lsls	r2, r1, #10
 800f728:	4610      	mov	r0, r2
 800f72a:	4619      	mov	r1, r3
 800f72c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f72e:	2200      	movs	r2, #0
 800f730:	61bb      	str	r3, [r7, #24]
 800f732:	61fa      	str	r2, [r7, #28]
 800f734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f738:	f7fc fcda 	bl	800c0f0 <__aeabi_uldivmod>
 800f73c:	4602      	mov	r2, r0
 800f73e:	460b      	mov	r3, r1
 800f740:	4613      	mov	r3, r2
 800f742:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800f744:	4b0b      	ldr	r3, [pc, #44]	@ (800f774 <HAL_RCC_GetSysClockFreq+0x200>)
 800f746:	685b      	ldr	r3, [r3, #4]
 800f748:	0c1b      	lsrs	r3, r3, #16
 800f74a:	f003 0303 	and.w	r3, r3, #3
 800f74e:	3301      	adds	r3, #1
 800f750:	005b      	lsls	r3, r3, #1
 800f752:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800f754:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f758:	fbb2 f3f3 	udiv	r3, r2, r3
 800f75c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f75e:	e002      	b.n	800f766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800f760:	4b05      	ldr	r3, [pc, #20]	@ (800f778 <HAL_RCC_GetSysClockFreq+0x204>)
 800f762:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800f764:	bf00      	nop
    }
  }
  return sysclockfreq;
 800f766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3750      	adds	r7, #80	@ 0x50
 800f76c:	46bd      	mov	sp, r7
 800f76e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f772:	bf00      	nop
 800f774:	40023800 	.word	0x40023800
 800f778:	00f42400 	.word	0x00f42400
 800f77c:	007a1200 	.word	0x007a1200

0800f780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f780:	b480      	push	{r7}
 800f782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f784:	4b03      	ldr	r3, [pc, #12]	@ (800f794 <HAL_RCC_GetHCLKFreq+0x14>)
 800f786:	681b      	ldr	r3, [r3, #0]
}
 800f788:	4618      	mov	r0, r3
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr
 800f792:	bf00      	nop
 800f794:	20000008 	.word	0x20000008

0800f798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800f79c:	f7ff fff0 	bl	800f780 <HAL_RCC_GetHCLKFreq>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	4b05      	ldr	r3, [pc, #20]	@ (800f7b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800f7a4:	689b      	ldr	r3, [r3, #8]
 800f7a6:	0a9b      	lsrs	r3, r3, #10
 800f7a8:	f003 0307 	and.w	r3, r3, #7
 800f7ac:	4903      	ldr	r1, [pc, #12]	@ (800f7bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800f7ae:	5ccb      	ldrb	r3, [r1, r3]
 800f7b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	40023800 	.word	0x40023800
 800f7bc:	080138fc 	.word	0x080138fc

0800f7c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800f7c4:	f7ff ffdc 	bl	800f780 <HAL_RCC_GetHCLKFreq>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	4b05      	ldr	r3, [pc, #20]	@ (800f7e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800f7cc:	689b      	ldr	r3, [r3, #8]
 800f7ce:	0b5b      	lsrs	r3, r3, #13
 800f7d0:	f003 0307 	and.w	r3, r3, #7
 800f7d4:	4903      	ldr	r1, [pc, #12]	@ (800f7e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f7d6:	5ccb      	ldrb	r3, [r1, r3]
 800f7d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	40023800 	.word	0x40023800
 800f7e4:	080138fc 	.word	0x080138fc

0800f7e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d101      	bne.n	800f7fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e041      	b.n	800f87e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f800:	b2db      	uxtb	r3, r3
 800f802:	2b00      	cmp	r3, #0
 800f804:	d106      	bne.n	800f814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f80e:	6878      	ldr	r0, [r7, #4]
 800f810:	f7fe fb74 	bl	800defc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	2202      	movs	r2, #2
 800f818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	3304      	adds	r3, #4
 800f824:	4619      	mov	r1, r3
 800f826:	4610      	mov	r0, r2
 800f828:	f000 f8f4 	bl	800fa14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2201      	movs	r2, #1
 800f830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	2201      	movs	r2, #1
 800f838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2201      	movs	r2, #1
 800f848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2201      	movs	r2, #1
 800f850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2201      	movs	r2, #1
 800f858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2201      	movs	r2, #1
 800f860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2201      	movs	r2, #1
 800f868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2201      	movs	r2, #1
 800f870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2201      	movs	r2, #1
 800f878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3708      	adds	r7, #8
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}

0800f886 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f886:	b580      	push	{r7, lr}
 800f888:	b084      	sub	sp, #16
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
 800f88e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f890:	2300      	movs	r3, #0
 800f892:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d101      	bne.n	800f8a2 <HAL_TIM_ConfigClockSource+0x1c>
 800f89e:	2302      	movs	r3, #2
 800f8a0:	e0b4      	b.n	800fa0c <HAL_TIM_ConfigClockSource+0x186>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2202      	movs	r2, #2
 800f8ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f8ba:	68bb      	ldr	r3, [r7, #8]
 800f8bc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f8c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f8c8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	68ba      	ldr	r2, [r7, #8]
 800f8d0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f8da:	d03e      	beq.n	800f95a <HAL_TIM_ConfigClockSource+0xd4>
 800f8dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f8e0:	f200 8087 	bhi.w	800f9f2 <HAL_TIM_ConfigClockSource+0x16c>
 800f8e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8e8:	f000 8086 	beq.w	800f9f8 <HAL_TIM_ConfigClockSource+0x172>
 800f8ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8f0:	d87f      	bhi.n	800f9f2 <HAL_TIM_ConfigClockSource+0x16c>
 800f8f2:	2b70      	cmp	r3, #112	@ 0x70
 800f8f4:	d01a      	beq.n	800f92c <HAL_TIM_ConfigClockSource+0xa6>
 800f8f6:	2b70      	cmp	r3, #112	@ 0x70
 800f8f8:	d87b      	bhi.n	800f9f2 <HAL_TIM_ConfigClockSource+0x16c>
 800f8fa:	2b60      	cmp	r3, #96	@ 0x60
 800f8fc:	d050      	beq.n	800f9a0 <HAL_TIM_ConfigClockSource+0x11a>
 800f8fe:	2b60      	cmp	r3, #96	@ 0x60
 800f900:	d877      	bhi.n	800f9f2 <HAL_TIM_ConfigClockSource+0x16c>
 800f902:	2b50      	cmp	r3, #80	@ 0x50
 800f904:	d03c      	beq.n	800f980 <HAL_TIM_ConfigClockSource+0xfa>
 800f906:	2b50      	cmp	r3, #80	@ 0x50
 800f908:	d873      	bhi.n	800f9f2 <HAL_TIM_ConfigClockSource+0x16c>
 800f90a:	2b40      	cmp	r3, #64	@ 0x40
 800f90c:	d058      	beq.n	800f9c0 <HAL_TIM_ConfigClockSource+0x13a>
 800f90e:	2b40      	cmp	r3, #64	@ 0x40
 800f910:	d86f      	bhi.n	800f9f2 <HAL_TIM_ConfigClockSource+0x16c>
 800f912:	2b30      	cmp	r3, #48	@ 0x30
 800f914:	d064      	beq.n	800f9e0 <HAL_TIM_ConfigClockSource+0x15a>
 800f916:	2b30      	cmp	r3, #48	@ 0x30
 800f918:	d86b      	bhi.n	800f9f2 <HAL_TIM_ConfigClockSource+0x16c>
 800f91a:	2b20      	cmp	r3, #32
 800f91c:	d060      	beq.n	800f9e0 <HAL_TIM_ConfigClockSource+0x15a>
 800f91e:	2b20      	cmp	r3, #32
 800f920:	d867      	bhi.n	800f9f2 <HAL_TIM_ConfigClockSource+0x16c>
 800f922:	2b00      	cmp	r3, #0
 800f924:	d05c      	beq.n	800f9e0 <HAL_TIM_ConfigClockSource+0x15a>
 800f926:	2b10      	cmp	r3, #16
 800f928:	d05a      	beq.n	800f9e0 <HAL_TIM_ConfigClockSource+0x15a>
 800f92a:	e062      	b.n	800f9f2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f930:	683b      	ldr	r3, [r7, #0]
 800f932:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f93c:	f000 f970 	bl	800fc20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f94e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	68ba      	ldr	r2, [r7, #8]
 800f956:	609a      	str	r2, [r3, #8]
      break;
 800f958:	e04f      	b.n	800f9fa <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f96a:	f000 f959 	bl	800fc20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	689a      	ldr	r2, [r3, #8]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f97c:	609a      	str	r2, [r3, #8]
      break;
 800f97e:	e03c      	b.n	800f9fa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f98c:	461a      	mov	r2, r3
 800f98e:	f000 f8cd 	bl	800fb2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	2150      	movs	r1, #80	@ 0x50
 800f998:	4618      	mov	r0, r3
 800f99a:	f000 f926 	bl	800fbea <TIM_ITRx_SetConfig>
      break;
 800f99e:	e02c      	b.n	800f9fa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	f000 f8ec 	bl	800fb8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	2160      	movs	r1, #96	@ 0x60
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f000 f916 	bl	800fbea <TIM_ITRx_SetConfig>
      break;
 800f9be:	e01c      	b.n	800f9fa <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	f000 f8ad 	bl	800fb2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	2140      	movs	r1, #64	@ 0x40
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f000 f906 	bl	800fbea <TIM_ITRx_SetConfig>
      break;
 800f9de:	e00c      	b.n	800f9fa <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681a      	ldr	r2, [r3, #0]
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	4610      	mov	r0, r2
 800f9ec:	f000 f8fd 	bl	800fbea <TIM_ITRx_SetConfig>
      break;
 800f9f0:	e003      	b.n	800f9fa <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	73fb      	strb	r3, [r7, #15]
      break;
 800f9f6:	e000      	b.n	800f9fa <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f9f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800fa0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a3a      	ldr	r2, [pc, #232]	@ (800fb10 <TIM_Base_SetConfig+0xfc>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d00f      	beq.n	800fa4c <TIM_Base_SetConfig+0x38>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa32:	d00b      	beq.n	800fa4c <TIM_Base_SetConfig+0x38>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	4a37      	ldr	r2, [pc, #220]	@ (800fb14 <TIM_Base_SetConfig+0x100>)
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d007      	beq.n	800fa4c <TIM_Base_SetConfig+0x38>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4a36      	ldr	r2, [pc, #216]	@ (800fb18 <TIM_Base_SetConfig+0x104>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d003      	beq.n	800fa4c <TIM_Base_SetConfig+0x38>
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4a35      	ldr	r2, [pc, #212]	@ (800fb1c <TIM_Base_SetConfig+0x108>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d108      	bne.n	800fa5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	4a2b      	ldr	r2, [pc, #172]	@ (800fb10 <TIM_Base_SetConfig+0xfc>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d01b      	beq.n	800fa9e <TIM_Base_SetConfig+0x8a>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa6c:	d017      	beq.n	800fa9e <TIM_Base_SetConfig+0x8a>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	4a28      	ldr	r2, [pc, #160]	@ (800fb14 <TIM_Base_SetConfig+0x100>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d013      	beq.n	800fa9e <TIM_Base_SetConfig+0x8a>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	4a27      	ldr	r2, [pc, #156]	@ (800fb18 <TIM_Base_SetConfig+0x104>)
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	d00f      	beq.n	800fa9e <TIM_Base_SetConfig+0x8a>
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4a26      	ldr	r2, [pc, #152]	@ (800fb1c <TIM_Base_SetConfig+0x108>)
 800fa82:	4293      	cmp	r3, r2
 800fa84:	d00b      	beq.n	800fa9e <TIM_Base_SetConfig+0x8a>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4a25      	ldr	r2, [pc, #148]	@ (800fb20 <TIM_Base_SetConfig+0x10c>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d007      	beq.n	800fa9e <TIM_Base_SetConfig+0x8a>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4a24      	ldr	r2, [pc, #144]	@ (800fb24 <TIM_Base_SetConfig+0x110>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d003      	beq.n	800fa9e <TIM_Base_SetConfig+0x8a>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	4a23      	ldr	r2, [pc, #140]	@ (800fb28 <TIM_Base_SetConfig+0x114>)
 800fa9a:	4293      	cmp	r3, r2
 800fa9c:	d108      	bne.n	800fab0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800faa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	68fa      	ldr	r2, [r7, #12]
 800faac:	4313      	orrs	r3, r2
 800faae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fab6:	683b      	ldr	r3, [r7, #0]
 800fab8:	695b      	ldr	r3, [r3, #20]
 800faba:	4313      	orrs	r3, r2
 800fabc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	689a      	ldr	r2, [r3, #8]
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	4a0e      	ldr	r2, [pc, #56]	@ (800fb10 <TIM_Base_SetConfig+0xfc>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d103      	bne.n	800fae4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	691a      	ldr	r2, [r3, #16]
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2201      	movs	r2, #1
 800fae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	691b      	ldr	r3, [r3, #16]
 800faee:	f003 0301 	and.w	r3, r3, #1
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d105      	bne.n	800fb02 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	691b      	ldr	r3, [r3, #16]
 800fafa:	f023 0201 	bic.w	r2, r3, #1
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	611a      	str	r2, [r3, #16]
  }
}
 800fb02:	bf00      	nop
 800fb04:	3714      	adds	r7, #20
 800fb06:	46bd      	mov	sp, r7
 800fb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop
 800fb10:	40010000 	.word	0x40010000
 800fb14:	40000400 	.word	0x40000400
 800fb18:	40000800 	.word	0x40000800
 800fb1c:	40000c00 	.word	0x40000c00
 800fb20:	40014000 	.word	0x40014000
 800fb24:	40014400 	.word	0x40014400
 800fb28:	40014800 	.word	0x40014800

0800fb2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b087      	sub	sp, #28
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	6a1b      	ldr	r3, [r3, #32]
 800fb3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	6a1b      	ldr	r3, [r3, #32]
 800fb42:	f023 0201 	bic.w	r2, r3, #1
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	699b      	ldr	r3, [r3, #24]
 800fb4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fb56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	011b      	lsls	r3, r3, #4
 800fb5c:	693a      	ldr	r2, [r7, #16]
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	f023 030a 	bic.w	r3, r3, #10
 800fb68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fb6a:	697a      	ldr	r2, [r7, #20]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	4313      	orrs	r3, r2
 800fb70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	693a      	ldr	r2, [r7, #16]
 800fb76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	697a      	ldr	r2, [r7, #20]
 800fb7c:	621a      	str	r2, [r3, #32]
}
 800fb7e:	bf00      	nop
 800fb80:	371c      	adds	r7, #28
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b087      	sub	sp, #28
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	60f8      	str	r0, [r7, #12]
 800fb92:	60b9      	str	r1, [r7, #8]
 800fb94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6a1b      	ldr	r3, [r3, #32]
 800fb9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6a1b      	ldr	r3, [r3, #32]
 800fba0:	f023 0210 	bic.w	r2, r3, #16
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	699b      	ldr	r3, [r3, #24]
 800fbac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fbae:	693b      	ldr	r3, [r7, #16]
 800fbb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fbb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	031b      	lsls	r3, r3, #12
 800fbba:	693a      	ldr	r2, [r7, #16]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fbc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	011b      	lsls	r3, r3, #4
 800fbcc:	697a      	ldr	r2, [r7, #20]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	693a      	ldr	r2, [r7, #16]
 800fbd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	697a      	ldr	r2, [r7, #20]
 800fbdc:	621a      	str	r2, [r3, #32]
}
 800fbde:	bf00      	nop
 800fbe0:	371c      	adds	r7, #28
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fbea:	b480      	push	{r7}
 800fbec:	b085      	sub	sp, #20
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
 800fbf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fc02:	683a      	ldr	r2, [r7, #0]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	4313      	orrs	r3, r2
 800fc08:	f043 0307 	orr.w	r3, r3, #7
 800fc0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	68fa      	ldr	r2, [r7, #12]
 800fc12:	609a      	str	r2, [r3, #8]
}
 800fc14:	bf00      	nop
 800fc16:	3714      	adds	r7, #20
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr

0800fc20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fc20:	b480      	push	{r7}
 800fc22:	b087      	sub	sp, #28
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
 800fc2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	689b      	ldr	r3, [r3, #8]
 800fc32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fc3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	021a      	lsls	r2, r3, #8
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	431a      	orrs	r2, r3
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	697a      	ldr	r2, [r7, #20]
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	697a      	ldr	r2, [r7, #20]
 800fc52:	609a      	str	r2, [r3, #8]
}
 800fc54:	bf00      	nop
 800fc56:	371c      	adds	r7, #28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b085      	sub	sp, #20
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d101      	bne.n	800fc78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc74:	2302      	movs	r3, #2
 800fc76:	e050      	b.n	800fd1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2202      	movs	r2, #2
 800fc84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	689b      	ldr	r3, [r3, #8]
 800fc96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	4313      	orrs	r3, r2
 800fca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a1c      	ldr	r2, [pc, #112]	@ (800fd28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800fcb8:	4293      	cmp	r3, r2
 800fcba:	d018      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcc4:	d013      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4a18      	ldr	r2, [pc, #96]	@ (800fd2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800fccc:	4293      	cmp	r3, r2
 800fcce:	d00e      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4a16      	ldr	r2, [pc, #88]	@ (800fd30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d009      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	4a15      	ldr	r2, [pc, #84]	@ (800fd34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800fce0:	4293      	cmp	r3, r2
 800fce2:	d004      	beq.n	800fcee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a13      	ldr	r2, [pc, #76]	@ (800fd38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d10c      	bne.n	800fd08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fcf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	68ba      	ldr	r2, [r7, #8]
 800fd06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2201      	movs	r2, #1
 800fd0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3714      	adds	r7, #20
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr
 800fd26:	bf00      	nop
 800fd28:	40010000 	.word	0x40010000
 800fd2c:	40000400 	.word	0x40000400
 800fd30:	40000800 	.word	0x40000800
 800fd34:	40000c00 	.word	0x40000c00
 800fd38:	40014000 	.word	0x40014000

0800fd3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d101      	bne.n	800fd4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	e042      	b.n	800fdd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d106      	bne.n	800fd68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7fe f8ec 	bl	800df40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2224      	movs	r2, #36	@ 0x24
 800fd6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	68da      	ldr	r2, [r3, #12]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fd7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 fa09 	bl	8010198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	691a      	ldr	r2, [r3, #16]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fd94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	695a      	ldr	r2, [r3, #20]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fda4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68da      	ldr	r2, [r3, #12]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fdb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2220      	movs	r2, #32
 800fdc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2220      	movs	r2, #32
 800fdc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2200      	movs	r2, #0
 800fdd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800fdd2:	2300      	movs	r3, #0
}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b08a      	sub	sp, #40	@ 0x28
 800fde0:	af02      	add	r7, sp, #8
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	603b      	str	r3, [r7, #0]
 800fde8:	4613      	mov	r3, r2
 800fdea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fdec:	2300      	movs	r3, #0
 800fdee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	2b20      	cmp	r3, #32
 800fdfa:	d175      	bne.n	800fee8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d002      	beq.n	800fe08 <HAL_UART_Transmit+0x2c>
 800fe02:	88fb      	ldrh	r3, [r7, #6]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d101      	bne.n	800fe0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e06e      	b.n	800feea <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	2221      	movs	r2, #33	@ 0x21
 800fe16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe1a:	f7fe fa15 	bl	800e248 <HAL_GetTick>
 800fe1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	88fa      	ldrh	r2, [r7, #6]
 800fe24:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	88fa      	ldrh	r2, [r7, #6]
 800fe2a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe34:	d108      	bne.n	800fe48 <HAL_UART_Transmit+0x6c>
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	691b      	ldr	r3, [r3, #16]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d104      	bne.n	800fe48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	61bb      	str	r3, [r7, #24]
 800fe46:	e003      	b.n	800fe50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fe50:	e02e      	b.n	800feb0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fe52:	683b      	ldr	r3, [r7, #0]
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	2180      	movs	r1, #128	@ 0x80
 800fe5c:	68f8      	ldr	r0, [r7, #12]
 800fe5e:	f000 f8df 	bl	8010020 <UART_WaitOnFlagUntilTimeout>
 800fe62:	4603      	mov	r3, r0
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d005      	beq.n	800fe74 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	2220      	movs	r2, #32
 800fe6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800fe70:	2303      	movs	r3, #3
 800fe72:	e03a      	b.n	800feea <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d10b      	bne.n	800fe92 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	881b      	ldrh	r3, [r3, #0]
 800fe7e:	461a      	mov	r2, r3
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	3302      	adds	r3, #2
 800fe8e:	61bb      	str	r3, [r7, #24]
 800fe90:	e007      	b.n	800fea2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	781a      	ldrb	r2, [r3, #0]
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	3301      	adds	r3, #1
 800fea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	3b01      	subs	r3, #1
 800feaa:	b29a      	uxth	r2, r3
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800feb4:	b29b      	uxth	r3, r3
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d1cb      	bne.n	800fe52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	9300      	str	r3, [sp, #0]
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	2200      	movs	r2, #0
 800fec2:	2140      	movs	r1, #64	@ 0x40
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f000 f8ab 	bl	8010020 <UART_WaitOnFlagUntilTimeout>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d005      	beq.n	800fedc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2220      	movs	r2, #32
 800fed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800fed8:	2303      	movs	r3, #3
 800feda:	e006      	b.n	800feea <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2220      	movs	r2, #32
 800fee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800fee4:	2300      	movs	r3, #0
 800fee6:	e000      	b.n	800feea <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800fee8:	2302      	movs	r3, #2
  }
}
 800feea:	4618      	mov	r0, r3
 800feec:	3720      	adds	r7, #32
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fef2:	b580      	push	{r7, lr}
 800fef4:	b08a      	sub	sp, #40	@ 0x28
 800fef6:	af02      	add	r7, sp, #8
 800fef8:	60f8      	str	r0, [r7, #12]
 800fefa:	60b9      	str	r1, [r7, #8]
 800fefc:	603b      	str	r3, [r7, #0]
 800fefe:	4613      	mov	r3, r2
 800ff00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ff02:	2300      	movs	r3, #0
 800ff04:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	2b20      	cmp	r3, #32
 800ff10:	f040 8081 	bne.w	8010016 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d002      	beq.n	800ff20 <HAL_UART_Receive+0x2e>
 800ff1a:	88fb      	ldrh	r3, [r7, #6]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d101      	bne.n	800ff24 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800ff20:	2301      	movs	r3, #1
 800ff22:	e079      	b.n	8010018 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2200      	movs	r2, #0
 800ff28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	2222      	movs	r2, #34	@ 0x22
 800ff2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2200      	movs	r2, #0
 800ff36:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ff38:	f7fe f986 	bl	800e248 <HAL_GetTick>
 800ff3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	88fa      	ldrh	r2, [r7, #6]
 800ff42:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	88fa      	ldrh	r2, [r7, #6]
 800ff48:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	689b      	ldr	r3, [r3, #8]
 800ff4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ff52:	d108      	bne.n	800ff66 <HAL_UART_Receive+0x74>
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	691b      	ldr	r3, [r3, #16]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d104      	bne.n	800ff66 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	61bb      	str	r3, [r7, #24]
 800ff64:	e003      	b.n	800ff6e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800ff6e:	e047      	b.n	8010000 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	9300      	str	r3, [sp, #0]
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	2200      	movs	r2, #0
 800ff78:	2120      	movs	r1, #32
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	f000 f850 	bl	8010020 <UART_WaitOnFlagUntilTimeout>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d005      	beq.n	800ff92 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2220      	movs	r2, #32
 800ff8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800ff8e:	2303      	movs	r3, #3
 800ff90:	e042      	b.n	8010018 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d10c      	bne.n	800ffb2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	b29b      	uxth	r3, r3
 800ffa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffa4:	b29a      	uxth	r2, r3
 800ffa6:	69bb      	ldr	r3, [r7, #24]
 800ffa8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	3302      	adds	r3, #2
 800ffae:	61bb      	str	r3, [r7, #24]
 800ffb0:	e01f      	b.n	800fff2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	689b      	ldr	r3, [r3, #8]
 800ffb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ffba:	d007      	beq.n	800ffcc <HAL_UART_Receive+0xda>
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	689b      	ldr	r3, [r3, #8]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d10a      	bne.n	800ffda <HAL_UART_Receive+0xe8>
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	691b      	ldr	r3, [r3, #16]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d106      	bne.n	800ffda <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	b2da      	uxtb	r2, r3
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	701a      	strb	r2, [r3, #0]
 800ffd8:	e008      	b.n	800ffec <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	b2db      	uxtb	r3, r3
 800ffe2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	3301      	adds	r3, #1
 800fff0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	3b01      	subs	r3, #1
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010004:	b29b      	uxth	r3, r3
 8010006:	2b00      	cmp	r3, #0
 8010008:	d1b2      	bne.n	800ff70 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	2220      	movs	r2, #32
 801000e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8010012:	2300      	movs	r3, #0
 8010014:	e000      	b.n	8010018 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8010016:	2302      	movs	r3, #2
  }
}
 8010018:	4618      	mov	r0, r3
 801001a:	3720      	adds	r7, #32
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}

08010020 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b086      	sub	sp, #24
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	603b      	str	r3, [r7, #0]
 801002c:	4613      	mov	r3, r2
 801002e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010030:	e03b      	b.n	80100aa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010032:	6a3b      	ldr	r3, [r7, #32]
 8010034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010038:	d037      	beq.n	80100aa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801003a:	f7fe f905 	bl	800e248 <HAL_GetTick>
 801003e:	4602      	mov	r2, r0
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	6a3a      	ldr	r2, [r7, #32]
 8010046:	429a      	cmp	r2, r3
 8010048:	d302      	bcc.n	8010050 <UART_WaitOnFlagUntilTimeout+0x30>
 801004a:	6a3b      	ldr	r3, [r7, #32]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d101      	bne.n	8010054 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010050:	2303      	movs	r3, #3
 8010052:	e03a      	b.n	80100ca <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	f003 0304 	and.w	r3, r3, #4
 801005e:	2b00      	cmp	r3, #0
 8010060:	d023      	beq.n	80100aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	2b80      	cmp	r3, #128	@ 0x80
 8010066:	d020      	beq.n	80100aa <UART_WaitOnFlagUntilTimeout+0x8a>
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	2b40      	cmp	r3, #64	@ 0x40
 801006c:	d01d      	beq.n	80100aa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f003 0308 	and.w	r3, r3, #8
 8010078:	2b08      	cmp	r3, #8
 801007a:	d116      	bne.n	80100aa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 801007c:	2300      	movs	r3, #0
 801007e:	617b      	str	r3, [r7, #20]
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	617b      	str	r3, [r7, #20]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	617b      	str	r3, [r7, #20]
 8010090:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f000 f81d 	bl	80100d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2208      	movs	r2, #8
 801009c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	e00f      	b.n	80100ca <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	4013      	ands	r3, r2
 80100b4:	68ba      	ldr	r2, [r7, #8]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	bf0c      	ite	eq
 80100ba:	2301      	moveq	r3, #1
 80100bc:	2300      	movne	r3, #0
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	461a      	mov	r2, r3
 80100c2:	79fb      	ldrb	r3, [r7, #7]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d0b4      	beq.n	8010032 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80100c8:	2300      	movs	r3, #0
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3718      	adds	r7, #24
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80100d2:	b480      	push	{r7}
 80100d4:	b095      	sub	sp, #84	@ 0x54
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	330c      	adds	r3, #12
 80100e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100e4:	e853 3f00 	ldrex	r3, [r3]
 80100e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80100ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80100f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	330c      	adds	r3, #12
 80100f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80100fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80100fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010100:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010102:	e841 2300 	strex	r3, r2, [r1]
 8010106:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801010a:	2b00      	cmp	r3, #0
 801010c:	d1e5      	bne.n	80100da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	3314      	adds	r3, #20
 8010114:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010116:	6a3b      	ldr	r3, [r7, #32]
 8010118:	e853 3f00 	ldrex	r3, [r3]
 801011c:	61fb      	str	r3, [r7, #28]
   return(result);
 801011e:	69fb      	ldr	r3, [r7, #28]
 8010120:	f023 0301 	bic.w	r3, r3, #1
 8010124:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	3314      	adds	r3, #20
 801012c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801012e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010130:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010136:	e841 2300 	strex	r3, r2, [r1]
 801013a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801013c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801013e:	2b00      	cmp	r3, #0
 8010140:	d1e5      	bne.n	801010e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010146:	2b01      	cmp	r3, #1
 8010148:	d119      	bne.n	801017e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	330c      	adds	r3, #12
 8010150:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	e853 3f00 	ldrex	r3, [r3]
 8010158:	60bb      	str	r3, [r7, #8]
   return(result);
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	f023 0310 	bic.w	r3, r3, #16
 8010160:	647b      	str	r3, [r7, #68]	@ 0x44
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	330c      	adds	r3, #12
 8010168:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801016a:	61ba      	str	r2, [r7, #24]
 801016c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801016e:	6979      	ldr	r1, [r7, #20]
 8010170:	69ba      	ldr	r2, [r7, #24]
 8010172:	e841 2300 	strex	r3, r2, [r1]
 8010176:	613b      	str	r3, [r7, #16]
   return(result);
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d1e5      	bne.n	801014a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2220      	movs	r2, #32
 8010182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2200      	movs	r2, #0
 801018a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 801018c:	bf00      	nop
 801018e:	3754      	adds	r7, #84	@ 0x54
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801019c:	b0c0      	sub	sp, #256	@ 0x100
 801019e:	af00      	add	r7, sp, #0
 80101a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80101a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	691b      	ldr	r3, [r3, #16]
 80101ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80101b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101b4:	68d9      	ldr	r1, [r3, #12]
 80101b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101ba:	681a      	ldr	r2, [r3, #0]
 80101bc:	ea40 0301 	orr.w	r3, r0, r1
 80101c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80101c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101c6:	689a      	ldr	r2, [r3, #8]
 80101c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101cc:	691b      	ldr	r3, [r3, #16]
 80101ce:	431a      	orrs	r2, r3
 80101d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101d4:	695b      	ldr	r3, [r3, #20]
 80101d6:	431a      	orrs	r2, r3
 80101d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101dc:	69db      	ldr	r3, [r3, #28]
 80101de:	4313      	orrs	r3, r2
 80101e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80101e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	68db      	ldr	r3, [r3, #12]
 80101ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80101f0:	f021 010c 	bic.w	r1, r1, #12
 80101f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80101fe:	430b      	orrs	r3, r1
 8010200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	695b      	ldr	r3, [r3, #20]
 801020a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801020e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010212:	6999      	ldr	r1, [r3, #24]
 8010214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	ea40 0301 	orr.w	r3, r0, r1
 801021e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	4b8f      	ldr	r3, [pc, #572]	@ (8010464 <UART_SetConfig+0x2cc>)
 8010228:	429a      	cmp	r2, r3
 801022a:	d005      	beq.n	8010238 <UART_SetConfig+0xa0>
 801022c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010230:	681a      	ldr	r2, [r3, #0]
 8010232:	4b8d      	ldr	r3, [pc, #564]	@ (8010468 <UART_SetConfig+0x2d0>)
 8010234:	429a      	cmp	r2, r3
 8010236:	d104      	bne.n	8010242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010238:	f7ff fac2 	bl	800f7c0 <HAL_RCC_GetPCLK2Freq>
 801023c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010240:	e003      	b.n	801024a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010242:	f7ff faa9 	bl	800f798 <HAL_RCC_GetPCLK1Freq>
 8010246:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801024a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801024e:	69db      	ldr	r3, [r3, #28]
 8010250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010254:	f040 810c 	bne.w	8010470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801025c:	2200      	movs	r2, #0
 801025e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010262:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801026a:	4622      	mov	r2, r4
 801026c:	462b      	mov	r3, r5
 801026e:	1891      	adds	r1, r2, r2
 8010270:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010272:	415b      	adcs	r3, r3
 8010274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801027a:	4621      	mov	r1, r4
 801027c:	eb12 0801 	adds.w	r8, r2, r1
 8010280:	4629      	mov	r1, r5
 8010282:	eb43 0901 	adc.w	r9, r3, r1
 8010286:	f04f 0200 	mov.w	r2, #0
 801028a:	f04f 0300 	mov.w	r3, #0
 801028e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801029a:	4690      	mov	r8, r2
 801029c:	4699      	mov	r9, r3
 801029e:	4623      	mov	r3, r4
 80102a0:	eb18 0303 	adds.w	r3, r8, r3
 80102a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80102a8:	462b      	mov	r3, r5
 80102aa:	eb49 0303 	adc.w	r3, r9, r3
 80102ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80102b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80102be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80102c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80102c6:	460b      	mov	r3, r1
 80102c8:	18db      	adds	r3, r3, r3
 80102ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80102cc:	4613      	mov	r3, r2
 80102ce:	eb42 0303 	adc.w	r3, r2, r3
 80102d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80102d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80102d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80102dc:	f7fb ff08 	bl	800c0f0 <__aeabi_uldivmod>
 80102e0:	4602      	mov	r2, r0
 80102e2:	460b      	mov	r3, r1
 80102e4:	4b61      	ldr	r3, [pc, #388]	@ (801046c <UART_SetConfig+0x2d4>)
 80102e6:	fba3 2302 	umull	r2, r3, r3, r2
 80102ea:	095b      	lsrs	r3, r3, #5
 80102ec:	011c      	lsls	r4, r3, #4
 80102ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80102f2:	2200      	movs	r2, #0
 80102f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80102f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80102fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010300:	4642      	mov	r2, r8
 8010302:	464b      	mov	r3, r9
 8010304:	1891      	adds	r1, r2, r2
 8010306:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010308:	415b      	adcs	r3, r3
 801030a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801030c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010310:	4641      	mov	r1, r8
 8010312:	eb12 0a01 	adds.w	sl, r2, r1
 8010316:	4649      	mov	r1, r9
 8010318:	eb43 0b01 	adc.w	fp, r3, r1
 801031c:	f04f 0200 	mov.w	r2, #0
 8010320:	f04f 0300 	mov.w	r3, #0
 8010324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801032c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010330:	4692      	mov	sl, r2
 8010332:	469b      	mov	fp, r3
 8010334:	4643      	mov	r3, r8
 8010336:	eb1a 0303 	adds.w	r3, sl, r3
 801033a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801033e:	464b      	mov	r3, r9
 8010340:	eb4b 0303 	adc.w	r3, fp, r3
 8010344:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	2200      	movs	r2, #0
 8010350:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010354:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801035c:	460b      	mov	r3, r1
 801035e:	18db      	adds	r3, r3, r3
 8010360:	643b      	str	r3, [r7, #64]	@ 0x40
 8010362:	4613      	mov	r3, r2
 8010364:	eb42 0303 	adc.w	r3, r2, r3
 8010368:	647b      	str	r3, [r7, #68]	@ 0x44
 801036a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801036e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010372:	f7fb febd 	bl	800c0f0 <__aeabi_uldivmod>
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	4611      	mov	r1, r2
 801037c:	4b3b      	ldr	r3, [pc, #236]	@ (801046c <UART_SetConfig+0x2d4>)
 801037e:	fba3 2301 	umull	r2, r3, r3, r1
 8010382:	095b      	lsrs	r3, r3, #5
 8010384:	2264      	movs	r2, #100	@ 0x64
 8010386:	fb02 f303 	mul.w	r3, r2, r3
 801038a:	1acb      	subs	r3, r1, r3
 801038c:	00db      	lsls	r3, r3, #3
 801038e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010392:	4b36      	ldr	r3, [pc, #216]	@ (801046c <UART_SetConfig+0x2d4>)
 8010394:	fba3 2302 	umull	r2, r3, r3, r2
 8010398:	095b      	lsrs	r3, r3, #5
 801039a:	005b      	lsls	r3, r3, #1
 801039c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80103a0:	441c      	add	r4, r3
 80103a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80103a6:	2200      	movs	r2, #0
 80103a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80103ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80103b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80103b4:	4642      	mov	r2, r8
 80103b6:	464b      	mov	r3, r9
 80103b8:	1891      	adds	r1, r2, r2
 80103ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80103bc:	415b      	adcs	r3, r3
 80103be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80103c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80103c4:	4641      	mov	r1, r8
 80103c6:	1851      	adds	r1, r2, r1
 80103c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80103ca:	4649      	mov	r1, r9
 80103cc:	414b      	adcs	r3, r1
 80103ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80103d0:	f04f 0200 	mov.w	r2, #0
 80103d4:	f04f 0300 	mov.w	r3, #0
 80103d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80103dc:	4659      	mov	r1, fp
 80103de:	00cb      	lsls	r3, r1, #3
 80103e0:	4651      	mov	r1, sl
 80103e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80103e6:	4651      	mov	r1, sl
 80103e8:	00ca      	lsls	r2, r1, #3
 80103ea:	4610      	mov	r0, r2
 80103ec:	4619      	mov	r1, r3
 80103ee:	4603      	mov	r3, r0
 80103f0:	4642      	mov	r2, r8
 80103f2:	189b      	adds	r3, r3, r2
 80103f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80103f8:	464b      	mov	r3, r9
 80103fa:	460a      	mov	r2, r1
 80103fc:	eb42 0303 	adc.w	r3, r2, r3
 8010400:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	2200      	movs	r2, #0
 801040c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010410:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010418:	460b      	mov	r3, r1
 801041a:	18db      	adds	r3, r3, r3
 801041c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801041e:	4613      	mov	r3, r2
 8010420:	eb42 0303 	adc.w	r3, r2, r3
 8010424:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801042a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801042e:	f7fb fe5f 	bl	800c0f0 <__aeabi_uldivmod>
 8010432:	4602      	mov	r2, r0
 8010434:	460b      	mov	r3, r1
 8010436:	4b0d      	ldr	r3, [pc, #52]	@ (801046c <UART_SetConfig+0x2d4>)
 8010438:	fba3 1302 	umull	r1, r3, r3, r2
 801043c:	095b      	lsrs	r3, r3, #5
 801043e:	2164      	movs	r1, #100	@ 0x64
 8010440:	fb01 f303 	mul.w	r3, r1, r3
 8010444:	1ad3      	subs	r3, r2, r3
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	3332      	adds	r3, #50	@ 0x32
 801044a:	4a08      	ldr	r2, [pc, #32]	@ (801046c <UART_SetConfig+0x2d4>)
 801044c:	fba2 2303 	umull	r2, r3, r2, r3
 8010450:	095b      	lsrs	r3, r3, #5
 8010452:	f003 0207 	and.w	r2, r3, #7
 8010456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	4422      	add	r2, r4
 801045e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010460:	e106      	b.n	8010670 <UART_SetConfig+0x4d8>
 8010462:	bf00      	nop
 8010464:	40011000 	.word	0x40011000
 8010468:	40011400 	.word	0x40011400
 801046c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010474:	2200      	movs	r2, #0
 8010476:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801047a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801047e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8010482:	4642      	mov	r2, r8
 8010484:	464b      	mov	r3, r9
 8010486:	1891      	adds	r1, r2, r2
 8010488:	6239      	str	r1, [r7, #32]
 801048a:	415b      	adcs	r3, r3
 801048c:	627b      	str	r3, [r7, #36]	@ 0x24
 801048e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010492:	4641      	mov	r1, r8
 8010494:	1854      	adds	r4, r2, r1
 8010496:	4649      	mov	r1, r9
 8010498:	eb43 0501 	adc.w	r5, r3, r1
 801049c:	f04f 0200 	mov.w	r2, #0
 80104a0:	f04f 0300 	mov.w	r3, #0
 80104a4:	00eb      	lsls	r3, r5, #3
 80104a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80104aa:	00e2      	lsls	r2, r4, #3
 80104ac:	4614      	mov	r4, r2
 80104ae:	461d      	mov	r5, r3
 80104b0:	4643      	mov	r3, r8
 80104b2:	18e3      	adds	r3, r4, r3
 80104b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80104b8:	464b      	mov	r3, r9
 80104ba:	eb45 0303 	adc.w	r3, r5, r3
 80104be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80104c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80104ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80104d2:	f04f 0200 	mov.w	r2, #0
 80104d6:	f04f 0300 	mov.w	r3, #0
 80104da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80104de:	4629      	mov	r1, r5
 80104e0:	008b      	lsls	r3, r1, #2
 80104e2:	4621      	mov	r1, r4
 80104e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80104e8:	4621      	mov	r1, r4
 80104ea:	008a      	lsls	r2, r1, #2
 80104ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80104f0:	f7fb fdfe 	bl	800c0f0 <__aeabi_uldivmod>
 80104f4:	4602      	mov	r2, r0
 80104f6:	460b      	mov	r3, r1
 80104f8:	4b60      	ldr	r3, [pc, #384]	@ (801067c <UART_SetConfig+0x4e4>)
 80104fa:	fba3 2302 	umull	r2, r3, r3, r2
 80104fe:	095b      	lsrs	r3, r3, #5
 8010500:	011c      	lsls	r4, r3, #4
 8010502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010506:	2200      	movs	r2, #0
 8010508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801050c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010514:	4642      	mov	r2, r8
 8010516:	464b      	mov	r3, r9
 8010518:	1891      	adds	r1, r2, r2
 801051a:	61b9      	str	r1, [r7, #24]
 801051c:	415b      	adcs	r3, r3
 801051e:	61fb      	str	r3, [r7, #28]
 8010520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010524:	4641      	mov	r1, r8
 8010526:	1851      	adds	r1, r2, r1
 8010528:	6139      	str	r1, [r7, #16]
 801052a:	4649      	mov	r1, r9
 801052c:	414b      	adcs	r3, r1
 801052e:	617b      	str	r3, [r7, #20]
 8010530:	f04f 0200 	mov.w	r2, #0
 8010534:	f04f 0300 	mov.w	r3, #0
 8010538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801053c:	4659      	mov	r1, fp
 801053e:	00cb      	lsls	r3, r1, #3
 8010540:	4651      	mov	r1, sl
 8010542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010546:	4651      	mov	r1, sl
 8010548:	00ca      	lsls	r2, r1, #3
 801054a:	4610      	mov	r0, r2
 801054c:	4619      	mov	r1, r3
 801054e:	4603      	mov	r3, r0
 8010550:	4642      	mov	r2, r8
 8010552:	189b      	adds	r3, r3, r2
 8010554:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010558:	464b      	mov	r3, r9
 801055a:	460a      	mov	r2, r1
 801055c:	eb42 0303 	adc.w	r3, r2, r3
 8010560:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010568:	685b      	ldr	r3, [r3, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801056e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010570:	f04f 0200 	mov.w	r2, #0
 8010574:	f04f 0300 	mov.w	r3, #0
 8010578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801057c:	4649      	mov	r1, r9
 801057e:	008b      	lsls	r3, r1, #2
 8010580:	4641      	mov	r1, r8
 8010582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010586:	4641      	mov	r1, r8
 8010588:	008a      	lsls	r2, r1, #2
 801058a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801058e:	f7fb fdaf 	bl	800c0f0 <__aeabi_uldivmod>
 8010592:	4602      	mov	r2, r0
 8010594:	460b      	mov	r3, r1
 8010596:	4611      	mov	r1, r2
 8010598:	4b38      	ldr	r3, [pc, #224]	@ (801067c <UART_SetConfig+0x4e4>)
 801059a:	fba3 2301 	umull	r2, r3, r3, r1
 801059e:	095b      	lsrs	r3, r3, #5
 80105a0:	2264      	movs	r2, #100	@ 0x64
 80105a2:	fb02 f303 	mul.w	r3, r2, r3
 80105a6:	1acb      	subs	r3, r1, r3
 80105a8:	011b      	lsls	r3, r3, #4
 80105aa:	3332      	adds	r3, #50	@ 0x32
 80105ac:	4a33      	ldr	r2, [pc, #204]	@ (801067c <UART_SetConfig+0x4e4>)
 80105ae:	fba2 2303 	umull	r2, r3, r2, r3
 80105b2:	095b      	lsrs	r3, r3, #5
 80105b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80105b8:	441c      	add	r4, r3
 80105ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80105be:	2200      	movs	r2, #0
 80105c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80105c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80105c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80105c8:	4642      	mov	r2, r8
 80105ca:	464b      	mov	r3, r9
 80105cc:	1891      	adds	r1, r2, r2
 80105ce:	60b9      	str	r1, [r7, #8]
 80105d0:	415b      	adcs	r3, r3
 80105d2:	60fb      	str	r3, [r7, #12]
 80105d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80105d8:	4641      	mov	r1, r8
 80105da:	1851      	adds	r1, r2, r1
 80105dc:	6039      	str	r1, [r7, #0]
 80105de:	4649      	mov	r1, r9
 80105e0:	414b      	adcs	r3, r1
 80105e2:	607b      	str	r3, [r7, #4]
 80105e4:	f04f 0200 	mov.w	r2, #0
 80105e8:	f04f 0300 	mov.w	r3, #0
 80105ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80105f0:	4659      	mov	r1, fp
 80105f2:	00cb      	lsls	r3, r1, #3
 80105f4:	4651      	mov	r1, sl
 80105f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80105fa:	4651      	mov	r1, sl
 80105fc:	00ca      	lsls	r2, r1, #3
 80105fe:	4610      	mov	r0, r2
 8010600:	4619      	mov	r1, r3
 8010602:	4603      	mov	r3, r0
 8010604:	4642      	mov	r2, r8
 8010606:	189b      	adds	r3, r3, r2
 8010608:	66bb      	str	r3, [r7, #104]	@ 0x68
 801060a:	464b      	mov	r3, r9
 801060c:	460a      	mov	r2, r1
 801060e:	eb42 0303 	adc.w	r3, r2, r3
 8010612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010618:	685b      	ldr	r3, [r3, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	663b      	str	r3, [r7, #96]	@ 0x60
 801061e:	667a      	str	r2, [r7, #100]	@ 0x64
 8010620:	f04f 0200 	mov.w	r2, #0
 8010624:	f04f 0300 	mov.w	r3, #0
 8010628:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 801062c:	4649      	mov	r1, r9
 801062e:	008b      	lsls	r3, r1, #2
 8010630:	4641      	mov	r1, r8
 8010632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010636:	4641      	mov	r1, r8
 8010638:	008a      	lsls	r2, r1, #2
 801063a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801063e:	f7fb fd57 	bl	800c0f0 <__aeabi_uldivmod>
 8010642:	4602      	mov	r2, r0
 8010644:	460b      	mov	r3, r1
 8010646:	4b0d      	ldr	r3, [pc, #52]	@ (801067c <UART_SetConfig+0x4e4>)
 8010648:	fba3 1302 	umull	r1, r3, r3, r2
 801064c:	095b      	lsrs	r3, r3, #5
 801064e:	2164      	movs	r1, #100	@ 0x64
 8010650:	fb01 f303 	mul.w	r3, r1, r3
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	011b      	lsls	r3, r3, #4
 8010658:	3332      	adds	r3, #50	@ 0x32
 801065a:	4a08      	ldr	r2, [pc, #32]	@ (801067c <UART_SetConfig+0x4e4>)
 801065c:	fba2 2303 	umull	r2, r3, r2, r3
 8010660:	095b      	lsrs	r3, r3, #5
 8010662:	f003 020f 	and.w	r2, r3, #15
 8010666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	4422      	add	r2, r4
 801066e:	609a      	str	r2, [r3, #8]
}
 8010670:	bf00      	nop
 8010672:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010676:	46bd      	mov	sp, r7
 8010678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801067c:	51eb851f 	.word	0x51eb851f

08010680 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010680:	b480      	push	{r7}
 8010682:	b085      	sub	sp, #20
 8010684:	af00      	add	r7, sp, #0
 8010686:	4603      	mov	r3, r0
 8010688:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801068a:	2300      	movs	r3, #0
 801068c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801068e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010692:	2b84      	cmp	r3, #132	@ 0x84
 8010694:	d005      	beq.n	80106a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010696:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	4413      	add	r3, r2
 801069e:	3303      	adds	r3, #3
 80106a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80106a2:	68fb      	ldr	r3, [r7, #12]
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3714      	adds	r7, #20
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80106b4:	f000 fafc 	bl	8010cb0 <vTaskStartScheduler>
  
  return osOK;
 80106b8:	2300      	movs	r3, #0
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	bd80      	pop	{r7, pc}

080106be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80106be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106c0:	b089      	sub	sp, #36	@ 0x24
 80106c2:	af04      	add	r7, sp, #16
 80106c4:	6078      	str	r0, [r7, #4]
 80106c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	695b      	ldr	r3, [r3, #20]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d020      	beq.n	8010712 <osThreadCreate+0x54>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	699b      	ldr	r3, [r3, #24]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d01c      	beq.n	8010712 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	685c      	ldr	r4, [r3, #4]
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	691e      	ldr	r6, [r3, #16]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106ea:	4618      	mov	r0, r3
 80106ec:	f7ff ffc8 	bl	8010680 <makeFreeRtosPriority>
 80106f0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	687a      	ldr	r2, [r7, #4]
 80106f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106fa:	9202      	str	r2, [sp, #8]
 80106fc:	9301      	str	r3, [sp, #4]
 80106fe:	9100      	str	r1, [sp, #0]
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	4632      	mov	r2, r6
 8010704:	4629      	mov	r1, r5
 8010706:	4620      	mov	r0, r4
 8010708:	f000 f8ed 	bl	80108e6 <xTaskCreateStatic>
 801070c:	4603      	mov	r3, r0
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	e01c      	b.n	801074c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	685c      	ldr	r4, [r3, #4]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801071e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010726:	4618      	mov	r0, r3
 8010728:	f7ff ffaa 	bl	8010680 <makeFreeRtosPriority>
 801072c:	4602      	mov	r2, r0
 801072e:	f107 030c 	add.w	r3, r7, #12
 8010732:	9301      	str	r3, [sp, #4]
 8010734:	9200      	str	r2, [sp, #0]
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	4632      	mov	r2, r6
 801073a:	4629      	mov	r1, r5
 801073c:	4620      	mov	r0, r4
 801073e:	f000 f932 	bl	80109a6 <xTaskCreate>
 8010742:	4603      	mov	r3, r0
 8010744:	2b01      	cmp	r3, #1
 8010746:	d001      	beq.n	801074c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010748:	2300      	movs	r3, #0
 801074a:	e000      	b.n	801074e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801074c:	68fb      	ldr	r3, [r7, #12]
}
 801074e:	4618      	mov	r0, r3
 8010750:	3714      	adds	r7, #20
 8010752:	46bd      	mov	sp, r7
 8010754:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010756 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010756:	b580      	push	{r7, lr}
 8010758:	b084      	sub	sp, #16
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d001      	beq.n	801076c <osDelay+0x16>
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	e000      	b.n	801076e <osDelay+0x18>
 801076c:	2301      	movs	r3, #1
 801076e:	4618      	mov	r0, r3
 8010770:	f000 fa68 	bl	8010c44 <vTaskDelay>
  
  return osOK;
 8010774:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010776:	4618      	mov	r0, r3
 8010778:	3710      	adds	r7, #16
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801077e:	b480      	push	{r7}
 8010780:	b083      	sub	sp, #12
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f103 0208 	add.w	r2, r3, #8
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	f04f 32ff 	mov.w	r2, #4294967295
 8010796:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	f103 0208 	add.w	r2, r3, #8
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f103 0208 	add.w	r2, r3, #8
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2200      	movs	r2, #0
 80107b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80107b2:	bf00      	nop
 80107b4:	370c      	adds	r7, #12
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr

080107be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80107be:	b480      	push	{r7}
 80107c0:	b083      	sub	sp, #12
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2200      	movs	r2, #0
 80107ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80107cc:	bf00      	nop
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr

080107d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80107d8:	b480      	push	{r7}
 80107da:	b085      	sub	sp, #20
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
 80107e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	685b      	ldr	r3, [r3, #4]
 80107e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	689a      	ldr	r2, [r3, #8]
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	689b      	ldr	r3, [r3, #8]
 80107fa:	683a      	ldr	r2, [r7, #0]
 80107fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	683a      	ldr	r2, [r7, #0]
 8010802:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	1c5a      	adds	r2, r3, #1
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	601a      	str	r2, [r3, #0]
}
 8010814:	bf00      	nop
 8010816:	3714      	adds	r7, #20
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr

08010820 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010820:	b480      	push	{r7}
 8010822:	b085      	sub	sp, #20
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
 8010828:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010836:	d103      	bne.n	8010840 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	691b      	ldr	r3, [r3, #16]
 801083c:	60fb      	str	r3, [r7, #12]
 801083e:	e00c      	b.n	801085a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	3308      	adds	r3, #8
 8010844:	60fb      	str	r3, [r7, #12]
 8010846:	e002      	b.n	801084e <vListInsert+0x2e>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	685b      	ldr	r3, [r3, #4]
 801084c:	60fb      	str	r3, [r7, #12]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	685b      	ldr	r3, [r3, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	68ba      	ldr	r2, [r7, #8]
 8010856:	429a      	cmp	r2, r3
 8010858:	d2f6      	bcs.n	8010848 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	685a      	ldr	r2, [r3, #4]
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	685b      	ldr	r3, [r3, #4]
 8010866:	683a      	ldr	r2, [r7, #0]
 8010868:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	68fa      	ldr	r2, [r7, #12]
 801086e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	683a      	ldr	r2, [r7, #0]
 8010874:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	687a      	ldr	r2, [r7, #4]
 801087a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	1c5a      	adds	r2, r3, #1
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	601a      	str	r2, [r3, #0]
}
 8010886:	bf00      	nop
 8010888:	3714      	adds	r7, #20
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr

08010892 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010892:	b480      	push	{r7}
 8010894:	b085      	sub	sp, #20
 8010896:	af00      	add	r7, sp, #0
 8010898:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	691b      	ldr	r3, [r3, #16]
 801089e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	6892      	ldr	r2, [r2, #8]
 80108a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	689b      	ldr	r3, [r3, #8]
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	6852      	ldr	r2, [r2, #4]
 80108b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d103      	bne.n	80108c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	689a      	ldr	r2, [r3, #8]
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2200      	movs	r2, #0
 80108ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	1e5a      	subs	r2, r3, #1
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
}
 80108da:	4618      	mov	r0, r3
 80108dc:	3714      	adds	r7, #20
 80108de:	46bd      	mov	sp, r7
 80108e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e4:	4770      	bx	lr

080108e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80108e6:	b580      	push	{r7, lr}
 80108e8:	b08e      	sub	sp, #56	@ 0x38
 80108ea:	af04      	add	r7, sp, #16
 80108ec:	60f8      	str	r0, [r7, #12]
 80108ee:	60b9      	str	r1, [r7, #8]
 80108f0:	607a      	str	r2, [r7, #4]
 80108f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80108f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d10b      	bne.n	8010912 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80108fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108fe:	f383 8811 	msr	BASEPRI, r3
 8010902:	f3bf 8f6f 	isb	sy
 8010906:	f3bf 8f4f 	dsb	sy
 801090a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801090c:	bf00      	nop
 801090e:	bf00      	nop
 8010910:	e7fd      	b.n	801090e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010914:	2b00      	cmp	r3, #0
 8010916:	d10b      	bne.n	8010930 <xTaskCreateStatic+0x4a>
	__asm volatile
 8010918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801091c:	f383 8811 	msr	BASEPRI, r3
 8010920:	f3bf 8f6f 	isb	sy
 8010924:	f3bf 8f4f 	dsb	sy
 8010928:	61fb      	str	r3, [r7, #28]
}
 801092a:	bf00      	nop
 801092c:	bf00      	nop
 801092e:	e7fd      	b.n	801092c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010930:	23a0      	movs	r3, #160	@ 0xa0
 8010932:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	2ba0      	cmp	r3, #160	@ 0xa0
 8010938:	d00b      	beq.n	8010952 <xTaskCreateStatic+0x6c>
	__asm volatile
 801093a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801093e:	f383 8811 	msr	BASEPRI, r3
 8010942:	f3bf 8f6f 	isb	sy
 8010946:	f3bf 8f4f 	dsb	sy
 801094a:	61bb      	str	r3, [r7, #24]
}
 801094c:	bf00      	nop
 801094e:	bf00      	nop
 8010950:	e7fd      	b.n	801094e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010952:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010956:	2b00      	cmp	r3, #0
 8010958:	d01e      	beq.n	8010998 <xTaskCreateStatic+0xb2>
 801095a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801095c:	2b00      	cmp	r3, #0
 801095e:	d01b      	beq.n	8010998 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010962:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010966:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010968:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801096a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801096c:	2202      	movs	r2, #2
 801096e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010972:	2300      	movs	r3, #0
 8010974:	9303      	str	r3, [sp, #12]
 8010976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010978:	9302      	str	r3, [sp, #8]
 801097a:	f107 0314 	add.w	r3, r7, #20
 801097e:	9301      	str	r3, [sp, #4]
 8010980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	687a      	ldr	r2, [r7, #4]
 8010988:	68b9      	ldr	r1, [r7, #8]
 801098a:	68f8      	ldr	r0, [r7, #12]
 801098c:	f000 f850 	bl	8010a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010990:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010992:	f000 f8ed 	bl	8010b70 <prvAddNewTaskToReadyList>
 8010996:	e001      	b.n	801099c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010998:	2300      	movs	r3, #0
 801099a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801099c:	697b      	ldr	r3, [r7, #20]
	}
 801099e:	4618      	mov	r0, r3
 80109a0:	3728      	adds	r7, #40	@ 0x28
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b08c      	sub	sp, #48	@ 0x30
 80109aa:	af04      	add	r7, sp, #16
 80109ac:	60f8      	str	r0, [r7, #12]
 80109ae:	60b9      	str	r1, [r7, #8]
 80109b0:	603b      	str	r3, [r7, #0]
 80109b2:	4613      	mov	r3, r2
 80109b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80109b6:	88fb      	ldrh	r3, [r7, #6]
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	4618      	mov	r0, r3
 80109bc:	f001 f9b6 	bl	8011d2c <pvPortMalloc>
 80109c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00e      	beq.n	80109e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80109c8:	20a0      	movs	r0, #160	@ 0xa0
 80109ca:	f001 f9af 	bl	8011d2c <pvPortMalloc>
 80109ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d003      	beq.n	80109de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80109d6:	69fb      	ldr	r3, [r7, #28]
 80109d8:	697a      	ldr	r2, [r7, #20]
 80109da:	631a      	str	r2, [r3, #48]	@ 0x30
 80109dc:	e005      	b.n	80109ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80109de:	6978      	ldr	r0, [r7, #20]
 80109e0:	f001 fa72 	bl	8011ec8 <vPortFree>
 80109e4:	e001      	b.n	80109ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80109e6:	2300      	movs	r3, #0
 80109e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80109ea:	69fb      	ldr	r3, [r7, #28]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d017      	beq.n	8010a20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80109f0:	69fb      	ldr	r3, [r7, #28]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80109f8:	88fa      	ldrh	r2, [r7, #6]
 80109fa:	2300      	movs	r3, #0
 80109fc:	9303      	str	r3, [sp, #12]
 80109fe:	69fb      	ldr	r3, [r7, #28]
 8010a00:	9302      	str	r3, [sp, #8]
 8010a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a04:	9301      	str	r3, [sp, #4]
 8010a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a08:	9300      	str	r3, [sp, #0]
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	68b9      	ldr	r1, [r7, #8]
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f000 f80e 	bl	8010a30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010a14:	69f8      	ldr	r0, [r7, #28]
 8010a16:	f000 f8ab 	bl	8010b70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	61bb      	str	r3, [r7, #24]
 8010a1e:	e002      	b.n	8010a26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010a20:	f04f 33ff 	mov.w	r3, #4294967295
 8010a24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010a26:	69bb      	ldr	r3, [r7, #24]
	}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3720      	adds	r7, #32
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	60f8      	str	r0, [r7, #12]
 8010a38:	60b9      	str	r1, [r7, #8]
 8010a3a:	607a      	str	r2, [r7, #4]
 8010a3c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010a48:	3b01      	subs	r3, #1
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	4413      	add	r3, r2
 8010a4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	f023 0307 	bic.w	r3, r3, #7
 8010a56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010a58:	69bb      	ldr	r3, [r7, #24]
 8010a5a:	f003 0307 	and.w	r3, r3, #7
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00b      	beq.n	8010a7a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8010a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a66:	f383 8811 	msr	BASEPRI, r3
 8010a6a:	f3bf 8f6f 	isb	sy
 8010a6e:	f3bf 8f4f 	dsb	sy
 8010a72:	617b      	str	r3, [r7, #20]
}
 8010a74:	bf00      	nop
 8010a76:	bf00      	nop
 8010a78:	e7fd      	b.n	8010a76 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d01f      	beq.n	8010ac0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a80:	2300      	movs	r3, #0
 8010a82:	61fb      	str	r3, [r7, #28]
 8010a84:	e012      	b.n	8010aac <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010a86:	68ba      	ldr	r2, [r7, #8]
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	4413      	add	r3, r2
 8010a8c:	7819      	ldrb	r1, [r3, #0]
 8010a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	4413      	add	r3, r2
 8010a94:	3334      	adds	r3, #52	@ 0x34
 8010a96:	460a      	mov	r2, r1
 8010a98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010a9a:	68ba      	ldr	r2, [r7, #8]
 8010a9c:	69fb      	ldr	r3, [r7, #28]
 8010a9e:	4413      	add	r3, r2
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d006      	beq.n	8010ab4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010aa6:	69fb      	ldr	r3, [r7, #28]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	61fb      	str	r3, [r7, #28]
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	2b0f      	cmp	r3, #15
 8010ab0:	d9e9      	bls.n	8010a86 <prvInitialiseNewTask+0x56>
 8010ab2:	e000      	b.n	8010ab6 <prvInitialiseNewTask+0x86>
			{
				break;
 8010ab4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010abe:	e003      	b.n	8010ac8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aca:	2b06      	cmp	r3, #6
 8010acc:	d901      	bls.n	8010ad2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ace:	2306      	movs	r3, #6
 8010ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ad4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010adc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff fe68 	bl	80107be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af0:	3318      	adds	r3, #24
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff fe63 	bl	80107be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010afc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b00:	f1c3 0207 	rsb	r2, r3, #7
 8010b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b10:	2200      	movs	r2, #0
 8010b12:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b18:	2200      	movs	r2, #0
 8010b1a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b20:	334c      	adds	r3, #76	@ 0x4c
 8010b22:	224c      	movs	r2, #76	@ 0x4c
 8010b24:	2100      	movs	r1, #0
 8010b26:	4618      	mov	r0, r3
 8010b28:	f001 fe9e 	bl	8012868 <memset>
 8010b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8010b64 <prvInitialiseNewTask+0x134>)
 8010b30:	651a      	str	r2, [r3, #80]	@ 0x50
 8010b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b34:	4a0c      	ldr	r2, [pc, #48]	@ (8010b68 <prvInitialiseNewTask+0x138>)
 8010b36:	655a      	str	r2, [r3, #84]	@ 0x54
 8010b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8010b6c <prvInitialiseNewTask+0x13c>)
 8010b3c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010b3e:	683a      	ldr	r2, [r7, #0]
 8010b40:	68f9      	ldr	r1, [r7, #12]
 8010b42:	69b8      	ldr	r0, [r7, #24]
 8010b44:	f000 fe9c 	bl	8011880 <pxPortInitialiseStack>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d002      	beq.n	8010b5a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b5a:	bf00      	nop
 8010b5c:	3720      	adds	r7, #32
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	2000420c 	.word	0x2000420c
 8010b68:	20004274 	.word	0x20004274
 8010b6c:	200042dc 	.word	0x200042dc

08010b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010b78:	f000 ffb6 	bl	8011ae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8010c28 <prvAddNewTaskToReadyList+0xb8>)
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	3301      	adds	r3, #1
 8010b82:	4a29      	ldr	r2, [pc, #164]	@ (8010c28 <prvAddNewTaskToReadyList+0xb8>)
 8010b84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010b86:	4b29      	ldr	r3, [pc, #164]	@ (8010c2c <prvAddNewTaskToReadyList+0xbc>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d109      	bne.n	8010ba2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010b8e:	4a27      	ldr	r2, [pc, #156]	@ (8010c2c <prvAddNewTaskToReadyList+0xbc>)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010b94:	4b24      	ldr	r3, [pc, #144]	@ (8010c28 <prvAddNewTaskToReadyList+0xb8>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d110      	bne.n	8010bbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010b9c:	f000 fad4 	bl	8011148 <prvInitialiseTaskLists>
 8010ba0:	e00d      	b.n	8010bbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ba2:	4b23      	ldr	r3, [pc, #140]	@ (8010c30 <prvAddNewTaskToReadyList+0xc0>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d109      	bne.n	8010bbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010baa:	4b20      	ldr	r3, [pc, #128]	@ (8010c2c <prvAddNewTaskToReadyList+0xbc>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bb4:	429a      	cmp	r2, r3
 8010bb6:	d802      	bhi.n	8010bbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8010c2c <prvAddNewTaskToReadyList+0xbc>)
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8010c34 <prvAddNewTaskToReadyList+0xc4>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8010c34 <prvAddNewTaskToReadyList+0xc4>)
 8010bc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bcc:	2201      	movs	r2, #1
 8010bce:	409a      	lsls	r2, r3
 8010bd0:	4b19      	ldr	r3, [pc, #100]	@ (8010c38 <prvAddNewTaskToReadyList+0xc8>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	4a18      	ldr	r2, [pc, #96]	@ (8010c38 <prvAddNewTaskToReadyList+0xc8>)
 8010bd8:	6013      	str	r3, [r2, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bde:	4613      	mov	r3, r2
 8010be0:	009b      	lsls	r3, r3, #2
 8010be2:	4413      	add	r3, r2
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	4a15      	ldr	r2, [pc, #84]	@ (8010c3c <prvAddNewTaskToReadyList+0xcc>)
 8010be8:	441a      	add	r2, r3
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	3304      	adds	r3, #4
 8010bee:	4619      	mov	r1, r3
 8010bf0:	4610      	mov	r0, r2
 8010bf2:	f7ff fdf1 	bl	80107d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010bf6:	f000 ffa9 	bl	8011b4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8010c30 <prvAddNewTaskToReadyList+0xc0>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d00e      	beq.n	8010c20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010c02:	4b0a      	ldr	r3, [pc, #40]	@ (8010c2c <prvAddNewTaskToReadyList+0xbc>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d207      	bcs.n	8010c20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010c10:	4b0b      	ldr	r3, [pc, #44]	@ (8010c40 <prvAddNewTaskToReadyList+0xd0>)
 8010c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c16:	601a      	str	r2, [r3, #0]
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c20:	bf00      	nop
 8010c22:	3708      	adds	r7, #8
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	200005b8 	.word	0x200005b8
 8010c2c:	200004b8 	.word	0x200004b8
 8010c30:	200005c4 	.word	0x200005c4
 8010c34:	200005d4 	.word	0x200005d4
 8010c38:	200005c0 	.word	0x200005c0
 8010c3c:	200004bc 	.word	0x200004bc
 8010c40:	e000ed04 	.word	0xe000ed04

08010c44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d018      	beq.n	8010c88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010c56:	4b14      	ldr	r3, [pc, #80]	@ (8010ca8 <vTaskDelay+0x64>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d00b      	beq.n	8010c76 <vTaskDelay+0x32>
	__asm volatile
 8010c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c62:	f383 8811 	msr	BASEPRI, r3
 8010c66:	f3bf 8f6f 	isb	sy
 8010c6a:	f3bf 8f4f 	dsb	sy
 8010c6e:	60bb      	str	r3, [r7, #8]
}
 8010c70:	bf00      	nop
 8010c72:	bf00      	nop
 8010c74:	e7fd      	b.n	8010c72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010c76:	f000 f885 	bl	8010d84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 fd99 	bl	80117b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010c82:	f000 f88d 	bl	8010da0 <xTaskResumeAll>
 8010c86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d107      	bne.n	8010c9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010c8e:	4b07      	ldr	r3, [pc, #28]	@ (8010cac <vTaskDelay+0x68>)
 8010c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	f3bf 8f4f 	dsb	sy
 8010c9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010c9e:	bf00      	nop
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	200005e0 	.word	0x200005e0
 8010cac:	e000ed04 	.word	0xe000ed04

08010cb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b08a      	sub	sp, #40	@ 0x28
 8010cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010cbe:	463a      	mov	r2, r7
 8010cc0:	1d39      	adds	r1, r7, #4
 8010cc2:	f107 0308 	add.w	r3, r7, #8
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fb ffb6 	bl	800cc38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010ccc:	6839      	ldr	r1, [r7, #0]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	68ba      	ldr	r2, [r7, #8]
 8010cd2:	9202      	str	r2, [sp, #8]
 8010cd4:	9301      	str	r3, [sp, #4]
 8010cd6:	2300      	movs	r3, #0
 8010cd8:	9300      	str	r3, [sp, #0]
 8010cda:	2300      	movs	r3, #0
 8010cdc:	460a      	mov	r2, r1
 8010cde:	4921      	ldr	r1, [pc, #132]	@ (8010d64 <vTaskStartScheduler+0xb4>)
 8010ce0:	4821      	ldr	r0, [pc, #132]	@ (8010d68 <vTaskStartScheduler+0xb8>)
 8010ce2:	f7ff fe00 	bl	80108e6 <xTaskCreateStatic>
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	4a20      	ldr	r2, [pc, #128]	@ (8010d6c <vTaskStartScheduler+0xbc>)
 8010cea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010cec:	4b1f      	ldr	r3, [pc, #124]	@ (8010d6c <vTaskStartScheduler+0xbc>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d002      	beq.n	8010cfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	617b      	str	r3, [r7, #20]
 8010cf8:	e001      	b.n	8010cfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d11b      	bne.n	8010d3c <vTaskStartScheduler+0x8c>
	__asm volatile
 8010d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d08:	f383 8811 	msr	BASEPRI, r3
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	613b      	str	r3, [r7, #16]
}
 8010d16:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010d18:	4b15      	ldr	r3, [pc, #84]	@ (8010d70 <vTaskStartScheduler+0xc0>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	334c      	adds	r3, #76	@ 0x4c
 8010d1e:	4a15      	ldr	r2, [pc, #84]	@ (8010d74 <vTaskStartScheduler+0xc4>)
 8010d20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010d22:	4b15      	ldr	r3, [pc, #84]	@ (8010d78 <vTaskStartScheduler+0xc8>)
 8010d24:	f04f 32ff 	mov.w	r2, #4294967295
 8010d28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010d2a:	4b14      	ldr	r3, [pc, #80]	@ (8010d7c <vTaskStartScheduler+0xcc>)
 8010d2c:	2201      	movs	r2, #1
 8010d2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010d30:	4b13      	ldr	r3, [pc, #76]	@ (8010d80 <vTaskStartScheduler+0xd0>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010d36:	f000 fe33 	bl	80119a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010d3a:	e00f      	b.n	8010d5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d42:	d10b      	bne.n	8010d5c <vTaskStartScheduler+0xac>
	__asm volatile
 8010d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d48:	f383 8811 	msr	BASEPRI, r3
 8010d4c:	f3bf 8f6f 	isb	sy
 8010d50:	f3bf 8f4f 	dsb	sy
 8010d54:	60fb      	str	r3, [r7, #12]
}
 8010d56:	bf00      	nop
 8010d58:	bf00      	nop
 8010d5a:	e7fd      	b.n	8010d58 <vTaskStartScheduler+0xa8>
}
 8010d5c:	bf00      	nop
 8010d5e:	3718      	adds	r7, #24
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	080138e4 	.word	0x080138e4
 8010d68:	08011119 	.word	0x08011119
 8010d6c:	200005dc 	.word	0x200005dc
 8010d70:	200004b8 	.word	0x200004b8
 8010d74:	20000024 	.word	0x20000024
 8010d78:	200005d8 	.word	0x200005d8
 8010d7c:	200005c4 	.word	0x200005c4
 8010d80:	200005bc 	.word	0x200005bc

08010d84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010d84:	b480      	push	{r7}
 8010d86:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010d88:	4b04      	ldr	r3, [pc, #16]	@ (8010d9c <vTaskSuspendAll+0x18>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	3301      	adds	r3, #1
 8010d8e:	4a03      	ldr	r2, [pc, #12]	@ (8010d9c <vTaskSuspendAll+0x18>)
 8010d90:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010d92:	bf00      	nop
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr
 8010d9c:	200005e0 	.word	0x200005e0

08010da0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b084      	sub	sp, #16
 8010da4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010da6:	2300      	movs	r3, #0
 8010da8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010daa:	2300      	movs	r3, #0
 8010dac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010dae:	4b42      	ldr	r3, [pc, #264]	@ (8010eb8 <xTaskResumeAll+0x118>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d10b      	bne.n	8010dce <xTaskResumeAll+0x2e>
	__asm volatile
 8010db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dba:	f383 8811 	msr	BASEPRI, r3
 8010dbe:	f3bf 8f6f 	isb	sy
 8010dc2:	f3bf 8f4f 	dsb	sy
 8010dc6:	603b      	str	r3, [r7, #0]
}
 8010dc8:	bf00      	nop
 8010dca:	bf00      	nop
 8010dcc:	e7fd      	b.n	8010dca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010dce:	f000 fe8b 	bl	8011ae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010dd2:	4b39      	ldr	r3, [pc, #228]	@ (8010eb8 <xTaskResumeAll+0x118>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	3b01      	subs	r3, #1
 8010dd8:	4a37      	ldr	r2, [pc, #220]	@ (8010eb8 <xTaskResumeAll+0x118>)
 8010dda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ddc:	4b36      	ldr	r3, [pc, #216]	@ (8010eb8 <xTaskResumeAll+0x118>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d161      	bne.n	8010ea8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010de4:	4b35      	ldr	r3, [pc, #212]	@ (8010ebc <xTaskResumeAll+0x11c>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d05d      	beq.n	8010ea8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010dec:	e02e      	b.n	8010e4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010dee:	4b34      	ldr	r3, [pc, #208]	@ (8010ec0 <xTaskResumeAll+0x120>)
 8010df0:	68db      	ldr	r3, [r3, #12]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	3318      	adds	r3, #24
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7ff fd49 	bl	8010892 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	3304      	adds	r3, #4
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff fd44 	bl	8010892 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e0e:	2201      	movs	r2, #1
 8010e10:	409a      	lsls	r2, r3
 8010e12:	4b2c      	ldr	r3, [pc, #176]	@ (8010ec4 <xTaskResumeAll+0x124>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	4313      	orrs	r3, r2
 8010e18:	4a2a      	ldr	r2, [pc, #168]	@ (8010ec4 <xTaskResumeAll+0x124>)
 8010e1a:	6013      	str	r3, [r2, #0]
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e20:	4613      	mov	r3, r2
 8010e22:	009b      	lsls	r3, r3, #2
 8010e24:	4413      	add	r3, r2
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	4a27      	ldr	r2, [pc, #156]	@ (8010ec8 <xTaskResumeAll+0x128>)
 8010e2a:	441a      	add	r2, r3
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	3304      	adds	r3, #4
 8010e30:	4619      	mov	r1, r3
 8010e32:	4610      	mov	r0, r2
 8010e34:	f7ff fcd0 	bl	80107d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e3c:	4b23      	ldr	r3, [pc, #140]	@ (8010ecc <xTaskResumeAll+0x12c>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d302      	bcc.n	8010e4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010e46:	4b22      	ldr	r3, [pc, #136]	@ (8010ed0 <xTaskResumeAll+0x130>)
 8010e48:	2201      	movs	r2, #1
 8010e4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8010ec0 <xTaskResumeAll+0x120>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d1cc      	bne.n	8010dee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d001      	beq.n	8010e5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010e5a:	f000 fa19 	bl	8011290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8010ed4 <xTaskResumeAll+0x134>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d010      	beq.n	8010e8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010e6a:	f000 f837 	bl	8010edc <xTaskIncrementTick>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d002      	beq.n	8010e7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010e74:	4b16      	ldr	r3, [pc, #88]	@ (8010ed0 <xTaskResumeAll+0x130>)
 8010e76:	2201      	movs	r2, #1
 8010e78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d1f1      	bne.n	8010e6a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010e86:	4b13      	ldr	r3, [pc, #76]	@ (8010ed4 <xTaskResumeAll+0x134>)
 8010e88:	2200      	movs	r2, #0
 8010e8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010e8c:	4b10      	ldr	r3, [pc, #64]	@ (8010ed0 <xTaskResumeAll+0x130>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d009      	beq.n	8010ea8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010e94:	2301      	movs	r3, #1
 8010e96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010e98:	4b0f      	ldr	r3, [pc, #60]	@ (8010ed8 <xTaskResumeAll+0x138>)
 8010e9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e9e:	601a      	str	r2, [r3, #0]
 8010ea0:	f3bf 8f4f 	dsb	sy
 8010ea4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ea8:	f000 fe50 	bl	8011b4c <vPortExitCritical>

	return xAlreadyYielded;
 8010eac:	68bb      	ldr	r3, [r7, #8]
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3710      	adds	r7, #16
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	200005e0 	.word	0x200005e0
 8010ebc:	200005b8 	.word	0x200005b8
 8010ec0:	20000578 	.word	0x20000578
 8010ec4:	200005c0 	.word	0x200005c0
 8010ec8:	200004bc 	.word	0x200004bc
 8010ecc:	200004b8 	.word	0x200004b8
 8010ed0:	200005cc 	.word	0x200005cc
 8010ed4:	200005c8 	.word	0x200005c8
 8010ed8:	e000ed04 	.word	0xe000ed04

08010edc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b086      	sub	sp, #24
 8010ee0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8011024 <xTaskIncrementTick+0x148>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	f040 808f 	bne.w	801100e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8011028 <xTaskIncrementTick+0x14c>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8011028 <xTaskIncrementTick+0x14c>)
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d121      	bne.n	8010f48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010f04:	4b49      	ldr	r3, [pc, #292]	@ (801102c <xTaskIncrementTick+0x150>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d00b      	beq.n	8010f26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f12:	f383 8811 	msr	BASEPRI, r3
 8010f16:	f3bf 8f6f 	isb	sy
 8010f1a:	f3bf 8f4f 	dsb	sy
 8010f1e:	603b      	str	r3, [r7, #0]
}
 8010f20:	bf00      	nop
 8010f22:	bf00      	nop
 8010f24:	e7fd      	b.n	8010f22 <xTaskIncrementTick+0x46>
 8010f26:	4b41      	ldr	r3, [pc, #260]	@ (801102c <xTaskIncrementTick+0x150>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	60fb      	str	r3, [r7, #12]
 8010f2c:	4b40      	ldr	r3, [pc, #256]	@ (8011030 <xTaskIncrementTick+0x154>)
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	4a3e      	ldr	r2, [pc, #248]	@ (801102c <xTaskIncrementTick+0x150>)
 8010f32:	6013      	str	r3, [r2, #0]
 8010f34:	4a3e      	ldr	r2, [pc, #248]	@ (8011030 <xTaskIncrementTick+0x154>)
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	6013      	str	r3, [r2, #0]
 8010f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8011034 <xTaskIncrementTick+0x158>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	4a3c      	ldr	r2, [pc, #240]	@ (8011034 <xTaskIncrementTick+0x158>)
 8010f42:	6013      	str	r3, [r2, #0]
 8010f44:	f000 f9a4 	bl	8011290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010f48:	4b3b      	ldr	r3, [pc, #236]	@ (8011038 <xTaskIncrementTick+0x15c>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	693a      	ldr	r2, [r7, #16]
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d348      	bcc.n	8010fe4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f52:	4b36      	ldr	r3, [pc, #216]	@ (801102c <xTaskIncrementTick+0x150>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d104      	bne.n	8010f66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f5c:	4b36      	ldr	r3, [pc, #216]	@ (8011038 <xTaskIncrementTick+0x15c>)
 8010f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f62:	601a      	str	r2, [r3, #0]
					break;
 8010f64:	e03e      	b.n	8010fe4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f66:	4b31      	ldr	r3, [pc, #196]	@ (801102c <xTaskIncrementTick+0x150>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	68db      	ldr	r3, [r3, #12]
 8010f6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010f76:	693a      	ldr	r2, [r7, #16]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d203      	bcs.n	8010f86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8011038 <xTaskIncrementTick+0x15c>)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f84:	e02e      	b.n	8010fe4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	3304      	adds	r3, #4
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7ff fc81 	bl	8010892 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d004      	beq.n	8010fa2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	3318      	adds	r3, #24
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7ff fc78 	bl	8010892 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	409a      	lsls	r2, r3
 8010faa:	4b24      	ldr	r3, [pc, #144]	@ (801103c <xTaskIncrementTick+0x160>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	4313      	orrs	r3, r2
 8010fb0:	4a22      	ldr	r2, [pc, #136]	@ (801103c <xTaskIncrementTick+0x160>)
 8010fb2:	6013      	str	r3, [r2, #0]
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fb8:	4613      	mov	r3, r2
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	4413      	add	r3, r2
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8011040 <xTaskIncrementTick+0x164>)
 8010fc2:	441a      	add	r2, r3
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	3304      	adds	r3, #4
 8010fc8:	4619      	mov	r1, r3
 8010fca:	4610      	mov	r0, r2
 8010fcc:	f7ff fc04 	bl	80107d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8011044 <xTaskIncrementTick+0x168>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d3b9      	bcc.n	8010f52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010fe2:	e7b6      	b.n	8010f52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010fe4:	4b17      	ldr	r3, [pc, #92]	@ (8011044 <xTaskIncrementTick+0x168>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fea:	4915      	ldr	r1, [pc, #84]	@ (8011040 <xTaskIncrementTick+0x164>)
 8010fec:	4613      	mov	r3, r2
 8010fee:	009b      	lsls	r3, r3, #2
 8010ff0:	4413      	add	r3, r2
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	440b      	add	r3, r1
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d901      	bls.n	8011000 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010ffc:	2301      	movs	r3, #1
 8010ffe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011000:	4b11      	ldr	r3, [pc, #68]	@ (8011048 <xTaskIncrementTick+0x16c>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d007      	beq.n	8011018 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011008:	2301      	movs	r3, #1
 801100a:	617b      	str	r3, [r7, #20]
 801100c:	e004      	b.n	8011018 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801100e:	4b0f      	ldr	r3, [pc, #60]	@ (801104c <xTaskIncrementTick+0x170>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	3301      	adds	r3, #1
 8011014:	4a0d      	ldr	r2, [pc, #52]	@ (801104c <xTaskIncrementTick+0x170>)
 8011016:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011018:	697b      	ldr	r3, [r7, #20]
}
 801101a:	4618      	mov	r0, r3
 801101c:	3718      	adds	r7, #24
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	200005e0 	.word	0x200005e0
 8011028:	200005bc 	.word	0x200005bc
 801102c:	20000570 	.word	0x20000570
 8011030:	20000574 	.word	0x20000574
 8011034:	200005d0 	.word	0x200005d0
 8011038:	200005d8 	.word	0x200005d8
 801103c:	200005c0 	.word	0x200005c0
 8011040:	200004bc 	.word	0x200004bc
 8011044:	200004b8 	.word	0x200004b8
 8011048:	200005cc 	.word	0x200005cc
 801104c:	200005c8 	.word	0x200005c8

08011050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011050:	b480      	push	{r7}
 8011052:	b087      	sub	sp, #28
 8011054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011056:	4b2a      	ldr	r3, [pc, #168]	@ (8011100 <vTaskSwitchContext+0xb0>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d003      	beq.n	8011066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801105e:	4b29      	ldr	r3, [pc, #164]	@ (8011104 <vTaskSwitchContext+0xb4>)
 8011060:	2201      	movs	r2, #1
 8011062:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011064:	e045      	b.n	80110f2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8011066:	4b27      	ldr	r3, [pc, #156]	@ (8011104 <vTaskSwitchContext+0xb4>)
 8011068:	2200      	movs	r2, #0
 801106a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801106c:	4b26      	ldr	r3, [pc, #152]	@ (8011108 <vTaskSwitchContext+0xb8>)
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	fab3 f383 	clz	r3, r3
 8011078:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801107a:	7afb      	ldrb	r3, [r7, #11]
 801107c:	f1c3 031f 	rsb	r3, r3, #31
 8011080:	617b      	str	r3, [r7, #20]
 8011082:	4922      	ldr	r1, [pc, #136]	@ (801110c <vTaskSwitchContext+0xbc>)
 8011084:	697a      	ldr	r2, [r7, #20]
 8011086:	4613      	mov	r3, r2
 8011088:	009b      	lsls	r3, r3, #2
 801108a:	4413      	add	r3, r2
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	440b      	add	r3, r1
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10b      	bne.n	80110ae <vTaskSwitchContext+0x5e>
	__asm volatile
 8011096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801109a:	f383 8811 	msr	BASEPRI, r3
 801109e:	f3bf 8f6f 	isb	sy
 80110a2:	f3bf 8f4f 	dsb	sy
 80110a6:	607b      	str	r3, [r7, #4]
}
 80110a8:	bf00      	nop
 80110aa:	bf00      	nop
 80110ac:	e7fd      	b.n	80110aa <vTaskSwitchContext+0x5a>
 80110ae:	697a      	ldr	r2, [r7, #20]
 80110b0:	4613      	mov	r3, r2
 80110b2:	009b      	lsls	r3, r3, #2
 80110b4:	4413      	add	r3, r2
 80110b6:	009b      	lsls	r3, r3, #2
 80110b8:	4a14      	ldr	r2, [pc, #80]	@ (801110c <vTaskSwitchContext+0xbc>)
 80110ba:	4413      	add	r3, r2
 80110bc:	613b      	str	r3, [r7, #16]
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	685a      	ldr	r2, [r3, #4]
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	605a      	str	r2, [r3, #4]
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	685a      	ldr	r2, [r3, #4]
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	3308      	adds	r3, #8
 80110d0:	429a      	cmp	r2, r3
 80110d2:	d104      	bne.n	80110de <vTaskSwitchContext+0x8e>
 80110d4:	693b      	ldr	r3, [r7, #16]
 80110d6:	685b      	ldr	r3, [r3, #4]
 80110d8:	685a      	ldr	r2, [r3, #4]
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	605a      	str	r2, [r3, #4]
 80110de:	693b      	ldr	r3, [r7, #16]
 80110e0:	685b      	ldr	r3, [r3, #4]
 80110e2:	68db      	ldr	r3, [r3, #12]
 80110e4:	4a0a      	ldr	r2, [pc, #40]	@ (8011110 <vTaskSwitchContext+0xc0>)
 80110e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80110e8:	4b09      	ldr	r3, [pc, #36]	@ (8011110 <vTaskSwitchContext+0xc0>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	334c      	adds	r3, #76	@ 0x4c
 80110ee:	4a09      	ldr	r2, [pc, #36]	@ (8011114 <vTaskSwitchContext+0xc4>)
 80110f0:	6013      	str	r3, [r2, #0]
}
 80110f2:	bf00      	nop
 80110f4:	371c      	adds	r7, #28
 80110f6:	46bd      	mov	sp, r7
 80110f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fc:	4770      	bx	lr
 80110fe:	bf00      	nop
 8011100:	200005e0 	.word	0x200005e0
 8011104:	200005cc 	.word	0x200005cc
 8011108:	200005c0 	.word	0x200005c0
 801110c:	200004bc 	.word	0x200004bc
 8011110:	200004b8 	.word	0x200004b8
 8011114:	20000024 	.word	0x20000024

08011118 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011120:	f000 f852 	bl	80111c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011124:	4b06      	ldr	r3, [pc, #24]	@ (8011140 <prvIdleTask+0x28>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	2b01      	cmp	r3, #1
 801112a:	d9f9      	bls.n	8011120 <prvIdleTask+0x8>
			{
				taskYIELD();
 801112c:	4b05      	ldr	r3, [pc, #20]	@ (8011144 <prvIdleTask+0x2c>)
 801112e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011132:	601a      	str	r2, [r3, #0]
 8011134:	f3bf 8f4f 	dsb	sy
 8011138:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801113c:	e7f0      	b.n	8011120 <prvIdleTask+0x8>
 801113e:	bf00      	nop
 8011140:	200004bc 	.word	0x200004bc
 8011144:	e000ed04 	.word	0xe000ed04

08011148 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b082      	sub	sp, #8
 801114c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801114e:	2300      	movs	r3, #0
 8011150:	607b      	str	r3, [r7, #4]
 8011152:	e00c      	b.n	801116e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	4613      	mov	r3, r2
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	4413      	add	r3, r2
 801115c:	009b      	lsls	r3, r3, #2
 801115e:	4a12      	ldr	r2, [pc, #72]	@ (80111a8 <prvInitialiseTaskLists+0x60>)
 8011160:	4413      	add	r3, r2
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff fb0b 	bl	801077e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	3301      	adds	r3, #1
 801116c:	607b      	str	r3, [r7, #4]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2b06      	cmp	r3, #6
 8011172:	d9ef      	bls.n	8011154 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011174:	480d      	ldr	r0, [pc, #52]	@ (80111ac <prvInitialiseTaskLists+0x64>)
 8011176:	f7ff fb02 	bl	801077e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801117a:	480d      	ldr	r0, [pc, #52]	@ (80111b0 <prvInitialiseTaskLists+0x68>)
 801117c:	f7ff faff 	bl	801077e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011180:	480c      	ldr	r0, [pc, #48]	@ (80111b4 <prvInitialiseTaskLists+0x6c>)
 8011182:	f7ff fafc 	bl	801077e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011186:	480c      	ldr	r0, [pc, #48]	@ (80111b8 <prvInitialiseTaskLists+0x70>)
 8011188:	f7ff faf9 	bl	801077e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801118c:	480b      	ldr	r0, [pc, #44]	@ (80111bc <prvInitialiseTaskLists+0x74>)
 801118e:	f7ff faf6 	bl	801077e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011192:	4b0b      	ldr	r3, [pc, #44]	@ (80111c0 <prvInitialiseTaskLists+0x78>)
 8011194:	4a05      	ldr	r2, [pc, #20]	@ (80111ac <prvInitialiseTaskLists+0x64>)
 8011196:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011198:	4b0a      	ldr	r3, [pc, #40]	@ (80111c4 <prvInitialiseTaskLists+0x7c>)
 801119a:	4a05      	ldr	r2, [pc, #20]	@ (80111b0 <prvInitialiseTaskLists+0x68>)
 801119c:	601a      	str	r2, [r3, #0]
}
 801119e:	bf00      	nop
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	200004bc 	.word	0x200004bc
 80111ac:	20000548 	.word	0x20000548
 80111b0:	2000055c 	.word	0x2000055c
 80111b4:	20000578 	.word	0x20000578
 80111b8:	2000058c 	.word	0x2000058c
 80111bc:	200005a4 	.word	0x200005a4
 80111c0:	20000570 	.word	0x20000570
 80111c4:	20000574 	.word	0x20000574

080111c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80111ce:	e019      	b.n	8011204 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80111d0:	f000 fc8a 	bl	8011ae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111d4:	4b10      	ldr	r3, [pc, #64]	@ (8011218 <prvCheckTasksWaitingTermination+0x50>)
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	3304      	adds	r3, #4
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7ff fb56 	bl	8010892 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80111e6:	4b0d      	ldr	r3, [pc, #52]	@ (801121c <prvCheckTasksWaitingTermination+0x54>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	3b01      	subs	r3, #1
 80111ec:	4a0b      	ldr	r2, [pc, #44]	@ (801121c <prvCheckTasksWaitingTermination+0x54>)
 80111ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80111f0:	4b0b      	ldr	r3, [pc, #44]	@ (8011220 <prvCheckTasksWaitingTermination+0x58>)
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	3b01      	subs	r3, #1
 80111f6:	4a0a      	ldr	r2, [pc, #40]	@ (8011220 <prvCheckTasksWaitingTermination+0x58>)
 80111f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80111fa:	f000 fca7 	bl	8011b4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f810 	bl	8011224 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011204:	4b06      	ldr	r3, [pc, #24]	@ (8011220 <prvCheckTasksWaitingTermination+0x58>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d1e1      	bne.n	80111d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801120c:	bf00      	nop
 801120e:	bf00      	nop
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}
 8011216:	bf00      	nop
 8011218:	2000058c 	.word	0x2000058c
 801121c:	200005b8 	.word	0x200005b8
 8011220:	200005a0 	.word	0x200005a0

08011224 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	334c      	adds	r3, #76	@ 0x4c
 8011230:	4618      	mov	r0, r3
 8011232:	f001 fb31 	bl	8012898 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801123c:	2b00      	cmp	r3, #0
 801123e:	d108      	bne.n	8011252 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011244:	4618      	mov	r0, r3
 8011246:	f000 fe3f 	bl	8011ec8 <vPortFree>
				vPortFree( pxTCB );
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 fe3c 	bl	8011ec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011250:	e019      	b.n	8011286 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011258:	2b01      	cmp	r3, #1
 801125a:	d103      	bne.n	8011264 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801125c:	6878      	ldr	r0, [r7, #4]
 801125e:	f000 fe33 	bl	8011ec8 <vPortFree>
	}
 8011262:	e010      	b.n	8011286 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 801126a:	2b02      	cmp	r3, #2
 801126c:	d00b      	beq.n	8011286 <prvDeleteTCB+0x62>
	__asm volatile
 801126e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011272:	f383 8811 	msr	BASEPRI, r3
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	f3bf 8f4f 	dsb	sy
 801127e:	60fb      	str	r3, [r7, #12]
}
 8011280:	bf00      	nop
 8011282:	bf00      	nop
 8011284:	e7fd      	b.n	8011282 <prvDeleteTCB+0x5e>
	}
 8011286:	bf00      	nop
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
	...

08011290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011290:	b480      	push	{r7}
 8011292:	b083      	sub	sp, #12
 8011294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011296:	4b0c      	ldr	r3, [pc, #48]	@ (80112c8 <prvResetNextTaskUnblockTime+0x38>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d104      	bne.n	80112aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80112a0:	4b0a      	ldr	r3, [pc, #40]	@ (80112cc <prvResetNextTaskUnblockTime+0x3c>)
 80112a2:	f04f 32ff 	mov.w	r2, #4294967295
 80112a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80112a8:	e008      	b.n	80112bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112aa:	4b07      	ldr	r3, [pc, #28]	@ (80112c8 <prvResetNextTaskUnblockTime+0x38>)
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	685b      	ldr	r3, [r3, #4]
 80112b8:	4a04      	ldr	r2, [pc, #16]	@ (80112cc <prvResetNextTaskUnblockTime+0x3c>)
 80112ba:	6013      	str	r3, [r2, #0]
}
 80112bc:	bf00      	nop
 80112be:	370c      	adds	r7, #12
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	20000570 	.word	0x20000570
 80112cc:	200005d8 	.word	0x200005d8

080112d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80112d0:	b480      	push	{r7}
 80112d2:	b083      	sub	sp, #12
 80112d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80112d6:	4b0b      	ldr	r3, [pc, #44]	@ (8011304 <xTaskGetSchedulerState+0x34>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d102      	bne.n	80112e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80112de:	2301      	movs	r3, #1
 80112e0:	607b      	str	r3, [r7, #4]
 80112e2:	e008      	b.n	80112f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80112e4:	4b08      	ldr	r3, [pc, #32]	@ (8011308 <xTaskGetSchedulerState+0x38>)
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d102      	bne.n	80112f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80112ec:	2302      	movs	r3, #2
 80112ee:	607b      	str	r3, [r7, #4]
 80112f0:	e001      	b.n	80112f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80112f2:	2300      	movs	r3, #0
 80112f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80112f6:	687b      	ldr	r3, [r7, #4]
	}
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr
 8011304:	200005c4 	.word	0x200005c4
 8011308:	200005e0 	.word	0x200005e0

0801130c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801130c:	b580      	push	{r7, lr}
 801130e:	b084      	sub	sp, #16
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
 8011314:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8011316:	f000 fbe7 	bl	8011ae8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801131a:	4b20      	ldr	r3, [pc, #128]	@ (801139c <ulTaskNotifyTake+0x90>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011322:	2b00      	cmp	r3, #0
 8011324:	d113      	bne.n	801134e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011326:	4b1d      	ldr	r3, [pc, #116]	@ (801139c <ulTaskNotifyTake+0x90>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	2201      	movs	r2, #1
 801132c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00b      	beq.n	801134e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011336:	2101      	movs	r1, #1
 8011338:	6838      	ldr	r0, [r7, #0]
 801133a:	f000 fa3b 	bl	80117b4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801133e:	4b18      	ldr	r3, [pc, #96]	@ (80113a0 <ulTaskNotifyTake+0x94>)
 8011340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011344:	601a      	str	r2, [r3, #0]
 8011346:	f3bf 8f4f 	dsb	sy
 801134a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801134e:	f000 fbfd 	bl	8011b4c <vPortExitCritical>

		taskENTER_CRITICAL();
 8011352:	f000 fbc9 	bl	8011ae8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8011356:	4b11      	ldr	r3, [pc, #68]	@ (801139c <ulTaskNotifyTake+0x90>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801135e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00e      	beq.n	8011384 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d005      	beq.n	8011378 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801136c:	4b0b      	ldr	r3, [pc, #44]	@ (801139c <ulTaskNotifyTake+0x90>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2200      	movs	r2, #0
 8011372:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8011376:	e005      	b.n	8011384 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8011378:	4b08      	ldr	r3, [pc, #32]	@ (801139c <ulTaskNotifyTake+0x90>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	68fa      	ldr	r2, [r7, #12]
 801137e:	3a01      	subs	r2, #1
 8011380:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011384:	4b05      	ldr	r3, [pc, #20]	@ (801139c <ulTaskNotifyTake+0x90>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2200      	movs	r2, #0
 801138a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 801138e:	f000 fbdd 	bl	8011b4c <vPortExitCritical>

		return ulReturn;
 8011392:	68fb      	ldr	r3, [r7, #12]
	}
 8011394:	4618      	mov	r0, r3
 8011396:	3710      	adds	r7, #16
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	200004b8 	.word	0x200004b8
 80113a0:	e000ed04 	.word	0xe000ed04

080113a4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b086      	sub	sp, #24
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	60b9      	str	r1, [r7, #8]
 80113ae:	607a      	str	r2, [r7, #4]
 80113b0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80113b2:	f000 fb99 	bl	8011ae8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80113b6:	4b29      	ldr	r3, [pc, #164]	@ (801145c <xTaskNotifyWait+0xb8>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80113be:	b2db      	uxtb	r3, r3
 80113c0:	2b02      	cmp	r3, #2
 80113c2:	d01c      	beq.n	80113fe <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80113c4:	4b25      	ldr	r3, [pc, #148]	@ (801145c <xTaskNotifyWait+0xb8>)
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 80113cc:	68fa      	ldr	r2, [r7, #12]
 80113ce:	43d2      	mvns	r2, r2
 80113d0:	400a      	ands	r2, r1
 80113d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80113d6:	4b21      	ldr	r3, [pc, #132]	@ (801145c <xTaskNotifyWait+0xb8>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2201      	movs	r2, #1
 80113dc:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d00b      	beq.n	80113fe <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80113e6:	2101      	movs	r1, #1
 80113e8:	6838      	ldr	r0, [r7, #0]
 80113ea:	f000 f9e3 	bl	80117b4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80113ee:	4b1c      	ldr	r3, [pc, #112]	@ (8011460 <xTaskNotifyWait+0xbc>)
 80113f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113f4:	601a      	str	r2, [r3, #0]
 80113f6:	f3bf 8f4f 	dsb	sy
 80113fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80113fe:	f000 fba5 	bl	8011b4c <vPortExitCritical>

		taskENTER_CRITICAL();
 8011402:	f000 fb71 	bl	8011ae8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2b00      	cmp	r3, #0
 801140a:	d005      	beq.n	8011418 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801140c:	4b13      	ldr	r3, [pc, #76]	@ (801145c <xTaskNotifyWait+0xb8>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011418:	4b10      	ldr	r3, [pc, #64]	@ (801145c <xTaskNotifyWait+0xb8>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8011420:	b2db      	uxtb	r3, r3
 8011422:	2b02      	cmp	r3, #2
 8011424:	d002      	beq.n	801142c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011426:	2300      	movs	r3, #0
 8011428:	617b      	str	r3, [r7, #20]
 801142a:	e00a      	b.n	8011442 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801142c:	4b0b      	ldr	r3, [pc, #44]	@ (801145c <xTaskNotifyWait+0xb8>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8011434:	68ba      	ldr	r2, [r7, #8]
 8011436:	43d2      	mvns	r2, r2
 8011438:	400a      	ands	r2, r1
 801143a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 801143e:	2301      	movs	r3, #1
 8011440:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011442:	4b06      	ldr	r3, [pc, #24]	@ (801145c <xTaskNotifyWait+0xb8>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	2200      	movs	r2, #0
 8011448:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 801144c:	f000 fb7e 	bl	8011b4c <vPortExitCritical>

		return xReturn;
 8011450:	697b      	ldr	r3, [r7, #20]
	}
 8011452:	4618      	mov	r0, r3
 8011454:	3718      	adds	r7, #24
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
 801145a:	bf00      	nop
 801145c:	200004b8 	.word	0x200004b8
 8011460:	e000ed04 	.word	0xe000ed04

08011464 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011464:	b580      	push	{r7, lr}
 8011466:	b08a      	sub	sp, #40	@ 0x28
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	603b      	str	r3, [r7, #0]
 8011470:	4613      	mov	r3, r2
 8011472:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011474:	2301      	movs	r3, #1
 8011476:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d10b      	bne.n	8011496 <xTaskGenericNotify+0x32>
	__asm volatile
 801147e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011482:	f383 8811 	msr	BASEPRI, r3
 8011486:	f3bf 8f6f 	isb	sy
 801148a:	f3bf 8f4f 	dsb	sy
 801148e:	61bb      	str	r3, [r7, #24]
}
 8011490:	bf00      	nop
 8011492:	bf00      	nop
 8011494:	e7fd      	b.n	8011492 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801149a:	f000 fb25 	bl	8011ae8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d004      	beq.n	80114ae <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80114a4:	6a3b      	ldr	r3, [r7, #32]
 80114a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80114ae:	6a3b      	ldr	r3, [r7, #32]
 80114b0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80114b4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80114b6:	6a3b      	ldr	r3, [r7, #32]
 80114b8:	2202      	movs	r2, #2
 80114ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 80114be:	79fb      	ldrb	r3, [r7, #7]
 80114c0:	2b04      	cmp	r3, #4
 80114c2:	d82e      	bhi.n	8011522 <xTaskGenericNotify+0xbe>
 80114c4:	a201      	add	r2, pc, #4	@ (adr r2, 80114cc <xTaskGenericNotify+0x68>)
 80114c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ca:	bf00      	nop
 80114cc:	08011547 	.word	0x08011547
 80114d0:	080114e1 	.word	0x080114e1
 80114d4:	080114f3 	.word	0x080114f3
 80114d8:	08011503 	.word	0x08011503
 80114dc:	0801150d 	.word	0x0801150d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80114e0:	6a3b      	ldr	r3, [r7, #32]
 80114e2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80114e6:	68bb      	ldr	r3, [r7, #8]
 80114e8:	431a      	orrs	r2, r3
 80114ea:	6a3b      	ldr	r3, [r7, #32]
 80114ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80114f0:	e02c      	b.n	801154c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80114f2:	6a3b      	ldr	r3, [r7, #32]
 80114f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80114f8:	1c5a      	adds	r2, r3, #1
 80114fa:	6a3b      	ldr	r3, [r7, #32]
 80114fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8011500:	e024      	b.n	801154c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011502:	6a3b      	ldr	r3, [r7, #32]
 8011504:	68ba      	ldr	r2, [r7, #8]
 8011506:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 801150a:	e01f      	b.n	801154c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801150c:	7ffb      	ldrb	r3, [r7, #31]
 801150e:	2b02      	cmp	r3, #2
 8011510:	d004      	beq.n	801151c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011512:	6a3b      	ldr	r3, [r7, #32]
 8011514:	68ba      	ldr	r2, [r7, #8]
 8011516:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801151a:	e017      	b.n	801154c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 801151c:	2300      	movs	r3, #0
 801151e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8011520:	e014      	b.n	801154c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011522:	6a3b      	ldr	r3, [r7, #32]
 8011524:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011528:	f1b3 3fff 	cmp.w	r3, #4294967295
 801152c:	d00d      	beq.n	801154a <xTaskGenericNotify+0xe6>
	__asm volatile
 801152e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011532:	f383 8811 	msr	BASEPRI, r3
 8011536:	f3bf 8f6f 	isb	sy
 801153a:	f3bf 8f4f 	dsb	sy
 801153e:	617b      	str	r3, [r7, #20]
}
 8011540:	bf00      	nop
 8011542:	bf00      	nop
 8011544:	e7fd      	b.n	8011542 <xTaskGenericNotify+0xde>
					break;
 8011546:	bf00      	nop
 8011548:	e000      	b.n	801154c <xTaskGenericNotify+0xe8>

					break;
 801154a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801154c:	7ffb      	ldrb	r3, [r7, #31]
 801154e:	2b01      	cmp	r3, #1
 8011550:	d13a      	bne.n	80115c8 <xTaskGenericNotify+0x164>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011552:	6a3b      	ldr	r3, [r7, #32]
 8011554:	3304      	adds	r3, #4
 8011556:	4618      	mov	r0, r3
 8011558:	f7ff f99b 	bl	8010892 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801155c:	6a3b      	ldr	r3, [r7, #32]
 801155e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011560:	2201      	movs	r2, #1
 8011562:	409a      	lsls	r2, r3
 8011564:	4b1c      	ldr	r3, [pc, #112]	@ (80115d8 <xTaskGenericNotify+0x174>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4313      	orrs	r3, r2
 801156a:	4a1b      	ldr	r2, [pc, #108]	@ (80115d8 <xTaskGenericNotify+0x174>)
 801156c:	6013      	str	r3, [r2, #0]
 801156e:	6a3b      	ldr	r3, [r7, #32]
 8011570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011572:	4613      	mov	r3, r2
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	4413      	add	r3, r2
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	4a18      	ldr	r2, [pc, #96]	@ (80115dc <xTaskGenericNotify+0x178>)
 801157c:	441a      	add	r2, r3
 801157e:	6a3b      	ldr	r3, [r7, #32]
 8011580:	3304      	adds	r3, #4
 8011582:	4619      	mov	r1, r3
 8011584:	4610      	mov	r0, r2
 8011586:	f7ff f927 	bl	80107d8 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801158a:	6a3b      	ldr	r3, [r7, #32]
 801158c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801158e:	2b00      	cmp	r3, #0
 8011590:	d00b      	beq.n	80115aa <xTaskGenericNotify+0x146>
	__asm volatile
 8011592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011596:	f383 8811 	msr	BASEPRI, r3
 801159a:	f3bf 8f6f 	isb	sy
 801159e:	f3bf 8f4f 	dsb	sy
 80115a2:	613b      	str	r3, [r7, #16]
}
 80115a4:	bf00      	nop
 80115a6:	bf00      	nop
 80115a8:	e7fd      	b.n	80115a6 <xTaskGenericNotify+0x142>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80115aa:	6a3b      	ldr	r3, [r7, #32]
 80115ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115ae:	4b0c      	ldr	r3, [pc, #48]	@ (80115e0 <xTaskGenericNotify+0x17c>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d907      	bls.n	80115c8 <xTaskGenericNotify+0x164>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80115b8:	4b0a      	ldr	r3, [pc, #40]	@ (80115e4 <xTaskGenericNotify+0x180>)
 80115ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115be:	601a      	str	r2, [r3, #0]
 80115c0:	f3bf 8f4f 	dsb	sy
 80115c4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80115c8:	f000 fac0 	bl	8011b4c <vPortExitCritical>

		return xReturn;
 80115cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3728      	adds	r7, #40	@ 0x28
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}
 80115d6:	bf00      	nop
 80115d8:	200005c0 	.word	0x200005c0
 80115dc:	200004bc 	.word	0x200004bc
 80115e0:	200004b8 	.word	0x200004b8
 80115e4:	e000ed04 	.word	0xe000ed04

080115e8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b08e      	sub	sp, #56	@ 0x38
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	60f8      	str	r0, [r7, #12]
 80115f0:	60b9      	str	r1, [r7, #8]
 80115f2:	603b      	str	r3, [r7, #0]
 80115f4:	4613      	mov	r3, r2
 80115f6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80115f8:	2301      	movs	r3, #1
 80115fa:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d10b      	bne.n	801161a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8011602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011606:	f383 8811 	msr	BASEPRI, r3
 801160a:	f3bf 8f6f 	isb	sy
 801160e:	f3bf 8f4f 	dsb	sy
 8011612:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011614:	bf00      	nop
 8011616:	bf00      	nop
 8011618:	e7fd      	b.n	8011616 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801161a:	f000 fb45 	bl	8011ca8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011622:	f3ef 8211 	mrs	r2, BASEPRI
 8011626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801162a:	f383 8811 	msr	BASEPRI, r3
 801162e:	f3bf 8f6f 	isb	sy
 8011632:	f3bf 8f4f 	dsb	sy
 8011636:	623a      	str	r2, [r7, #32]
 8011638:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801163a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801163c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d004      	beq.n	801164e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011646:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801164e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011650:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8011654:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801165a:	2202      	movs	r2, #2
 801165c:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8011660:	79fb      	ldrb	r3, [r7, #7]
 8011662:	2b04      	cmp	r3, #4
 8011664:	d82e      	bhi.n	80116c4 <xTaskGenericNotifyFromISR+0xdc>
 8011666:	a201      	add	r2, pc, #4	@ (adr r2, 801166c <xTaskGenericNotifyFromISR+0x84>)
 8011668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801166c:	080116e9 	.word	0x080116e9
 8011670:	08011681 	.word	0x08011681
 8011674:	08011693 	.word	0x08011693
 8011678:	080116a3 	.word	0x080116a3
 801167c:	080116ad 	.word	0x080116ad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011682:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011686:	68bb      	ldr	r3, [r7, #8]
 8011688:	431a      	orrs	r2, r3
 801168a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801168c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 8011690:	e02d      	b.n	80116ee <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011694:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011698:	1c5a      	adds	r2, r3, #1
 801169a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801169c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80116a0:	e025      	b.n	80116ee <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80116a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116a4:	68ba      	ldr	r2, [r7, #8]
 80116a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80116aa:	e020      	b.n	80116ee <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80116ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80116b0:	2b02      	cmp	r3, #2
 80116b2:	d004      	beq.n	80116be <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80116b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116b6:	68ba      	ldr	r2, [r7, #8]
 80116b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80116bc:	e017      	b.n	80116ee <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80116be:	2300      	movs	r3, #0
 80116c0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80116c2:	e014      	b.n	80116ee <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80116c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80116ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ce:	d00d      	beq.n	80116ec <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 80116d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116d4:	f383 8811 	msr	BASEPRI, r3
 80116d8:	f3bf 8f6f 	isb	sy
 80116dc:	f3bf 8f4f 	dsb	sy
 80116e0:	61bb      	str	r3, [r7, #24]
}
 80116e2:	bf00      	nop
 80116e4:	bf00      	nop
 80116e6:	e7fd      	b.n	80116e4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80116e8:	bf00      	nop
 80116ea:	e000      	b.n	80116ee <xTaskGenericNotifyFromISR+0x106>
					break;
 80116ec:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80116ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80116f2:	2b01      	cmp	r3, #1
 80116f4:	d146      	bne.n	8011784 <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80116f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d00b      	beq.n	8011716 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 80116fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011702:	f383 8811 	msr	BASEPRI, r3
 8011706:	f3bf 8f6f 	isb	sy
 801170a:	f3bf 8f4f 	dsb	sy
 801170e:	617b      	str	r3, [r7, #20]
}
 8011710:	bf00      	nop
 8011712:	bf00      	nop
 8011714:	e7fd      	b.n	8011712 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011716:	4b21      	ldr	r3, [pc, #132]	@ (801179c <xTaskGenericNotifyFromISR+0x1b4>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d11c      	bne.n	8011758 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801171e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011720:	3304      	adds	r3, #4
 8011722:	4618      	mov	r0, r3
 8011724:	f7ff f8b5 	bl	8010892 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801172a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801172c:	2201      	movs	r2, #1
 801172e:	409a      	lsls	r2, r3
 8011730:	4b1b      	ldr	r3, [pc, #108]	@ (80117a0 <xTaskGenericNotifyFromISR+0x1b8>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	4313      	orrs	r3, r2
 8011736:	4a1a      	ldr	r2, [pc, #104]	@ (80117a0 <xTaskGenericNotifyFromISR+0x1b8>)
 8011738:	6013      	str	r3, [r2, #0]
 801173a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801173c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801173e:	4613      	mov	r3, r2
 8011740:	009b      	lsls	r3, r3, #2
 8011742:	4413      	add	r3, r2
 8011744:	009b      	lsls	r3, r3, #2
 8011746:	4a17      	ldr	r2, [pc, #92]	@ (80117a4 <xTaskGenericNotifyFromISR+0x1bc>)
 8011748:	441a      	add	r2, r3
 801174a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801174c:	3304      	adds	r3, #4
 801174e:	4619      	mov	r1, r3
 8011750:	4610      	mov	r0, r2
 8011752:	f7ff f841 	bl	80107d8 <vListInsertEnd>
 8011756:	e005      	b.n	8011764 <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801175a:	3318      	adds	r3, #24
 801175c:	4619      	mov	r1, r3
 801175e:	4812      	ldr	r0, [pc, #72]	@ (80117a8 <xTaskGenericNotifyFromISR+0x1c0>)
 8011760:	f7ff f83a 	bl	80107d8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011768:	4b10      	ldr	r3, [pc, #64]	@ (80117ac <xTaskGenericNotifyFromISR+0x1c4>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801176e:	429a      	cmp	r2, r3
 8011770:	d908      	bls.n	8011784 <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011774:	2b00      	cmp	r3, #0
 8011776:	d002      	beq.n	801177e <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801177a:	2201      	movs	r2, #1
 801177c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 801177e:	4b0c      	ldr	r3, [pc, #48]	@ (80117b0 <xTaskGenericNotifyFromISR+0x1c8>)
 8011780:	2201      	movs	r2, #1
 8011782:	601a      	str	r2, [r3, #0]
 8011784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011786:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801178e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8011792:	4618      	mov	r0, r3
 8011794:	3738      	adds	r7, #56	@ 0x38
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
 801179a:	bf00      	nop
 801179c:	200005e0 	.word	0x200005e0
 80117a0:	200005c0 	.word	0x200005c0
 80117a4:	200004bc 	.word	0x200004bc
 80117a8:	20000578 	.word	0x20000578
 80117ac:	200004b8 	.word	0x200004b8
 80117b0:	200005cc 	.word	0x200005cc

080117b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80117be:	4b29      	ldr	r3, [pc, #164]	@ (8011864 <prvAddCurrentTaskToDelayedList+0xb0>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117c4:	4b28      	ldr	r3, [pc, #160]	@ (8011868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	3304      	adds	r3, #4
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7ff f861 	bl	8010892 <uxListRemove>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d10b      	bne.n	80117ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80117d6:	4b24      	ldr	r3, [pc, #144]	@ (8011868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117dc:	2201      	movs	r2, #1
 80117de:	fa02 f303 	lsl.w	r3, r2, r3
 80117e2:	43da      	mvns	r2, r3
 80117e4:	4b21      	ldr	r3, [pc, #132]	@ (801186c <prvAddCurrentTaskToDelayedList+0xb8>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	4013      	ands	r3, r2
 80117ea:	4a20      	ldr	r2, [pc, #128]	@ (801186c <prvAddCurrentTaskToDelayedList+0xb8>)
 80117ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117f4:	d10a      	bne.n	801180c <prvAddCurrentTaskToDelayedList+0x58>
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d007      	beq.n	801180c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80117fc:	4b1a      	ldr	r3, [pc, #104]	@ (8011868 <prvAddCurrentTaskToDelayedList+0xb4>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	3304      	adds	r3, #4
 8011802:	4619      	mov	r1, r3
 8011804:	481a      	ldr	r0, [pc, #104]	@ (8011870 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011806:	f7fe ffe7 	bl	80107d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801180a:	e026      	b.n	801185a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801180c:	68fa      	ldr	r2, [r7, #12]
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	4413      	add	r3, r2
 8011812:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011814:	4b14      	ldr	r3, [pc, #80]	@ (8011868 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	68ba      	ldr	r2, [r7, #8]
 801181a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801181c:	68ba      	ldr	r2, [r7, #8]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	429a      	cmp	r2, r3
 8011822:	d209      	bcs.n	8011838 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011824:	4b13      	ldr	r3, [pc, #76]	@ (8011874 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011826:	681a      	ldr	r2, [r3, #0]
 8011828:	4b0f      	ldr	r3, [pc, #60]	@ (8011868 <prvAddCurrentTaskToDelayedList+0xb4>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	3304      	adds	r3, #4
 801182e:	4619      	mov	r1, r3
 8011830:	4610      	mov	r0, r2
 8011832:	f7fe fff5 	bl	8010820 <vListInsert>
}
 8011836:	e010      	b.n	801185a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011838:	4b0f      	ldr	r3, [pc, #60]	@ (8011878 <prvAddCurrentTaskToDelayedList+0xc4>)
 801183a:	681a      	ldr	r2, [r3, #0]
 801183c:	4b0a      	ldr	r3, [pc, #40]	@ (8011868 <prvAddCurrentTaskToDelayedList+0xb4>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	3304      	adds	r3, #4
 8011842:	4619      	mov	r1, r3
 8011844:	4610      	mov	r0, r2
 8011846:	f7fe ffeb 	bl	8010820 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801184a:	4b0c      	ldr	r3, [pc, #48]	@ (801187c <prvAddCurrentTaskToDelayedList+0xc8>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	68ba      	ldr	r2, [r7, #8]
 8011850:	429a      	cmp	r2, r3
 8011852:	d202      	bcs.n	801185a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011854:	4a09      	ldr	r2, [pc, #36]	@ (801187c <prvAddCurrentTaskToDelayedList+0xc8>)
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	6013      	str	r3, [r2, #0]
}
 801185a:	bf00      	nop
 801185c:	3710      	adds	r7, #16
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
 8011862:	bf00      	nop
 8011864:	200005bc 	.word	0x200005bc
 8011868:	200004b8 	.word	0x200004b8
 801186c:	200005c0 	.word	0x200005c0
 8011870:	200005a4 	.word	0x200005a4
 8011874:	20000574 	.word	0x20000574
 8011878:	20000570 	.word	0x20000570
 801187c:	200005d8 	.word	0x200005d8

08011880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011880:	b480      	push	{r7}
 8011882:	b085      	sub	sp, #20
 8011884:	af00      	add	r7, sp, #0
 8011886:	60f8      	str	r0, [r7, #12]
 8011888:	60b9      	str	r1, [r7, #8]
 801188a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	3b04      	subs	r3, #4
 8011890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8011898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	3b04      	subs	r3, #4
 801189e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	f023 0201 	bic.w	r2, r3, #1
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	3b04      	subs	r3, #4
 80118ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80118b0:	4a0c      	ldr	r2, [pc, #48]	@ (80118e4 <pxPortInitialiseStack+0x64>)
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	3b14      	subs	r3, #20
 80118ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80118bc:	687a      	ldr	r2, [r7, #4]
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	3b04      	subs	r3, #4
 80118c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	f06f 0202 	mvn.w	r2, #2
 80118ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	3b20      	subs	r3, #32
 80118d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80118d6:	68fb      	ldr	r3, [r7, #12]
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3714      	adds	r7, #20
 80118dc:	46bd      	mov	sp, r7
 80118de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e2:	4770      	bx	lr
 80118e4:	080118e9 	.word	0x080118e9

080118e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80118e8:	b480      	push	{r7}
 80118ea:	b085      	sub	sp, #20
 80118ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80118ee:	2300      	movs	r3, #0
 80118f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80118f2:	4b13      	ldr	r3, [pc, #76]	@ (8011940 <prvTaskExitError+0x58>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118fa:	d00b      	beq.n	8011914 <prvTaskExitError+0x2c>
	__asm volatile
 80118fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011900:	f383 8811 	msr	BASEPRI, r3
 8011904:	f3bf 8f6f 	isb	sy
 8011908:	f3bf 8f4f 	dsb	sy
 801190c:	60fb      	str	r3, [r7, #12]
}
 801190e:	bf00      	nop
 8011910:	bf00      	nop
 8011912:	e7fd      	b.n	8011910 <prvTaskExitError+0x28>
	__asm volatile
 8011914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011918:	f383 8811 	msr	BASEPRI, r3
 801191c:	f3bf 8f6f 	isb	sy
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	60bb      	str	r3, [r7, #8]
}
 8011926:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011928:	bf00      	nop
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d0fc      	beq.n	801192a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011930:	bf00      	nop
 8011932:	bf00      	nop
 8011934:	3714      	adds	r7, #20
 8011936:	46bd      	mov	sp, r7
 8011938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop
 8011940:	20000014 	.word	0x20000014
	...

08011950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011950:	4b07      	ldr	r3, [pc, #28]	@ (8011970 <pxCurrentTCBConst2>)
 8011952:	6819      	ldr	r1, [r3, #0]
 8011954:	6808      	ldr	r0, [r1, #0]
 8011956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801195a:	f380 8809 	msr	PSP, r0
 801195e:	f3bf 8f6f 	isb	sy
 8011962:	f04f 0000 	mov.w	r0, #0
 8011966:	f380 8811 	msr	BASEPRI, r0
 801196a:	4770      	bx	lr
 801196c:	f3af 8000 	nop.w

08011970 <pxCurrentTCBConst2>:
 8011970:	200004b8 	.word	0x200004b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011974:	bf00      	nop
 8011976:	bf00      	nop

08011978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011978:	4808      	ldr	r0, [pc, #32]	@ (801199c <prvPortStartFirstTask+0x24>)
 801197a:	6800      	ldr	r0, [r0, #0]
 801197c:	6800      	ldr	r0, [r0, #0]
 801197e:	f380 8808 	msr	MSP, r0
 8011982:	f04f 0000 	mov.w	r0, #0
 8011986:	f380 8814 	msr	CONTROL, r0
 801198a:	b662      	cpsie	i
 801198c:	b661      	cpsie	f
 801198e:	f3bf 8f4f 	dsb	sy
 8011992:	f3bf 8f6f 	isb	sy
 8011996:	df00      	svc	0
 8011998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801199a:	bf00      	nop
 801199c:	e000ed08 	.word	0xe000ed08

080119a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b086      	sub	sp, #24
 80119a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80119a6:	4b47      	ldr	r3, [pc, #284]	@ (8011ac4 <xPortStartScheduler+0x124>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a47      	ldr	r2, [pc, #284]	@ (8011ac8 <xPortStartScheduler+0x128>)
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d10b      	bne.n	80119c8 <xPortStartScheduler+0x28>
	__asm volatile
 80119b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119b4:	f383 8811 	msr	BASEPRI, r3
 80119b8:	f3bf 8f6f 	isb	sy
 80119bc:	f3bf 8f4f 	dsb	sy
 80119c0:	613b      	str	r3, [r7, #16]
}
 80119c2:	bf00      	nop
 80119c4:	bf00      	nop
 80119c6:	e7fd      	b.n	80119c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80119c8:	4b3e      	ldr	r3, [pc, #248]	@ (8011ac4 <xPortStartScheduler+0x124>)
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	4a3f      	ldr	r2, [pc, #252]	@ (8011acc <xPortStartScheduler+0x12c>)
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d10b      	bne.n	80119ea <xPortStartScheduler+0x4a>
	__asm volatile
 80119d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119d6:	f383 8811 	msr	BASEPRI, r3
 80119da:	f3bf 8f6f 	isb	sy
 80119de:	f3bf 8f4f 	dsb	sy
 80119e2:	60fb      	str	r3, [r7, #12]
}
 80119e4:	bf00      	nop
 80119e6:	bf00      	nop
 80119e8:	e7fd      	b.n	80119e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80119ea:	4b39      	ldr	r3, [pc, #228]	@ (8011ad0 <xPortStartScheduler+0x130>)
 80119ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80119ee:	697b      	ldr	r3, [r7, #20]
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	22ff      	movs	r2, #255	@ 0xff
 80119fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	781b      	ldrb	r3, [r3, #0]
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011a04:	78fb      	ldrb	r3, [r7, #3]
 8011a06:	b2db      	uxtb	r3, r3
 8011a08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8011a0c:	b2da      	uxtb	r2, r3
 8011a0e:	4b31      	ldr	r3, [pc, #196]	@ (8011ad4 <xPortStartScheduler+0x134>)
 8011a10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011a12:	4b31      	ldr	r3, [pc, #196]	@ (8011ad8 <xPortStartScheduler+0x138>)
 8011a14:	2207      	movs	r2, #7
 8011a16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011a18:	e009      	b.n	8011a2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8011a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8011ad8 <xPortStartScheduler+0x138>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	3b01      	subs	r3, #1
 8011a20:	4a2d      	ldr	r2, [pc, #180]	@ (8011ad8 <xPortStartScheduler+0x138>)
 8011a22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011a24:	78fb      	ldrb	r3, [r7, #3]
 8011a26:	b2db      	uxtb	r3, r3
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011a2e:	78fb      	ldrb	r3, [r7, #3]
 8011a30:	b2db      	uxtb	r3, r3
 8011a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011a36:	2b80      	cmp	r3, #128	@ 0x80
 8011a38:	d0ef      	beq.n	8011a1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011a3a:	4b27      	ldr	r3, [pc, #156]	@ (8011ad8 <xPortStartScheduler+0x138>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	f1c3 0307 	rsb	r3, r3, #7
 8011a42:	2b04      	cmp	r3, #4
 8011a44:	d00b      	beq.n	8011a5e <xPortStartScheduler+0xbe>
	__asm volatile
 8011a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a4a:	f383 8811 	msr	BASEPRI, r3
 8011a4e:	f3bf 8f6f 	isb	sy
 8011a52:	f3bf 8f4f 	dsb	sy
 8011a56:	60bb      	str	r3, [r7, #8]
}
 8011a58:	bf00      	nop
 8011a5a:	bf00      	nop
 8011a5c:	e7fd      	b.n	8011a5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8011ad8 <xPortStartScheduler+0x138>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	021b      	lsls	r3, r3, #8
 8011a64:	4a1c      	ldr	r2, [pc, #112]	@ (8011ad8 <xPortStartScheduler+0x138>)
 8011a66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011a68:	4b1b      	ldr	r3, [pc, #108]	@ (8011ad8 <xPortStartScheduler+0x138>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011a70:	4a19      	ldr	r2, [pc, #100]	@ (8011ad8 <xPortStartScheduler+0x138>)
 8011a72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	b2da      	uxtb	r2, r3
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011a7c:	4b17      	ldr	r3, [pc, #92]	@ (8011adc <xPortStartScheduler+0x13c>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	4a16      	ldr	r2, [pc, #88]	@ (8011adc <xPortStartScheduler+0x13c>)
 8011a82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011a86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011a88:	4b14      	ldr	r3, [pc, #80]	@ (8011adc <xPortStartScheduler+0x13c>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	4a13      	ldr	r2, [pc, #76]	@ (8011adc <xPortStartScheduler+0x13c>)
 8011a8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011a92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011a94:	f000 f8da 	bl	8011c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011a98:	4b11      	ldr	r3, [pc, #68]	@ (8011ae0 <xPortStartScheduler+0x140>)
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011a9e:	f000 f8f9 	bl	8011c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011aa2:	4b10      	ldr	r3, [pc, #64]	@ (8011ae4 <xPortStartScheduler+0x144>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8011ae4 <xPortStartScheduler+0x144>)
 8011aa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011aac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011aae:	f7ff ff63 	bl	8011978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011ab2:	f7ff facd 	bl	8011050 <vTaskSwitchContext>
	prvTaskExitError();
 8011ab6:	f7ff ff17 	bl	80118e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011aba:	2300      	movs	r3, #0
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3718      	adds	r7, #24
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	e000ed00 	.word	0xe000ed00
 8011ac8:	410fc271 	.word	0x410fc271
 8011acc:	410fc270 	.word	0x410fc270
 8011ad0:	e000e400 	.word	0xe000e400
 8011ad4:	200005e4 	.word	0x200005e4
 8011ad8:	200005e8 	.word	0x200005e8
 8011adc:	e000ed20 	.word	0xe000ed20
 8011ae0:	20000014 	.word	0x20000014
 8011ae4:	e000ef34 	.word	0xe000ef34

08011ae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b083      	sub	sp, #12
 8011aec:	af00      	add	r7, sp, #0
	__asm volatile
 8011aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011af2:	f383 8811 	msr	BASEPRI, r3
 8011af6:	f3bf 8f6f 	isb	sy
 8011afa:	f3bf 8f4f 	dsb	sy
 8011afe:	607b      	str	r3, [r7, #4]
}
 8011b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011b02:	4b10      	ldr	r3, [pc, #64]	@ (8011b44 <vPortEnterCritical+0x5c>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	3301      	adds	r3, #1
 8011b08:	4a0e      	ldr	r2, [pc, #56]	@ (8011b44 <vPortEnterCritical+0x5c>)
 8011b0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8011b44 <vPortEnterCritical+0x5c>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d110      	bne.n	8011b36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011b14:	4b0c      	ldr	r3, [pc, #48]	@ (8011b48 <vPortEnterCritical+0x60>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d00b      	beq.n	8011b36 <vPortEnterCritical+0x4e>
	__asm volatile
 8011b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b22:	f383 8811 	msr	BASEPRI, r3
 8011b26:	f3bf 8f6f 	isb	sy
 8011b2a:	f3bf 8f4f 	dsb	sy
 8011b2e:	603b      	str	r3, [r7, #0]
}
 8011b30:	bf00      	nop
 8011b32:	bf00      	nop
 8011b34:	e7fd      	b.n	8011b32 <vPortEnterCritical+0x4a>
	}
}
 8011b36:	bf00      	nop
 8011b38:	370c      	adds	r7, #12
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b40:	4770      	bx	lr
 8011b42:	bf00      	nop
 8011b44:	20000014 	.word	0x20000014
 8011b48:	e000ed04 	.word	0xe000ed04

08011b4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011b4c:	b480      	push	{r7}
 8011b4e:	b083      	sub	sp, #12
 8011b50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011b52:	4b12      	ldr	r3, [pc, #72]	@ (8011b9c <vPortExitCritical+0x50>)
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d10b      	bne.n	8011b72 <vPortExitCritical+0x26>
	__asm volatile
 8011b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b5e:	f383 8811 	msr	BASEPRI, r3
 8011b62:	f3bf 8f6f 	isb	sy
 8011b66:	f3bf 8f4f 	dsb	sy
 8011b6a:	607b      	str	r3, [r7, #4]
}
 8011b6c:	bf00      	nop
 8011b6e:	bf00      	nop
 8011b70:	e7fd      	b.n	8011b6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011b72:	4b0a      	ldr	r3, [pc, #40]	@ (8011b9c <vPortExitCritical+0x50>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	3b01      	subs	r3, #1
 8011b78:	4a08      	ldr	r2, [pc, #32]	@ (8011b9c <vPortExitCritical+0x50>)
 8011b7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011b7c:	4b07      	ldr	r3, [pc, #28]	@ (8011b9c <vPortExitCritical+0x50>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d105      	bne.n	8011b90 <vPortExitCritical+0x44>
 8011b84:	2300      	movs	r3, #0
 8011b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	f383 8811 	msr	BASEPRI, r3
}
 8011b8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011b90:	bf00      	nop
 8011b92:	370c      	adds	r7, #12
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr
 8011b9c:	20000014 	.word	0x20000014

08011ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011ba0:	f3ef 8009 	mrs	r0, PSP
 8011ba4:	f3bf 8f6f 	isb	sy
 8011ba8:	4b15      	ldr	r3, [pc, #84]	@ (8011c00 <pxCurrentTCBConst>)
 8011baa:	681a      	ldr	r2, [r3, #0]
 8011bac:	f01e 0f10 	tst.w	lr, #16
 8011bb0:	bf08      	it	eq
 8011bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bba:	6010      	str	r0, [r2, #0]
 8011bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011bc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011bc4:	f380 8811 	msr	BASEPRI, r0
 8011bc8:	f3bf 8f4f 	dsb	sy
 8011bcc:	f3bf 8f6f 	isb	sy
 8011bd0:	f7ff fa3e 	bl	8011050 <vTaskSwitchContext>
 8011bd4:	f04f 0000 	mov.w	r0, #0
 8011bd8:	f380 8811 	msr	BASEPRI, r0
 8011bdc:	bc09      	pop	{r0, r3}
 8011bde:	6819      	ldr	r1, [r3, #0]
 8011be0:	6808      	ldr	r0, [r1, #0]
 8011be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be6:	f01e 0f10 	tst.w	lr, #16
 8011bea:	bf08      	it	eq
 8011bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011bf0:	f380 8809 	msr	PSP, r0
 8011bf4:	f3bf 8f6f 	isb	sy
 8011bf8:	4770      	bx	lr
 8011bfa:	bf00      	nop
 8011bfc:	f3af 8000 	nop.w

08011c00 <pxCurrentTCBConst>:
 8011c00:	200004b8 	.word	0x200004b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011c04:	bf00      	nop
 8011c06:	bf00      	nop

08011c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b082      	sub	sp, #8
 8011c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8011c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c12:	f383 8811 	msr	BASEPRI, r3
 8011c16:	f3bf 8f6f 	isb	sy
 8011c1a:	f3bf 8f4f 	dsb	sy
 8011c1e:	607b      	str	r3, [r7, #4]
}
 8011c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011c22:	f7ff f95b 	bl	8010edc <xTaskIncrementTick>
 8011c26:	4603      	mov	r3, r0
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d003      	beq.n	8011c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011c2c:	4b06      	ldr	r3, [pc, #24]	@ (8011c48 <xPortSysTickHandler+0x40>)
 8011c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c32:	601a      	str	r2, [r3, #0]
 8011c34:	2300      	movs	r3, #0
 8011c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011c38:	683b      	ldr	r3, [r7, #0]
 8011c3a:	f383 8811 	msr	BASEPRI, r3
}
 8011c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011c40:	bf00      	nop
 8011c42:	3708      	adds	r7, #8
 8011c44:	46bd      	mov	sp, r7
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	e000ed04 	.word	0xe000ed04

08011c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011c50:	4b0b      	ldr	r3, [pc, #44]	@ (8011c80 <vPortSetupTimerInterrupt+0x34>)
 8011c52:	2200      	movs	r2, #0
 8011c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011c56:	4b0b      	ldr	r3, [pc, #44]	@ (8011c84 <vPortSetupTimerInterrupt+0x38>)
 8011c58:	2200      	movs	r2, #0
 8011c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011c88 <vPortSetupTimerInterrupt+0x3c>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4a0a      	ldr	r2, [pc, #40]	@ (8011c8c <vPortSetupTimerInterrupt+0x40>)
 8011c62:	fba2 2303 	umull	r2, r3, r2, r3
 8011c66:	099b      	lsrs	r3, r3, #6
 8011c68:	4a09      	ldr	r2, [pc, #36]	@ (8011c90 <vPortSetupTimerInterrupt+0x44>)
 8011c6a:	3b01      	subs	r3, #1
 8011c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011c6e:	4b04      	ldr	r3, [pc, #16]	@ (8011c80 <vPortSetupTimerInterrupt+0x34>)
 8011c70:	2207      	movs	r2, #7
 8011c72:	601a      	str	r2, [r3, #0]
}
 8011c74:	bf00      	nop
 8011c76:	46bd      	mov	sp, r7
 8011c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7c:	4770      	bx	lr
 8011c7e:	bf00      	nop
 8011c80:	e000e010 	.word	0xe000e010
 8011c84:	e000e018 	.word	0xe000e018
 8011c88:	20000008 	.word	0x20000008
 8011c8c:	10624dd3 	.word	0x10624dd3
 8011c90:	e000e014 	.word	0xe000e014

08011c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011c94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011ca4 <vPortEnableVFP+0x10>
 8011c98:	6801      	ldr	r1, [r0, #0]
 8011c9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011c9e:	6001      	str	r1, [r0, #0]
 8011ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011ca2:	bf00      	nop
 8011ca4:	e000ed88 	.word	0xe000ed88

08011ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011ca8:	b480      	push	{r7}
 8011caa:	b085      	sub	sp, #20
 8011cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011cae:	f3ef 8305 	mrs	r3, IPSR
 8011cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	2b0f      	cmp	r3, #15
 8011cb8:	d915      	bls.n	8011ce6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011cba:	4a18      	ldr	r2, [pc, #96]	@ (8011d1c <vPortValidateInterruptPriority+0x74>)
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	4413      	add	r3, r2
 8011cc0:	781b      	ldrb	r3, [r3, #0]
 8011cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011cc4:	4b16      	ldr	r3, [pc, #88]	@ (8011d20 <vPortValidateInterruptPriority+0x78>)
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	7afa      	ldrb	r2, [r7, #11]
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d20b      	bcs.n	8011ce6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cd2:	f383 8811 	msr	BASEPRI, r3
 8011cd6:	f3bf 8f6f 	isb	sy
 8011cda:	f3bf 8f4f 	dsb	sy
 8011cde:	607b      	str	r3, [r7, #4]
}
 8011ce0:	bf00      	nop
 8011ce2:	bf00      	nop
 8011ce4:	e7fd      	b.n	8011ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8011d24 <vPortValidateInterruptPriority+0x7c>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011cee:	4b0e      	ldr	r3, [pc, #56]	@ (8011d28 <vPortValidateInterruptPriority+0x80>)
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d90b      	bls.n	8011d0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011cfa:	f383 8811 	msr	BASEPRI, r3
 8011cfe:	f3bf 8f6f 	isb	sy
 8011d02:	f3bf 8f4f 	dsb	sy
 8011d06:	603b      	str	r3, [r7, #0]
}
 8011d08:	bf00      	nop
 8011d0a:	bf00      	nop
 8011d0c:	e7fd      	b.n	8011d0a <vPortValidateInterruptPriority+0x62>
	}
 8011d0e:	bf00      	nop
 8011d10:	3714      	adds	r7, #20
 8011d12:	46bd      	mov	sp, r7
 8011d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d18:	4770      	bx	lr
 8011d1a:	bf00      	nop
 8011d1c:	e000e3f0 	.word	0xe000e3f0
 8011d20:	200005e4 	.word	0x200005e4
 8011d24:	e000ed0c 	.word	0xe000ed0c
 8011d28:	200005e8 	.word	0x200005e8

08011d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b08a      	sub	sp, #40	@ 0x28
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011d34:	2300      	movs	r3, #0
 8011d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011d38:	f7ff f824 	bl	8010d84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8011eb0 <pvPortMalloc+0x184>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d101      	bne.n	8011d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011d44:	f000 f924 	bl	8011f90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011d48:	4b5a      	ldr	r3, [pc, #360]	@ (8011eb4 <pvPortMalloc+0x188>)
 8011d4a:	681a      	ldr	r2, [r3, #0]
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	4013      	ands	r3, r2
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	f040 8095 	bne.w	8011e80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d01e      	beq.n	8011d9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011d5c:	2208      	movs	r2, #8
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	4413      	add	r3, r2
 8011d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f003 0307 	and.w	r3, r3, #7
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d015      	beq.n	8011d9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	f023 0307 	bic.w	r3, r3, #7
 8011d74:	3308      	adds	r3, #8
 8011d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f003 0307 	and.w	r3, r3, #7
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d00b      	beq.n	8011d9a <pvPortMalloc+0x6e>
	__asm volatile
 8011d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d86:	f383 8811 	msr	BASEPRI, r3
 8011d8a:	f3bf 8f6f 	isb	sy
 8011d8e:	f3bf 8f4f 	dsb	sy
 8011d92:	617b      	str	r3, [r7, #20]
}
 8011d94:	bf00      	nop
 8011d96:	bf00      	nop
 8011d98:	e7fd      	b.n	8011d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d06f      	beq.n	8011e80 <pvPortMalloc+0x154>
 8011da0:	4b45      	ldr	r3, [pc, #276]	@ (8011eb8 <pvPortMalloc+0x18c>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d86a      	bhi.n	8011e80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011daa:	4b44      	ldr	r3, [pc, #272]	@ (8011ebc <pvPortMalloc+0x190>)
 8011dac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011dae:	4b43      	ldr	r3, [pc, #268]	@ (8011ebc <pvPortMalloc+0x190>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011db4:	e004      	b.n	8011dc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011db8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d903      	bls.n	8011dd2 <pvPortMalloc+0xa6>
 8011dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d1f1      	bne.n	8011db6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011dd2:	4b37      	ldr	r3, [pc, #220]	@ (8011eb0 <pvPortMalloc+0x184>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d051      	beq.n	8011e80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011ddc:	6a3b      	ldr	r3, [r7, #32]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	2208      	movs	r2, #8
 8011de2:	4413      	add	r3, r2
 8011de4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de8:	681a      	ldr	r2, [r3, #0]
 8011dea:	6a3b      	ldr	r3, [r7, #32]
 8011dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011df0:	685a      	ldr	r2, [r3, #4]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	1ad2      	subs	r2, r2, r3
 8011df6:	2308      	movs	r3, #8
 8011df8:	005b      	lsls	r3, r3, #1
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d920      	bls.n	8011e40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	4413      	add	r3, r2
 8011e04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	f003 0307 	and.w	r3, r3, #7
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00b      	beq.n	8011e28 <pvPortMalloc+0xfc>
	__asm volatile
 8011e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e14:	f383 8811 	msr	BASEPRI, r3
 8011e18:	f3bf 8f6f 	isb	sy
 8011e1c:	f3bf 8f4f 	dsb	sy
 8011e20:	613b      	str	r3, [r7, #16]
}
 8011e22:	bf00      	nop
 8011e24:	bf00      	nop
 8011e26:	e7fd      	b.n	8011e24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e2a:	685a      	ldr	r2, [r3, #4]
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	1ad2      	subs	r2, r2, r3
 8011e30:	69bb      	ldr	r3, [r7, #24]
 8011e32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e36:	687a      	ldr	r2, [r7, #4]
 8011e38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011e3a:	69b8      	ldr	r0, [r7, #24]
 8011e3c:	f000 f90a 	bl	8012054 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011e40:	4b1d      	ldr	r3, [pc, #116]	@ (8011eb8 <pvPortMalloc+0x18c>)
 8011e42:	681a      	ldr	r2, [r3, #0]
 8011e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	1ad3      	subs	r3, r2, r3
 8011e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8011eb8 <pvPortMalloc+0x18c>)
 8011e4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8011eb8 <pvPortMalloc+0x18c>)
 8011e50:	681a      	ldr	r2, [r3, #0]
 8011e52:	4b1b      	ldr	r3, [pc, #108]	@ (8011ec0 <pvPortMalloc+0x194>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d203      	bcs.n	8011e62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011e5a:	4b17      	ldr	r3, [pc, #92]	@ (8011eb8 <pvPortMalloc+0x18c>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	4a18      	ldr	r2, [pc, #96]	@ (8011ec0 <pvPortMalloc+0x194>)
 8011e60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e64:	685a      	ldr	r2, [r3, #4]
 8011e66:	4b13      	ldr	r3, [pc, #76]	@ (8011eb4 <pvPortMalloc+0x188>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	431a      	orrs	r2, r3
 8011e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e72:	2200      	movs	r2, #0
 8011e74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011e76:	4b13      	ldr	r3, [pc, #76]	@ (8011ec4 <pvPortMalloc+0x198>)
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	3301      	adds	r3, #1
 8011e7c:	4a11      	ldr	r2, [pc, #68]	@ (8011ec4 <pvPortMalloc+0x198>)
 8011e7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011e80:	f7fe ff8e 	bl	8010da0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e84:	69fb      	ldr	r3, [r7, #28]
 8011e86:	f003 0307 	and.w	r3, r3, #7
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d00b      	beq.n	8011ea6 <pvPortMalloc+0x17a>
	__asm volatile
 8011e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e92:	f383 8811 	msr	BASEPRI, r3
 8011e96:	f3bf 8f6f 	isb	sy
 8011e9a:	f3bf 8f4f 	dsb	sy
 8011e9e:	60fb      	str	r3, [r7, #12]
}
 8011ea0:	bf00      	nop
 8011ea2:	bf00      	nop
 8011ea4:	e7fd      	b.n	8011ea2 <pvPortMalloc+0x176>
	return pvReturn;
 8011ea6:	69fb      	ldr	r3, [r7, #28]
}
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	3728      	adds	r7, #40	@ 0x28
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	200041f4 	.word	0x200041f4
 8011eb4:	20004208 	.word	0x20004208
 8011eb8:	200041f8 	.word	0x200041f8
 8011ebc:	200041ec 	.word	0x200041ec
 8011ec0:	200041fc 	.word	0x200041fc
 8011ec4:	20004200 	.word	0x20004200

08011ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b086      	sub	sp, #24
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d04f      	beq.n	8011f7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011eda:	2308      	movs	r3, #8
 8011edc:	425b      	negs	r3, r3
 8011ede:	697a      	ldr	r2, [r7, #20]
 8011ee0:	4413      	add	r3, r2
 8011ee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	685a      	ldr	r2, [r3, #4]
 8011eec:	4b25      	ldr	r3, [pc, #148]	@ (8011f84 <vPortFree+0xbc>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	4013      	ands	r3, r2
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d10b      	bne.n	8011f0e <vPortFree+0x46>
	__asm volatile
 8011ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011efa:	f383 8811 	msr	BASEPRI, r3
 8011efe:	f3bf 8f6f 	isb	sy
 8011f02:	f3bf 8f4f 	dsb	sy
 8011f06:	60fb      	str	r3, [r7, #12]
}
 8011f08:	bf00      	nop
 8011f0a:	bf00      	nop
 8011f0c:	e7fd      	b.n	8011f0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011f0e:	693b      	ldr	r3, [r7, #16]
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d00b      	beq.n	8011f2e <vPortFree+0x66>
	__asm volatile
 8011f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f1a:	f383 8811 	msr	BASEPRI, r3
 8011f1e:	f3bf 8f6f 	isb	sy
 8011f22:	f3bf 8f4f 	dsb	sy
 8011f26:	60bb      	str	r3, [r7, #8]
}
 8011f28:	bf00      	nop
 8011f2a:	bf00      	nop
 8011f2c:	e7fd      	b.n	8011f2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	685a      	ldr	r2, [r3, #4]
 8011f32:	4b14      	ldr	r3, [pc, #80]	@ (8011f84 <vPortFree+0xbc>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	4013      	ands	r3, r2
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d01e      	beq.n	8011f7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d11a      	bne.n	8011f7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	685a      	ldr	r2, [r3, #4]
 8011f48:	4b0e      	ldr	r3, [pc, #56]	@ (8011f84 <vPortFree+0xbc>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	43db      	mvns	r3, r3
 8011f4e:	401a      	ands	r2, r3
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011f54:	f7fe ff16 	bl	8010d84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	685a      	ldr	r2, [r3, #4]
 8011f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011f88 <vPortFree+0xc0>)
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	4413      	add	r3, r2
 8011f62:	4a09      	ldr	r2, [pc, #36]	@ (8011f88 <vPortFree+0xc0>)
 8011f64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011f66:	6938      	ldr	r0, [r7, #16]
 8011f68:	f000 f874 	bl	8012054 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011f6c:	4b07      	ldr	r3, [pc, #28]	@ (8011f8c <vPortFree+0xc4>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	3301      	adds	r3, #1
 8011f72:	4a06      	ldr	r2, [pc, #24]	@ (8011f8c <vPortFree+0xc4>)
 8011f74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011f76:	f7fe ff13 	bl	8010da0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011f7a:	bf00      	nop
 8011f7c:	3718      	adds	r7, #24
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	20004208 	.word	0x20004208
 8011f88:	200041f8 	.word	0x200041f8
 8011f8c:	20004204 	.word	0x20004204

08011f90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011f90:	b480      	push	{r7}
 8011f92:	b085      	sub	sp, #20
 8011f94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011f96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8011f9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011f9c:	4b27      	ldr	r3, [pc, #156]	@ (801203c <prvHeapInit+0xac>)
 8011f9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	f003 0307 	and.w	r3, r3, #7
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d00c      	beq.n	8011fc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	3307      	adds	r3, #7
 8011fae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f023 0307 	bic.w	r3, r3, #7
 8011fb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011fb8:	68ba      	ldr	r2, [r7, #8]
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	1ad3      	subs	r3, r2, r3
 8011fbe:	4a1f      	ldr	r2, [pc, #124]	@ (801203c <prvHeapInit+0xac>)
 8011fc0:	4413      	add	r3, r2
 8011fc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8012040 <prvHeapInit+0xb0>)
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011fce:	4b1c      	ldr	r3, [pc, #112]	@ (8012040 <prvHeapInit+0xb0>)
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	68ba      	ldr	r2, [r7, #8]
 8011fd8:	4413      	add	r3, r2
 8011fda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011fdc:	2208      	movs	r2, #8
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	1a9b      	subs	r3, r3, r2
 8011fe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f023 0307 	bic.w	r3, r3, #7
 8011fea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	4a15      	ldr	r2, [pc, #84]	@ (8012044 <prvHeapInit+0xb4>)
 8011ff0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011ff2:	4b14      	ldr	r3, [pc, #80]	@ (8012044 <prvHeapInit+0xb4>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011ffa:	4b12      	ldr	r3, [pc, #72]	@ (8012044 <prvHeapInit+0xb4>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2200      	movs	r2, #0
 8012000:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012006:	683b      	ldr	r3, [r7, #0]
 8012008:	68fa      	ldr	r2, [r7, #12]
 801200a:	1ad2      	subs	r2, r2, r3
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012010:	4b0c      	ldr	r3, [pc, #48]	@ (8012044 <prvHeapInit+0xb4>)
 8012012:	681a      	ldr	r2, [r3, #0]
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012018:	683b      	ldr	r3, [r7, #0]
 801201a:	685b      	ldr	r3, [r3, #4]
 801201c:	4a0a      	ldr	r2, [pc, #40]	@ (8012048 <prvHeapInit+0xb8>)
 801201e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	4a09      	ldr	r2, [pc, #36]	@ (801204c <prvHeapInit+0xbc>)
 8012026:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012028:	4b09      	ldr	r3, [pc, #36]	@ (8012050 <prvHeapInit+0xc0>)
 801202a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801202e:	601a      	str	r2, [r3, #0]
}
 8012030:	bf00      	nop
 8012032:	3714      	adds	r7, #20
 8012034:	46bd      	mov	sp, r7
 8012036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801203a:	4770      	bx	lr
 801203c:	200005ec 	.word	0x200005ec
 8012040:	200041ec 	.word	0x200041ec
 8012044:	200041f4 	.word	0x200041f4
 8012048:	200041fc 	.word	0x200041fc
 801204c:	200041f8 	.word	0x200041f8
 8012050:	20004208 	.word	0x20004208

08012054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012054:	b480      	push	{r7}
 8012056:	b085      	sub	sp, #20
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801205c:	4b28      	ldr	r3, [pc, #160]	@ (8012100 <prvInsertBlockIntoFreeList+0xac>)
 801205e:	60fb      	str	r3, [r7, #12]
 8012060:	e002      	b.n	8012068 <prvInsertBlockIntoFreeList+0x14>
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	60fb      	str	r3, [r7, #12]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	429a      	cmp	r2, r3
 8012070:	d8f7      	bhi.n	8012062 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	68ba      	ldr	r2, [r7, #8]
 801207c:	4413      	add	r3, r2
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	429a      	cmp	r2, r3
 8012082:	d108      	bne.n	8012096 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	685a      	ldr	r2, [r3, #4]
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	685b      	ldr	r3, [r3, #4]
 801208c:	441a      	add	r2, r3
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	68ba      	ldr	r2, [r7, #8]
 80120a0:	441a      	add	r2, r3
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d118      	bne.n	80120dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	681a      	ldr	r2, [r3, #0]
 80120ae:	4b15      	ldr	r3, [pc, #84]	@ (8012104 <prvInsertBlockIntoFreeList+0xb0>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d00d      	beq.n	80120d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	685a      	ldr	r2, [r3, #4]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	685b      	ldr	r3, [r3, #4]
 80120c0:	441a      	add	r2, r3
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	681b      	ldr	r3, [r3, #0]
 80120ca:	681a      	ldr	r2, [r3, #0]
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	601a      	str	r2, [r3, #0]
 80120d0:	e008      	b.n	80120e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80120d2:	4b0c      	ldr	r3, [pc, #48]	@ (8012104 <prvInsertBlockIntoFreeList+0xb0>)
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	601a      	str	r2, [r3, #0]
 80120da:	e003      	b.n	80120e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80120e4:	68fa      	ldr	r2, [r7, #12]
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d002      	beq.n	80120f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80120f2:	bf00      	nop
 80120f4:	3714      	adds	r7, #20
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	200041ec 	.word	0x200041ec
 8012104:	200041f4 	.word	0x200041f4

08012108 <_fgets_r>:
 8012108:	2a01      	cmp	r2, #1
 801210a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801210e:	4681      	mov	r9, r0
 8012110:	460e      	mov	r6, r1
 8012112:	4615      	mov	r5, r2
 8012114:	461c      	mov	r4, r3
 8012116:	dd21      	ble.n	801215c <_fgets_r+0x54>
 8012118:	b118      	cbz	r0, 8012122 <_fgets_r+0x1a>
 801211a:	6a03      	ldr	r3, [r0, #32]
 801211c:	b90b      	cbnz	r3, 8012122 <_fgets_r+0x1a>
 801211e:	f000 f8ef 	bl	8012300 <__sinit>
 8012122:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012124:	07db      	lsls	r3, r3, #31
 8012126:	d405      	bmi.n	8012134 <_fgets_r+0x2c>
 8012128:	89a3      	ldrh	r3, [r4, #12]
 801212a:	059f      	lsls	r7, r3, #22
 801212c:	d402      	bmi.n	8012134 <_fgets_r+0x2c>
 801212e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012130:	f000 fc69 	bl	8012a06 <__retarget_lock_acquire_recursive>
 8012134:	3d01      	subs	r5, #1
 8012136:	4637      	mov	r7, r6
 8012138:	6863      	ldr	r3, [r4, #4]
 801213a:	b99b      	cbnz	r3, 8012164 <_fgets_r+0x5c>
 801213c:	4621      	mov	r1, r4
 801213e:	4648      	mov	r0, r9
 8012140:	f000 f992 	bl	8012468 <__srefill_r>
 8012144:	b168      	cbz	r0, 8012162 <_fgets_r+0x5a>
 8012146:	42b7      	cmp	r7, r6
 8012148:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801214a:	d139      	bne.n	80121c0 <_fgets_r+0xb8>
 801214c:	07d8      	lsls	r0, r3, #31
 801214e:	d405      	bmi.n	801215c <_fgets_r+0x54>
 8012150:	89a3      	ldrh	r3, [r4, #12]
 8012152:	0599      	lsls	r1, r3, #22
 8012154:	d402      	bmi.n	801215c <_fgets_r+0x54>
 8012156:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012158:	f000 fc56 	bl	8012a08 <__retarget_lock_release_recursive>
 801215c:	2000      	movs	r0, #0
 801215e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012162:	6863      	ldr	r3, [r4, #4]
 8012164:	f8d4 a000 	ldr.w	sl, [r4]
 8012168:	42ab      	cmp	r3, r5
 801216a:	bf28      	it	cs
 801216c:	462b      	movcs	r3, r5
 801216e:	461a      	mov	r2, r3
 8012170:	210a      	movs	r1, #10
 8012172:	4650      	mov	r0, sl
 8012174:	4698      	mov	r8, r3
 8012176:	f7f9 ff63 	bl	800c040 <memchr>
 801217a:	6863      	ldr	r3, [r4, #4]
 801217c:	b188      	cbz	r0, 80121a2 <_fgets_r+0x9a>
 801217e:	3001      	adds	r0, #1
 8012180:	eba0 050a 	sub.w	r5, r0, sl
 8012184:	1b5b      	subs	r3, r3, r5
 8012186:	e9c4 0300 	strd	r0, r3, [r4]
 801218a:	462a      	mov	r2, r5
 801218c:	4651      	mov	r1, sl
 801218e:	4638      	mov	r0, r7
 8012190:	f000 fc3b 	bl	8012a0a <memcpy>
 8012194:	2300      	movs	r3, #0
 8012196:	557b      	strb	r3, [r7, r5]
 8012198:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801219a:	07da      	lsls	r2, r3, #31
 801219c:	d513      	bpl.n	80121c6 <_fgets_r+0xbe>
 801219e:	4630      	mov	r0, r6
 80121a0:	e7dd      	b.n	801215e <_fgets_r+0x56>
 80121a2:	eba3 0308 	sub.w	r3, r3, r8
 80121a6:	6063      	str	r3, [r4, #4]
 80121a8:	6823      	ldr	r3, [r4, #0]
 80121aa:	4443      	add	r3, r8
 80121ac:	4638      	mov	r0, r7
 80121ae:	6023      	str	r3, [r4, #0]
 80121b0:	4642      	mov	r2, r8
 80121b2:	4651      	mov	r1, sl
 80121b4:	f000 fc29 	bl	8012a0a <memcpy>
 80121b8:	ebb5 0508 	subs.w	r5, r5, r8
 80121bc:	4447      	add	r7, r8
 80121be:	d1bb      	bne.n	8012138 <_fgets_r+0x30>
 80121c0:	2300      	movs	r3, #0
 80121c2:	703b      	strb	r3, [r7, #0]
 80121c4:	e7e8      	b.n	8012198 <_fgets_r+0x90>
 80121c6:	89a3      	ldrh	r3, [r4, #12]
 80121c8:	059b      	lsls	r3, r3, #22
 80121ca:	d4e8      	bmi.n	801219e <_fgets_r+0x96>
 80121cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80121ce:	f000 fc1b 	bl	8012a08 <__retarget_lock_release_recursive>
 80121d2:	e7e4      	b.n	801219e <_fgets_r+0x96>

080121d4 <fgets>:
 80121d4:	4613      	mov	r3, r2
 80121d6:	460a      	mov	r2, r1
 80121d8:	4601      	mov	r1, r0
 80121da:	4802      	ldr	r0, [pc, #8]	@ (80121e4 <fgets+0x10>)
 80121dc:	6800      	ldr	r0, [r0, #0]
 80121de:	f7ff bf93 	b.w	8012108 <_fgets_r>
 80121e2:	bf00      	nop
 80121e4:	20000024 	.word	0x20000024

080121e8 <std>:
 80121e8:	2300      	movs	r3, #0
 80121ea:	b510      	push	{r4, lr}
 80121ec:	4604      	mov	r4, r0
 80121ee:	e9c0 3300 	strd	r3, r3, [r0]
 80121f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121f6:	6083      	str	r3, [r0, #8]
 80121f8:	8181      	strh	r1, [r0, #12]
 80121fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80121fc:	81c2      	strh	r2, [r0, #14]
 80121fe:	6183      	str	r3, [r0, #24]
 8012200:	4619      	mov	r1, r3
 8012202:	2208      	movs	r2, #8
 8012204:	305c      	adds	r0, #92	@ 0x5c
 8012206:	f000 fb2f 	bl	8012868 <memset>
 801220a:	4b0d      	ldr	r3, [pc, #52]	@ (8012240 <std+0x58>)
 801220c:	6263      	str	r3, [r4, #36]	@ 0x24
 801220e:	4b0d      	ldr	r3, [pc, #52]	@ (8012244 <std+0x5c>)
 8012210:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012212:	4b0d      	ldr	r3, [pc, #52]	@ (8012248 <std+0x60>)
 8012214:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012216:	4b0d      	ldr	r3, [pc, #52]	@ (801224c <std+0x64>)
 8012218:	6323      	str	r3, [r4, #48]	@ 0x30
 801221a:	4b0d      	ldr	r3, [pc, #52]	@ (8012250 <std+0x68>)
 801221c:	6224      	str	r4, [r4, #32]
 801221e:	429c      	cmp	r4, r3
 8012220:	d006      	beq.n	8012230 <std+0x48>
 8012222:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012226:	4294      	cmp	r4, r2
 8012228:	d002      	beq.n	8012230 <std+0x48>
 801222a:	33d0      	adds	r3, #208	@ 0xd0
 801222c:	429c      	cmp	r4, r3
 801222e:	d105      	bne.n	801223c <std+0x54>
 8012230:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012238:	f000 bbe4 	b.w	8012a04 <__retarget_lock_init_recursive>
 801223c:	bd10      	pop	{r4, pc}
 801223e:	bf00      	nop
 8012240:	080126b9 	.word	0x080126b9
 8012244:	080126db 	.word	0x080126db
 8012248:	08012713 	.word	0x08012713
 801224c:	08012737 	.word	0x08012737
 8012250:	2000420c 	.word	0x2000420c

08012254 <stdio_exit_handler>:
 8012254:	4a02      	ldr	r2, [pc, #8]	@ (8012260 <stdio_exit_handler+0xc>)
 8012256:	4903      	ldr	r1, [pc, #12]	@ (8012264 <stdio_exit_handler+0x10>)
 8012258:	4803      	ldr	r0, [pc, #12]	@ (8012268 <stdio_exit_handler+0x14>)
 801225a:	f000 b869 	b.w	8012330 <_fwalk_sglue>
 801225e:	bf00      	nop
 8012260:	20000018 	.word	0x20000018
 8012264:	080132d1 	.word	0x080132d1
 8012268:	20000028 	.word	0x20000028

0801226c <cleanup_stdio>:
 801226c:	6841      	ldr	r1, [r0, #4]
 801226e:	4b0c      	ldr	r3, [pc, #48]	@ (80122a0 <cleanup_stdio+0x34>)
 8012270:	4299      	cmp	r1, r3
 8012272:	b510      	push	{r4, lr}
 8012274:	4604      	mov	r4, r0
 8012276:	d001      	beq.n	801227c <cleanup_stdio+0x10>
 8012278:	f001 f82a 	bl	80132d0 <_fflush_r>
 801227c:	68a1      	ldr	r1, [r4, #8]
 801227e:	4b09      	ldr	r3, [pc, #36]	@ (80122a4 <cleanup_stdio+0x38>)
 8012280:	4299      	cmp	r1, r3
 8012282:	d002      	beq.n	801228a <cleanup_stdio+0x1e>
 8012284:	4620      	mov	r0, r4
 8012286:	f001 f823 	bl	80132d0 <_fflush_r>
 801228a:	68e1      	ldr	r1, [r4, #12]
 801228c:	4b06      	ldr	r3, [pc, #24]	@ (80122a8 <cleanup_stdio+0x3c>)
 801228e:	4299      	cmp	r1, r3
 8012290:	d004      	beq.n	801229c <cleanup_stdio+0x30>
 8012292:	4620      	mov	r0, r4
 8012294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012298:	f001 b81a 	b.w	80132d0 <_fflush_r>
 801229c:	bd10      	pop	{r4, pc}
 801229e:	bf00      	nop
 80122a0:	2000420c 	.word	0x2000420c
 80122a4:	20004274 	.word	0x20004274
 80122a8:	200042dc 	.word	0x200042dc

080122ac <global_stdio_init.part.0>:
 80122ac:	b510      	push	{r4, lr}
 80122ae:	4b0b      	ldr	r3, [pc, #44]	@ (80122dc <global_stdio_init.part.0+0x30>)
 80122b0:	4c0b      	ldr	r4, [pc, #44]	@ (80122e0 <global_stdio_init.part.0+0x34>)
 80122b2:	4a0c      	ldr	r2, [pc, #48]	@ (80122e4 <global_stdio_init.part.0+0x38>)
 80122b4:	601a      	str	r2, [r3, #0]
 80122b6:	4620      	mov	r0, r4
 80122b8:	2200      	movs	r2, #0
 80122ba:	2104      	movs	r1, #4
 80122bc:	f7ff ff94 	bl	80121e8 <std>
 80122c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80122c4:	2201      	movs	r2, #1
 80122c6:	2109      	movs	r1, #9
 80122c8:	f7ff ff8e 	bl	80121e8 <std>
 80122cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80122d0:	2202      	movs	r2, #2
 80122d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122d6:	2112      	movs	r1, #18
 80122d8:	f7ff bf86 	b.w	80121e8 <std>
 80122dc:	20004344 	.word	0x20004344
 80122e0:	2000420c 	.word	0x2000420c
 80122e4:	08012255 	.word	0x08012255

080122e8 <__sfp_lock_acquire>:
 80122e8:	4801      	ldr	r0, [pc, #4]	@ (80122f0 <__sfp_lock_acquire+0x8>)
 80122ea:	f000 bb8c 	b.w	8012a06 <__retarget_lock_acquire_recursive>
 80122ee:	bf00      	nop
 80122f0:	2000434d 	.word	0x2000434d

080122f4 <__sfp_lock_release>:
 80122f4:	4801      	ldr	r0, [pc, #4]	@ (80122fc <__sfp_lock_release+0x8>)
 80122f6:	f000 bb87 	b.w	8012a08 <__retarget_lock_release_recursive>
 80122fa:	bf00      	nop
 80122fc:	2000434d 	.word	0x2000434d

08012300 <__sinit>:
 8012300:	b510      	push	{r4, lr}
 8012302:	4604      	mov	r4, r0
 8012304:	f7ff fff0 	bl	80122e8 <__sfp_lock_acquire>
 8012308:	6a23      	ldr	r3, [r4, #32]
 801230a:	b11b      	cbz	r3, 8012314 <__sinit+0x14>
 801230c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012310:	f7ff bff0 	b.w	80122f4 <__sfp_lock_release>
 8012314:	4b04      	ldr	r3, [pc, #16]	@ (8012328 <__sinit+0x28>)
 8012316:	6223      	str	r3, [r4, #32]
 8012318:	4b04      	ldr	r3, [pc, #16]	@ (801232c <__sinit+0x2c>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d1f5      	bne.n	801230c <__sinit+0xc>
 8012320:	f7ff ffc4 	bl	80122ac <global_stdio_init.part.0>
 8012324:	e7f2      	b.n	801230c <__sinit+0xc>
 8012326:	bf00      	nop
 8012328:	0801226d 	.word	0x0801226d
 801232c:	20004344 	.word	0x20004344

08012330 <_fwalk_sglue>:
 8012330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012334:	4607      	mov	r7, r0
 8012336:	4688      	mov	r8, r1
 8012338:	4614      	mov	r4, r2
 801233a:	2600      	movs	r6, #0
 801233c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012340:	f1b9 0901 	subs.w	r9, r9, #1
 8012344:	d505      	bpl.n	8012352 <_fwalk_sglue+0x22>
 8012346:	6824      	ldr	r4, [r4, #0]
 8012348:	2c00      	cmp	r4, #0
 801234a:	d1f7      	bne.n	801233c <_fwalk_sglue+0xc>
 801234c:	4630      	mov	r0, r6
 801234e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012352:	89ab      	ldrh	r3, [r5, #12]
 8012354:	2b01      	cmp	r3, #1
 8012356:	d907      	bls.n	8012368 <_fwalk_sglue+0x38>
 8012358:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801235c:	3301      	adds	r3, #1
 801235e:	d003      	beq.n	8012368 <_fwalk_sglue+0x38>
 8012360:	4629      	mov	r1, r5
 8012362:	4638      	mov	r0, r7
 8012364:	47c0      	blx	r8
 8012366:	4306      	orrs	r6, r0
 8012368:	3568      	adds	r5, #104	@ 0x68
 801236a:	e7e9      	b.n	8012340 <_fwalk_sglue+0x10>

0801236c <iprintf>:
 801236c:	b40f      	push	{r0, r1, r2, r3}
 801236e:	b507      	push	{r0, r1, r2, lr}
 8012370:	4906      	ldr	r1, [pc, #24]	@ (801238c <iprintf+0x20>)
 8012372:	ab04      	add	r3, sp, #16
 8012374:	6808      	ldr	r0, [r1, #0]
 8012376:	f853 2b04 	ldr.w	r2, [r3], #4
 801237a:	6881      	ldr	r1, [r0, #8]
 801237c:	9301      	str	r3, [sp, #4]
 801237e:	f000 fc7d 	bl	8012c7c <_vfiprintf_r>
 8012382:	b003      	add	sp, #12
 8012384:	f85d eb04 	ldr.w	lr, [sp], #4
 8012388:	b004      	add	sp, #16
 801238a:	4770      	bx	lr
 801238c:	20000024 	.word	0x20000024

08012390 <_puts_r>:
 8012390:	6a03      	ldr	r3, [r0, #32]
 8012392:	b570      	push	{r4, r5, r6, lr}
 8012394:	6884      	ldr	r4, [r0, #8]
 8012396:	4605      	mov	r5, r0
 8012398:	460e      	mov	r6, r1
 801239a:	b90b      	cbnz	r3, 80123a0 <_puts_r+0x10>
 801239c:	f7ff ffb0 	bl	8012300 <__sinit>
 80123a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80123a2:	07db      	lsls	r3, r3, #31
 80123a4:	d405      	bmi.n	80123b2 <_puts_r+0x22>
 80123a6:	89a3      	ldrh	r3, [r4, #12]
 80123a8:	0598      	lsls	r0, r3, #22
 80123aa:	d402      	bmi.n	80123b2 <_puts_r+0x22>
 80123ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123ae:	f000 fb2a 	bl	8012a06 <__retarget_lock_acquire_recursive>
 80123b2:	89a3      	ldrh	r3, [r4, #12]
 80123b4:	0719      	lsls	r1, r3, #28
 80123b6:	d502      	bpl.n	80123be <_puts_r+0x2e>
 80123b8:	6923      	ldr	r3, [r4, #16]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d135      	bne.n	801242a <_puts_r+0x9a>
 80123be:	4621      	mov	r1, r4
 80123c0:	4628      	mov	r0, r5
 80123c2:	f000 f9fb 	bl	80127bc <__swsetup_r>
 80123c6:	b380      	cbz	r0, 801242a <_puts_r+0x9a>
 80123c8:	f04f 35ff 	mov.w	r5, #4294967295
 80123cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80123ce:	07da      	lsls	r2, r3, #31
 80123d0:	d405      	bmi.n	80123de <_puts_r+0x4e>
 80123d2:	89a3      	ldrh	r3, [r4, #12]
 80123d4:	059b      	lsls	r3, r3, #22
 80123d6:	d402      	bmi.n	80123de <_puts_r+0x4e>
 80123d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80123da:	f000 fb15 	bl	8012a08 <__retarget_lock_release_recursive>
 80123de:	4628      	mov	r0, r5
 80123e0:	bd70      	pop	{r4, r5, r6, pc}
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	da04      	bge.n	80123f0 <_puts_r+0x60>
 80123e6:	69a2      	ldr	r2, [r4, #24]
 80123e8:	429a      	cmp	r2, r3
 80123ea:	dc17      	bgt.n	801241c <_puts_r+0x8c>
 80123ec:	290a      	cmp	r1, #10
 80123ee:	d015      	beq.n	801241c <_puts_r+0x8c>
 80123f0:	6823      	ldr	r3, [r4, #0]
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	6022      	str	r2, [r4, #0]
 80123f6:	7019      	strb	r1, [r3, #0]
 80123f8:	68a3      	ldr	r3, [r4, #8]
 80123fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80123fe:	3b01      	subs	r3, #1
 8012400:	60a3      	str	r3, [r4, #8]
 8012402:	2900      	cmp	r1, #0
 8012404:	d1ed      	bne.n	80123e2 <_puts_r+0x52>
 8012406:	2b00      	cmp	r3, #0
 8012408:	da11      	bge.n	801242e <_puts_r+0x9e>
 801240a:	4622      	mov	r2, r4
 801240c:	210a      	movs	r1, #10
 801240e:	4628      	mov	r0, r5
 8012410:	f000 f995 	bl	801273e <__swbuf_r>
 8012414:	3001      	adds	r0, #1
 8012416:	d0d7      	beq.n	80123c8 <_puts_r+0x38>
 8012418:	250a      	movs	r5, #10
 801241a:	e7d7      	b.n	80123cc <_puts_r+0x3c>
 801241c:	4622      	mov	r2, r4
 801241e:	4628      	mov	r0, r5
 8012420:	f000 f98d 	bl	801273e <__swbuf_r>
 8012424:	3001      	adds	r0, #1
 8012426:	d1e7      	bne.n	80123f8 <_puts_r+0x68>
 8012428:	e7ce      	b.n	80123c8 <_puts_r+0x38>
 801242a:	3e01      	subs	r6, #1
 801242c:	e7e4      	b.n	80123f8 <_puts_r+0x68>
 801242e:	6823      	ldr	r3, [r4, #0]
 8012430:	1c5a      	adds	r2, r3, #1
 8012432:	6022      	str	r2, [r4, #0]
 8012434:	220a      	movs	r2, #10
 8012436:	701a      	strb	r2, [r3, #0]
 8012438:	e7ee      	b.n	8012418 <_puts_r+0x88>
	...

0801243c <puts>:
 801243c:	4b02      	ldr	r3, [pc, #8]	@ (8012448 <puts+0xc>)
 801243e:	4601      	mov	r1, r0
 8012440:	6818      	ldr	r0, [r3, #0]
 8012442:	f7ff bfa5 	b.w	8012390 <_puts_r>
 8012446:	bf00      	nop
 8012448:	20000024 	.word	0x20000024

0801244c <lflush>:
 801244c:	898b      	ldrh	r3, [r1, #12]
 801244e:	f003 0309 	and.w	r3, r3, #9
 8012452:	2b09      	cmp	r3, #9
 8012454:	d103      	bne.n	801245e <lflush+0x12>
 8012456:	4b03      	ldr	r3, [pc, #12]	@ (8012464 <lflush+0x18>)
 8012458:	6818      	ldr	r0, [r3, #0]
 801245a:	f000 bf39 	b.w	80132d0 <_fflush_r>
 801245e:	2000      	movs	r0, #0
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop
 8012464:	20000024 	.word	0x20000024

08012468 <__srefill_r>:
 8012468:	b570      	push	{r4, r5, r6, lr}
 801246a:	460c      	mov	r4, r1
 801246c:	4605      	mov	r5, r0
 801246e:	b118      	cbz	r0, 8012478 <__srefill_r+0x10>
 8012470:	6a03      	ldr	r3, [r0, #32]
 8012472:	b90b      	cbnz	r3, 8012478 <__srefill_r+0x10>
 8012474:	f7ff ff44 	bl	8012300 <__sinit>
 8012478:	2300      	movs	r3, #0
 801247a:	6063      	str	r3, [r4, #4]
 801247c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012480:	069e      	lsls	r6, r3, #26
 8012482:	d408      	bmi.n	8012496 <__srefill_r+0x2e>
 8012484:	0758      	lsls	r0, r3, #29
 8012486:	d445      	bmi.n	8012514 <__srefill_r+0xac>
 8012488:	06d9      	lsls	r1, r3, #27
 801248a:	d407      	bmi.n	801249c <__srefill_r+0x34>
 801248c:	2209      	movs	r2, #9
 801248e:	602a      	str	r2, [r5, #0]
 8012490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012494:	81a3      	strh	r3, [r4, #12]
 8012496:	f04f 30ff 	mov.w	r0, #4294967295
 801249a:	bd70      	pop	{r4, r5, r6, pc}
 801249c:	071a      	lsls	r2, r3, #28
 801249e:	d50b      	bpl.n	80124b8 <__srefill_r+0x50>
 80124a0:	4621      	mov	r1, r4
 80124a2:	4628      	mov	r0, r5
 80124a4:	f000 ff14 	bl	80132d0 <_fflush_r>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d1f4      	bne.n	8012496 <__srefill_r+0x2e>
 80124ac:	89a3      	ldrh	r3, [r4, #12]
 80124ae:	60a0      	str	r0, [r4, #8]
 80124b0:	f023 0308 	bic.w	r3, r3, #8
 80124b4:	81a3      	strh	r3, [r4, #12]
 80124b6:	61a0      	str	r0, [r4, #24]
 80124b8:	89a3      	ldrh	r3, [r4, #12]
 80124ba:	f043 0304 	orr.w	r3, r3, #4
 80124be:	81a3      	strh	r3, [r4, #12]
 80124c0:	6923      	ldr	r3, [r4, #16]
 80124c2:	b91b      	cbnz	r3, 80124cc <__srefill_r+0x64>
 80124c4:	4621      	mov	r1, r4
 80124c6:	4628      	mov	r0, r5
 80124c8:	f000 ff50 	bl	801336c <__smakebuf_r>
 80124cc:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80124d0:	07b3      	lsls	r3, r6, #30
 80124d2:	d00f      	beq.n	80124f4 <__srefill_r+0x8c>
 80124d4:	2301      	movs	r3, #1
 80124d6:	4a1b      	ldr	r2, [pc, #108]	@ (8012544 <__srefill_r+0xdc>)
 80124d8:	491b      	ldr	r1, [pc, #108]	@ (8012548 <__srefill_r+0xe0>)
 80124da:	481c      	ldr	r0, [pc, #112]	@ (801254c <__srefill_r+0xe4>)
 80124dc:	81a3      	strh	r3, [r4, #12]
 80124de:	f7ff ff27 	bl	8012330 <_fwalk_sglue>
 80124e2:	81a6      	strh	r6, [r4, #12]
 80124e4:	f006 0609 	and.w	r6, r6, #9
 80124e8:	2e09      	cmp	r6, #9
 80124ea:	d103      	bne.n	80124f4 <__srefill_r+0x8c>
 80124ec:	4621      	mov	r1, r4
 80124ee:	4628      	mov	r0, r5
 80124f0:	f000 fe6a 	bl	80131c8 <__sflush_r>
 80124f4:	6922      	ldr	r2, [r4, #16]
 80124f6:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80124f8:	6963      	ldr	r3, [r4, #20]
 80124fa:	6a21      	ldr	r1, [r4, #32]
 80124fc:	6022      	str	r2, [r4, #0]
 80124fe:	4628      	mov	r0, r5
 8012500:	47b0      	blx	r6
 8012502:	2800      	cmp	r0, #0
 8012504:	6060      	str	r0, [r4, #4]
 8012506:	dc17      	bgt.n	8012538 <__srefill_r+0xd0>
 8012508:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801250c:	d116      	bne.n	801253c <__srefill_r+0xd4>
 801250e:	f043 0320 	orr.w	r3, r3, #32
 8012512:	e7bf      	b.n	8012494 <__srefill_r+0x2c>
 8012514:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012516:	2900      	cmp	r1, #0
 8012518:	d0d2      	beq.n	80124c0 <__srefill_r+0x58>
 801251a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801251e:	4299      	cmp	r1, r3
 8012520:	d002      	beq.n	8012528 <__srefill_r+0xc0>
 8012522:	4628      	mov	r0, r5
 8012524:	f000 fa80 	bl	8012a28 <_free_r>
 8012528:	2300      	movs	r3, #0
 801252a:	6363      	str	r3, [r4, #52]	@ 0x34
 801252c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801252e:	6063      	str	r3, [r4, #4]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d0c5      	beq.n	80124c0 <__srefill_r+0x58>
 8012534:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012536:	6023      	str	r3, [r4, #0]
 8012538:	2000      	movs	r0, #0
 801253a:	e7ae      	b.n	801249a <__srefill_r+0x32>
 801253c:	2200      	movs	r2, #0
 801253e:	6062      	str	r2, [r4, #4]
 8012540:	e7a6      	b.n	8012490 <__srefill_r+0x28>
 8012542:	bf00      	nop
 8012544:	20000018 	.word	0x20000018
 8012548:	0801244d 	.word	0x0801244d
 801254c:	20000028 	.word	0x20000028

08012550 <setvbuf>:
 8012550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012554:	461d      	mov	r5, r3
 8012556:	4b57      	ldr	r3, [pc, #348]	@ (80126b4 <setvbuf+0x164>)
 8012558:	681f      	ldr	r7, [r3, #0]
 801255a:	4604      	mov	r4, r0
 801255c:	460e      	mov	r6, r1
 801255e:	4690      	mov	r8, r2
 8012560:	b127      	cbz	r7, 801256c <setvbuf+0x1c>
 8012562:	6a3b      	ldr	r3, [r7, #32]
 8012564:	b913      	cbnz	r3, 801256c <setvbuf+0x1c>
 8012566:	4638      	mov	r0, r7
 8012568:	f7ff feca 	bl	8012300 <__sinit>
 801256c:	f1b8 0f02 	cmp.w	r8, #2
 8012570:	d006      	beq.n	8012580 <setvbuf+0x30>
 8012572:	f1b8 0f01 	cmp.w	r8, #1
 8012576:	f200 809a 	bhi.w	80126ae <setvbuf+0x15e>
 801257a:	2d00      	cmp	r5, #0
 801257c:	f2c0 8097 	blt.w	80126ae <setvbuf+0x15e>
 8012580:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012582:	07d9      	lsls	r1, r3, #31
 8012584:	d405      	bmi.n	8012592 <setvbuf+0x42>
 8012586:	89a3      	ldrh	r3, [r4, #12]
 8012588:	059a      	lsls	r2, r3, #22
 801258a:	d402      	bmi.n	8012592 <setvbuf+0x42>
 801258c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801258e:	f000 fa3a 	bl	8012a06 <__retarget_lock_acquire_recursive>
 8012592:	4621      	mov	r1, r4
 8012594:	4638      	mov	r0, r7
 8012596:	f000 fe9b 	bl	80132d0 <_fflush_r>
 801259a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801259c:	b141      	cbz	r1, 80125b0 <setvbuf+0x60>
 801259e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80125a2:	4299      	cmp	r1, r3
 80125a4:	d002      	beq.n	80125ac <setvbuf+0x5c>
 80125a6:	4638      	mov	r0, r7
 80125a8:	f000 fa3e 	bl	8012a28 <_free_r>
 80125ac:	2300      	movs	r3, #0
 80125ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80125b0:	2300      	movs	r3, #0
 80125b2:	61a3      	str	r3, [r4, #24]
 80125b4:	6063      	str	r3, [r4, #4]
 80125b6:	89a3      	ldrh	r3, [r4, #12]
 80125b8:	061b      	lsls	r3, r3, #24
 80125ba:	d503      	bpl.n	80125c4 <setvbuf+0x74>
 80125bc:	6921      	ldr	r1, [r4, #16]
 80125be:	4638      	mov	r0, r7
 80125c0:	f000 fa32 	bl	8012a28 <_free_r>
 80125c4:	89a3      	ldrh	r3, [r4, #12]
 80125c6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80125ca:	f023 0303 	bic.w	r3, r3, #3
 80125ce:	f1b8 0f02 	cmp.w	r8, #2
 80125d2:	81a3      	strh	r3, [r4, #12]
 80125d4:	d061      	beq.n	801269a <setvbuf+0x14a>
 80125d6:	ab01      	add	r3, sp, #4
 80125d8:	466a      	mov	r2, sp
 80125da:	4621      	mov	r1, r4
 80125dc:	4638      	mov	r0, r7
 80125de:	f000 fe9f 	bl	8013320 <__swhatbuf_r>
 80125e2:	89a3      	ldrh	r3, [r4, #12]
 80125e4:	4318      	orrs	r0, r3
 80125e6:	81a0      	strh	r0, [r4, #12]
 80125e8:	bb2d      	cbnz	r5, 8012636 <setvbuf+0xe6>
 80125ea:	9d00      	ldr	r5, [sp, #0]
 80125ec:	4628      	mov	r0, r5
 80125ee:	f000 fa65 	bl	8012abc <malloc>
 80125f2:	4606      	mov	r6, r0
 80125f4:	2800      	cmp	r0, #0
 80125f6:	d152      	bne.n	801269e <setvbuf+0x14e>
 80125f8:	f8dd 9000 	ldr.w	r9, [sp]
 80125fc:	45a9      	cmp	r9, r5
 80125fe:	d140      	bne.n	8012682 <setvbuf+0x132>
 8012600:	f04f 35ff 	mov.w	r5, #4294967295
 8012604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012608:	f043 0202 	orr.w	r2, r3, #2
 801260c:	81a2      	strh	r2, [r4, #12]
 801260e:	2200      	movs	r2, #0
 8012610:	60a2      	str	r2, [r4, #8]
 8012612:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8012616:	6022      	str	r2, [r4, #0]
 8012618:	6122      	str	r2, [r4, #16]
 801261a:	2201      	movs	r2, #1
 801261c:	6162      	str	r2, [r4, #20]
 801261e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012620:	07d6      	lsls	r6, r2, #31
 8012622:	d404      	bmi.n	801262e <setvbuf+0xde>
 8012624:	0598      	lsls	r0, r3, #22
 8012626:	d402      	bmi.n	801262e <setvbuf+0xde>
 8012628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801262a:	f000 f9ed 	bl	8012a08 <__retarget_lock_release_recursive>
 801262e:	4628      	mov	r0, r5
 8012630:	b003      	add	sp, #12
 8012632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012636:	2e00      	cmp	r6, #0
 8012638:	d0d8      	beq.n	80125ec <setvbuf+0x9c>
 801263a:	6a3b      	ldr	r3, [r7, #32]
 801263c:	b913      	cbnz	r3, 8012644 <setvbuf+0xf4>
 801263e:	4638      	mov	r0, r7
 8012640:	f7ff fe5e 	bl	8012300 <__sinit>
 8012644:	f1b8 0f01 	cmp.w	r8, #1
 8012648:	bf08      	it	eq
 801264a:	89a3      	ldrheq	r3, [r4, #12]
 801264c:	6026      	str	r6, [r4, #0]
 801264e:	bf04      	itt	eq
 8012650:	f043 0301 	orreq.w	r3, r3, #1
 8012654:	81a3      	strheq	r3, [r4, #12]
 8012656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801265a:	f013 0208 	ands.w	r2, r3, #8
 801265e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8012662:	d01e      	beq.n	80126a2 <setvbuf+0x152>
 8012664:	07d9      	lsls	r1, r3, #31
 8012666:	bf41      	itttt	mi
 8012668:	2200      	movmi	r2, #0
 801266a:	426d      	negmi	r5, r5
 801266c:	60a2      	strmi	r2, [r4, #8]
 801266e:	61a5      	strmi	r5, [r4, #24]
 8012670:	bf58      	it	pl
 8012672:	60a5      	strpl	r5, [r4, #8]
 8012674:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012676:	07d2      	lsls	r2, r2, #31
 8012678:	d401      	bmi.n	801267e <setvbuf+0x12e>
 801267a:	059b      	lsls	r3, r3, #22
 801267c:	d513      	bpl.n	80126a6 <setvbuf+0x156>
 801267e:	2500      	movs	r5, #0
 8012680:	e7d5      	b.n	801262e <setvbuf+0xde>
 8012682:	4648      	mov	r0, r9
 8012684:	f000 fa1a 	bl	8012abc <malloc>
 8012688:	4606      	mov	r6, r0
 801268a:	2800      	cmp	r0, #0
 801268c:	d0b8      	beq.n	8012600 <setvbuf+0xb0>
 801268e:	89a3      	ldrh	r3, [r4, #12]
 8012690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012694:	81a3      	strh	r3, [r4, #12]
 8012696:	464d      	mov	r5, r9
 8012698:	e7cf      	b.n	801263a <setvbuf+0xea>
 801269a:	2500      	movs	r5, #0
 801269c:	e7b2      	b.n	8012604 <setvbuf+0xb4>
 801269e:	46a9      	mov	r9, r5
 80126a0:	e7f5      	b.n	801268e <setvbuf+0x13e>
 80126a2:	60a2      	str	r2, [r4, #8]
 80126a4:	e7e6      	b.n	8012674 <setvbuf+0x124>
 80126a6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126a8:	f000 f9ae 	bl	8012a08 <__retarget_lock_release_recursive>
 80126ac:	e7e7      	b.n	801267e <setvbuf+0x12e>
 80126ae:	f04f 35ff 	mov.w	r5, #4294967295
 80126b2:	e7bc      	b.n	801262e <setvbuf+0xde>
 80126b4:	20000024 	.word	0x20000024

080126b8 <__sread>:
 80126b8:	b510      	push	{r4, lr}
 80126ba:	460c      	mov	r4, r1
 80126bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126c0:	f000 f952 	bl	8012968 <_read_r>
 80126c4:	2800      	cmp	r0, #0
 80126c6:	bfab      	itete	ge
 80126c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80126ca:	89a3      	ldrhlt	r3, [r4, #12]
 80126cc:	181b      	addge	r3, r3, r0
 80126ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80126d2:	bfac      	ite	ge
 80126d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80126d6:	81a3      	strhlt	r3, [r4, #12]
 80126d8:	bd10      	pop	{r4, pc}

080126da <__swrite>:
 80126da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126de:	461f      	mov	r7, r3
 80126e0:	898b      	ldrh	r3, [r1, #12]
 80126e2:	05db      	lsls	r3, r3, #23
 80126e4:	4605      	mov	r5, r0
 80126e6:	460c      	mov	r4, r1
 80126e8:	4616      	mov	r6, r2
 80126ea:	d505      	bpl.n	80126f8 <__swrite+0x1e>
 80126ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126f0:	2302      	movs	r3, #2
 80126f2:	2200      	movs	r2, #0
 80126f4:	f000 f926 	bl	8012944 <_lseek_r>
 80126f8:	89a3      	ldrh	r3, [r4, #12]
 80126fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012702:	81a3      	strh	r3, [r4, #12]
 8012704:	4632      	mov	r2, r6
 8012706:	463b      	mov	r3, r7
 8012708:	4628      	mov	r0, r5
 801270a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801270e:	f000 b93d 	b.w	801298c <_write_r>

08012712 <__sseek>:
 8012712:	b510      	push	{r4, lr}
 8012714:	460c      	mov	r4, r1
 8012716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801271a:	f000 f913 	bl	8012944 <_lseek_r>
 801271e:	1c43      	adds	r3, r0, #1
 8012720:	89a3      	ldrh	r3, [r4, #12]
 8012722:	bf15      	itete	ne
 8012724:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012726:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801272a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801272e:	81a3      	strheq	r3, [r4, #12]
 8012730:	bf18      	it	ne
 8012732:	81a3      	strhne	r3, [r4, #12]
 8012734:	bd10      	pop	{r4, pc}

08012736 <__sclose>:
 8012736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801273a:	f000 b89d 	b.w	8012878 <_close_r>

0801273e <__swbuf_r>:
 801273e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012740:	460e      	mov	r6, r1
 8012742:	4614      	mov	r4, r2
 8012744:	4605      	mov	r5, r0
 8012746:	b118      	cbz	r0, 8012750 <__swbuf_r+0x12>
 8012748:	6a03      	ldr	r3, [r0, #32]
 801274a:	b90b      	cbnz	r3, 8012750 <__swbuf_r+0x12>
 801274c:	f7ff fdd8 	bl	8012300 <__sinit>
 8012750:	69a3      	ldr	r3, [r4, #24]
 8012752:	60a3      	str	r3, [r4, #8]
 8012754:	89a3      	ldrh	r3, [r4, #12]
 8012756:	071a      	lsls	r2, r3, #28
 8012758:	d501      	bpl.n	801275e <__swbuf_r+0x20>
 801275a:	6923      	ldr	r3, [r4, #16]
 801275c:	b943      	cbnz	r3, 8012770 <__swbuf_r+0x32>
 801275e:	4621      	mov	r1, r4
 8012760:	4628      	mov	r0, r5
 8012762:	f000 f82b 	bl	80127bc <__swsetup_r>
 8012766:	b118      	cbz	r0, 8012770 <__swbuf_r+0x32>
 8012768:	f04f 37ff 	mov.w	r7, #4294967295
 801276c:	4638      	mov	r0, r7
 801276e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012770:	6823      	ldr	r3, [r4, #0]
 8012772:	6922      	ldr	r2, [r4, #16]
 8012774:	1a98      	subs	r0, r3, r2
 8012776:	6963      	ldr	r3, [r4, #20]
 8012778:	b2f6      	uxtb	r6, r6
 801277a:	4283      	cmp	r3, r0
 801277c:	4637      	mov	r7, r6
 801277e:	dc05      	bgt.n	801278c <__swbuf_r+0x4e>
 8012780:	4621      	mov	r1, r4
 8012782:	4628      	mov	r0, r5
 8012784:	f000 fda4 	bl	80132d0 <_fflush_r>
 8012788:	2800      	cmp	r0, #0
 801278a:	d1ed      	bne.n	8012768 <__swbuf_r+0x2a>
 801278c:	68a3      	ldr	r3, [r4, #8]
 801278e:	3b01      	subs	r3, #1
 8012790:	60a3      	str	r3, [r4, #8]
 8012792:	6823      	ldr	r3, [r4, #0]
 8012794:	1c5a      	adds	r2, r3, #1
 8012796:	6022      	str	r2, [r4, #0]
 8012798:	701e      	strb	r6, [r3, #0]
 801279a:	6962      	ldr	r2, [r4, #20]
 801279c:	1c43      	adds	r3, r0, #1
 801279e:	429a      	cmp	r2, r3
 80127a0:	d004      	beq.n	80127ac <__swbuf_r+0x6e>
 80127a2:	89a3      	ldrh	r3, [r4, #12]
 80127a4:	07db      	lsls	r3, r3, #31
 80127a6:	d5e1      	bpl.n	801276c <__swbuf_r+0x2e>
 80127a8:	2e0a      	cmp	r6, #10
 80127aa:	d1df      	bne.n	801276c <__swbuf_r+0x2e>
 80127ac:	4621      	mov	r1, r4
 80127ae:	4628      	mov	r0, r5
 80127b0:	f000 fd8e 	bl	80132d0 <_fflush_r>
 80127b4:	2800      	cmp	r0, #0
 80127b6:	d0d9      	beq.n	801276c <__swbuf_r+0x2e>
 80127b8:	e7d6      	b.n	8012768 <__swbuf_r+0x2a>
	...

080127bc <__swsetup_r>:
 80127bc:	b538      	push	{r3, r4, r5, lr}
 80127be:	4b29      	ldr	r3, [pc, #164]	@ (8012864 <__swsetup_r+0xa8>)
 80127c0:	4605      	mov	r5, r0
 80127c2:	6818      	ldr	r0, [r3, #0]
 80127c4:	460c      	mov	r4, r1
 80127c6:	b118      	cbz	r0, 80127d0 <__swsetup_r+0x14>
 80127c8:	6a03      	ldr	r3, [r0, #32]
 80127ca:	b90b      	cbnz	r3, 80127d0 <__swsetup_r+0x14>
 80127cc:	f7ff fd98 	bl	8012300 <__sinit>
 80127d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127d4:	0719      	lsls	r1, r3, #28
 80127d6:	d422      	bmi.n	801281e <__swsetup_r+0x62>
 80127d8:	06da      	lsls	r2, r3, #27
 80127da:	d407      	bmi.n	80127ec <__swsetup_r+0x30>
 80127dc:	2209      	movs	r2, #9
 80127de:	602a      	str	r2, [r5, #0]
 80127e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127e4:	81a3      	strh	r3, [r4, #12]
 80127e6:	f04f 30ff 	mov.w	r0, #4294967295
 80127ea:	e033      	b.n	8012854 <__swsetup_r+0x98>
 80127ec:	0758      	lsls	r0, r3, #29
 80127ee:	d512      	bpl.n	8012816 <__swsetup_r+0x5a>
 80127f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80127f2:	b141      	cbz	r1, 8012806 <__swsetup_r+0x4a>
 80127f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80127f8:	4299      	cmp	r1, r3
 80127fa:	d002      	beq.n	8012802 <__swsetup_r+0x46>
 80127fc:	4628      	mov	r0, r5
 80127fe:	f000 f913 	bl	8012a28 <_free_r>
 8012802:	2300      	movs	r3, #0
 8012804:	6363      	str	r3, [r4, #52]	@ 0x34
 8012806:	89a3      	ldrh	r3, [r4, #12]
 8012808:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801280c:	81a3      	strh	r3, [r4, #12]
 801280e:	2300      	movs	r3, #0
 8012810:	6063      	str	r3, [r4, #4]
 8012812:	6923      	ldr	r3, [r4, #16]
 8012814:	6023      	str	r3, [r4, #0]
 8012816:	89a3      	ldrh	r3, [r4, #12]
 8012818:	f043 0308 	orr.w	r3, r3, #8
 801281c:	81a3      	strh	r3, [r4, #12]
 801281e:	6923      	ldr	r3, [r4, #16]
 8012820:	b94b      	cbnz	r3, 8012836 <__swsetup_r+0x7a>
 8012822:	89a3      	ldrh	r3, [r4, #12]
 8012824:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801282c:	d003      	beq.n	8012836 <__swsetup_r+0x7a>
 801282e:	4621      	mov	r1, r4
 8012830:	4628      	mov	r0, r5
 8012832:	f000 fd9b 	bl	801336c <__smakebuf_r>
 8012836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801283a:	f013 0201 	ands.w	r2, r3, #1
 801283e:	d00a      	beq.n	8012856 <__swsetup_r+0x9a>
 8012840:	2200      	movs	r2, #0
 8012842:	60a2      	str	r2, [r4, #8]
 8012844:	6962      	ldr	r2, [r4, #20]
 8012846:	4252      	negs	r2, r2
 8012848:	61a2      	str	r2, [r4, #24]
 801284a:	6922      	ldr	r2, [r4, #16]
 801284c:	b942      	cbnz	r2, 8012860 <__swsetup_r+0xa4>
 801284e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012852:	d1c5      	bne.n	80127e0 <__swsetup_r+0x24>
 8012854:	bd38      	pop	{r3, r4, r5, pc}
 8012856:	0799      	lsls	r1, r3, #30
 8012858:	bf58      	it	pl
 801285a:	6962      	ldrpl	r2, [r4, #20]
 801285c:	60a2      	str	r2, [r4, #8]
 801285e:	e7f4      	b.n	801284a <__swsetup_r+0x8e>
 8012860:	2000      	movs	r0, #0
 8012862:	e7f7      	b.n	8012854 <__swsetup_r+0x98>
 8012864:	20000024 	.word	0x20000024

08012868 <memset>:
 8012868:	4402      	add	r2, r0
 801286a:	4603      	mov	r3, r0
 801286c:	4293      	cmp	r3, r2
 801286e:	d100      	bne.n	8012872 <memset+0xa>
 8012870:	4770      	bx	lr
 8012872:	f803 1b01 	strb.w	r1, [r3], #1
 8012876:	e7f9      	b.n	801286c <memset+0x4>

08012878 <_close_r>:
 8012878:	b538      	push	{r3, r4, r5, lr}
 801287a:	4d06      	ldr	r5, [pc, #24]	@ (8012894 <_close_r+0x1c>)
 801287c:	2300      	movs	r3, #0
 801287e:	4604      	mov	r4, r0
 8012880:	4608      	mov	r0, r1
 8012882:	602b      	str	r3, [r5, #0]
 8012884:	f7fb fa80 	bl	800dd88 <_close>
 8012888:	1c43      	adds	r3, r0, #1
 801288a:	d102      	bne.n	8012892 <_close_r+0x1a>
 801288c:	682b      	ldr	r3, [r5, #0]
 801288e:	b103      	cbz	r3, 8012892 <_close_r+0x1a>
 8012890:	6023      	str	r3, [r4, #0]
 8012892:	bd38      	pop	{r3, r4, r5, pc}
 8012894:	20004348 	.word	0x20004348

08012898 <_reclaim_reent>:
 8012898:	4b29      	ldr	r3, [pc, #164]	@ (8012940 <_reclaim_reent+0xa8>)
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	4283      	cmp	r3, r0
 801289e:	b570      	push	{r4, r5, r6, lr}
 80128a0:	4604      	mov	r4, r0
 80128a2:	d04b      	beq.n	801293c <_reclaim_reent+0xa4>
 80128a4:	69c3      	ldr	r3, [r0, #28]
 80128a6:	b1ab      	cbz	r3, 80128d4 <_reclaim_reent+0x3c>
 80128a8:	68db      	ldr	r3, [r3, #12]
 80128aa:	b16b      	cbz	r3, 80128c8 <_reclaim_reent+0x30>
 80128ac:	2500      	movs	r5, #0
 80128ae:	69e3      	ldr	r3, [r4, #28]
 80128b0:	68db      	ldr	r3, [r3, #12]
 80128b2:	5959      	ldr	r1, [r3, r5]
 80128b4:	2900      	cmp	r1, #0
 80128b6:	d13b      	bne.n	8012930 <_reclaim_reent+0x98>
 80128b8:	3504      	adds	r5, #4
 80128ba:	2d80      	cmp	r5, #128	@ 0x80
 80128bc:	d1f7      	bne.n	80128ae <_reclaim_reent+0x16>
 80128be:	69e3      	ldr	r3, [r4, #28]
 80128c0:	4620      	mov	r0, r4
 80128c2:	68d9      	ldr	r1, [r3, #12]
 80128c4:	f000 f8b0 	bl	8012a28 <_free_r>
 80128c8:	69e3      	ldr	r3, [r4, #28]
 80128ca:	6819      	ldr	r1, [r3, #0]
 80128cc:	b111      	cbz	r1, 80128d4 <_reclaim_reent+0x3c>
 80128ce:	4620      	mov	r0, r4
 80128d0:	f000 f8aa 	bl	8012a28 <_free_r>
 80128d4:	6961      	ldr	r1, [r4, #20]
 80128d6:	b111      	cbz	r1, 80128de <_reclaim_reent+0x46>
 80128d8:	4620      	mov	r0, r4
 80128da:	f000 f8a5 	bl	8012a28 <_free_r>
 80128de:	69e1      	ldr	r1, [r4, #28]
 80128e0:	b111      	cbz	r1, 80128e8 <_reclaim_reent+0x50>
 80128e2:	4620      	mov	r0, r4
 80128e4:	f000 f8a0 	bl	8012a28 <_free_r>
 80128e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80128ea:	b111      	cbz	r1, 80128f2 <_reclaim_reent+0x5a>
 80128ec:	4620      	mov	r0, r4
 80128ee:	f000 f89b 	bl	8012a28 <_free_r>
 80128f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80128f4:	b111      	cbz	r1, 80128fc <_reclaim_reent+0x64>
 80128f6:	4620      	mov	r0, r4
 80128f8:	f000 f896 	bl	8012a28 <_free_r>
 80128fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80128fe:	b111      	cbz	r1, 8012906 <_reclaim_reent+0x6e>
 8012900:	4620      	mov	r0, r4
 8012902:	f000 f891 	bl	8012a28 <_free_r>
 8012906:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012908:	b111      	cbz	r1, 8012910 <_reclaim_reent+0x78>
 801290a:	4620      	mov	r0, r4
 801290c:	f000 f88c 	bl	8012a28 <_free_r>
 8012910:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012912:	b111      	cbz	r1, 801291a <_reclaim_reent+0x82>
 8012914:	4620      	mov	r0, r4
 8012916:	f000 f887 	bl	8012a28 <_free_r>
 801291a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801291c:	b111      	cbz	r1, 8012924 <_reclaim_reent+0x8c>
 801291e:	4620      	mov	r0, r4
 8012920:	f000 f882 	bl	8012a28 <_free_r>
 8012924:	6a23      	ldr	r3, [r4, #32]
 8012926:	b14b      	cbz	r3, 801293c <_reclaim_reent+0xa4>
 8012928:	4620      	mov	r0, r4
 801292a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801292e:	4718      	bx	r3
 8012930:	680e      	ldr	r6, [r1, #0]
 8012932:	4620      	mov	r0, r4
 8012934:	f000 f878 	bl	8012a28 <_free_r>
 8012938:	4631      	mov	r1, r6
 801293a:	e7bb      	b.n	80128b4 <_reclaim_reent+0x1c>
 801293c:	bd70      	pop	{r4, r5, r6, pc}
 801293e:	bf00      	nop
 8012940:	20000024 	.word	0x20000024

08012944 <_lseek_r>:
 8012944:	b538      	push	{r3, r4, r5, lr}
 8012946:	4d07      	ldr	r5, [pc, #28]	@ (8012964 <_lseek_r+0x20>)
 8012948:	4604      	mov	r4, r0
 801294a:	4608      	mov	r0, r1
 801294c:	4611      	mov	r1, r2
 801294e:	2200      	movs	r2, #0
 8012950:	602a      	str	r2, [r5, #0]
 8012952:	461a      	mov	r2, r3
 8012954:	f7fb fa2f 	bl	800ddb6 <_lseek>
 8012958:	1c43      	adds	r3, r0, #1
 801295a:	d102      	bne.n	8012962 <_lseek_r+0x1e>
 801295c:	682b      	ldr	r3, [r5, #0]
 801295e:	b103      	cbz	r3, 8012962 <_lseek_r+0x1e>
 8012960:	6023      	str	r3, [r4, #0]
 8012962:	bd38      	pop	{r3, r4, r5, pc}
 8012964:	20004348 	.word	0x20004348

08012968 <_read_r>:
 8012968:	b538      	push	{r3, r4, r5, lr}
 801296a:	4d07      	ldr	r5, [pc, #28]	@ (8012988 <_read_r+0x20>)
 801296c:	4604      	mov	r4, r0
 801296e:	4608      	mov	r0, r1
 8012970:	4611      	mov	r1, r2
 8012972:	2200      	movs	r2, #0
 8012974:	602a      	str	r2, [r5, #0]
 8012976:	461a      	mov	r2, r3
 8012978:	f7fb fa2e 	bl	800ddd8 <_read>
 801297c:	1c43      	adds	r3, r0, #1
 801297e:	d102      	bne.n	8012986 <_read_r+0x1e>
 8012980:	682b      	ldr	r3, [r5, #0]
 8012982:	b103      	cbz	r3, 8012986 <_read_r+0x1e>
 8012984:	6023      	str	r3, [r4, #0]
 8012986:	bd38      	pop	{r3, r4, r5, pc}
 8012988:	20004348 	.word	0x20004348

0801298c <_write_r>:
 801298c:	b538      	push	{r3, r4, r5, lr}
 801298e:	4d07      	ldr	r5, [pc, #28]	@ (80129ac <_write_r+0x20>)
 8012990:	4604      	mov	r4, r0
 8012992:	4608      	mov	r0, r1
 8012994:	4611      	mov	r1, r2
 8012996:	2200      	movs	r2, #0
 8012998:	602a      	str	r2, [r5, #0]
 801299a:	461a      	mov	r2, r3
 801299c:	f7fb f9c8 	bl	800dd30 <_write>
 80129a0:	1c43      	adds	r3, r0, #1
 80129a2:	d102      	bne.n	80129aa <_write_r+0x1e>
 80129a4:	682b      	ldr	r3, [r5, #0]
 80129a6:	b103      	cbz	r3, 80129aa <_write_r+0x1e>
 80129a8:	6023      	str	r3, [r4, #0]
 80129aa:	bd38      	pop	{r3, r4, r5, pc}
 80129ac:	20004348 	.word	0x20004348

080129b0 <__errno>:
 80129b0:	4b01      	ldr	r3, [pc, #4]	@ (80129b8 <__errno+0x8>)
 80129b2:	6818      	ldr	r0, [r3, #0]
 80129b4:	4770      	bx	lr
 80129b6:	bf00      	nop
 80129b8:	20000024 	.word	0x20000024

080129bc <__libc_init_array>:
 80129bc:	b570      	push	{r4, r5, r6, lr}
 80129be:	4d0d      	ldr	r5, [pc, #52]	@ (80129f4 <__libc_init_array+0x38>)
 80129c0:	4c0d      	ldr	r4, [pc, #52]	@ (80129f8 <__libc_init_array+0x3c>)
 80129c2:	1b64      	subs	r4, r4, r5
 80129c4:	10a4      	asrs	r4, r4, #2
 80129c6:	2600      	movs	r6, #0
 80129c8:	42a6      	cmp	r6, r4
 80129ca:	d109      	bne.n	80129e0 <__libc_init_array+0x24>
 80129cc:	4d0b      	ldr	r5, [pc, #44]	@ (80129fc <__libc_init_array+0x40>)
 80129ce:	4c0c      	ldr	r4, [pc, #48]	@ (8012a00 <__libc_init_array+0x44>)
 80129d0:	f000 fd3a 	bl	8013448 <_init>
 80129d4:	1b64      	subs	r4, r4, r5
 80129d6:	10a4      	asrs	r4, r4, #2
 80129d8:	2600      	movs	r6, #0
 80129da:	42a6      	cmp	r6, r4
 80129dc:	d105      	bne.n	80129ea <__libc_init_array+0x2e>
 80129de:	bd70      	pop	{r4, r5, r6, pc}
 80129e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80129e4:	4798      	blx	r3
 80129e6:	3601      	adds	r6, #1
 80129e8:	e7ee      	b.n	80129c8 <__libc_init_array+0xc>
 80129ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80129ee:	4798      	blx	r3
 80129f0:	3601      	adds	r6, #1
 80129f2:	e7f2      	b.n	80129da <__libc_init_array+0x1e>
 80129f4:	08013940 	.word	0x08013940
 80129f8:	08013940 	.word	0x08013940
 80129fc:	08013940 	.word	0x08013940
 8012a00:	08013944 	.word	0x08013944

08012a04 <__retarget_lock_init_recursive>:
 8012a04:	4770      	bx	lr

08012a06 <__retarget_lock_acquire_recursive>:
 8012a06:	4770      	bx	lr

08012a08 <__retarget_lock_release_recursive>:
 8012a08:	4770      	bx	lr

08012a0a <memcpy>:
 8012a0a:	440a      	add	r2, r1
 8012a0c:	4291      	cmp	r1, r2
 8012a0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a12:	d100      	bne.n	8012a16 <memcpy+0xc>
 8012a14:	4770      	bx	lr
 8012a16:	b510      	push	{r4, lr}
 8012a18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a20:	4291      	cmp	r1, r2
 8012a22:	d1f9      	bne.n	8012a18 <memcpy+0xe>
 8012a24:	bd10      	pop	{r4, pc}
	...

08012a28 <_free_r>:
 8012a28:	b538      	push	{r3, r4, r5, lr}
 8012a2a:	4605      	mov	r5, r0
 8012a2c:	2900      	cmp	r1, #0
 8012a2e:	d041      	beq.n	8012ab4 <_free_r+0x8c>
 8012a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a34:	1f0c      	subs	r4, r1, #4
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	bfb8      	it	lt
 8012a3a:	18e4      	addlt	r4, r4, r3
 8012a3c:	f000 f8e8 	bl	8012c10 <__malloc_lock>
 8012a40:	4a1d      	ldr	r2, [pc, #116]	@ (8012ab8 <_free_r+0x90>)
 8012a42:	6813      	ldr	r3, [r2, #0]
 8012a44:	b933      	cbnz	r3, 8012a54 <_free_r+0x2c>
 8012a46:	6063      	str	r3, [r4, #4]
 8012a48:	6014      	str	r4, [r2, #0]
 8012a4a:	4628      	mov	r0, r5
 8012a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012a50:	f000 b8e4 	b.w	8012c1c <__malloc_unlock>
 8012a54:	42a3      	cmp	r3, r4
 8012a56:	d908      	bls.n	8012a6a <_free_r+0x42>
 8012a58:	6820      	ldr	r0, [r4, #0]
 8012a5a:	1821      	adds	r1, r4, r0
 8012a5c:	428b      	cmp	r3, r1
 8012a5e:	bf01      	itttt	eq
 8012a60:	6819      	ldreq	r1, [r3, #0]
 8012a62:	685b      	ldreq	r3, [r3, #4]
 8012a64:	1809      	addeq	r1, r1, r0
 8012a66:	6021      	streq	r1, [r4, #0]
 8012a68:	e7ed      	b.n	8012a46 <_free_r+0x1e>
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	b10b      	cbz	r3, 8012a74 <_free_r+0x4c>
 8012a70:	42a3      	cmp	r3, r4
 8012a72:	d9fa      	bls.n	8012a6a <_free_r+0x42>
 8012a74:	6811      	ldr	r1, [r2, #0]
 8012a76:	1850      	adds	r0, r2, r1
 8012a78:	42a0      	cmp	r0, r4
 8012a7a:	d10b      	bne.n	8012a94 <_free_r+0x6c>
 8012a7c:	6820      	ldr	r0, [r4, #0]
 8012a7e:	4401      	add	r1, r0
 8012a80:	1850      	adds	r0, r2, r1
 8012a82:	4283      	cmp	r3, r0
 8012a84:	6011      	str	r1, [r2, #0]
 8012a86:	d1e0      	bne.n	8012a4a <_free_r+0x22>
 8012a88:	6818      	ldr	r0, [r3, #0]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	6053      	str	r3, [r2, #4]
 8012a8e:	4408      	add	r0, r1
 8012a90:	6010      	str	r0, [r2, #0]
 8012a92:	e7da      	b.n	8012a4a <_free_r+0x22>
 8012a94:	d902      	bls.n	8012a9c <_free_r+0x74>
 8012a96:	230c      	movs	r3, #12
 8012a98:	602b      	str	r3, [r5, #0]
 8012a9a:	e7d6      	b.n	8012a4a <_free_r+0x22>
 8012a9c:	6820      	ldr	r0, [r4, #0]
 8012a9e:	1821      	adds	r1, r4, r0
 8012aa0:	428b      	cmp	r3, r1
 8012aa2:	bf04      	itt	eq
 8012aa4:	6819      	ldreq	r1, [r3, #0]
 8012aa6:	685b      	ldreq	r3, [r3, #4]
 8012aa8:	6063      	str	r3, [r4, #4]
 8012aaa:	bf04      	itt	eq
 8012aac:	1809      	addeq	r1, r1, r0
 8012aae:	6021      	streq	r1, [r4, #0]
 8012ab0:	6054      	str	r4, [r2, #4]
 8012ab2:	e7ca      	b.n	8012a4a <_free_r+0x22>
 8012ab4:	bd38      	pop	{r3, r4, r5, pc}
 8012ab6:	bf00      	nop
 8012ab8:	20004354 	.word	0x20004354

08012abc <malloc>:
 8012abc:	4b02      	ldr	r3, [pc, #8]	@ (8012ac8 <malloc+0xc>)
 8012abe:	4601      	mov	r1, r0
 8012ac0:	6818      	ldr	r0, [r3, #0]
 8012ac2:	f000 b825 	b.w	8012b10 <_malloc_r>
 8012ac6:	bf00      	nop
 8012ac8:	20000024 	.word	0x20000024

08012acc <sbrk_aligned>:
 8012acc:	b570      	push	{r4, r5, r6, lr}
 8012ace:	4e0f      	ldr	r6, [pc, #60]	@ (8012b0c <sbrk_aligned+0x40>)
 8012ad0:	460c      	mov	r4, r1
 8012ad2:	6831      	ldr	r1, [r6, #0]
 8012ad4:	4605      	mov	r5, r0
 8012ad6:	b911      	cbnz	r1, 8012ade <sbrk_aligned+0x12>
 8012ad8:	f000 fca6 	bl	8013428 <_sbrk_r>
 8012adc:	6030      	str	r0, [r6, #0]
 8012ade:	4621      	mov	r1, r4
 8012ae0:	4628      	mov	r0, r5
 8012ae2:	f000 fca1 	bl	8013428 <_sbrk_r>
 8012ae6:	1c43      	adds	r3, r0, #1
 8012ae8:	d103      	bne.n	8012af2 <sbrk_aligned+0x26>
 8012aea:	f04f 34ff 	mov.w	r4, #4294967295
 8012aee:	4620      	mov	r0, r4
 8012af0:	bd70      	pop	{r4, r5, r6, pc}
 8012af2:	1cc4      	adds	r4, r0, #3
 8012af4:	f024 0403 	bic.w	r4, r4, #3
 8012af8:	42a0      	cmp	r0, r4
 8012afa:	d0f8      	beq.n	8012aee <sbrk_aligned+0x22>
 8012afc:	1a21      	subs	r1, r4, r0
 8012afe:	4628      	mov	r0, r5
 8012b00:	f000 fc92 	bl	8013428 <_sbrk_r>
 8012b04:	3001      	adds	r0, #1
 8012b06:	d1f2      	bne.n	8012aee <sbrk_aligned+0x22>
 8012b08:	e7ef      	b.n	8012aea <sbrk_aligned+0x1e>
 8012b0a:	bf00      	nop
 8012b0c:	20004350 	.word	0x20004350

08012b10 <_malloc_r>:
 8012b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b14:	1ccd      	adds	r5, r1, #3
 8012b16:	f025 0503 	bic.w	r5, r5, #3
 8012b1a:	3508      	adds	r5, #8
 8012b1c:	2d0c      	cmp	r5, #12
 8012b1e:	bf38      	it	cc
 8012b20:	250c      	movcc	r5, #12
 8012b22:	2d00      	cmp	r5, #0
 8012b24:	4606      	mov	r6, r0
 8012b26:	db01      	blt.n	8012b2c <_malloc_r+0x1c>
 8012b28:	42a9      	cmp	r1, r5
 8012b2a:	d904      	bls.n	8012b36 <_malloc_r+0x26>
 8012b2c:	230c      	movs	r3, #12
 8012b2e:	6033      	str	r3, [r6, #0]
 8012b30:	2000      	movs	r0, #0
 8012b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012c0c <_malloc_r+0xfc>
 8012b3a:	f000 f869 	bl	8012c10 <__malloc_lock>
 8012b3e:	f8d8 3000 	ldr.w	r3, [r8]
 8012b42:	461c      	mov	r4, r3
 8012b44:	bb44      	cbnz	r4, 8012b98 <_malloc_r+0x88>
 8012b46:	4629      	mov	r1, r5
 8012b48:	4630      	mov	r0, r6
 8012b4a:	f7ff ffbf 	bl	8012acc <sbrk_aligned>
 8012b4e:	1c43      	adds	r3, r0, #1
 8012b50:	4604      	mov	r4, r0
 8012b52:	d158      	bne.n	8012c06 <_malloc_r+0xf6>
 8012b54:	f8d8 4000 	ldr.w	r4, [r8]
 8012b58:	4627      	mov	r7, r4
 8012b5a:	2f00      	cmp	r7, #0
 8012b5c:	d143      	bne.n	8012be6 <_malloc_r+0xd6>
 8012b5e:	2c00      	cmp	r4, #0
 8012b60:	d04b      	beq.n	8012bfa <_malloc_r+0xea>
 8012b62:	6823      	ldr	r3, [r4, #0]
 8012b64:	4639      	mov	r1, r7
 8012b66:	4630      	mov	r0, r6
 8012b68:	eb04 0903 	add.w	r9, r4, r3
 8012b6c:	f000 fc5c 	bl	8013428 <_sbrk_r>
 8012b70:	4581      	cmp	r9, r0
 8012b72:	d142      	bne.n	8012bfa <_malloc_r+0xea>
 8012b74:	6821      	ldr	r1, [r4, #0]
 8012b76:	1a6d      	subs	r5, r5, r1
 8012b78:	4629      	mov	r1, r5
 8012b7a:	4630      	mov	r0, r6
 8012b7c:	f7ff ffa6 	bl	8012acc <sbrk_aligned>
 8012b80:	3001      	adds	r0, #1
 8012b82:	d03a      	beq.n	8012bfa <_malloc_r+0xea>
 8012b84:	6823      	ldr	r3, [r4, #0]
 8012b86:	442b      	add	r3, r5
 8012b88:	6023      	str	r3, [r4, #0]
 8012b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8012b8e:	685a      	ldr	r2, [r3, #4]
 8012b90:	bb62      	cbnz	r2, 8012bec <_malloc_r+0xdc>
 8012b92:	f8c8 7000 	str.w	r7, [r8]
 8012b96:	e00f      	b.n	8012bb8 <_malloc_r+0xa8>
 8012b98:	6822      	ldr	r2, [r4, #0]
 8012b9a:	1b52      	subs	r2, r2, r5
 8012b9c:	d420      	bmi.n	8012be0 <_malloc_r+0xd0>
 8012b9e:	2a0b      	cmp	r2, #11
 8012ba0:	d917      	bls.n	8012bd2 <_malloc_r+0xc2>
 8012ba2:	1961      	adds	r1, r4, r5
 8012ba4:	42a3      	cmp	r3, r4
 8012ba6:	6025      	str	r5, [r4, #0]
 8012ba8:	bf18      	it	ne
 8012baa:	6059      	strne	r1, [r3, #4]
 8012bac:	6863      	ldr	r3, [r4, #4]
 8012bae:	bf08      	it	eq
 8012bb0:	f8c8 1000 	streq.w	r1, [r8]
 8012bb4:	5162      	str	r2, [r4, r5]
 8012bb6:	604b      	str	r3, [r1, #4]
 8012bb8:	4630      	mov	r0, r6
 8012bba:	f000 f82f 	bl	8012c1c <__malloc_unlock>
 8012bbe:	f104 000b 	add.w	r0, r4, #11
 8012bc2:	1d23      	adds	r3, r4, #4
 8012bc4:	f020 0007 	bic.w	r0, r0, #7
 8012bc8:	1ac2      	subs	r2, r0, r3
 8012bca:	bf1c      	itt	ne
 8012bcc:	1a1b      	subne	r3, r3, r0
 8012bce:	50a3      	strne	r3, [r4, r2]
 8012bd0:	e7af      	b.n	8012b32 <_malloc_r+0x22>
 8012bd2:	6862      	ldr	r2, [r4, #4]
 8012bd4:	42a3      	cmp	r3, r4
 8012bd6:	bf0c      	ite	eq
 8012bd8:	f8c8 2000 	streq.w	r2, [r8]
 8012bdc:	605a      	strne	r2, [r3, #4]
 8012bde:	e7eb      	b.n	8012bb8 <_malloc_r+0xa8>
 8012be0:	4623      	mov	r3, r4
 8012be2:	6864      	ldr	r4, [r4, #4]
 8012be4:	e7ae      	b.n	8012b44 <_malloc_r+0x34>
 8012be6:	463c      	mov	r4, r7
 8012be8:	687f      	ldr	r7, [r7, #4]
 8012bea:	e7b6      	b.n	8012b5a <_malloc_r+0x4a>
 8012bec:	461a      	mov	r2, r3
 8012bee:	685b      	ldr	r3, [r3, #4]
 8012bf0:	42a3      	cmp	r3, r4
 8012bf2:	d1fb      	bne.n	8012bec <_malloc_r+0xdc>
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	6053      	str	r3, [r2, #4]
 8012bf8:	e7de      	b.n	8012bb8 <_malloc_r+0xa8>
 8012bfa:	230c      	movs	r3, #12
 8012bfc:	6033      	str	r3, [r6, #0]
 8012bfe:	4630      	mov	r0, r6
 8012c00:	f000 f80c 	bl	8012c1c <__malloc_unlock>
 8012c04:	e794      	b.n	8012b30 <_malloc_r+0x20>
 8012c06:	6005      	str	r5, [r0, #0]
 8012c08:	e7d6      	b.n	8012bb8 <_malloc_r+0xa8>
 8012c0a:	bf00      	nop
 8012c0c:	20004354 	.word	0x20004354

08012c10 <__malloc_lock>:
 8012c10:	4801      	ldr	r0, [pc, #4]	@ (8012c18 <__malloc_lock+0x8>)
 8012c12:	f7ff bef8 	b.w	8012a06 <__retarget_lock_acquire_recursive>
 8012c16:	bf00      	nop
 8012c18:	2000434c 	.word	0x2000434c

08012c1c <__malloc_unlock>:
 8012c1c:	4801      	ldr	r0, [pc, #4]	@ (8012c24 <__malloc_unlock+0x8>)
 8012c1e:	f7ff bef3 	b.w	8012a08 <__retarget_lock_release_recursive>
 8012c22:	bf00      	nop
 8012c24:	2000434c 	.word	0x2000434c

08012c28 <__sfputc_r>:
 8012c28:	6893      	ldr	r3, [r2, #8]
 8012c2a:	3b01      	subs	r3, #1
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	b410      	push	{r4}
 8012c30:	6093      	str	r3, [r2, #8]
 8012c32:	da08      	bge.n	8012c46 <__sfputc_r+0x1e>
 8012c34:	6994      	ldr	r4, [r2, #24]
 8012c36:	42a3      	cmp	r3, r4
 8012c38:	db01      	blt.n	8012c3e <__sfputc_r+0x16>
 8012c3a:	290a      	cmp	r1, #10
 8012c3c:	d103      	bne.n	8012c46 <__sfputc_r+0x1e>
 8012c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c42:	f7ff bd7c 	b.w	801273e <__swbuf_r>
 8012c46:	6813      	ldr	r3, [r2, #0]
 8012c48:	1c58      	adds	r0, r3, #1
 8012c4a:	6010      	str	r0, [r2, #0]
 8012c4c:	7019      	strb	r1, [r3, #0]
 8012c4e:	4608      	mov	r0, r1
 8012c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c54:	4770      	bx	lr

08012c56 <__sfputs_r>:
 8012c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c58:	4606      	mov	r6, r0
 8012c5a:	460f      	mov	r7, r1
 8012c5c:	4614      	mov	r4, r2
 8012c5e:	18d5      	adds	r5, r2, r3
 8012c60:	42ac      	cmp	r4, r5
 8012c62:	d101      	bne.n	8012c68 <__sfputs_r+0x12>
 8012c64:	2000      	movs	r0, #0
 8012c66:	e007      	b.n	8012c78 <__sfputs_r+0x22>
 8012c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c6c:	463a      	mov	r2, r7
 8012c6e:	4630      	mov	r0, r6
 8012c70:	f7ff ffda 	bl	8012c28 <__sfputc_r>
 8012c74:	1c43      	adds	r3, r0, #1
 8012c76:	d1f3      	bne.n	8012c60 <__sfputs_r+0xa>
 8012c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c7c <_vfiprintf_r>:
 8012c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c80:	460d      	mov	r5, r1
 8012c82:	b09d      	sub	sp, #116	@ 0x74
 8012c84:	4614      	mov	r4, r2
 8012c86:	4698      	mov	r8, r3
 8012c88:	4606      	mov	r6, r0
 8012c8a:	b118      	cbz	r0, 8012c94 <_vfiprintf_r+0x18>
 8012c8c:	6a03      	ldr	r3, [r0, #32]
 8012c8e:	b90b      	cbnz	r3, 8012c94 <_vfiprintf_r+0x18>
 8012c90:	f7ff fb36 	bl	8012300 <__sinit>
 8012c94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012c96:	07d9      	lsls	r1, r3, #31
 8012c98:	d405      	bmi.n	8012ca6 <_vfiprintf_r+0x2a>
 8012c9a:	89ab      	ldrh	r3, [r5, #12]
 8012c9c:	059a      	lsls	r2, r3, #22
 8012c9e:	d402      	bmi.n	8012ca6 <_vfiprintf_r+0x2a>
 8012ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ca2:	f7ff feb0 	bl	8012a06 <__retarget_lock_acquire_recursive>
 8012ca6:	89ab      	ldrh	r3, [r5, #12]
 8012ca8:	071b      	lsls	r3, r3, #28
 8012caa:	d501      	bpl.n	8012cb0 <_vfiprintf_r+0x34>
 8012cac:	692b      	ldr	r3, [r5, #16]
 8012cae:	b99b      	cbnz	r3, 8012cd8 <_vfiprintf_r+0x5c>
 8012cb0:	4629      	mov	r1, r5
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f7ff fd82 	bl	80127bc <__swsetup_r>
 8012cb8:	b170      	cbz	r0, 8012cd8 <_vfiprintf_r+0x5c>
 8012cba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cbc:	07dc      	lsls	r4, r3, #31
 8012cbe:	d504      	bpl.n	8012cca <_vfiprintf_r+0x4e>
 8012cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012cc4:	b01d      	add	sp, #116	@ 0x74
 8012cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cca:	89ab      	ldrh	r3, [r5, #12]
 8012ccc:	0598      	lsls	r0, r3, #22
 8012cce:	d4f7      	bmi.n	8012cc0 <_vfiprintf_r+0x44>
 8012cd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012cd2:	f7ff fe99 	bl	8012a08 <__retarget_lock_release_recursive>
 8012cd6:	e7f3      	b.n	8012cc0 <_vfiprintf_r+0x44>
 8012cd8:	2300      	movs	r3, #0
 8012cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cdc:	2320      	movs	r3, #32
 8012cde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012ce2:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ce6:	2330      	movs	r3, #48	@ 0x30
 8012ce8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012e98 <_vfiprintf_r+0x21c>
 8012cec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012cf0:	f04f 0901 	mov.w	r9, #1
 8012cf4:	4623      	mov	r3, r4
 8012cf6:	469a      	mov	sl, r3
 8012cf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cfc:	b10a      	cbz	r2, 8012d02 <_vfiprintf_r+0x86>
 8012cfe:	2a25      	cmp	r2, #37	@ 0x25
 8012d00:	d1f9      	bne.n	8012cf6 <_vfiprintf_r+0x7a>
 8012d02:	ebba 0b04 	subs.w	fp, sl, r4
 8012d06:	d00b      	beq.n	8012d20 <_vfiprintf_r+0xa4>
 8012d08:	465b      	mov	r3, fp
 8012d0a:	4622      	mov	r2, r4
 8012d0c:	4629      	mov	r1, r5
 8012d0e:	4630      	mov	r0, r6
 8012d10:	f7ff ffa1 	bl	8012c56 <__sfputs_r>
 8012d14:	3001      	adds	r0, #1
 8012d16:	f000 80a7 	beq.w	8012e68 <_vfiprintf_r+0x1ec>
 8012d1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d1c:	445a      	add	r2, fp
 8012d1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d20:	f89a 3000 	ldrb.w	r3, [sl]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	f000 809f 	beq.w	8012e68 <_vfiprintf_r+0x1ec>
 8012d2a:	2300      	movs	r3, #0
 8012d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8012d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d34:	f10a 0a01 	add.w	sl, sl, #1
 8012d38:	9304      	str	r3, [sp, #16]
 8012d3a:	9307      	str	r3, [sp, #28]
 8012d3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d40:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d42:	4654      	mov	r4, sl
 8012d44:	2205      	movs	r2, #5
 8012d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d4a:	4853      	ldr	r0, [pc, #332]	@ (8012e98 <_vfiprintf_r+0x21c>)
 8012d4c:	f7f9 f978 	bl	800c040 <memchr>
 8012d50:	9a04      	ldr	r2, [sp, #16]
 8012d52:	b9d8      	cbnz	r0, 8012d8c <_vfiprintf_r+0x110>
 8012d54:	06d1      	lsls	r1, r2, #27
 8012d56:	bf44      	itt	mi
 8012d58:	2320      	movmi	r3, #32
 8012d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d5e:	0713      	lsls	r3, r2, #28
 8012d60:	bf44      	itt	mi
 8012d62:	232b      	movmi	r3, #43	@ 0x2b
 8012d64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012d68:	f89a 3000 	ldrb.w	r3, [sl]
 8012d6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8012d6e:	d015      	beq.n	8012d9c <_vfiprintf_r+0x120>
 8012d70:	9a07      	ldr	r2, [sp, #28]
 8012d72:	4654      	mov	r4, sl
 8012d74:	2000      	movs	r0, #0
 8012d76:	f04f 0c0a 	mov.w	ip, #10
 8012d7a:	4621      	mov	r1, r4
 8012d7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012d80:	3b30      	subs	r3, #48	@ 0x30
 8012d82:	2b09      	cmp	r3, #9
 8012d84:	d94b      	bls.n	8012e1e <_vfiprintf_r+0x1a2>
 8012d86:	b1b0      	cbz	r0, 8012db6 <_vfiprintf_r+0x13a>
 8012d88:	9207      	str	r2, [sp, #28]
 8012d8a:	e014      	b.n	8012db6 <_vfiprintf_r+0x13a>
 8012d8c:	eba0 0308 	sub.w	r3, r0, r8
 8012d90:	fa09 f303 	lsl.w	r3, r9, r3
 8012d94:	4313      	orrs	r3, r2
 8012d96:	9304      	str	r3, [sp, #16]
 8012d98:	46a2      	mov	sl, r4
 8012d9a:	e7d2      	b.n	8012d42 <_vfiprintf_r+0xc6>
 8012d9c:	9b03      	ldr	r3, [sp, #12]
 8012d9e:	1d19      	adds	r1, r3, #4
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	9103      	str	r1, [sp, #12]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	bfbb      	ittet	lt
 8012da8:	425b      	neglt	r3, r3
 8012daa:	f042 0202 	orrlt.w	r2, r2, #2
 8012dae:	9307      	strge	r3, [sp, #28]
 8012db0:	9307      	strlt	r3, [sp, #28]
 8012db2:	bfb8      	it	lt
 8012db4:	9204      	strlt	r2, [sp, #16]
 8012db6:	7823      	ldrb	r3, [r4, #0]
 8012db8:	2b2e      	cmp	r3, #46	@ 0x2e
 8012dba:	d10a      	bne.n	8012dd2 <_vfiprintf_r+0x156>
 8012dbc:	7863      	ldrb	r3, [r4, #1]
 8012dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dc0:	d132      	bne.n	8012e28 <_vfiprintf_r+0x1ac>
 8012dc2:	9b03      	ldr	r3, [sp, #12]
 8012dc4:	1d1a      	adds	r2, r3, #4
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	9203      	str	r2, [sp, #12]
 8012dca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012dce:	3402      	adds	r4, #2
 8012dd0:	9305      	str	r3, [sp, #20]
 8012dd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012ea8 <_vfiprintf_r+0x22c>
 8012dd6:	7821      	ldrb	r1, [r4, #0]
 8012dd8:	2203      	movs	r2, #3
 8012dda:	4650      	mov	r0, sl
 8012ddc:	f7f9 f930 	bl	800c040 <memchr>
 8012de0:	b138      	cbz	r0, 8012df2 <_vfiprintf_r+0x176>
 8012de2:	9b04      	ldr	r3, [sp, #16]
 8012de4:	eba0 000a 	sub.w	r0, r0, sl
 8012de8:	2240      	movs	r2, #64	@ 0x40
 8012dea:	4082      	lsls	r2, r0
 8012dec:	4313      	orrs	r3, r2
 8012dee:	3401      	adds	r4, #1
 8012df0:	9304      	str	r3, [sp, #16]
 8012df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012df6:	4829      	ldr	r0, [pc, #164]	@ (8012e9c <_vfiprintf_r+0x220>)
 8012df8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012dfc:	2206      	movs	r2, #6
 8012dfe:	f7f9 f91f 	bl	800c040 <memchr>
 8012e02:	2800      	cmp	r0, #0
 8012e04:	d03f      	beq.n	8012e86 <_vfiprintf_r+0x20a>
 8012e06:	4b26      	ldr	r3, [pc, #152]	@ (8012ea0 <_vfiprintf_r+0x224>)
 8012e08:	bb1b      	cbnz	r3, 8012e52 <_vfiprintf_r+0x1d6>
 8012e0a:	9b03      	ldr	r3, [sp, #12]
 8012e0c:	3307      	adds	r3, #7
 8012e0e:	f023 0307 	bic.w	r3, r3, #7
 8012e12:	3308      	adds	r3, #8
 8012e14:	9303      	str	r3, [sp, #12]
 8012e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e18:	443b      	add	r3, r7
 8012e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e1c:	e76a      	b.n	8012cf4 <_vfiprintf_r+0x78>
 8012e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e22:	460c      	mov	r4, r1
 8012e24:	2001      	movs	r0, #1
 8012e26:	e7a8      	b.n	8012d7a <_vfiprintf_r+0xfe>
 8012e28:	2300      	movs	r3, #0
 8012e2a:	3401      	adds	r4, #1
 8012e2c:	9305      	str	r3, [sp, #20]
 8012e2e:	4619      	mov	r1, r3
 8012e30:	f04f 0c0a 	mov.w	ip, #10
 8012e34:	4620      	mov	r0, r4
 8012e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e3a:	3a30      	subs	r2, #48	@ 0x30
 8012e3c:	2a09      	cmp	r2, #9
 8012e3e:	d903      	bls.n	8012e48 <_vfiprintf_r+0x1cc>
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d0c6      	beq.n	8012dd2 <_vfiprintf_r+0x156>
 8012e44:	9105      	str	r1, [sp, #20]
 8012e46:	e7c4      	b.n	8012dd2 <_vfiprintf_r+0x156>
 8012e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e4c:	4604      	mov	r4, r0
 8012e4e:	2301      	movs	r3, #1
 8012e50:	e7f0      	b.n	8012e34 <_vfiprintf_r+0x1b8>
 8012e52:	ab03      	add	r3, sp, #12
 8012e54:	9300      	str	r3, [sp, #0]
 8012e56:	462a      	mov	r2, r5
 8012e58:	4b12      	ldr	r3, [pc, #72]	@ (8012ea4 <_vfiprintf_r+0x228>)
 8012e5a:	a904      	add	r1, sp, #16
 8012e5c:	4630      	mov	r0, r6
 8012e5e:	f3af 8000 	nop.w
 8012e62:	4607      	mov	r7, r0
 8012e64:	1c78      	adds	r0, r7, #1
 8012e66:	d1d6      	bne.n	8012e16 <_vfiprintf_r+0x19a>
 8012e68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012e6a:	07d9      	lsls	r1, r3, #31
 8012e6c:	d405      	bmi.n	8012e7a <_vfiprintf_r+0x1fe>
 8012e6e:	89ab      	ldrh	r3, [r5, #12]
 8012e70:	059a      	lsls	r2, r3, #22
 8012e72:	d402      	bmi.n	8012e7a <_vfiprintf_r+0x1fe>
 8012e74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012e76:	f7ff fdc7 	bl	8012a08 <__retarget_lock_release_recursive>
 8012e7a:	89ab      	ldrh	r3, [r5, #12]
 8012e7c:	065b      	lsls	r3, r3, #25
 8012e7e:	f53f af1f 	bmi.w	8012cc0 <_vfiprintf_r+0x44>
 8012e82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012e84:	e71e      	b.n	8012cc4 <_vfiprintf_r+0x48>
 8012e86:	ab03      	add	r3, sp, #12
 8012e88:	9300      	str	r3, [sp, #0]
 8012e8a:	462a      	mov	r2, r5
 8012e8c:	4b05      	ldr	r3, [pc, #20]	@ (8012ea4 <_vfiprintf_r+0x228>)
 8012e8e:	a904      	add	r1, sp, #16
 8012e90:	4630      	mov	r0, r6
 8012e92:	f000 f879 	bl	8012f88 <_printf_i>
 8012e96:	e7e4      	b.n	8012e62 <_vfiprintf_r+0x1e6>
 8012e98:	08013904 	.word	0x08013904
 8012e9c:	0801390e 	.word	0x0801390e
 8012ea0:	00000000 	.word	0x00000000
 8012ea4:	08012c57 	.word	0x08012c57
 8012ea8:	0801390a 	.word	0x0801390a

08012eac <_printf_common>:
 8012eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012eb0:	4616      	mov	r6, r2
 8012eb2:	4698      	mov	r8, r3
 8012eb4:	688a      	ldr	r2, [r1, #8]
 8012eb6:	690b      	ldr	r3, [r1, #16]
 8012eb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012ebc:	4293      	cmp	r3, r2
 8012ebe:	bfb8      	it	lt
 8012ec0:	4613      	movlt	r3, r2
 8012ec2:	6033      	str	r3, [r6, #0]
 8012ec4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012ec8:	4607      	mov	r7, r0
 8012eca:	460c      	mov	r4, r1
 8012ecc:	b10a      	cbz	r2, 8012ed2 <_printf_common+0x26>
 8012ece:	3301      	adds	r3, #1
 8012ed0:	6033      	str	r3, [r6, #0]
 8012ed2:	6823      	ldr	r3, [r4, #0]
 8012ed4:	0699      	lsls	r1, r3, #26
 8012ed6:	bf42      	ittt	mi
 8012ed8:	6833      	ldrmi	r3, [r6, #0]
 8012eda:	3302      	addmi	r3, #2
 8012edc:	6033      	strmi	r3, [r6, #0]
 8012ede:	6825      	ldr	r5, [r4, #0]
 8012ee0:	f015 0506 	ands.w	r5, r5, #6
 8012ee4:	d106      	bne.n	8012ef4 <_printf_common+0x48>
 8012ee6:	f104 0a19 	add.w	sl, r4, #25
 8012eea:	68e3      	ldr	r3, [r4, #12]
 8012eec:	6832      	ldr	r2, [r6, #0]
 8012eee:	1a9b      	subs	r3, r3, r2
 8012ef0:	42ab      	cmp	r3, r5
 8012ef2:	dc26      	bgt.n	8012f42 <_printf_common+0x96>
 8012ef4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012ef8:	6822      	ldr	r2, [r4, #0]
 8012efa:	3b00      	subs	r3, #0
 8012efc:	bf18      	it	ne
 8012efe:	2301      	movne	r3, #1
 8012f00:	0692      	lsls	r2, r2, #26
 8012f02:	d42b      	bmi.n	8012f5c <_printf_common+0xb0>
 8012f04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012f08:	4641      	mov	r1, r8
 8012f0a:	4638      	mov	r0, r7
 8012f0c:	47c8      	blx	r9
 8012f0e:	3001      	adds	r0, #1
 8012f10:	d01e      	beq.n	8012f50 <_printf_common+0xa4>
 8012f12:	6823      	ldr	r3, [r4, #0]
 8012f14:	6922      	ldr	r2, [r4, #16]
 8012f16:	f003 0306 	and.w	r3, r3, #6
 8012f1a:	2b04      	cmp	r3, #4
 8012f1c:	bf02      	ittt	eq
 8012f1e:	68e5      	ldreq	r5, [r4, #12]
 8012f20:	6833      	ldreq	r3, [r6, #0]
 8012f22:	1aed      	subeq	r5, r5, r3
 8012f24:	68a3      	ldr	r3, [r4, #8]
 8012f26:	bf0c      	ite	eq
 8012f28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f2c:	2500      	movne	r5, #0
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	bfc4      	itt	gt
 8012f32:	1a9b      	subgt	r3, r3, r2
 8012f34:	18ed      	addgt	r5, r5, r3
 8012f36:	2600      	movs	r6, #0
 8012f38:	341a      	adds	r4, #26
 8012f3a:	42b5      	cmp	r5, r6
 8012f3c:	d11a      	bne.n	8012f74 <_printf_common+0xc8>
 8012f3e:	2000      	movs	r0, #0
 8012f40:	e008      	b.n	8012f54 <_printf_common+0xa8>
 8012f42:	2301      	movs	r3, #1
 8012f44:	4652      	mov	r2, sl
 8012f46:	4641      	mov	r1, r8
 8012f48:	4638      	mov	r0, r7
 8012f4a:	47c8      	blx	r9
 8012f4c:	3001      	adds	r0, #1
 8012f4e:	d103      	bne.n	8012f58 <_printf_common+0xac>
 8012f50:	f04f 30ff 	mov.w	r0, #4294967295
 8012f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f58:	3501      	adds	r5, #1
 8012f5a:	e7c6      	b.n	8012eea <_printf_common+0x3e>
 8012f5c:	18e1      	adds	r1, r4, r3
 8012f5e:	1c5a      	adds	r2, r3, #1
 8012f60:	2030      	movs	r0, #48	@ 0x30
 8012f62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012f66:	4422      	add	r2, r4
 8012f68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012f6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012f70:	3302      	adds	r3, #2
 8012f72:	e7c7      	b.n	8012f04 <_printf_common+0x58>
 8012f74:	2301      	movs	r3, #1
 8012f76:	4622      	mov	r2, r4
 8012f78:	4641      	mov	r1, r8
 8012f7a:	4638      	mov	r0, r7
 8012f7c:	47c8      	blx	r9
 8012f7e:	3001      	adds	r0, #1
 8012f80:	d0e6      	beq.n	8012f50 <_printf_common+0xa4>
 8012f82:	3601      	adds	r6, #1
 8012f84:	e7d9      	b.n	8012f3a <_printf_common+0x8e>
	...

08012f88 <_printf_i>:
 8012f88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f8c:	7e0f      	ldrb	r7, [r1, #24]
 8012f8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012f90:	2f78      	cmp	r7, #120	@ 0x78
 8012f92:	4691      	mov	r9, r2
 8012f94:	4680      	mov	r8, r0
 8012f96:	460c      	mov	r4, r1
 8012f98:	469a      	mov	sl, r3
 8012f9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012f9e:	d807      	bhi.n	8012fb0 <_printf_i+0x28>
 8012fa0:	2f62      	cmp	r7, #98	@ 0x62
 8012fa2:	d80a      	bhi.n	8012fba <_printf_i+0x32>
 8012fa4:	2f00      	cmp	r7, #0
 8012fa6:	f000 80d2 	beq.w	801314e <_printf_i+0x1c6>
 8012faa:	2f58      	cmp	r7, #88	@ 0x58
 8012fac:	f000 80b9 	beq.w	8013122 <_printf_i+0x19a>
 8012fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012fb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012fb8:	e03a      	b.n	8013030 <_printf_i+0xa8>
 8012fba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012fbe:	2b15      	cmp	r3, #21
 8012fc0:	d8f6      	bhi.n	8012fb0 <_printf_i+0x28>
 8012fc2:	a101      	add	r1, pc, #4	@ (adr r1, 8012fc8 <_printf_i+0x40>)
 8012fc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012fc8:	08013021 	.word	0x08013021
 8012fcc:	08013035 	.word	0x08013035
 8012fd0:	08012fb1 	.word	0x08012fb1
 8012fd4:	08012fb1 	.word	0x08012fb1
 8012fd8:	08012fb1 	.word	0x08012fb1
 8012fdc:	08012fb1 	.word	0x08012fb1
 8012fe0:	08013035 	.word	0x08013035
 8012fe4:	08012fb1 	.word	0x08012fb1
 8012fe8:	08012fb1 	.word	0x08012fb1
 8012fec:	08012fb1 	.word	0x08012fb1
 8012ff0:	08012fb1 	.word	0x08012fb1
 8012ff4:	08013135 	.word	0x08013135
 8012ff8:	0801305f 	.word	0x0801305f
 8012ffc:	080130ef 	.word	0x080130ef
 8013000:	08012fb1 	.word	0x08012fb1
 8013004:	08012fb1 	.word	0x08012fb1
 8013008:	08013157 	.word	0x08013157
 801300c:	08012fb1 	.word	0x08012fb1
 8013010:	0801305f 	.word	0x0801305f
 8013014:	08012fb1 	.word	0x08012fb1
 8013018:	08012fb1 	.word	0x08012fb1
 801301c:	080130f7 	.word	0x080130f7
 8013020:	6833      	ldr	r3, [r6, #0]
 8013022:	1d1a      	adds	r2, r3, #4
 8013024:	681b      	ldr	r3, [r3, #0]
 8013026:	6032      	str	r2, [r6, #0]
 8013028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801302c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013030:	2301      	movs	r3, #1
 8013032:	e09d      	b.n	8013170 <_printf_i+0x1e8>
 8013034:	6833      	ldr	r3, [r6, #0]
 8013036:	6820      	ldr	r0, [r4, #0]
 8013038:	1d19      	adds	r1, r3, #4
 801303a:	6031      	str	r1, [r6, #0]
 801303c:	0606      	lsls	r6, r0, #24
 801303e:	d501      	bpl.n	8013044 <_printf_i+0xbc>
 8013040:	681d      	ldr	r5, [r3, #0]
 8013042:	e003      	b.n	801304c <_printf_i+0xc4>
 8013044:	0645      	lsls	r5, r0, #25
 8013046:	d5fb      	bpl.n	8013040 <_printf_i+0xb8>
 8013048:	f9b3 5000 	ldrsh.w	r5, [r3]
 801304c:	2d00      	cmp	r5, #0
 801304e:	da03      	bge.n	8013058 <_printf_i+0xd0>
 8013050:	232d      	movs	r3, #45	@ 0x2d
 8013052:	426d      	negs	r5, r5
 8013054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013058:	4859      	ldr	r0, [pc, #356]	@ (80131c0 <_printf_i+0x238>)
 801305a:	230a      	movs	r3, #10
 801305c:	e011      	b.n	8013082 <_printf_i+0xfa>
 801305e:	6821      	ldr	r1, [r4, #0]
 8013060:	6833      	ldr	r3, [r6, #0]
 8013062:	0608      	lsls	r0, r1, #24
 8013064:	f853 5b04 	ldr.w	r5, [r3], #4
 8013068:	d402      	bmi.n	8013070 <_printf_i+0xe8>
 801306a:	0649      	lsls	r1, r1, #25
 801306c:	bf48      	it	mi
 801306e:	b2ad      	uxthmi	r5, r5
 8013070:	2f6f      	cmp	r7, #111	@ 0x6f
 8013072:	4853      	ldr	r0, [pc, #332]	@ (80131c0 <_printf_i+0x238>)
 8013074:	6033      	str	r3, [r6, #0]
 8013076:	bf14      	ite	ne
 8013078:	230a      	movne	r3, #10
 801307a:	2308      	moveq	r3, #8
 801307c:	2100      	movs	r1, #0
 801307e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013082:	6866      	ldr	r6, [r4, #4]
 8013084:	60a6      	str	r6, [r4, #8]
 8013086:	2e00      	cmp	r6, #0
 8013088:	bfa2      	ittt	ge
 801308a:	6821      	ldrge	r1, [r4, #0]
 801308c:	f021 0104 	bicge.w	r1, r1, #4
 8013090:	6021      	strge	r1, [r4, #0]
 8013092:	b90d      	cbnz	r5, 8013098 <_printf_i+0x110>
 8013094:	2e00      	cmp	r6, #0
 8013096:	d04b      	beq.n	8013130 <_printf_i+0x1a8>
 8013098:	4616      	mov	r6, r2
 801309a:	fbb5 f1f3 	udiv	r1, r5, r3
 801309e:	fb03 5711 	mls	r7, r3, r1, r5
 80130a2:	5dc7      	ldrb	r7, [r0, r7]
 80130a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80130a8:	462f      	mov	r7, r5
 80130aa:	42bb      	cmp	r3, r7
 80130ac:	460d      	mov	r5, r1
 80130ae:	d9f4      	bls.n	801309a <_printf_i+0x112>
 80130b0:	2b08      	cmp	r3, #8
 80130b2:	d10b      	bne.n	80130cc <_printf_i+0x144>
 80130b4:	6823      	ldr	r3, [r4, #0]
 80130b6:	07df      	lsls	r7, r3, #31
 80130b8:	d508      	bpl.n	80130cc <_printf_i+0x144>
 80130ba:	6923      	ldr	r3, [r4, #16]
 80130bc:	6861      	ldr	r1, [r4, #4]
 80130be:	4299      	cmp	r1, r3
 80130c0:	bfde      	ittt	le
 80130c2:	2330      	movle	r3, #48	@ 0x30
 80130c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80130c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80130cc:	1b92      	subs	r2, r2, r6
 80130ce:	6122      	str	r2, [r4, #16]
 80130d0:	f8cd a000 	str.w	sl, [sp]
 80130d4:	464b      	mov	r3, r9
 80130d6:	aa03      	add	r2, sp, #12
 80130d8:	4621      	mov	r1, r4
 80130da:	4640      	mov	r0, r8
 80130dc:	f7ff fee6 	bl	8012eac <_printf_common>
 80130e0:	3001      	adds	r0, #1
 80130e2:	d14a      	bne.n	801317a <_printf_i+0x1f2>
 80130e4:	f04f 30ff 	mov.w	r0, #4294967295
 80130e8:	b004      	add	sp, #16
 80130ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130ee:	6823      	ldr	r3, [r4, #0]
 80130f0:	f043 0320 	orr.w	r3, r3, #32
 80130f4:	6023      	str	r3, [r4, #0]
 80130f6:	4833      	ldr	r0, [pc, #204]	@ (80131c4 <_printf_i+0x23c>)
 80130f8:	2778      	movs	r7, #120	@ 0x78
 80130fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80130fe:	6823      	ldr	r3, [r4, #0]
 8013100:	6831      	ldr	r1, [r6, #0]
 8013102:	061f      	lsls	r7, r3, #24
 8013104:	f851 5b04 	ldr.w	r5, [r1], #4
 8013108:	d402      	bmi.n	8013110 <_printf_i+0x188>
 801310a:	065f      	lsls	r7, r3, #25
 801310c:	bf48      	it	mi
 801310e:	b2ad      	uxthmi	r5, r5
 8013110:	6031      	str	r1, [r6, #0]
 8013112:	07d9      	lsls	r1, r3, #31
 8013114:	bf44      	itt	mi
 8013116:	f043 0320 	orrmi.w	r3, r3, #32
 801311a:	6023      	strmi	r3, [r4, #0]
 801311c:	b11d      	cbz	r5, 8013126 <_printf_i+0x19e>
 801311e:	2310      	movs	r3, #16
 8013120:	e7ac      	b.n	801307c <_printf_i+0xf4>
 8013122:	4827      	ldr	r0, [pc, #156]	@ (80131c0 <_printf_i+0x238>)
 8013124:	e7e9      	b.n	80130fa <_printf_i+0x172>
 8013126:	6823      	ldr	r3, [r4, #0]
 8013128:	f023 0320 	bic.w	r3, r3, #32
 801312c:	6023      	str	r3, [r4, #0]
 801312e:	e7f6      	b.n	801311e <_printf_i+0x196>
 8013130:	4616      	mov	r6, r2
 8013132:	e7bd      	b.n	80130b0 <_printf_i+0x128>
 8013134:	6833      	ldr	r3, [r6, #0]
 8013136:	6825      	ldr	r5, [r4, #0]
 8013138:	6961      	ldr	r1, [r4, #20]
 801313a:	1d18      	adds	r0, r3, #4
 801313c:	6030      	str	r0, [r6, #0]
 801313e:	062e      	lsls	r6, r5, #24
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	d501      	bpl.n	8013148 <_printf_i+0x1c0>
 8013144:	6019      	str	r1, [r3, #0]
 8013146:	e002      	b.n	801314e <_printf_i+0x1c6>
 8013148:	0668      	lsls	r0, r5, #25
 801314a:	d5fb      	bpl.n	8013144 <_printf_i+0x1bc>
 801314c:	8019      	strh	r1, [r3, #0]
 801314e:	2300      	movs	r3, #0
 8013150:	6123      	str	r3, [r4, #16]
 8013152:	4616      	mov	r6, r2
 8013154:	e7bc      	b.n	80130d0 <_printf_i+0x148>
 8013156:	6833      	ldr	r3, [r6, #0]
 8013158:	1d1a      	adds	r2, r3, #4
 801315a:	6032      	str	r2, [r6, #0]
 801315c:	681e      	ldr	r6, [r3, #0]
 801315e:	6862      	ldr	r2, [r4, #4]
 8013160:	2100      	movs	r1, #0
 8013162:	4630      	mov	r0, r6
 8013164:	f7f8 ff6c 	bl	800c040 <memchr>
 8013168:	b108      	cbz	r0, 801316e <_printf_i+0x1e6>
 801316a:	1b80      	subs	r0, r0, r6
 801316c:	6060      	str	r0, [r4, #4]
 801316e:	6863      	ldr	r3, [r4, #4]
 8013170:	6123      	str	r3, [r4, #16]
 8013172:	2300      	movs	r3, #0
 8013174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013178:	e7aa      	b.n	80130d0 <_printf_i+0x148>
 801317a:	6923      	ldr	r3, [r4, #16]
 801317c:	4632      	mov	r2, r6
 801317e:	4649      	mov	r1, r9
 8013180:	4640      	mov	r0, r8
 8013182:	47d0      	blx	sl
 8013184:	3001      	adds	r0, #1
 8013186:	d0ad      	beq.n	80130e4 <_printf_i+0x15c>
 8013188:	6823      	ldr	r3, [r4, #0]
 801318a:	079b      	lsls	r3, r3, #30
 801318c:	d413      	bmi.n	80131b6 <_printf_i+0x22e>
 801318e:	68e0      	ldr	r0, [r4, #12]
 8013190:	9b03      	ldr	r3, [sp, #12]
 8013192:	4298      	cmp	r0, r3
 8013194:	bfb8      	it	lt
 8013196:	4618      	movlt	r0, r3
 8013198:	e7a6      	b.n	80130e8 <_printf_i+0x160>
 801319a:	2301      	movs	r3, #1
 801319c:	4632      	mov	r2, r6
 801319e:	4649      	mov	r1, r9
 80131a0:	4640      	mov	r0, r8
 80131a2:	47d0      	blx	sl
 80131a4:	3001      	adds	r0, #1
 80131a6:	d09d      	beq.n	80130e4 <_printf_i+0x15c>
 80131a8:	3501      	adds	r5, #1
 80131aa:	68e3      	ldr	r3, [r4, #12]
 80131ac:	9903      	ldr	r1, [sp, #12]
 80131ae:	1a5b      	subs	r3, r3, r1
 80131b0:	42ab      	cmp	r3, r5
 80131b2:	dcf2      	bgt.n	801319a <_printf_i+0x212>
 80131b4:	e7eb      	b.n	801318e <_printf_i+0x206>
 80131b6:	2500      	movs	r5, #0
 80131b8:	f104 0619 	add.w	r6, r4, #25
 80131bc:	e7f5      	b.n	80131aa <_printf_i+0x222>
 80131be:	bf00      	nop
 80131c0:	08013915 	.word	0x08013915
 80131c4:	08013926 	.word	0x08013926

080131c8 <__sflush_r>:
 80131c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80131cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131d0:	0716      	lsls	r6, r2, #28
 80131d2:	4605      	mov	r5, r0
 80131d4:	460c      	mov	r4, r1
 80131d6:	d454      	bmi.n	8013282 <__sflush_r+0xba>
 80131d8:	684b      	ldr	r3, [r1, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	dc02      	bgt.n	80131e4 <__sflush_r+0x1c>
 80131de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	dd48      	ble.n	8013276 <__sflush_r+0xae>
 80131e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80131e6:	2e00      	cmp	r6, #0
 80131e8:	d045      	beq.n	8013276 <__sflush_r+0xae>
 80131ea:	2300      	movs	r3, #0
 80131ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80131f0:	682f      	ldr	r7, [r5, #0]
 80131f2:	6a21      	ldr	r1, [r4, #32]
 80131f4:	602b      	str	r3, [r5, #0]
 80131f6:	d030      	beq.n	801325a <__sflush_r+0x92>
 80131f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80131fa:	89a3      	ldrh	r3, [r4, #12]
 80131fc:	0759      	lsls	r1, r3, #29
 80131fe:	d505      	bpl.n	801320c <__sflush_r+0x44>
 8013200:	6863      	ldr	r3, [r4, #4]
 8013202:	1ad2      	subs	r2, r2, r3
 8013204:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013206:	b10b      	cbz	r3, 801320c <__sflush_r+0x44>
 8013208:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801320a:	1ad2      	subs	r2, r2, r3
 801320c:	2300      	movs	r3, #0
 801320e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013210:	6a21      	ldr	r1, [r4, #32]
 8013212:	4628      	mov	r0, r5
 8013214:	47b0      	blx	r6
 8013216:	1c43      	adds	r3, r0, #1
 8013218:	89a3      	ldrh	r3, [r4, #12]
 801321a:	d106      	bne.n	801322a <__sflush_r+0x62>
 801321c:	6829      	ldr	r1, [r5, #0]
 801321e:	291d      	cmp	r1, #29
 8013220:	d82b      	bhi.n	801327a <__sflush_r+0xb2>
 8013222:	4a2a      	ldr	r2, [pc, #168]	@ (80132cc <__sflush_r+0x104>)
 8013224:	410a      	asrs	r2, r1
 8013226:	07d6      	lsls	r6, r2, #31
 8013228:	d427      	bmi.n	801327a <__sflush_r+0xb2>
 801322a:	2200      	movs	r2, #0
 801322c:	6062      	str	r2, [r4, #4]
 801322e:	04d9      	lsls	r1, r3, #19
 8013230:	6922      	ldr	r2, [r4, #16]
 8013232:	6022      	str	r2, [r4, #0]
 8013234:	d504      	bpl.n	8013240 <__sflush_r+0x78>
 8013236:	1c42      	adds	r2, r0, #1
 8013238:	d101      	bne.n	801323e <__sflush_r+0x76>
 801323a:	682b      	ldr	r3, [r5, #0]
 801323c:	b903      	cbnz	r3, 8013240 <__sflush_r+0x78>
 801323e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013240:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013242:	602f      	str	r7, [r5, #0]
 8013244:	b1b9      	cbz	r1, 8013276 <__sflush_r+0xae>
 8013246:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801324a:	4299      	cmp	r1, r3
 801324c:	d002      	beq.n	8013254 <__sflush_r+0x8c>
 801324e:	4628      	mov	r0, r5
 8013250:	f7ff fbea 	bl	8012a28 <_free_r>
 8013254:	2300      	movs	r3, #0
 8013256:	6363      	str	r3, [r4, #52]	@ 0x34
 8013258:	e00d      	b.n	8013276 <__sflush_r+0xae>
 801325a:	2301      	movs	r3, #1
 801325c:	4628      	mov	r0, r5
 801325e:	47b0      	blx	r6
 8013260:	4602      	mov	r2, r0
 8013262:	1c50      	adds	r0, r2, #1
 8013264:	d1c9      	bne.n	80131fa <__sflush_r+0x32>
 8013266:	682b      	ldr	r3, [r5, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d0c6      	beq.n	80131fa <__sflush_r+0x32>
 801326c:	2b1d      	cmp	r3, #29
 801326e:	d001      	beq.n	8013274 <__sflush_r+0xac>
 8013270:	2b16      	cmp	r3, #22
 8013272:	d11e      	bne.n	80132b2 <__sflush_r+0xea>
 8013274:	602f      	str	r7, [r5, #0]
 8013276:	2000      	movs	r0, #0
 8013278:	e022      	b.n	80132c0 <__sflush_r+0xf8>
 801327a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801327e:	b21b      	sxth	r3, r3
 8013280:	e01b      	b.n	80132ba <__sflush_r+0xf2>
 8013282:	690f      	ldr	r7, [r1, #16]
 8013284:	2f00      	cmp	r7, #0
 8013286:	d0f6      	beq.n	8013276 <__sflush_r+0xae>
 8013288:	0793      	lsls	r3, r2, #30
 801328a:	680e      	ldr	r6, [r1, #0]
 801328c:	bf08      	it	eq
 801328e:	694b      	ldreq	r3, [r1, #20]
 8013290:	600f      	str	r7, [r1, #0]
 8013292:	bf18      	it	ne
 8013294:	2300      	movne	r3, #0
 8013296:	eba6 0807 	sub.w	r8, r6, r7
 801329a:	608b      	str	r3, [r1, #8]
 801329c:	f1b8 0f00 	cmp.w	r8, #0
 80132a0:	dde9      	ble.n	8013276 <__sflush_r+0xae>
 80132a2:	6a21      	ldr	r1, [r4, #32]
 80132a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80132a6:	4643      	mov	r3, r8
 80132a8:	463a      	mov	r2, r7
 80132aa:	4628      	mov	r0, r5
 80132ac:	47b0      	blx	r6
 80132ae:	2800      	cmp	r0, #0
 80132b0:	dc08      	bgt.n	80132c4 <__sflush_r+0xfc>
 80132b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132ba:	81a3      	strh	r3, [r4, #12]
 80132bc:	f04f 30ff 	mov.w	r0, #4294967295
 80132c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132c4:	4407      	add	r7, r0
 80132c6:	eba8 0800 	sub.w	r8, r8, r0
 80132ca:	e7e7      	b.n	801329c <__sflush_r+0xd4>
 80132cc:	dfbffffe 	.word	0xdfbffffe

080132d0 <_fflush_r>:
 80132d0:	b538      	push	{r3, r4, r5, lr}
 80132d2:	690b      	ldr	r3, [r1, #16]
 80132d4:	4605      	mov	r5, r0
 80132d6:	460c      	mov	r4, r1
 80132d8:	b913      	cbnz	r3, 80132e0 <_fflush_r+0x10>
 80132da:	2500      	movs	r5, #0
 80132dc:	4628      	mov	r0, r5
 80132de:	bd38      	pop	{r3, r4, r5, pc}
 80132e0:	b118      	cbz	r0, 80132ea <_fflush_r+0x1a>
 80132e2:	6a03      	ldr	r3, [r0, #32]
 80132e4:	b90b      	cbnz	r3, 80132ea <_fflush_r+0x1a>
 80132e6:	f7ff f80b 	bl	8012300 <__sinit>
 80132ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d0f3      	beq.n	80132da <_fflush_r+0xa>
 80132f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80132f4:	07d0      	lsls	r0, r2, #31
 80132f6:	d404      	bmi.n	8013302 <_fflush_r+0x32>
 80132f8:	0599      	lsls	r1, r3, #22
 80132fa:	d402      	bmi.n	8013302 <_fflush_r+0x32>
 80132fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80132fe:	f7ff fb82 	bl	8012a06 <__retarget_lock_acquire_recursive>
 8013302:	4628      	mov	r0, r5
 8013304:	4621      	mov	r1, r4
 8013306:	f7ff ff5f 	bl	80131c8 <__sflush_r>
 801330a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801330c:	07da      	lsls	r2, r3, #31
 801330e:	4605      	mov	r5, r0
 8013310:	d4e4      	bmi.n	80132dc <_fflush_r+0xc>
 8013312:	89a3      	ldrh	r3, [r4, #12]
 8013314:	059b      	lsls	r3, r3, #22
 8013316:	d4e1      	bmi.n	80132dc <_fflush_r+0xc>
 8013318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801331a:	f7ff fb75 	bl	8012a08 <__retarget_lock_release_recursive>
 801331e:	e7dd      	b.n	80132dc <_fflush_r+0xc>

08013320 <__swhatbuf_r>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	460c      	mov	r4, r1
 8013324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013328:	2900      	cmp	r1, #0
 801332a:	b096      	sub	sp, #88	@ 0x58
 801332c:	4615      	mov	r5, r2
 801332e:	461e      	mov	r6, r3
 8013330:	da0d      	bge.n	801334e <__swhatbuf_r+0x2e>
 8013332:	89a3      	ldrh	r3, [r4, #12]
 8013334:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013338:	f04f 0100 	mov.w	r1, #0
 801333c:	bf14      	ite	ne
 801333e:	2340      	movne	r3, #64	@ 0x40
 8013340:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013344:	2000      	movs	r0, #0
 8013346:	6031      	str	r1, [r6, #0]
 8013348:	602b      	str	r3, [r5, #0]
 801334a:	b016      	add	sp, #88	@ 0x58
 801334c:	bd70      	pop	{r4, r5, r6, pc}
 801334e:	466a      	mov	r2, sp
 8013350:	f000 f848 	bl	80133e4 <_fstat_r>
 8013354:	2800      	cmp	r0, #0
 8013356:	dbec      	blt.n	8013332 <__swhatbuf_r+0x12>
 8013358:	9901      	ldr	r1, [sp, #4]
 801335a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801335e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013362:	4259      	negs	r1, r3
 8013364:	4159      	adcs	r1, r3
 8013366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801336a:	e7eb      	b.n	8013344 <__swhatbuf_r+0x24>

0801336c <__smakebuf_r>:
 801336c:	898b      	ldrh	r3, [r1, #12]
 801336e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013370:	079d      	lsls	r5, r3, #30
 8013372:	4606      	mov	r6, r0
 8013374:	460c      	mov	r4, r1
 8013376:	d507      	bpl.n	8013388 <__smakebuf_r+0x1c>
 8013378:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801337c:	6023      	str	r3, [r4, #0]
 801337e:	6123      	str	r3, [r4, #16]
 8013380:	2301      	movs	r3, #1
 8013382:	6163      	str	r3, [r4, #20]
 8013384:	b003      	add	sp, #12
 8013386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013388:	ab01      	add	r3, sp, #4
 801338a:	466a      	mov	r2, sp
 801338c:	f7ff ffc8 	bl	8013320 <__swhatbuf_r>
 8013390:	9f00      	ldr	r7, [sp, #0]
 8013392:	4605      	mov	r5, r0
 8013394:	4639      	mov	r1, r7
 8013396:	4630      	mov	r0, r6
 8013398:	f7ff fbba 	bl	8012b10 <_malloc_r>
 801339c:	b948      	cbnz	r0, 80133b2 <__smakebuf_r+0x46>
 801339e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133a2:	059a      	lsls	r2, r3, #22
 80133a4:	d4ee      	bmi.n	8013384 <__smakebuf_r+0x18>
 80133a6:	f023 0303 	bic.w	r3, r3, #3
 80133aa:	f043 0302 	orr.w	r3, r3, #2
 80133ae:	81a3      	strh	r3, [r4, #12]
 80133b0:	e7e2      	b.n	8013378 <__smakebuf_r+0xc>
 80133b2:	89a3      	ldrh	r3, [r4, #12]
 80133b4:	6020      	str	r0, [r4, #0]
 80133b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80133ba:	81a3      	strh	r3, [r4, #12]
 80133bc:	9b01      	ldr	r3, [sp, #4]
 80133be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80133c2:	b15b      	cbz	r3, 80133dc <__smakebuf_r+0x70>
 80133c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80133c8:	4630      	mov	r0, r6
 80133ca:	f000 f81d 	bl	8013408 <_isatty_r>
 80133ce:	b128      	cbz	r0, 80133dc <__smakebuf_r+0x70>
 80133d0:	89a3      	ldrh	r3, [r4, #12]
 80133d2:	f023 0303 	bic.w	r3, r3, #3
 80133d6:	f043 0301 	orr.w	r3, r3, #1
 80133da:	81a3      	strh	r3, [r4, #12]
 80133dc:	89a3      	ldrh	r3, [r4, #12]
 80133de:	431d      	orrs	r5, r3
 80133e0:	81a5      	strh	r5, [r4, #12]
 80133e2:	e7cf      	b.n	8013384 <__smakebuf_r+0x18>

080133e4 <_fstat_r>:
 80133e4:	b538      	push	{r3, r4, r5, lr}
 80133e6:	4d07      	ldr	r5, [pc, #28]	@ (8013404 <_fstat_r+0x20>)
 80133e8:	2300      	movs	r3, #0
 80133ea:	4604      	mov	r4, r0
 80133ec:	4608      	mov	r0, r1
 80133ee:	4611      	mov	r1, r2
 80133f0:	602b      	str	r3, [r5, #0]
 80133f2:	f7fa fd19 	bl	800de28 <_fstat>
 80133f6:	1c43      	adds	r3, r0, #1
 80133f8:	d102      	bne.n	8013400 <_fstat_r+0x1c>
 80133fa:	682b      	ldr	r3, [r5, #0]
 80133fc:	b103      	cbz	r3, 8013400 <_fstat_r+0x1c>
 80133fe:	6023      	str	r3, [r4, #0]
 8013400:	bd38      	pop	{r3, r4, r5, pc}
 8013402:	bf00      	nop
 8013404:	20004348 	.word	0x20004348

08013408 <_isatty_r>:
 8013408:	b538      	push	{r3, r4, r5, lr}
 801340a:	4d06      	ldr	r5, [pc, #24]	@ (8013424 <_isatty_r+0x1c>)
 801340c:	2300      	movs	r3, #0
 801340e:	4604      	mov	r4, r0
 8013410:	4608      	mov	r0, r1
 8013412:	602b      	str	r3, [r5, #0]
 8013414:	f7fa fc76 	bl	800dd04 <_isatty>
 8013418:	1c43      	adds	r3, r0, #1
 801341a:	d102      	bne.n	8013422 <_isatty_r+0x1a>
 801341c:	682b      	ldr	r3, [r5, #0]
 801341e:	b103      	cbz	r3, 8013422 <_isatty_r+0x1a>
 8013420:	6023      	str	r3, [r4, #0]
 8013422:	bd38      	pop	{r3, r4, r5, pc}
 8013424:	20004348 	.word	0x20004348

08013428 <_sbrk_r>:
 8013428:	b538      	push	{r3, r4, r5, lr}
 801342a:	4d06      	ldr	r5, [pc, #24]	@ (8013444 <_sbrk_r+0x1c>)
 801342c:	2300      	movs	r3, #0
 801342e:	4604      	mov	r4, r0
 8013430:	4608      	mov	r0, r1
 8013432:	602b      	str	r3, [r5, #0]
 8013434:	f7fa fe30 	bl	800e098 <_sbrk>
 8013438:	1c43      	adds	r3, r0, #1
 801343a:	d102      	bne.n	8013442 <_sbrk_r+0x1a>
 801343c:	682b      	ldr	r3, [r5, #0]
 801343e:	b103      	cbz	r3, 8013442 <_sbrk_r+0x1a>
 8013440:	6023      	str	r3, [r4, #0]
 8013442:	bd38      	pop	{r3, r4, r5, pc}
 8013444:	20004348 	.word	0x20004348

08013448 <_init>:
 8013448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801344a:	bf00      	nop
 801344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801344e:	bc08      	pop	{r3}
 8013450:	469e      	mov	lr, r3
 8013452:	4770      	bx	lr

08013454 <_fini>:
 8013454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013456:	bf00      	nop
 8013458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801345a:	bc08      	pop	{r3}
 801345c:	469e      	mov	lr, r3
 801345e:	4770      	bx	lr
