
Aether_Update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ed8  0800c000  0800c000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mysection    00000000  08004000  08004000  0000a074  2**0
                  CONTENTS
  3 .rodata       00000268  08012ed8  08012ed8  00008ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08013140  08013140  0000a074  2**0
                  CONTENTS
  5 .ARM          00000008  08013140  08013140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08013148  08013148  0000a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08013148  08013148  00009148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801314c  0801314c  0000914c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000074  20000000  08013150  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00004318  20000074  080131c4  0000a074  2**2
                  ALLOC
 11 ._user_heap_stack 0000071c  2000438c  080131c4  0000a38c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000168bd  00000000  00000000  0000a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d7  00000000  00000000  00020961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001350  00000000  00000000  00024238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee5  00000000  00000000  00025588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ce2  00000000  00000000  0002646d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017171  00000000  00000000  0004014f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009919c  00000000  00000000  000572c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f045c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000582c  00000000  00000000  000f04a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  000f5ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c000 <__do_global_dtors_aux>:
 800c000:	b510      	push	{r4, lr}
 800c002:	4c05      	ldr	r4, [pc, #20]	@ (800c018 <__do_global_dtors_aux+0x18>)
 800c004:	7823      	ldrb	r3, [r4, #0]
 800c006:	b933      	cbnz	r3, 800c016 <__do_global_dtors_aux+0x16>
 800c008:	4b04      	ldr	r3, [pc, #16]	@ (800c01c <__do_global_dtors_aux+0x1c>)
 800c00a:	b113      	cbz	r3, 800c012 <__do_global_dtors_aux+0x12>
 800c00c:	4804      	ldr	r0, [pc, #16]	@ (800c020 <__do_global_dtors_aux+0x20>)
 800c00e:	f3af 8000 	nop.w
 800c012:	2301      	movs	r3, #1
 800c014:	7023      	strb	r3, [r4, #0]
 800c016:	bd10      	pop	{r4, pc}
 800c018:	20000074 	.word	0x20000074
 800c01c:	00000000 	.word	0x00000000
 800c020:	08012ec0 	.word	0x08012ec0

0800c024 <frame_dummy>:
 800c024:	b508      	push	{r3, lr}
 800c026:	4b03      	ldr	r3, [pc, #12]	@ (800c034 <frame_dummy+0x10>)
 800c028:	b11b      	cbz	r3, 800c032 <frame_dummy+0xe>
 800c02a:	4903      	ldr	r1, [pc, #12]	@ (800c038 <frame_dummy+0x14>)
 800c02c:	4803      	ldr	r0, [pc, #12]	@ (800c03c <frame_dummy+0x18>)
 800c02e:	f3af 8000 	nop.w
 800c032:	bd08      	pop	{r3, pc}
 800c034:	00000000 	.word	0x00000000
 800c038:	20000078 	.word	0x20000078
 800c03c:	08012ec0 	.word	0x08012ec0

0800c040 <memchr>:
 800c040:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800c044:	2a10      	cmp	r2, #16
 800c046:	db2b      	blt.n	800c0a0 <memchr+0x60>
 800c048:	f010 0f07 	tst.w	r0, #7
 800c04c:	d008      	beq.n	800c060 <memchr+0x20>
 800c04e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c052:	3a01      	subs	r2, #1
 800c054:	428b      	cmp	r3, r1
 800c056:	d02d      	beq.n	800c0b4 <memchr+0x74>
 800c058:	f010 0f07 	tst.w	r0, #7
 800c05c:	b342      	cbz	r2, 800c0b0 <memchr+0x70>
 800c05e:	d1f6      	bne.n	800c04e <memchr+0xe>
 800c060:	b4f0      	push	{r4, r5, r6, r7}
 800c062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 800c066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800c06a:	f022 0407 	bic.w	r4, r2, #7
 800c06e:	f07f 0700 	mvns.w	r7, #0
 800c072:	2300      	movs	r3, #0
 800c074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 800c078:	3c08      	subs	r4, #8
 800c07a:	ea85 0501 	eor.w	r5, r5, r1
 800c07e:	ea86 0601 	eor.w	r6, r6, r1
 800c082:	fa85 f547 	uadd8	r5, r5, r7
 800c086:	faa3 f587 	sel	r5, r3, r7
 800c08a:	fa86 f647 	uadd8	r6, r6, r7
 800c08e:	faa5 f687 	sel	r6, r5, r7
 800c092:	b98e      	cbnz	r6, 800c0b8 <memchr+0x78>
 800c094:	d1ee      	bne.n	800c074 <memchr+0x34>
 800c096:	bcf0      	pop	{r4, r5, r6, r7}
 800c098:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800c09c:	f002 0207 	and.w	r2, r2, #7
 800c0a0:	b132      	cbz	r2, 800c0b0 <memchr+0x70>
 800c0a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c0a6:	3a01      	subs	r2, #1
 800c0a8:	ea83 0301 	eor.w	r3, r3, r1
 800c0ac:	b113      	cbz	r3, 800c0b4 <memchr+0x74>
 800c0ae:	d1f8      	bne.n	800c0a2 <memchr+0x62>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	4770      	bx	lr
 800c0b4:	3801      	subs	r0, #1
 800c0b6:	4770      	bx	lr
 800c0b8:	2d00      	cmp	r5, #0
 800c0ba:	bf06      	itte	eq
 800c0bc:	4635      	moveq	r5, r6
 800c0be:	3803      	subeq	r0, #3
 800c0c0:	3807      	subne	r0, #7
 800c0c2:	f015 0f01 	tst.w	r5, #1
 800c0c6:	d107      	bne.n	800c0d8 <memchr+0x98>
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800c0ce:	bf02      	ittt	eq
 800c0d0:	3001      	addeq	r0, #1
 800c0d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 800c0d6:	3001      	addeq	r0, #1
 800c0d8:	bcf0      	pop	{r4, r5, r6, r7}
 800c0da:	3801      	subs	r0, #1
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop

0800c0e0 <strlen>:
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e6:	2a00      	cmp	r2, #0
 800c0e8:	d1fb      	bne.n	800c0e2 <strlen+0x2>
 800c0ea:	1a18      	subs	r0, r3, r0
 800c0ec:	3801      	subs	r0, #1
 800c0ee:	4770      	bx	lr

0800c0f0 <__aeabi_uldivmod>:
 800c0f0:	b953      	cbnz	r3, 800c108 <__aeabi_uldivmod+0x18>
 800c0f2:	b94a      	cbnz	r2, 800c108 <__aeabi_uldivmod+0x18>
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	bf08      	it	eq
 800c0f8:	2800      	cmpeq	r0, #0
 800c0fa:	bf1c      	itt	ne
 800c0fc:	f04f 31ff 	movne.w	r1, #4294967295
 800c100:	f04f 30ff 	movne.w	r0, #4294967295
 800c104:	f000 b96a 	b.w	800c3dc <__aeabi_idiv0>
 800c108:	f1ad 0c08 	sub.w	ip, sp, #8
 800c10c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c110:	f000 f806 	bl	800c120 <__udivmoddi4>
 800c114:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	b004      	add	sp, #16
 800c11e:	4770      	bx	lr

0800c120 <__udivmoddi4>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	9d08      	ldr	r5, [sp, #32]
 800c126:	460c      	mov	r4, r1
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d14e      	bne.n	800c1ca <__udivmoddi4+0xaa>
 800c12c:	4694      	mov	ip, r2
 800c12e:	458c      	cmp	ip, r1
 800c130:	4686      	mov	lr, r0
 800c132:	fab2 f282 	clz	r2, r2
 800c136:	d962      	bls.n	800c1fe <__udivmoddi4+0xde>
 800c138:	b14a      	cbz	r2, 800c14e <__udivmoddi4+0x2e>
 800c13a:	f1c2 0320 	rsb	r3, r2, #32
 800c13e:	4091      	lsls	r1, r2
 800c140:	fa20 f303 	lsr.w	r3, r0, r3
 800c144:	fa0c fc02 	lsl.w	ip, ip, r2
 800c148:	4319      	orrs	r1, r3
 800c14a:	fa00 fe02 	lsl.w	lr, r0, r2
 800c14e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c152:	fa1f f68c 	uxth.w	r6, ip
 800c156:	fbb1 f4f7 	udiv	r4, r1, r7
 800c15a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800c15e:	fb07 1114 	mls	r1, r7, r4, r1
 800c162:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c166:	fb04 f106 	mul.w	r1, r4, r6
 800c16a:	4299      	cmp	r1, r3
 800c16c:	d90a      	bls.n	800c184 <__udivmoddi4+0x64>
 800c16e:	eb1c 0303 	adds.w	r3, ip, r3
 800c172:	f104 30ff 	add.w	r0, r4, #4294967295
 800c176:	f080 8112 	bcs.w	800c39e <__udivmoddi4+0x27e>
 800c17a:	4299      	cmp	r1, r3
 800c17c:	f240 810f 	bls.w	800c39e <__udivmoddi4+0x27e>
 800c180:	3c02      	subs	r4, #2
 800c182:	4463      	add	r3, ip
 800c184:	1a59      	subs	r1, r3, r1
 800c186:	fa1f f38e 	uxth.w	r3, lr
 800c18a:	fbb1 f0f7 	udiv	r0, r1, r7
 800c18e:	fb07 1110 	mls	r1, r7, r0, r1
 800c192:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c196:	fb00 f606 	mul.w	r6, r0, r6
 800c19a:	429e      	cmp	r6, r3
 800c19c:	d90a      	bls.n	800c1b4 <__udivmoddi4+0x94>
 800c19e:	eb1c 0303 	adds.w	r3, ip, r3
 800c1a2:	f100 31ff 	add.w	r1, r0, #4294967295
 800c1a6:	f080 80fc 	bcs.w	800c3a2 <__udivmoddi4+0x282>
 800c1aa:	429e      	cmp	r6, r3
 800c1ac:	f240 80f9 	bls.w	800c3a2 <__udivmoddi4+0x282>
 800c1b0:	4463      	add	r3, ip
 800c1b2:	3802      	subs	r0, #2
 800c1b4:	1b9b      	subs	r3, r3, r6
 800c1b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	b11d      	cbz	r5, 800c1c6 <__udivmoddi4+0xa6>
 800c1be:	40d3      	lsrs	r3, r2
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	e9c5 3200 	strd	r3, r2, [r5]
 800c1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ca:	428b      	cmp	r3, r1
 800c1cc:	d905      	bls.n	800c1da <__udivmoddi4+0xba>
 800c1ce:	b10d      	cbz	r5, 800c1d4 <__udivmoddi4+0xb4>
 800c1d0:	e9c5 0100 	strd	r0, r1, [r5]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	4608      	mov	r0, r1
 800c1d8:	e7f5      	b.n	800c1c6 <__udivmoddi4+0xa6>
 800c1da:	fab3 f183 	clz	r1, r3
 800c1de:	2900      	cmp	r1, #0
 800c1e0:	d146      	bne.n	800c270 <__udivmoddi4+0x150>
 800c1e2:	42a3      	cmp	r3, r4
 800c1e4:	d302      	bcc.n	800c1ec <__udivmoddi4+0xcc>
 800c1e6:	4290      	cmp	r0, r2
 800c1e8:	f0c0 80f0 	bcc.w	800c3cc <__udivmoddi4+0x2ac>
 800c1ec:	1a86      	subs	r6, r0, r2
 800c1ee:	eb64 0303 	sbc.w	r3, r4, r3
 800c1f2:	2001      	movs	r0, #1
 800c1f4:	2d00      	cmp	r5, #0
 800c1f6:	d0e6      	beq.n	800c1c6 <__udivmoddi4+0xa6>
 800c1f8:	e9c5 6300 	strd	r6, r3, [r5]
 800c1fc:	e7e3      	b.n	800c1c6 <__udivmoddi4+0xa6>
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	f040 8090 	bne.w	800c324 <__udivmoddi4+0x204>
 800c204:	eba1 040c 	sub.w	r4, r1, ip
 800c208:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c20c:	fa1f f78c 	uxth.w	r7, ip
 800c210:	2101      	movs	r1, #1
 800c212:	fbb4 f6f8 	udiv	r6, r4, r8
 800c216:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800c21a:	fb08 4416 	mls	r4, r8, r6, r4
 800c21e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c222:	fb07 f006 	mul.w	r0, r7, r6
 800c226:	4298      	cmp	r0, r3
 800c228:	d908      	bls.n	800c23c <__udivmoddi4+0x11c>
 800c22a:	eb1c 0303 	adds.w	r3, ip, r3
 800c22e:	f106 34ff 	add.w	r4, r6, #4294967295
 800c232:	d202      	bcs.n	800c23a <__udivmoddi4+0x11a>
 800c234:	4298      	cmp	r0, r3
 800c236:	f200 80cd 	bhi.w	800c3d4 <__udivmoddi4+0x2b4>
 800c23a:	4626      	mov	r6, r4
 800c23c:	1a1c      	subs	r4, r3, r0
 800c23e:	fa1f f38e 	uxth.w	r3, lr
 800c242:	fbb4 f0f8 	udiv	r0, r4, r8
 800c246:	fb08 4410 	mls	r4, r8, r0, r4
 800c24a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c24e:	fb00 f707 	mul.w	r7, r0, r7
 800c252:	429f      	cmp	r7, r3
 800c254:	d908      	bls.n	800c268 <__udivmoddi4+0x148>
 800c256:	eb1c 0303 	adds.w	r3, ip, r3
 800c25a:	f100 34ff 	add.w	r4, r0, #4294967295
 800c25e:	d202      	bcs.n	800c266 <__udivmoddi4+0x146>
 800c260:	429f      	cmp	r7, r3
 800c262:	f200 80b0 	bhi.w	800c3c6 <__udivmoddi4+0x2a6>
 800c266:	4620      	mov	r0, r4
 800c268:	1bdb      	subs	r3, r3, r7
 800c26a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800c26e:	e7a5      	b.n	800c1bc <__udivmoddi4+0x9c>
 800c270:	f1c1 0620 	rsb	r6, r1, #32
 800c274:	408b      	lsls	r3, r1
 800c276:	fa22 f706 	lsr.w	r7, r2, r6
 800c27a:	431f      	orrs	r7, r3
 800c27c:	fa20 fc06 	lsr.w	ip, r0, r6
 800c280:	fa04 f301 	lsl.w	r3, r4, r1
 800c284:	ea43 030c 	orr.w	r3, r3, ip
 800c288:	40f4      	lsrs	r4, r6
 800c28a:	fa00 f801 	lsl.w	r8, r0, r1
 800c28e:	0c38      	lsrs	r0, r7, #16
 800c290:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800c294:	fbb4 fef0 	udiv	lr, r4, r0
 800c298:	fa1f fc87 	uxth.w	ip, r7
 800c29c:	fb00 441e 	mls	r4, r0, lr, r4
 800c2a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800c2a4:	fb0e f90c 	mul.w	r9, lr, ip
 800c2a8:	45a1      	cmp	r9, r4
 800c2aa:	fa02 f201 	lsl.w	r2, r2, r1
 800c2ae:	d90a      	bls.n	800c2c6 <__udivmoddi4+0x1a6>
 800c2b0:	193c      	adds	r4, r7, r4
 800c2b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 800c2b6:	f080 8084 	bcs.w	800c3c2 <__udivmoddi4+0x2a2>
 800c2ba:	45a1      	cmp	r9, r4
 800c2bc:	f240 8081 	bls.w	800c3c2 <__udivmoddi4+0x2a2>
 800c2c0:	f1ae 0e02 	sub.w	lr, lr, #2
 800c2c4:	443c      	add	r4, r7
 800c2c6:	eba4 0409 	sub.w	r4, r4, r9
 800c2ca:	fa1f f983 	uxth.w	r9, r3
 800c2ce:	fbb4 f3f0 	udiv	r3, r4, r0
 800c2d2:	fb00 4413 	mls	r4, r0, r3, r4
 800c2d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800c2da:	fb03 fc0c 	mul.w	ip, r3, ip
 800c2de:	45a4      	cmp	ip, r4
 800c2e0:	d907      	bls.n	800c2f2 <__udivmoddi4+0x1d2>
 800c2e2:	193c      	adds	r4, r7, r4
 800c2e4:	f103 30ff 	add.w	r0, r3, #4294967295
 800c2e8:	d267      	bcs.n	800c3ba <__udivmoddi4+0x29a>
 800c2ea:	45a4      	cmp	ip, r4
 800c2ec:	d965      	bls.n	800c3ba <__udivmoddi4+0x29a>
 800c2ee:	3b02      	subs	r3, #2
 800c2f0:	443c      	add	r4, r7
 800c2f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800c2f6:	fba0 9302 	umull	r9, r3, r0, r2
 800c2fa:	eba4 040c 	sub.w	r4, r4, ip
 800c2fe:	429c      	cmp	r4, r3
 800c300:	46ce      	mov	lr, r9
 800c302:	469c      	mov	ip, r3
 800c304:	d351      	bcc.n	800c3aa <__udivmoddi4+0x28a>
 800c306:	d04e      	beq.n	800c3a6 <__udivmoddi4+0x286>
 800c308:	b155      	cbz	r5, 800c320 <__udivmoddi4+0x200>
 800c30a:	ebb8 030e 	subs.w	r3, r8, lr
 800c30e:	eb64 040c 	sbc.w	r4, r4, ip
 800c312:	fa04 f606 	lsl.w	r6, r4, r6
 800c316:	40cb      	lsrs	r3, r1
 800c318:	431e      	orrs	r6, r3
 800c31a:	40cc      	lsrs	r4, r1
 800c31c:	e9c5 6400 	strd	r6, r4, [r5]
 800c320:	2100      	movs	r1, #0
 800c322:	e750      	b.n	800c1c6 <__udivmoddi4+0xa6>
 800c324:	f1c2 0320 	rsb	r3, r2, #32
 800c328:	fa20 f103 	lsr.w	r1, r0, r3
 800c32c:	fa0c fc02 	lsl.w	ip, ip, r2
 800c330:	fa24 f303 	lsr.w	r3, r4, r3
 800c334:	4094      	lsls	r4, r2
 800c336:	430c      	orrs	r4, r1
 800c338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800c33c:	fa00 fe02 	lsl.w	lr, r0, r2
 800c340:	fa1f f78c 	uxth.w	r7, ip
 800c344:	fbb3 f0f8 	udiv	r0, r3, r8
 800c348:	fb08 3110 	mls	r1, r8, r0, r3
 800c34c:	0c23      	lsrs	r3, r4, #16
 800c34e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800c352:	fb00 f107 	mul.w	r1, r0, r7
 800c356:	4299      	cmp	r1, r3
 800c358:	d908      	bls.n	800c36c <__udivmoddi4+0x24c>
 800c35a:	eb1c 0303 	adds.w	r3, ip, r3
 800c35e:	f100 36ff 	add.w	r6, r0, #4294967295
 800c362:	d22c      	bcs.n	800c3be <__udivmoddi4+0x29e>
 800c364:	4299      	cmp	r1, r3
 800c366:	d92a      	bls.n	800c3be <__udivmoddi4+0x29e>
 800c368:	3802      	subs	r0, #2
 800c36a:	4463      	add	r3, ip
 800c36c:	1a5b      	subs	r3, r3, r1
 800c36e:	b2a4      	uxth	r4, r4
 800c370:	fbb3 f1f8 	udiv	r1, r3, r8
 800c374:	fb08 3311 	mls	r3, r8, r1, r3
 800c378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c37c:	fb01 f307 	mul.w	r3, r1, r7
 800c380:	42a3      	cmp	r3, r4
 800c382:	d908      	bls.n	800c396 <__udivmoddi4+0x276>
 800c384:	eb1c 0404 	adds.w	r4, ip, r4
 800c388:	f101 36ff 	add.w	r6, r1, #4294967295
 800c38c:	d213      	bcs.n	800c3b6 <__udivmoddi4+0x296>
 800c38e:	42a3      	cmp	r3, r4
 800c390:	d911      	bls.n	800c3b6 <__udivmoddi4+0x296>
 800c392:	3902      	subs	r1, #2
 800c394:	4464      	add	r4, ip
 800c396:	1ae4      	subs	r4, r4, r3
 800c398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c39c:	e739      	b.n	800c212 <__udivmoddi4+0xf2>
 800c39e:	4604      	mov	r4, r0
 800c3a0:	e6f0      	b.n	800c184 <__udivmoddi4+0x64>
 800c3a2:	4608      	mov	r0, r1
 800c3a4:	e706      	b.n	800c1b4 <__udivmoddi4+0x94>
 800c3a6:	45c8      	cmp	r8, r9
 800c3a8:	d2ae      	bcs.n	800c308 <__udivmoddi4+0x1e8>
 800c3aa:	ebb9 0e02 	subs.w	lr, r9, r2
 800c3ae:	eb63 0c07 	sbc.w	ip, r3, r7
 800c3b2:	3801      	subs	r0, #1
 800c3b4:	e7a8      	b.n	800c308 <__udivmoddi4+0x1e8>
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	e7ed      	b.n	800c396 <__udivmoddi4+0x276>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	e799      	b.n	800c2f2 <__udivmoddi4+0x1d2>
 800c3be:	4630      	mov	r0, r6
 800c3c0:	e7d4      	b.n	800c36c <__udivmoddi4+0x24c>
 800c3c2:	46d6      	mov	lr, sl
 800c3c4:	e77f      	b.n	800c2c6 <__udivmoddi4+0x1a6>
 800c3c6:	4463      	add	r3, ip
 800c3c8:	3802      	subs	r0, #2
 800c3ca:	e74d      	b.n	800c268 <__udivmoddi4+0x148>
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	4623      	mov	r3, r4
 800c3d0:	4608      	mov	r0, r1
 800c3d2:	e70f      	b.n	800c1f4 <__udivmoddi4+0xd4>
 800c3d4:	3e02      	subs	r6, #2
 800c3d6:	4463      	add	r3, ip
 800c3d8:	e730      	b.n	800c23c <__udivmoddi4+0x11c>
 800c3da:	bf00      	nop

0800c3dc <__aeabi_idiv0>:
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop

0800c3e0 <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b08a      	sub	sp, #40	@ 0x28
 800c3e4:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800c3e6:	2306      	movs	r3, #6
 800c3e8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c3ea:	2306      	movs	r3, #6
 800c3ec:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	83fb      	strh	r3, [r7, #30]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 800c3fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c3fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800c404:	4ba1      	ldr	r3, [pc, #644]	@ (800c68c <EE_Init+0x2ac>)
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800c40a:	4ba1      	ldr	r3, [pc, #644]	@ (800c690 <EE_Init+0x2b0>)
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800c410:	2300      	movs	r3, #0
 800c412:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 800c414:	2302      	movs	r3, #2
 800c416:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 800c418:	2301      	movs	r3, #1
 800c41a:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c41c:	2302      	movs	r3, #2
 800c41e:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 800c420:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c426:	4293      	cmp	r3, r2
 800c428:	d00b      	beq.n	800c442 <EE_Init+0x62>
 800c42a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c42e:	f280 8196 	bge.w	800c75e <EE_Init+0x37e>
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 80f8 	beq.w	800c628 <EE_Init+0x248>
 800c438:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d050      	beq.n	800c4e2 <EE_Init+0x102>
 800c440:	e18d      	b.n	800c75e <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800c442:	8c3b      	ldrh	r3, [r7, #32]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d116      	bne.n	800c476 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c448:	4890      	ldr	r0, [pc, #576]	@ (800c68c <EE_Init+0x2ac>)
 800c44a:	f000 f9a9 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	f040 818e 	bne.w	800c772 <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c456:	f107 0214 	add.w	r2, r7, #20
 800c45a:	463b      	mov	r3, r7
 800c45c:	4611      	mov	r1, r2
 800c45e:	4618      	mov	r0, r3
 800c460:	f001 fe2a 	bl	800e0b8 <HAL_FLASHEx_Erase>
 800c464:	4603      	mov	r3, r0
 800c466:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c468:	7efb      	ldrb	r3, [r7, #27]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 8181 	beq.w	800c772 <EE_Init+0x392>
          {
            return FlashStatus;
 800c470:	7efb      	ldrb	r3, [r7, #27]
 800c472:	b29b      	uxth	r3, r3
 800c474:	e185      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 800c476:	8c3b      	ldrh	r3, [r7, #32]
 800c478:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d125      	bne.n	800c4cc <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c480:	4882      	ldr	r0, [pc, #520]	@ (800c68c <EE_Init+0x2ac>)
 800c482:	f000 f98d 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c486:	4603      	mov	r3, r0
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d10e      	bne.n	800c4aa <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c48c:	f107 0214 	add.w	r2, r7, #20
 800c490:	463b      	mov	r3, r7
 800c492:	4611      	mov	r1, r2
 800c494:	4618      	mov	r0, r3
 800c496:	f001 fe0f 	bl	800e0b8 <HAL_FLASHEx_Erase>
 800c49a:	4603      	mov	r3, r0
 800c49c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c49e:	7efb      	ldrb	r3, [r7, #27]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d002      	beq.n	800c4aa <EE_Init+0xca>
          {
            return FlashStatus;
 800c4a4:	7efb      	ldrb	r3, [r7, #27]
 800c4a6:	b29b      	uxth	r3, r3
 800c4a8:	e16b      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 800c4aa:	f04f 0200 	mov.w	r2, #0
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	4977      	ldr	r1, [pc, #476]	@ (800c690 <EE_Init+0x2b0>)
 800c4b4:	2001      	movs	r0, #1
 800c4b6:	f001 fc49 	bl	800dd4c <HAL_FLASH_Program>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c4be:	7efb      	ldrb	r3, [r7, #27]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 8156 	beq.w	800c772 <EE_Init+0x392>
        {
          return FlashStatus;
 800c4c6:	7efb      	ldrb	r3, [r7, #27]
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	e15a      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800c4cc:	f000 f9fe 	bl	800c8cc <EE_Format>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c4d4:	7efb      	ldrb	r3, [r7, #27]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f000 814b 	beq.w	800c772 <EE_Init+0x392>
        {
          return FlashStatus;
 800c4dc:	7efb      	ldrb	r3, [r7, #27]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	e14f      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 800c4e2:	8c3b      	ldrh	r3, [r7, #32]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d163      	bne.n	800c5b0 <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c4ec:	e030      	b.n	800c550 <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800c4ee:	4b69      	ldr	r3, [pc, #420]	@ (800c694 <EE_Init+0x2b4>)
 800c4f0:	881b      	ldrh	r3, [r3, #0]
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c4f6:	4968      	ldr	r1, [pc, #416]	@ (800c698 <EE_Init+0x2b8>)
 800c4f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d101      	bne.n	800c504 <EE_Init+0x124>
          {
            x = VarIdx;
 800c500:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c502:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 800c504:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c506:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d01d      	beq.n	800c54a <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c50e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c510:	4a61      	ldr	r2, [pc, #388]	@ (800c698 <EE_Init+0x2b8>)
 800c512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c516:	4961      	ldr	r1, [pc, #388]	@ (800c69c <EE_Init+0x2bc>)
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 f96b 	bl	800c7f4 <EE_ReadVariable>
 800c51e:	4603      	mov	r3, r0
 800c520:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800c522:	8bbb      	ldrh	r3, [r7, #28]
 800c524:	2b01      	cmp	r3, #1
 800c526:	d010      	beq.n	800c54a <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c528:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c52a:	4a5b      	ldr	r2, [pc, #364]	@ (800c698 <EE_Init+0x2b8>)
 800c52c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c530:	4a5a      	ldr	r2, [pc, #360]	@ (800c69c <EE_Init+0x2bc>)
 800c532:	8812      	ldrh	r2, [r2, #0]
 800c534:	4611      	mov	r1, r2
 800c536:	4618      	mov	r0, r3
 800c538:	f000 fa60 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800c53c:	4603      	mov	r3, r0
 800c53e:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800c540:	8bfb      	ldrh	r3, [r7, #30]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d001      	beq.n	800c54a <EE_Init+0x16a>
              {
                return EepromStatus;
 800c546:	8bfb      	ldrh	r3, [r7, #30]
 800c548:	e11b      	b.n	800c782 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c54a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c54c:	3301      	adds	r3, #1
 800c54e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c550:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c552:	2b1a      	cmp	r3, #26
 800c554:	d9cb      	bls.n	800c4ee <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c556:	f04f 0200 	mov.w	r2, #0
 800c55a:	f04f 0300 	mov.w	r3, #0
 800c55e:	494b      	ldr	r1, [pc, #300]	@ (800c68c <EE_Init+0x2ac>)
 800c560:	2001      	movs	r0, #1
 800c562:	f001 fbf3 	bl	800dd4c <HAL_FLASH_Program>
 800c566:	4603      	mov	r3, r0
 800c568:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c56a:	7efb      	ldrb	r3, [r7, #27]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <EE_Init+0x196>
        {
          return FlashStatus;
 800c570:	7efb      	ldrb	r3, [r7, #27]
 800c572:	b29b      	uxth	r3, r3
 800c574:	e105      	b.n	800c782 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 800c576:	2303      	movs	r3, #3
 800c578:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c57a:	2301      	movs	r3, #1
 800c57c:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c57e:	2302      	movs	r3, #2
 800c580:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c582:	4843      	ldr	r0, [pc, #268]	@ (800c690 <EE_Init+0x2b0>)
 800c584:	f000 f90c 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c588:	4603      	mov	r3, r0
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f040 80f3 	bne.w	800c776 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c590:	f107 0214 	add.w	r2, r7, #20
 800c594:	463b      	mov	r3, r7
 800c596:	4611      	mov	r1, r2
 800c598:	4618      	mov	r0, r3
 800c59a:	f001 fd8d 	bl	800e0b8 <HAL_FLASHEx_Erase>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c5a2:	7efb      	ldrb	r3, [r7, #27]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 80e6 	beq.w	800c776 <EE_Init+0x396>
          {
            return FlashStatus;
 800c5aa:	7efb      	ldrb	r3, [r7, #27]
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	e0e8      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800c5b0:	8c3b      	ldrh	r3, [r7, #32]
 800c5b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d12b      	bne.n	800c612 <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c5c2:	2302      	movs	r3, #2
 800c5c4:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c5c6:	4832      	ldr	r0, [pc, #200]	@ (800c690 <EE_Init+0x2b0>)
 800c5c8:	f000 f8ea 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10e      	bne.n	800c5f0 <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c5d2:	f107 0214 	add.w	r2, r7, #20
 800c5d6:	463b      	mov	r3, r7
 800c5d8:	4611      	mov	r1, r2
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f001 fd6c 	bl	800e0b8 <HAL_FLASHEx_Erase>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c5e4:	7efb      	ldrb	r3, [r7, #27]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <EE_Init+0x210>
          {
            return FlashStatus;
 800c5ea:	7efb      	ldrb	r3, [r7, #27]
 800c5ec:	b29b      	uxth	r3, r3
 800c5ee:	e0c8      	b.n	800c782 <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 800c5f0:	f04f 0200 	mov.w	r2, #0
 800c5f4:	f04f 0300 	mov.w	r3, #0
 800c5f8:	4924      	ldr	r1, [pc, #144]	@ (800c68c <EE_Init+0x2ac>)
 800c5fa:	2001      	movs	r0, #1
 800c5fc:	f001 fba6 	bl	800dd4c <HAL_FLASH_Program>
 800c600:	4603      	mov	r3, r0
 800c602:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c604:	7efb      	ldrb	r3, [r7, #27]
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 80b5 	beq.w	800c776 <EE_Init+0x396>
        {
          return FlashStatus;
 800c60c:	7efb      	ldrb	r3, [r7, #27]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	e0b7      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800c612:	f000 f95b 	bl	800c8cc <EE_Format>
 800c616:	4603      	mov	r3, r0
 800c618:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c61a:	7efb      	ldrb	r3, [r7, #27]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 80aa 	beq.w	800c776 <EE_Init+0x396>
        {
          return FlashStatus;
 800c622:	7efb      	ldrb	r3, [r7, #27]
 800c624:	b29b      	uxth	r3, r3
 800c626:	e0ac      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 800c628:	8c3b      	ldrh	r3, [r7, #32]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10a      	bne.n	800c644 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800c62e:	f000 f94d 	bl	800c8cc <EE_Format>
 800c632:	4603      	mov	r3, r0
 800c634:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c636:	7efb      	ldrb	r3, [r7, #27]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 809e 	beq.w	800c77a <EE_Init+0x39a>
        {
          return FlashStatus;
 800c63e:	7efb      	ldrb	r3, [r7, #27]
 800c640:	b29b      	uxth	r3, r3
 800c642:	e09e      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 800c644:	8c3b      	ldrh	r3, [r7, #32]
 800c646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d11b      	bne.n	800c686 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800c64e:	2303      	movs	r3, #3
 800c650:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c652:	2301      	movs	r3, #1
 800c654:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c656:	2302      	movs	r3, #2
 800c658:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c65a:	480d      	ldr	r0, [pc, #52]	@ (800c690 <EE_Init+0x2b0>)
 800c65c:	f000 f8a0 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c660:	4603      	mov	r3, r0
 800c662:	2b00      	cmp	r3, #0
 800c664:	f040 8089 	bne.w	800c77a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c668:	f107 0214 	add.w	r2, r7, #20
 800c66c:	463b      	mov	r3, r7
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f001 fd21 	bl	800e0b8 <HAL_FLASHEx_Erase>
 800c676:	4603      	mov	r3, r0
 800c678:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c67a:	7efb      	ldrb	r3, [r7, #27]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d07c      	beq.n	800c77a <EE_Init+0x39a>
          {
            return FlashStatus;
 800c680:	7efb      	ldrb	r3, [r7, #27]
 800c682:	b29b      	uxth	r3, r3
 800c684:	e07d      	b.n	800c782 <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c686:	2300      	movs	r3, #0
 800c688:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c68a:	e03a      	b.n	800c702 <EE_Init+0x322>
 800c68c:	08004000 	.word	0x08004000
 800c690:	08008000 	.word	0x08008000
 800c694:	08004006 	.word	0x08004006
 800c698:	20000474 	.word	0x20000474
 800c69c:	20000090 	.word	0x20000090
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800c6a0:	4b3a      	ldr	r3, [pc, #232]	@ (800c78c <EE_Init+0x3ac>)
 800c6a2:	881b      	ldrh	r3, [r3, #0]
 800c6a4:	b29a      	uxth	r2, r3
 800c6a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6a8:	4939      	ldr	r1, [pc, #228]	@ (800c790 <EE_Init+0x3b0>)
 800c6aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d101      	bne.n	800c6b6 <EE_Init+0x2d6>
          {
            x = VarIdx;
 800c6b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
          }
          if (VarIdx != x)
 800c6b6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c6b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d01d      	beq.n	800c6fc <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800c6c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6c2:	4a33      	ldr	r2, [pc, #204]	@ (800c790 <EE_Init+0x3b0>)
 800c6c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6c8:	4932      	ldr	r1, [pc, #200]	@ (800c794 <EE_Init+0x3b4>)
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f000 f892 	bl	800c7f4 <EE_ReadVariable>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800c6d4:	8bbb      	ldrh	r3, [r7, #28]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d010      	beq.n	800c6fc <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800c6da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6dc:	4a2c      	ldr	r2, [pc, #176]	@ (800c790 <EE_Init+0x3b0>)
 800c6de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6e2:	4a2c      	ldr	r2, [pc, #176]	@ (800c794 <EE_Init+0x3b4>)
 800c6e4:	8812      	ldrh	r2, [r2, #0]
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f000 f987 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800c6f2:	8bfb      	ldrh	r3, [r7, #30]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d001      	beq.n	800c6fc <EE_Init+0x31c>
              {
                return EepromStatus;
 800c6f8:	8bfb      	ldrh	r3, [r7, #30]
 800c6fa:	e042      	b.n	800c782 <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800c6fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c6fe:	3301      	adds	r3, #1
 800c700:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c702:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c704:	2b1a      	cmp	r3, #26
 800c706:	d9cb      	bls.n	800c6a0 <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 800c708:	f04f 0200 	mov.w	r2, #0
 800c70c:	f04f 0300 	mov.w	r3, #0
 800c710:	4921      	ldr	r1, [pc, #132]	@ (800c798 <EE_Init+0x3b8>)
 800c712:	2001      	movs	r0, #1
 800c714:	f001 fb1a 	bl	800dd4c <HAL_FLASH_Program>
 800c718:	4603      	mov	r3, r0
 800c71a:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 800c71c:	7efb      	ldrb	r3, [r7, #27]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d002      	beq.n	800c728 <EE_Init+0x348>
        {
          return FlashStatus;
 800c722:	7efb      	ldrb	r3, [r7, #27]
 800c724:	b29b      	uxth	r3, r3
 800c726:	e02c      	b.n	800c782 <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 800c728:	2302      	movs	r3, #2
 800c72a:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800c72c:	2301      	movs	r3, #1
 800c72e:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c730:	2302      	movs	r3, #2
 800c732:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c734:	4819      	ldr	r0, [pc, #100]	@ (800c79c <EE_Init+0x3bc>)
 800c736:	f000 f833 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d11c      	bne.n	800c77a <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800c740:	f107 0214 	add.w	r2, r7, #20
 800c744:	463b      	mov	r3, r7
 800c746:	4611      	mov	r1, r2
 800c748:	4618      	mov	r0, r3
 800c74a:	f001 fcb5 	bl	800e0b8 <HAL_FLASHEx_Erase>
 800c74e:	4603      	mov	r3, r0
 800c750:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800c752:	7efb      	ldrb	r3, [r7, #27]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d010      	beq.n	800c77a <EE_Init+0x39a>
          {
            return FlashStatus;
 800c758:	7efb      	ldrb	r3, [r7, #27]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	e011      	b.n	800c782 <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800c75e:	f000 f8b5 	bl	800c8cc <EE_Format>
 800c762:	4603      	mov	r3, r0
 800c764:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800c766:	7efb      	ldrb	r3, [r7, #27]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d008      	beq.n	800c77e <EE_Init+0x39e>
      {
        return FlashStatus;
 800c76c:	7efb      	ldrb	r3, [r7, #27]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	e007      	b.n	800c782 <EE_Init+0x3a2>
      break;
 800c772:	bf00      	nop
 800c774:	e004      	b.n	800c780 <EE_Init+0x3a0>
      break;
 800c776:	bf00      	nop
 800c778:	e002      	b.n	800c780 <EE_Init+0x3a0>
      break;
 800c77a:	bf00      	nop
 800c77c:	e000      	b.n	800c780 <EE_Init+0x3a0>
      }
      break;
 800c77e:	bf00      	nop
  }

  return HAL_OK;
 800c780:	2300      	movs	r3, #0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3728      	adds	r7, #40	@ 0x28
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	08008006 	.word	0x08008006
 800c790:	20000474 	.word	0x20000474
 800c794:	20000090 	.word	0x20000090
 800c798:	08008000 	.word	0x08008000
 800c79c:	08004000 	.word	0x08004000

0800c7a0 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b087      	sub	sp, #28
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	617b      	str	r3, [r7, #20]
  uint32_t BeginAddress = Address;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	613b      	str	r3, [r7, #16]
  uint16_t AddressValue = 0x5555;
 800c7b0:	f245 5355 	movw	r3, #21845	@ 0x5555
 800c7b4:	81fb      	strh	r3, [r7, #14]
    
  /* Check each active page address starting from end */
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800c7b6:	e00d      	b.n	800c7d4 <EE_VerifyPageFullyErased+0x34>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	881b      	ldrh	r3, [r3, #0]
 800c7bc:	81fb      	strh	r3, [r7, #14]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 800c7be:	89fb      	ldrh	r3, [r7, #14]
 800c7c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d002      	beq.n	800c7ce <EE_VerifyPageFullyErased+0x2e>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	617b      	str	r3, [r7, #20]

      break;
 800c7cc:	e009      	b.n	800c7e2 <EE_VerifyPageFullyErased+0x42>
    }
    /* Next address location */
    Address = Address + 4;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	3304      	adds	r3, #4
 800c7d2:	607b      	str	r3, [r7, #4]
  while (Address <= (BeginAddress + PAGE_SIZE - 1))
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800c7da:	333f      	adds	r3, #63	@ 0x3f
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d9ea      	bls.n	800c7b8 <EE_VerifyPageFullyErased+0x18>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	b29b      	uxth	r3, r3
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	371c      	adds	r7, #28
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
	...

0800c7f4 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	6039      	str	r1, [r7, #0]
 800c7fe:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 800c800:	2300      	movs	r3, #0
 800c802:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 800c804:	f245 5355 	movw	r3, #21845	@ 0x5555
 800c808:	81bb      	strh	r3, [r7, #12]
 800c80a:	2301      	movs	r3, #1
 800c80c:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 800c80e:	4b1c      	ldr	r3, [pc, #112]	@ (800c880 <EE_ReadVariable+0x8c>)
 800c810:	613b      	str	r3, [r7, #16]
 800c812:	4b1b      	ldr	r3, [pc, #108]	@ (800c880 <EE_ReadVariable+0x8c>)
 800c814:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800c816:	2000      	movs	r0, #0
 800c818:	f000 f8aa 	bl	800c970 <EE_FindValidPage>
 800c81c:	4603      	mov	r3, r0
 800c81e:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800c820:	89fb      	ldrh	r3, [r7, #14]
 800c822:	2bab      	cmp	r3, #171	@ 0xab
 800c824:	d101      	bne.n	800c82a <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800c826:	23ab      	movs	r3, #171	@ 0xab
 800c828:	e025      	b.n	800c876 <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800c82a:	89fb      	ldrh	r3, [r7, #14]
 800c82c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c830:	3301      	adds	r3, #1
 800c832:	039b      	lsls	r3, r3, #14
 800c834:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800c836:	89fb      	ldrh	r3, [r7, #14]
 800c838:	3301      	adds	r3, #1
 800c83a:	039a      	lsls	r2, r3, #14
 800c83c:	4b11      	ldr	r3, [pc, #68]	@ (800c884 <EE_ReadVariable+0x90>)
 800c83e:	4413      	add	r3, r2
 800c840:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 800c842:	e012      	b.n	800c86a <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	881b      	ldrh	r3, [r3, #0]
 800c848:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800c84a:	89ba      	ldrh	r2, [r7, #12]
 800c84c:	88fb      	ldrh	r3, [r7, #6]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d108      	bne.n	800c864 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	3b02      	subs	r3, #2
 800c856:	881b      	ldrh	r3, [r3, #0]
 800c858:	b29a      	uxth	r2, r3
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	82fb      	strh	r3, [r7, #22]

      break;
 800c862:	e007      	b.n	800c874 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	3b04      	subs	r3, #4
 800c868:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	3302      	adds	r3, #2
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	429a      	cmp	r2, r3
 800c872:	d8e7      	bhi.n	800c844 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 800c874:	8afb      	ldrh	r3, [r7, #22]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	08004000 	.word	0x08004000
 800c884:	08003ffe 	.word	0x08003ffe

0800c888 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	460a      	mov	r2, r1
 800c892:	80fb      	strh	r3, [r7, #6]
 800c894:	4613      	mov	r3, r2
 800c896:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 800c898:	2300      	movs	r3, #0
 800c89a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800c89c:	88ba      	ldrh	r2, [r7, #4]
 800c89e:	88fb      	ldrh	r3, [r7, #6]
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f000 f8aa 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 800c8ac:	89fb      	ldrh	r3, [r7, #14]
 800c8ae:	2b80      	cmp	r3, #128	@ 0x80
 800c8b0:	d107      	bne.n	800c8c2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 800c8b2:	88ba      	ldrh	r2, [r7, #4]
 800c8b4:	88fb      	ldrh	r3, [r7, #6]
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 f901 	bl	800cac0 <EE_PageTransfer>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 800c8c2:	89fb      	ldrh	r3, [r7, #14]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 800c8da:	2300      	movs	r3, #0
 800c8dc:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 800c8de:	2302      	movs	r3, #2
 800c8e0:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800c8e6:	2302      	movs	r3, #2
 800c8e8:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800c8ea:	481f      	ldr	r0, [pc, #124]	@ (800c968 <EE_Format+0x9c>)
 800c8ec:	f7ff ff58 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d10d      	bne.n	800c912 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800c8f6:	f107 0218 	add.w	r2, r7, #24
 800c8fa:	1d3b      	adds	r3, r7, #4
 800c8fc:	4611      	mov	r1, r2
 800c8fe:	4618      	mov	r0, r3
 800c900:	f001 fbda 	bl	800e0b8 <HAL_FLASHEx_Erase>
 800c904:	4603      	mov	r3, r0
 800c906:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800c908:	7ffb      	ldrb	r3, [r7, #31]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <EE_Format+0x46>
    {
      return FlashStatus;
 800c90e:	7ffb      	ldrb	r3, [r7, #31]
 800c910:	e025      	b.n	800c95e <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 800c912:	f04f 0200 	mov.w	r2, #0
 800c916:	f04f 0300 	mov.w	r3, #0
 800c91a:	4913      	ldr	r1, [pc, #76]	@ (800c968 <EE_Format+0x9c>)
 800c91c:	2001      	movs	r0, #1
 800c91e:	f001 fa15 	bl	800dd4c <HAL_FLASH_Program>
 800c922:	4603      	mov	r3, r0
 800c924:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800c926:	7ffb      	ldrb	r3, [r7, #31]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d001      	beq.n	800c930 <EE_Format+0x64>
  {
    return FlashStatus;
 800c92c:	7ffb      	ldrb	r3, [r7, #31]
 800c92e:	e016      	b.n	800c95e <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 800c930:	2303      	movs	r3, #3
 800c932:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800c934:	480d      	ldr	r0, [pc, #52]	@ (800c96c <EE_Format+0xa0>)
 800c936:	f7ff ff33 	bl	800c7a0 <EE_VerifyPageFullyErased>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10d      	bne.n	800c95c <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 800c940:	f107 0218 	add.w	r2, r7, #24
 800c944:	1d3b      	adds	r3, r7, #4
 800c946:	4611      	mov	r1, r2
 800c948:	4618      	mov	r0, r3
 800c94a:	f001 fbb5 	bl	800e0b8 <HAL_FLASHEx_Erase>
 800c94e:	4603      	mov	r3, r0
 800c950:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 800c952:	7ffb      	ldrb	r3, [r7, #31]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d001      	beq.n	800c95c <EE_Format+0x90>
    {
      return FlashStatus;
 800c958:	7ffb      	ldrb	r3, [r7, #31]
 800c95a:	e000      	b.n	800c95e <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 800c95c:	2300      	movs	r3, #0
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3720      	adds	r7, #32
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	08004000 	.word	0x08004000
 800c96c:	08008000 	.word	0x08008000

0800c970 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	4603      	mov	r3, r0
 800c978:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 800c97a:	2306      	movs	r3, #6
 800c97c:	81fb      	strh	r3, [r7, #14]
 800c97e:	2306      	movs	r3, #6
 800c980:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 800c982:	4b1c      	ldr	r3, [pc, #112]	@ (800c9f4 <EE_FindValidPage+0x84>)
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 800c988:	4b1b      	ldr	r3, [pc, #108]	@ (800c9f8 <EE_FindValidPage+0x88>)
 800c98a:	881b      	ldrh	r3, [r3, #0]
 800c98c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d01b      	beq.n	800c9cc <EE_FindValidPage+0x5c>
 800c994:	2b01      	cmp	r3, #1
 800c996:	d125      	bne.n	800c9e4 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 800c998:	89bb      	ldrh	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d108      	bne.n	800c9b0 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 800c99e:	89fb      	ldrh	r3, [r7, #14]
 800c9a0:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d101      	bne.n	800c9ac <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	e01c      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	e01a      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 800c9b0:	89fb      	ldrh	r3, [r7, #14]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d108      	bne.n	800c9c8 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 800c9b6:	89bb      	ldrh	r3, [r7, #12]
 800c9b8:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d101      	bne.n	800c9c4 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	e010      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	e00e      	b.n	800c9e6 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 800c9c8:	23ab      	movs	r3, #171	@ 0xab
 800c9ca:	e00c      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 800c9cc:	89fb      	ldrh	r3, [r7, #14]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	e007      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 800c9d6:	89bb      	ldrh	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e002      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 800c9e0:	23ab      	movs	r3, #171	@ 0xab
 800c9e2:	e000      	b.n	800c9e6 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 800c9e4:	2300      	movs	r3, #0
  }
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	08004000 	.word	0x08004000
 800c9f8:	08008000 	.word	0x08008000

0800c9fc <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800c9fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ca00:	b086      	sub	sp, #24
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	4603      	mov	r3, r0
 800ca06:	460a      	mov	r2, r1
 800ca08:	80fb      	strh	r3, [r7, #6]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 800ca16:	4b27      	ldr	r3, [pc, #156]	@ (800cab4 <EE_VerifyPageFullWriteVariable+0xb8>)
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	4b27      	ldr	r3, [pc, #156]	@ (800cab8 <EE_VerifyPageFullWriteVariable+0xbc>)
 800ca1c:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 800ca1e:	2001      	movs	r0, #1
 800ca20:	f7ff ffa6 	bl	800c970 <EE_FindValidPage>
 800ca24:	4603      	mov	r3, r0
 800ca26:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 800ca28:	8a3b      	ldrh	r3, [r7, #16]
 800ca2a:	2bab      	cmp	r3, #171	@ 0xab
 800ca2c:	d101      	bne.n	800ca32 <EE_VerifyPageFullWriteVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800ca2e:	23ab      	movs	r3, #171	@ 0xab
 800ca30:	e03b      	b.n	800caaa <EE_VerifyPageFullWriteVariable+0xae>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800ca32:	8a3b      	ldrh	r3, [r7, #16]
 800ca34:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ca38:	3301      	adds	r3, #1
 800ca3a:	039b      	lsls	r3, r3, #14
 800ca3c:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 800ca3e:	8a3b      	ldrh	r3, [r7, #16]
 800ca40:	3301      	adds	r3, #1
 800ca42:	039a      	lsls	r2, r3, #14
 800ca44:	4b1d      	ldr	r3, [pc, #116]	@ (800cabc <EE_VerifyPageFullWriteVariable+0xc0>)
 800ca46:	4413      	add	r3, r2
 800ca48:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 800ca4a:	e029      	b.n	800caa0 <EE_VerifyPageFullWriteVariable+0xa4>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca54:	d121      	bne.n	800ca9a <EE_VerifyPageFullWriteVariable+0x9e>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 800ca56:	88bb      	ldrh	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	4615      	mov	r5, r2
 800ca5e:	4622      	mov	r2, r4
 800ca60:	462b      	mov	r3, r5
 800ca62:	6979      	ldr	r1, [r7, #20]
 800ca64:	2001      	movs	r0, #1
 800ca66:	f001 f971 	bl	800dd4c <HAL_FLASH_Program>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 800ca6e:	7cfb      	ldrb	r3, [r7, #19]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <EE_VerifyPageFullWriteVariable+0x7e>
      {
        return FlashStatus;
 800ca74:	7cfb      	ldrb	r3, [r7, #19]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	e017      	b.n	800caaa <EE_VerifyPageFullWriteVariable+0xae>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	1c99      	adds	r1, r3, #2
 800ca7e:	88fb      	ldrh	r3, [r7, #6]
 800ca80:	2200      	movs	r2, #0
 800ca82:	4698      	mov	r8, r3
 800ca84:	4691      	mov	r9, r2
 800ca86:	4642      	mov	r2, r8
 800ca88:	464b      	mov	r3, r9
 800ca8a:	2001      	movs	r0, #1
 800ca8c:	f001 f95e 	bl	800dd4c <HAL_FLASH_Program>
 800ca90:	4603      	mov	r3, r0
 800ca92:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 800ca94:	7cfb      	ldrb	r3, [r7, #19]
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	e007      	b.n	800caaa <EE_VerifyPageFullWriteVariable+0xae>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	3304      	adds	r3, #4
 800ca9e:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 800caa0:	697a      	ldr	r2, [r7, #20]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	d3d1      	bcc.n	800ca4c <EE_VerifyPageFullWriteVariable+0x50>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 800caa8:	2380      	movs	r3, #128	@ 0x80
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cab4:	08004000 	.word	0x08004000
 800cab8:	08008000 	.word	0x08008000
 800cabc:	08003fff 	.word	0x08003fff

0800cac0 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b08c      	sub	sp, #48	@ 0x30
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	4603      	mov	r3, r0
 800cac8:	460a      	mov	r2, r1
 800caca:	80fb      	strh	r3, [r7, #6]
 800cacc:	4613      	mov	r3, r2
 800cace:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 800cad0:	2300      	movs	r3, #0
 800cad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 800cad6:	4b54      	ldr	r3, [pc, #336]	@ (800cc28 <EE_PageTransfer+0x168>)
 800cad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t OldPageId=0;
 800cada:	2300      	movs	r3, #0
 800cadc:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cae2:	2300      	movs	r3, #0
 800cae4:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800caea:	2300      	movs	r3, #0
 800caec:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800caf2:	2000      	movs	r0, #0
 800caf4:	f7ff ff3c 	bl	800c970 <EE_FindValidPage>
 800caf8:	4603      	mov	r3, r0
 800cafa:	84bb      	strh	r3, [r7, #36]	@ 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 800cafc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d104      	bne.n	800cb0c <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 800cb02:	4b49      	ldr	r3, [pc, #292]	@ (800cc28 <EE_PageTransfer+0x168>)
 800cb04:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 800cb06:	2303      	movs	r3, #3
 800cb08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cb0a:	e009      	b.n	800cb20 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 800cb0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d104      	bne.n	800cb1c <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 800cb12:	4b46      	ldr	r3, [pc, #280]	@ (800cc2c <EE_PageTransfer+0x16c>)
 800cb14:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 800cb16:	2302      	movs	r3, #2
 800cb18:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cb1a:	e001      	b.n	800cb20 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 800cb1c:	23ab      	movs	r3, #171	@ 0xab
 800cb1e:	e07e      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 800cb20:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800cb24:	f04f 0300 	mov.w	r3, #0
 800cb28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	f001 f90e 	bl	800dd4c <HAL_FLASH_Program>
 800cb30:	4603      	mov	r3, r0
 800cb32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cb36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d003      	beq.n	800cb46 <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 800cb3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	e06b      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 800cb46:	88ba      	ldrh	r2, [r7, #4]
 800cb48:	88fb      	ldrh	r3, [r7, #6]
 800cb4a:	4611      	mov	r1, r2
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7ff ff55 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800cb52:	4603      	mov	r3, r0
 800cb54:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 800cb56:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 800cb5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb5e:	e05e      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800cb60:	2300      	movs	r3, #0
 800cb62:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb64:	e027      	b.n	800cbb6 <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 800cb66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb68:	4a31      	ldr	r2, [pc, #196]	@ (800cc30 <EE_PageTransfer+0x170>)
 800cb6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb6e:	88fa      	ldrh	r2, [r7, #6]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d01d      	beq.n	800cbb0 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 800cb74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb76:	4a2e      	ldr	r2, [pc, #184]	@ (800cc30 <EE_PageTransfer+0x170>)
 800cb78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb7c:	492d      	ldr	r1, [pc, #180]	@ (800cc34 <EE_PageTransfer+0x174>)
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff fe38 	bl	800c7f4 <EE_ReadVariable>
 800cb84:	4603      	mov	r3, r0
 800cb86:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 800cb88:	8c3b      	ldrh	r3, [r7, #32]
 800cb8a:	2b01      	cmp	r3, #1
 800cb8c:	d010      	beq.n	800cbb0 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800cb8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cb90:	4a27      	ldr	r2, [pc, #156]	@ (800cc30 <EE_PageTransfer+0x170>)
 800cb92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb96:	4a27      	ldr	r2, [pc, #156]	@ (800cc34 <EE_PageTransfer+0x174>)
 800cb98:	8812      	ldrh	r2, [r2, #0]
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7ff ff2d 	bl	800c9fc <EE_VerifyPageFullWriteVariable>
 800cba2:	4603      	mov	r3, r0
 800cba4:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 800cba6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 800cbac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cbae:	e036      	b.n	800cc1e <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800cbb0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cbb6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbb8:	2b1a      	cmp	r3, #26
 800cbba:	d9d4      	bls.n	800cb66 <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 800cbc0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cbc2:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800cbc8:	2302      	movs	r3, #2
 800cbca:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 800cbcc:	f107 021c 	add.w	r2, r7, #28
 800cbd0:	f107 0308 	add.w	r3, r7, #8
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f001 fa6e 	bl	800e0b8 <HAL_FLASHEx_Erase>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cbe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 800cbea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	e015      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 800cbf2:	f04f 0200 	mov.w	r2, #0
 800cbf6:	f04f 0300 	mov.w	r3, #0
 800cbfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbfc:	2001      	movs	r0, #1
 800cbfe:	f001 f8a5 	bl	800dd4c <HAL_FLASH_Program>
 800cc02:	4603      	mov	r3, r0
 800cc04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 800cc08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 800cc10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc14:	b29b      	uxth	r3, r3
 800cc16:	e002      	b.n	800cc1e <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 800cc18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc1c:	b29b      	uxth	r3, r3
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3730      	adds	r7, #48	@ 0x30
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	08004000 	.word	0x08004000
 800cc2c:	08008000 	.word	0x08008000
 800cc30:	20000474 	.word	0x20000474
 800cc34:	20000090 	.word	0x20000090

0800cc38 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b085      	sub	sp, #20
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	4a07      	ldr	r2, [pc, #28]	@ (800cc64 <vApplicationGetIdleTaskMemory+0x2c>)
 800cc48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	4a06      	ldr	r2, [pc, #24]	@ (800cc68 <vApplicationGetIdleTaskMemory+0x30>)
 800cc4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2280      	movs	r2, #128	@ 0x80
 800cc54:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800cc56:	bf00      	nop
 800cc58:	3714      	adds	r7, #20
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc60:	4770      	bx	lr
 800cc62:	bf00      	nop
 800cc64:	20000094 	.word	0x20000094
 800cc68:	20000134 	.word	0x20000134

0800cc6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800cc6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc6e:	b0c7      	sub	sp, #284	@ 0x11c
 800cc70:	af10      	add	r7, sp, #64	@ 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800cc72:	f000 fef7 	bl	800da64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800cc76:	f000 f8a3 	bl	800cdc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800cc7a:	f000 f9c7 	bl	800d00c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800cc7e:	f000 f99b 	bl	800cfb8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800cc82:	f000 f91d 	bl	800cec0 <MX_TIM1_Init>
  MX_CRC_Init();
 800cc86:	f000 f907 	bl	800ce98 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800cc8a:	f000 f96b 	bl	800cf64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 800cc8e:	4841      	ldr	r0, [pc, #260]	@ (800cd94 <main+0x128>)
 800cc90:	f000 fb7e 	bl	800d390 <RetargetInit>
  printf("F401: Starting up.....\n");
 800cc94:	4840      	ldr	r0, [pc, #256]	@ (800cd98 <main+0x12c>)
 800cc96:	f005 f90d 	bl	8011eb4 <puts>

  // Write initial data to EEPROM
  char data[100] = "This is the original data";
 800cc9a:	4b40      	ldr	r3, [pc, #256]	@ (800cd9c <main+0x130>)
 800cc9c:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800cca0:	461d      	mov	r5, r3
 800cca2:	6828      	ldr	r0, [r5, #0]
 800cca4:	6869      	ldr	r1, [r5, #4]
 800cca6:	68aa      	ldr	r2, [r5, #8]
 800cca8:	68eb      	ldr	r3, [r5, #12]
 800ccaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccac:	6928      	ldr	r0, [r5, #16]
 800ccae:	6969      	ldr	r1, [r5, #20]
 800ccb0:	c403      	stmia	r4!, {r0, r1}
 800ccb2:	8b2b      	ldrh	r3, [r5, #24]
 800ccb4:	8023      	strh	r3, [r4, #0]
 800ccb6:	f107 038e 	add.w	r3, r7, #142	@ 0x8e
 800ccba:	224a      	movs	r2, #74	@ 0x4a
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f005 fb0e 	bl	80122e0 <memset>
  writeToFlash(huart2, data);
 800ccc4:	4e33      	ldr	r6, [pc, #204]	@ (800cd94 <main+0x128>)
 800ccc6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800ccca:	930e      	str	r3, [sp, #56]	@ 0x38
 800cccc:	466d      	mov	r5, sp
 800ccce:	f106 0410 	add.w	r4, r6, #16
 800ccd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ccde:	e894 0003 	ldmia.w	r4, {r0, r1}
 800cce2:	e885 0003 	stmia.w	r5, {r0, r1}
 800cce6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800ccea:	f000 fdf5 	bl	800d8d8 <writeToFlash>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800ccee:	4b2c      	ldr	r3, [pc, #176]	@ (800cda0 <main+0x134>)
 800ccf0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800ccf4:	461d      	mov	r5, r3
 800ccf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccfa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ccfe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800cd02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800cd06:	2100      	movs	r1, #0
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f003 fa8c 	bl	8010226 <osThreadCreate>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	4a24      	ldr	r2, [pc, #144]	@ (800cda4 <main+0x138>)
 800cd12:	6013      	str	r3, [r2, #0]

  /* definition and creation of receiveTask */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 128);
 800cd14:	4b24      	ldr	r3, [pc, #144]	@ (800cda8 <main+0x13c>)
 800cd16:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800cd1a:	461d      	mov	r5, r3
 800cd1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cd24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800cd28:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f003 fa79 	bl	8010226 <osThreadCreate>
 800cd34:	4603      	mov	r3, r0
 800cd36:	4a1d      	ldr	r2, [pc, #116]	@ (800cdac <main+0x140>)
 800cd38:	6013      	str	r3, [r2, #0]

  /* definition and creation of statusTask */
  osThreadDef(statusTask, StartStatusTask, osPriorityNormal, 0, 128);
 800cd3a:	4b1d      	ldr	r3, [pc, #116]	@ (800cdb0 <main+0x144>)
 800cd3c:	f107 0420 	add.w	r4, r7, #32
 800cd40:	461d      	mov	r5, r3
 800cd42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cd4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  statusTaskHandle = osThreadCreate(osThread(statusTask), NULL);
 800cd4e:	f107 0320 	add.w	r3, r7, #32
 800cd52:	2100      	movs	r1, #0
 800cd54:	4618      	mov	r0, r3
 800cd56:	f003 fa66 	bl	8010226 <osThreadCreate>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	4a15      	ldr	r2, [pc, #84]	@ (800cdb4 <main+0x148>)
 800cd5e:	6013      	str	r3, [r2, #0]

  /* definition and creation of updateTask */
  osThreadDef(updateTask, StartUpdateTask, osPriorityNormal, 0, 128);
 800cd60:	4b15      	ldr	r3, [pc, #84]	@ (800cdb8 <main+0x14c>)
 800cd62:	1d3c      	adds	r4, r7, #4
 800cd64:	461d      	mov	r5, r3
 800cd66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cd6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  updateTaskHandle = osThreadCreate(osThread(updateTask), NULL);
 800cd72:	1d3b      	adds	r3, r7, #4
 800cd74:	2100      	movs	r1, #0
 800cd76:	4618      	mov	r0, r3
 800cd78:	f003 fa55 	bl	8010226 <osThreadCreate>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	4a0f      	ldr	r2, [pc, #60]	@ (800cdbc <main+0x150>)
 800cd80:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  //vTaskSuspend(receiveTaskHandle);
  vTaskSuspend(updateTaskHandle);
 800cd82:	4b0e      	ldr	r3, [pc, #56]	@ (800cdbc <main+0x150>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f003 fd46 	bl	8010818 <vTaskSuspend>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800cd8c:	f003 fa44 	bl	8010218 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800cd90:	bf00      	nop
 800cd92:	e7fd      	b.n	800cd90 <main+0x124>
 800cd94:	200003cc 	.word	0x200003cc
 800cd98:	08012ed8 	.word	0x08012ed8
 800cd9c:	08012ef0 	.word	0x08012ef0
 800cda0:	08012f18 	.word	0x08012f18
 800cda4:	20000414 	.word	0x20000414
 800cda8:	08012f40 	.word	0x08012f40
 800cdac:	20000418 	.word	0x20000418
 800cdb0:	08012f68 	.word	0x08012f68
 800cdb4:	2000041c 	.word	0x2000041c
 800cdb8:	08012f90 	.word	0x08012f90
 800cdbc:	20000420 	.word	0x20000420

0800cdc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b094      	sub	sp, #80	@ 0x50
 800cdc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800cdc6:	f107 0320 	add.w	r3, r7, #32
 800cdca:	2230      	movs	r2, #48	@ 0x30
 800cdcc:	2100      	movs	r1, #0
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f005 fa86 	bl	80122e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800cdd4:	f107 030c 	add.w	r3, r7, #12
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	605a      	str	r2, [r3, #4]
 800cdde:	609a      	str	r2, [r3, #8]
 800cde0:	60da      	str	r2, [r3, #12]
 800cde2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800cde4:	2300      	movs	r3, #0
 800cde6:	60bb      	str	r3, [r7, #8]
 800cde8:	4b29      	ldr	r3, [pc, #164]	@ (800ce90 <SystemClock_Config+0xd0>)
 800cdea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdec:	4a28      	ldr	r2, [pc, #160]	@ (800ce90 <SystemClock_Config+0xd0>)
 800cdee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cdf2:	6413      	str	r3, [r2, #64]	@ 0x40
 800cdf4:	4b26      	ldr	r3, [pc, #152]	@ (800ce90 <SystemClock_Config+0xd0>)
 800cdf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cdfc:	60bb      	str	r3, [r7, #8]
 800cdfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800ce00:	2300      	movs	r3, #0
 800ce02:	607b      	str	r3, [r7, #4]
 800ce04:	4b23      	ldr	r3, [pc, #140]	@ (800ce94 <SystemClock_Config+0xd4>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800ce0c:	4a21      	ldr	r2, [pc, #132]	@ (800ce94 <SystemClock_Config+0xd4>)
 800ce0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce12:	6013      	str	r3, [r2, #0]
 800ce14:	4b1f      	ldr	r3, [pc, #124]	@ (800ce94 <SystemClock_Config+0xd4>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ce1c:	607b      	str	r3, [r7, #4]
 800ce1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800ce20:	2302      	movs	r3, #2
 800ce22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800ce24:	2301      	movs	r3, #1
 800ce26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800ce28:	2310      	movs	r3, #16
 800ce2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ce2c:	2302      	movs	r3, #2
 800ce2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800ce30:	2300      	movs	r3, #0
 800ce32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800ce34:	2310      	movs	r3, #16
 800ce36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800ce38:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800ce3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800ce3e:	2304      	movs	r3, #4
 800ce40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800ce42:	2307      	movs	r3, #7
 800ce44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ce46:	f107 0320 	add.w	r3, r7, #32
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f001 fc26 	bl	800e69c <HAL_RCC_OscConfig>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800ce56:	f000 fa95 	bl	800d384 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ce5a:	230f      	movs	r3, #15
 800ce5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ce5e:	2302      	movs	r3, #2
 800ce60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ce62:	2300      	movs	r3, #0
 800ce64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ce66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ce6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800ce70:	f107 030c 	add.w	r3, r7, #12
 800ce74:	2102      	movs	r1, #2
 800ce76:	4618      	mov	r0, r3
 800ce78:	f001 fe88 	bl	800eb8c <HAL_RCC_ClockConfig>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800ce82:	f000 fa7f 	bl	800d384 <Error_Handler>
  }
}
 800ce86:	bf00      	nop
 800ce88:	3750      	adds	r7, #80	@ 0x50
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	40023800 	.word	0x40023800
 800ce94:	40007000 	.word	0x40007000

0800ce98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800ce9c:	4b06      	ldr	r3, [pc, #24]	@ (800ceb8 <MX_CRC_Init+0x20>)
 800ce9e:	4a07      	ldr	r2, [pc, #28]	@ (800cebc <MX_CRC_Init+0x24>)
 800cea0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800cea2:	4805      	ldr	r0, [pc, #20]	@ (800ceb8 <MX_CRC_Init+0x20>)
 800cea4:	f000 ff02 	bl	800dcac <HAL_CRC_Init>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d001      	beq.n	800ceb2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800ceae:	f000 fa69 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800ceb2:	bf00      	nop
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20000334 	.word	0x20000334
 800cebc:	40023000 	.word	0x40023000

0800cec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cec6:	f107 0308 	add.w	r3, r7, #8
 800ceca:	2200      	movs	r2, #0
 800cecc:	601a      	str	r2, [r3, #0]
 800cece:	605a      	str	r2, [r3, #4]
 800ced0:	609a      	str	r2, [r3, #8]
 800ced2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ced4:	463b      	mov	r3, r7
 800ced6:	2200      	movs	r2, #0
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800cedc:	4b1f      	ldr	r3, [pc, #124]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800cede:	4a20      	ldr	r2, [pc, #128]	@ (800cf60 <MX_TIM1_Init+0xa0>)
 800cee0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3999;
 800cee2:	4b1e      	ldr	r3, [pc, #120]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800cee4:	f640 729f 	movw	r2, #3999	@ 0xf9f
 800cee8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ceea:	4b1c      	ldr	r3, [pc, #112]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800ceec:	2200      	movs	r2, #0
 800ceee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20999;
 800cef0:	4b1a      	ldr	r3, [pc, #104]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800cef2:	f245 2207 	movw	r2, #20999	@ 0x5207
 800cef6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cef8:	4b18      	ldr	r3, [pc, #96]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800cefe:	4b17      	ldr	r3, [pc, #92]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800cf04:	4b15      	ldr	r3, [pc, #84]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800cf06:	2280      	movs	r2, #128	@ 0x80
 800cf08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800cf0a:	4814      	ldr	r0, [pc, #80]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800cf0c:	f002 f890 	bl	800f030 <HAL_TIM_Base_Init>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d001      	beq.n	800cf1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800cf16:	f000 fa35 	bl	800d384 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cf1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800cf20:	f107 0308 	add.w	r3, r7, #8
 800cf24:	4619      	mov	r1, r3
 800cf26:	480d      	ldr	r0, [pc, #52]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800cf28:	f002 fa24 	bl	800f374 <HAL_TIM_ConfigClockSource>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800cf32:	f000 fa27 	bl	800d384 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf36:	2300      	movs	r3, #0
 800cf38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800cf3e:	463b      	mov	r3, r7
 800cf40:	4619      	mov	r1, r3
 800cf42:	4806      	ldr	r0, [pc, #24]	@ (800cf5c <MX_TIM1_Init+0x9c>)
 800cf44:	f002 fc2c 	bl	800f7a0 <HAL_TIMEx_MasterConfigSynchronization>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d001      	beq.n	800cf52 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800cf4e:	f000 fa19 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800cf52:	bf00      	nop
 800cf54:	3718      	adds	r7, #24
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	2000033c 	.word	0x2000033c
 800cf60:	40010000 	.word	0x40010000

0800cf64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800cf68:	4b11      	ldr	r3, [pc, #68]	@ (800cfb0 <MX_USART1_UART_Init+0x4c>)
 800cf6a:	4a12      	ldr	r2, [pc, #72]	@ (800cfb4 <MX_USART1_UART_Init+0x50>)
 800cf6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800cf6e:	4b10      	ldr	r3, [pc, #64]	@ (800cfb0 <MX_USART1_UART_Init+0x4c>)
 800cf70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cf74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800cf76:	4b0e      	ldr	r3, [pc, #56]	@ (800cfb0 <MX_USART1_UART_Init+0x4c>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800cf7c:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb0 <MX_USART1_UART_Init+0x4c>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800cf82:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb0 <MX_USART1_UART_Init+0x4c>)
 800cf84:	2200      	movs	r2, #0
 800cf86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800cf88:	4b09      	ldr	r3, [pc, #36]	@ (800cfb0 <MX_USART1_UART_Init+0x4c>)
 800cf8a:	220c      	movs	r2, #12
 800cf8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cf8e:	4b08      	ldr	r3, [pc, #32]	@ (800cfb0 <MX_USART1_UART_Init+0x4c>)
 800cf90:	2200      	movs	r2, #0
 800cf92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800cf94:	4b06      	ldr	r3, [pc, #24]	@ (800cfb0 <MX_USART1_UART_Init+0x4c>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800cf9a:	4805      	ldr	r0, [pc, #20]	@ (800cfb0 <MX_USART1_UART_Init+0x4c>)
 800cf9c:	f002 fc82 	bl	800f8a4 <HAL_UART_Init>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d001      	beq.n	800cfaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800cfa6:	f000 f9ed 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800cfaa:	bf00      	nop
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	20000384 	.word	0x20000384
 800cfb4:	40011000 	.word	0x40011000

0800cfb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800cfbc:	4b11      	ldr	r3, [pc, #68]	@ (800d004 <MX_USART2_UART_Init+0x4c>)
 800cfbe:	4a12      	ldr	r2, [pc, #72]	@ (800d008 <MX_USART2_UART_Init+0x50>)
 800cfc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800cfc2:	4b10      	ldr	r3, [pc, #64]	@ (800d004 <MX_USART2_UART_Init+0x4c>)
 800cfc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800cfc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800cfca:	4b0e      	ldr	r3, [pc, #56]	@ (800d004 <MX_USART2_UART_Init+0x4c>)
 800cfcc:	2200      	movs	r2, #0
 800cfce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800cfd0:	4b0c      	ldr	r3, [pc, #48]	@ (800d004 <MX_USART2_UART_Init+0x4c>)
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800cfd6:	4b0b      	ldr	r3, [pc, #44]	@ (800d004 <MX_USART2_UART_Init+0x4c>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800cfdc:	4b09      	ldr	r3, [pc, #36]	@ (800d004 <MX_USART2_UART_Init+0x4c>)
 800cfde:	220c      	movs	r2, #12
 800cfe0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800cfe2:	4b08      	ldr	r3, [pc, #32]	@ (800d004 <MX_USART2_UART_Init+0x4c>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800cfe8:	4b06      	ldr	r3, [pc, #24]	@ (800d004 <MX_USART2_UART_Init+0x4c>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800cfee:	4805      	ldr	r0, [pc, #20]	@ (800d004 <MX_USART2_UART_Init+0x4c>)
 800cff0:	f002 fc58 	bl	800f8a4 <HAL_UART_Init>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d001      	beq.n	800cffe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800cffa:	f000 f9c3 	bl	800d384 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800cffe:	bf00      	nop
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	200003cc 	.word	0x200003cc
 800d008:	40004400 	.word	0x40004400

0800d00c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b08a      	sub	sp, #40	@ 0x28
 800d010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d012:	f107 0314 	add.w	r3, r7, #20
 800d016:	2200      	movs	r2, #0
 800d018:	601a      	str	r2, [r3, #0]
 800d01a:	605a      	str	r2, [r3, #4]
 800d01c:	609a      	str	r2, [r3, #8]
 800d01e:	60da      	str	r2, [r3, #12]
 800d020:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d022:	2300      	movs	r3, #0
 800d024:	613b      	str	r3, [r7, #16]
 800d026:	4b31      	ldr	r3, [pc, #196]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d02a:	4a30      	ldr	r2, [pc, #192]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d02c:	f043 0304 	orr.w	r3, r3, #4
 800d030:	6313      	str	r3, [r2, #48]	@ 0x30
 800d032:	4b2e      	ldr	r3, [pc, #184]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d036:	f003 0304 	and.w	r3, r3, #4
 800d03a:	613b      	str	r3, [r7, #16]
 800d03c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800d03e:	2300      	movs	r3, #0
 800d040:	60fb      	str	r3, [r7, #12]
 800d042:	4b2a      	ldr	r3, [pc, #168]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d046:	4a29      	ldr	r2, [pc, #164]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d04c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d04e:	4b27      	ldr	r3, [pc, #156]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d056:	60fb      	str	r3, [r7, #12]
 800d058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d05a:	2300      	movs	r3, #0
 800d05c:	60bb      	str	r3, [r7, #8]
 800d05e:	4b23      	ldr	r3, [pc, #140]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d062:	4a22      	ldr	r2, [pc, #136]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d064:	f043 0301 	orr.w	r3, r3, #1
 800d068:	6313      	str	r3, [r2, #48]	@ 0x30
 800d06a:	4b20      	ldr	r3, [pc, #128]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d06c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	60bb      	str	r3, [r7, #8]
 800d074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d076:	2300      	movs	r3, #0
 800d078:	607b      	str	r3, [r7, #4]
 800d07a:	4b1c      	ldr	r3, [pc, #112]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d07c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d07e:	4a1b      	ldr	r2, [pc, #108]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d080:	f043 0302 	orr.w	r3, r3, #2
 800d084:	6313      	str	r3, [r2, #48]	@ 0x30
 800d086:	4b19      	ldr	r3, [pc, #100]	@ (800d0ec <MX_GPIO_Init+0xe0>)
 800d088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d08a:	f003 0302 	and.w	r3, r3, #2
 800d08e:	607b      	str	r3, [r7, #4]
 800d090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800d092:	2200      	movs	r2, #0
 800d094:	2120      	movs	r1, #32
 800d096:	4816      	ldr	r0, [pc, #88]	@ (800d0f0 <MX_GPIO_Init+0xe4>)
 800d098:	f001 fab4 	bl	800e604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800d09c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d0a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800d0a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800d0a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800d0ac:	f107 0314 	add.w	r3, r7, #20
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	4810      	ldr	r0, [pc, #64]	@ (800d0f4 <MX_GPIO_Init+0xe8>)
 800d0b4:	f001 f922 	bl	800e2fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800d0b8:	2320      	movs	r3, #32
 800d0ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800d0c8:	f107 0314 	add.w	r3, r7, #20
 800d0cc:	4619      	mov	r1, r3
 800d0ce:	4808      	ldr	r0, [pc, #32]	@ (800d0f0 <MX_GPIO_Init+0xe4>)
 800d0d0:	f001 f914 	bl	800e2fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2105      	movs	r1, #5
 800d0d8:	2028      	movs	r0, #40	@ 0x28
 800d0da:	f000 fdbd 	bl	800dc58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800d0de:	2028      	movs	r0, #40	@ 0x28
 800d0e0:	f000 fdd6 	bl	800dc90 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d0e4:	bf00      	nop
 800d0e6:	3728      	adds	r7, #40	@ 0x28
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	40023800 	.word	0x40023800
 800d0f0:	40020000 	.word	0x40020000
 800d0f4:	40020800 	.word	0x40020800

0800d0f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// Interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af02      	add	r7, sp, #8
 800d0fe:	4603      	mov	r3, r0
 800d100:	80fb      	strh	r3, [r7, #6]
	uint32_t ulStatusRegister;
  // Execute when blue push button pressed
  if(GPIO_Pin == GPIO_PIN_13) {
 800d102:	88fb      	ldrh	r3, [r7, #6]
 800d104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d108:	d10c      	bne.n	800d124 <HAL_GPIO_EXTI_Callback+0x2c>
	  printf("F401: Button pressed, starting receive task \r\n");
 800d10a:	4809      	ldr	r0, [pc, #36]	@ (800d130 <HAL_GPIO_EXTI_Callback+0x38>)
 800d10c:	f004 fed2 	bl	8011eb4 <puts>

	  //ulStatusRegister = ulReadPeripheralInterruptStatus();
	  //vClearPeripheralInterruptStatus( ulStatusRegister );
	  xTaskNotifyFromISR( receiveTaskHandle, 0x01, eSetBits, NULL );
 800d110:	4b08      	ldr	r3, [pc, #32]	@ (800d134 <HAL_GPIO_EXTI_Callback+0x3c>)
 800d112:	6818      	ldr	r0, [r3, #0]
 800d114:	2300      	movs	r3, #0
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	2300      	movs	r3, #0
 800d11a:	2201      	movs	r2, #1
 800d11c:	2101      	movs	r1, #1
 800d11e:	f003 ff7f 	bl	8011020 <xTaskGenericNotifyFromISR>
	  //vTaskResume(receiveTaskHandle);
  } else {
      __NOP();
  }
}
 800d122:	e000      	b.n	800d126 <HAL_GPIO_EXTI_Callback+0x2e>
      __NOP();
 800d124:	bf00      	nop
}
 800d126:	bf00      	nop
 800d128:	3708      	adds	r7, #8
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	08012fac 	.word	0x08012fac
 800d134:	20000418 	.word	0x20000418

0800d138 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800d140:	2120      	movs	r1, #32
 800d142:	4804      	ldr	r0, [pc, #16]	@ (800d154 <StartDefaultTask+0x1c>)
 800d144:	f001 fa77 	bl	800e636 <HAL_GPIO_TogglePin>
	  //printf("F401: Normal operation \r\n");
	  osDelay(200);
 800d148:	20c8      	movs	r0, #200	@ 0xc8
 800d14a:	f003 f8b8 	bl	80102be <osDelay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800d14e:	bf00      	nop
 800d150:	e7f6      	b.n	800d140 <StartDefaultTask+0x8>
 800d152:	bf00      	nop
 800d154:	40020000 	.word	0x40020000

0800d158 <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 800d158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d15a:	b0c9      	sub	sp, #292	@ 0x124
 800d15c:	af10      	add	r7, sp, #64	@ 0x40
 800d15e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
	uint32_t ulInterruptStatus;
	uint16_t has_written = 0;
 800d160:	2300      	movs	r3, #0
 800d162:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
	char input[100];
	/* Infinite loop */
	for (;;) {
		xTaskNotifyWait( 0x00, 0xffffffff, NULL, pdMS_TO_TICKS(100000) );
 800d166:	4b4d      	ldr	r3, [pc, #308]	@ (800d29c <StartReceiveTask+0x144>)
 800d168:	2200      	movs	r2, #0
 800d16a:	f04f 31ff 	mov.w	r1, #4294967295
 800d16e:	2000      	movs	r0, #0
 800d170:	f003 fef6 	bl	8010f60 <xTaskNotifyWait>

		// Read the user input
		printf("\r\n Code to update: \r\n");
 800d174:	484a      	ldr	r0, [pc, #296]	@ (800d2a0 <StartReceiveTask+0x148>)
 800d176:	f004 fe9d 	bl	8011eb4 <puts>
		//if(scanf("%s", input) != -1){
		//TODO: fgets doesn't read newline?
		if (fgets(input, 10, stdin)) {
 800d17a:	4b4a      	ldr	r3, [pc, #296]	@ (800d2a4 <StartReceiveTask+0x14c>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d184:	210a      	movs	r1, #10
 800d186:	4618      	mov	r0, r3
 800d188:	f004 fd60 	bl	8011c4c <fgets>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d06f      	beq.n	800d272 <StartReceiveTask+0x11a>
			size_t len = strlen(input);
 800d192:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d196:	4618      	mov	r0, r3
 800d198:	f7fe ffa2 	bl	800c0e0 <strlen>
 800d19c:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
			printf("Length: %d", len);
 800d1a0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 800d1a4:	4840      	ldr	r0, [pc, #256]	@ (800d2a8 <StartReceiveTask+0x150>)
 800d1a6:	f004 fe1d 	bl	8011de4 <iprintf>
			if (feof(stdin) || (len != 0 /*&& input[len - 1] == '\n'*/))
 800d1aa:	4b3e      	ldr	r3, [pc, #248]	@ (800d2a4 <StartReceiveTask+0x14c>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f004 fcc1 	bl	8011b38 <feof>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d103      	bne.n	800d1c4 <StartReceiveTask+0x6c>
 800d1bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d005      	beq.n	800d1d0 <StartReceiveTask+0x78>
				printf("\r\n Code received:  %s \r\n", input);
 800d1c4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	4838      	ldr	r0, [pc, #224]	@ (800d2ac <StartReceiveTask+0x154>)
 800d1cc:	f004 fe0a 	bl	8011de4 <iprintf>

				//Write to flash
				//uint16_t data[100];
				for(uint8_t i = 0; i<len; i++){
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
 800d1d6:	e00e      	b.n	800d1f6 <StartReceiveTask+0x9e>
					printf("%d", input[i]);
 800d1d8:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 800d1dc:	33e0      	adds	r3, #224	@ 0xe0
 800d1de:	443b      	add	r3, r7
 800d1e0:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	4832      	ldr	r0, [pc, #200]	@ (800d2b0 <StartReceiveTask+0x158>)
 800d1e8:	f004 fdfc 	bl	8011de4 <iprintf>
				for(uint8_t i = 0; i<len; i++){
 800d1ec:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	f887 30dd 	strb.w	r3, [r7, #221]	@ 0xdd
 800d1f6:	f897 30dd 	ldrb.w	r3, [r7, #221]	@ 0xdd
 800d1fa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d8ea      	bhi.n	800d1d8 <StartReceiveTask+0x80>
					//sscanf(input[i], "%d", data[i]);
				}
				printf("\r\n");
 800d202:	482c      	ldr	r0, [pc, #176]	@ (800d2b4 <StartReceiveTask+0x15c>)
 800d204:	f004 fe56 	bl	8011eb4 <puts>

				//readFlash(huart2, 26);

				char data[100] = "Hello, this is updated code";
 800d208:	4b2b      	ldr	r3, [pc, #172]	@ (800d2b8 <StartReceiveTask+0x160>)
 800d20a:	f107 040c 	add.w	r4, r7, #12
 800d20e:	461d      	mov	r5, r3
 800d210:	6828      	ldr	r0, [r5, #0]
 800d212:	6869      	ldr	r1, [r5, #4]
 800d214:	68aa      	ldr	r2, [r5, #8]
 800d216:	68eb      	ldr	r3, [r5, #12]
 800d218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d21a:	6928      	ldr	r0, [r5, #16]
 800d21c:	6969      	ldr	r1, [r5, #20]
 800d21e:	69aa      	ldr	r2, [r5, #24]
 800d220:	c407      	stmia	r4!, {r0, r1, r2}
 800d222:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d226:	2248      	movs	r2, #72	@ 0x48
 800d228:	2100      	movs	r1, #0
 800d22a:	4618      	mov	r0, r3
 800d22c:	f005 f858 	bl	80122e0 <memset>

				if(has_written == 0){
 800d230:	f8b7 30de 	ldrh.w	r3, [r7, #222]	@ 0xde
 800d234:	2b00      	cmp	r3, #0
 800d236:	d118      	bne.n	800d26a <StartReceiveTask+0x112>
					writeToFlash(huart2, data);
 800d238:	4e20      	ldr	r6, [pc, #128]	@ (800d2bc <StartReceiveTask+0x164>)
 800d23a:	f107 030c 	add.w	r3, r7, #12
 800d23e:	930e      	str	r3, [sp, #56]	@ 0x38
 800d240:	466d      	mov	r5, sp
 800d242:	f106 0410 	add.w	r4, r6, #16
 800d246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d24a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d24c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d24e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d252:	e894 0003 	ldmia.w	r4, {r0, r1}
 800d256:	e885 0003 	stmia.w	r5, {r0, r1}
 800d25a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800d25e:	f000 fb3b 	bl	800d8d8 <writeToFlash>
					has_written = 1;
 800d262:	2301      	movs	r3, #1
 800d264:	f8a7 30de 	strh.w	r3, [r7, #222]	@ 0xde
 800d268:	e006      	b.n	800d278 <StartReceiveTask+0x120>
				}

			else
				printf("Invalid input, please respect the limit of 100 characters.");
 800d26a:	4815      	ldr	r0, [pc, #84]	@ (800d2c0 <StartReceiveTask+0x168>)
 800d26c:	f004 fdba 	bl	8011de4 <iprintf>
 800d270:	e002      	b.n	800d278 <StartReceiveTask+0x120>
		} else {
			printf("Invalid input, please respect the limit of 100 characters.");
 800d272:	4813      	ldr	r0, [pc, #76]	@ (800d2c0 <StartReceiveTask+0x168>)
 800d274:	f004 fdb6 	bl	8011de4 <iprintf>
		}

		//CRC
		uint32_t crcValue = HAL_CRC_Calculate(&hcrc, input, sizeof(input));
 800d278:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d27c:	2264      	movs	r2, #100	@ 0x64
 800d27e:	4619      	mov	r1, r3
 800d280:	4810      	ldr	r0, [pc, #64]	@ (800d2c4 <StartReceiveTask+0x16c>)
 800d282:	f000 fd2f 	bl	800dce4 <HAL_CRC_Calculate>
 800d286:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		printf("CRC Value: %u \r\n", crcValue);
 800d28a:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 800d28e:	480e      	ldr	r0, [pc, #56]	@ (800d2c8 <StartReceiveTask+0x170>)
 800d290:	f004 fda8 	bl	8011de4 <iprintf>

		//vTaskSuspend(receiveTaskHandle);
		osDelay(1);
 800d294:	2001      	movs	r0, #1
 800d296:	f003 f812 	bl	80102be <osDelay>
	for (;;) {
 800d29a:	e764      	b.n	800d166 <StartReceiveTask+0xe>
 800d29c:	000186a0 	.word	0x000186a0
 800d2a0:	08012fdc 	.word	0x08012fdc
 800d2a4:	20000024 	.word	0x20000024
 800d2a8:	08012ff4 	.word	0x08012ff4
 800d2ac:	08013000 	.word	0x08013000
 800d2b0:	0801301c 	.word	0x0801301c
 800d2b4:	08013020 	.word	0x08013020
 800d2b8:	08013074 	.word	0x08013074
 800d2bc:	200003cc 	.word	0x200003cc
 800d2c0:	08013024 	.word	0x08013024
 800d2c4:	20000334 	.word	0x20000334
 800d2c8:	08013060 	.word	0x08013060

0800d2cc <StartStatusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStatusTask */
void StartStatusTask(void const * argument)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStatusTask */
  int prevTime = HAL_GetTick();
 800d2d4:	f000 fbfc 	bl	800dad0 <HAL_GetTick>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	617b      	str	r3, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  int currentTime = HAL_GetTick();
 800d2dc:	f000 fbf8 	bl	800dad0 <HAL_GetTick>
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	613b      	str	r3, [r7, #16]
	  if(currentTime < prevTime + statusDelay) {
 800d2e4:	4b16      	ldr	r3, [pc, #88]	@ (800d340 <StartStatusTask+0x74>)
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	da05      	bge.n	800d2fe <StartStatusTask+0x32>
		  osDelay(currentTime + statusDelay - currentTime);
 800d2f2:	4b13      	ldr	r3, [pc, #76]	@ (800d340 <StartStatusTask+0x74>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f002 ffe1 	bl	80102be <osDelay>
 800d2fc:	e7ee      	b.n	800d2dc <StartStatusTask+0x10>
	  } else {
		  printf("F401: Starting status transmission \r\n");
 800d2fe:	4811      	ldr	r0, [pc, #68]	@ (800d344 <StartStatusTask+0x78>)
 800d300:	f004 fdd8 	bl	8011eb4 <puts>
		  uint8_t checkSum = 2+version;
 800d304:	4b10      	ldr	r3, [pc, #64]	@ (800d348 <StartStatusTask+0x7c>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	3302      	adds	r3, #2
 800d30a:	73fb      	strb	r3, [r7, #15]
		  uint8_t tx_buff[]={1,0,1,0,version,checkSum};
 800d30c:	2301      	movs	r3, #1
 800d30e:	723b      	strb	r3, [r7, #8]
 800d310:	2300      	movs	r3, #0
 800d312:	727b      	strb	r3, [r7, #9]
 800d314:	2301      	movs	r3, #1
 800d316:	72bb      	strb	r3, [r7, #10]
 800d318:	2300      	movs	r3, #0
 800d31a:	72fb      	strb	r3, [r7, #11]
 800d31c:	4b0a      	ldr	r3, [pc, #40]	@ (800d348 <StartStatusTask+0x7c>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	733b      	strb	r3, [r7, #12]
 800d322:	7bfb      	ldrb	r3, [r7, #15]
 800d324:	737b      	strb	r3, [r7, #13]
		  HAL_UART_Transmit(&huart1, tx_buff, 6, 1000);
 800d326:	f107 0108 	add.w	r1, r7, #8
 800d32a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d32e:	2206      	movs	r2, #6
 800d330:	4806      	ldr	r0, [pc, #24]	@ (800d34c <StartStatusTask+0x80>)
 800d332:	f002 fb07 	bl	800f944 <HAL_UART_Transmit>
		  osDelay(10000);
 800d336:	f242 7010 	movw	r0, #10000	@ 0x2710
 800d33a:	f002 ffc0 	bl	80102be <osDelay>
  {
 800d33e:	e7cd      	b.n	800d2dc <StartStatusTask+0x10>
 800d340:	20000004 	.word	0x20000004
 800d344:	08013090 	.word	0x08013090
 800d348:	20000000 	.word	0x20000000
 800d34c:	20000384 	.word	0x20000384

0800d350 <StartUpdateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateTask */
void StartUpdateTask(void const * argument)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdateTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800d358:	2001      	movs	r0, #1
 800d35a:	f002 ffb0 	bl	80102be <osDelay>
 800d35e:	e7fb      	b.n	800d358 <StartUpdateTask+0x8>

0800d360 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4a04      	ldr	r2, [pc, #16]	@ (800d380 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	d101      	bne.n	800d376 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800d372:	f000 fb99 	bl	800daa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800d376:	bf00      	nop
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	40000c00 	.word	0x40000c00

0800d384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d384:	b480      	push	{r7}
 800d386:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800d388:	b672      	cpsid	i
}
 800d38a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d38c:	bf00      	nop
 800d38e:	e7fd      	b.n	800d38c <Error_Handler+0x8>

0800d390 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800d398:	4a07      	ldr	r2, [pc, #28]	@ (800d3b8 <RetargetInit+0x28>)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800d39e:	4b07      	ldr	r3, [pc, #28]	@ (800d3bc <RetargetInit+0x2c>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	6898      	ldr	r0, [r3, #8]
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	2202      	movs	r2, #2
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	f004 fe0d 	bl	8011fc8 <setvbuf>
}
 800d3ae:	bf00      	nop
 800d3b0:	3708      	adds	r7, #8
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	20000424 	.word	0x20000424
 800d3bc:	20000024 	.word	0x20000024

0800d3c0 <_isatty>:

int _isatty(int fd) {
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	db04      	blt.n	800d3d8 <_isatty+0x18>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	dc01      	bgt.n	800d3d8 <_isatty+0x18>
    return 1;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e005      	b.n	800d3e4 <_isatty+0x24>

  errno = EBADF;
 800d3d8:	f005 f826 	bl	8012428 <__errno>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2209      	movs	r2, #9
 800d3e0:	601a      	str	r2, [r3, #0]
  return 0;
 800d3e2:	2300      	movs	r3, #0
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3708      	adds	r7, #8
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <_write>:

int _write(int fd, char* ptr, int len) {
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2b01      	cmp	r3, #1
 800d3fc:	d002      	beq.n	800d404 <_write+0x18>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2b02      	cmp	r3, #2
 800d402:	d111      	bne.n	800d428 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800d404:	4b0e      	ldr	r3, [pc, #56]	@ (800d440 <_write+0x54>)
 800d406:	6818      	ldr	r0, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	b29a      	uxth	r2, r3
 800d40c:	f04f 33ff 	mov.w	r3, #4294967295
 800d410:	68b9      	ldr	r1, [r7, #8]
 800d412:	f002 fa97 	bl	800f944 <HAL_UART_Transmit>
 800d416:	4603      	mov	r3, r0
 800d418:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800d41a:	7dfb      	ldrb	r3, [r7, #23]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d101      	bne.n	800d424 <_write+0x38>
      return len;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	e008      	b.n	800d436 <_write+0x4a>
    else
      return EIO;
 800d424:	2305      	movs	r3, #5
 800d426:	e006      	b.n	800d436 <_write+0x4a>
  }
  errno = EBADF;
 800d428:	f004 fffe 	bl	8012428 <__errno>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2209      	movs	r2, #9
 800d430:	601a      	str	r2, [r3, #0]
  return -1;
 800d432:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	20000424 	.word	0x20000424

0800d444 <_close>:

int _close(int fd) {
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	db04      	blt.n	800d45c <_close+0x18>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b02      	cmp	r3, #2
 800d456:	dc01      	bgt.n	800d45c <_close+0x18>
    return 0;
 800d458:	2300      	movs	r3, #0
 800d45a:	e006      	b.n	800d46a <_close+0x26>

  errno = EBADF;
 800d45c:	f004 ffe4 	bl	8012428 <__errno>
 800d460:	4603      	mov	r3, r0
 800d462:	2209      	movs	r2, #9
 800d464:	601a      	str	r2, [r3, #0]
  return -1;
 800d466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3708      	adds	r7, #8
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800d472:	b580      	push	{r7, lr}
 800d474:	b084      	sub	sp, #16
 800d476:	af00      	add	r7, sp, #0
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	60b9      	str	r1, [r7, #8]
 800d47c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800d47e:	f004 ffd3 	bl	8012428 <__errno>
 800d482:	4603      	mov	r3, r0
 800d484:	2209      	movs	r2, #9
 800d486:	601a      	str	r2, [r3, #0]
  return -1;
 800d488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <_read>:

int _read(int fd, char* ptr, int len) {
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d110      	bne.n	800d4c8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800d4a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d4e0 <_read+0x4c>)
 800d4a8:	6818      	ldr	r0, [r3, #0]
 800d4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	68b9      	ldr	r1, [r7, #8]
 800d4b2:	f002 fad2 	bl	800fa5a <HAL_UART_Receive>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <_read+0x30>
      return 1;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e008      	b.n	800d4d6 <_read+0x42>
    else
      return EIO;
 800d4c4:	2305      	movs	r3, #5
 800d4c6:	e006      	b.n	800d4d6 <_read+0x42>
  }
  errno = EBADF;
 800d4c8:	f004 ffae 	bl	8012428 <__errno>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2209      	movs	r2, #9
 800d4d0:	601a      	str	r2, [r3, #0]
  return -1;
 800d4d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3718      	adds	r7, #24
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd80      	pop	{r7, pc}
 800d4de:	bf00      	nop
 800d4e0:	20000424 	.word	0x20000424

0800d4e4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	db08      	blt.n	800d506 <_fstat+0x22>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2b02      	cmp	r3, #2
 800d4f8:	dc05      	bgt.n	800d506 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d500:	605a      	str	r2, [r3, #4]
    return 0;
 800d502:	2300      	movs	r3, #0
 800d504:	e005      	b.n	800d512 <_fstat+0x2e>
  }

  errno = EBADF;
 800d506:	f004 ff8f 	bl	8012428 <__errno>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2209      	movs	r2, #9
 800d50e:	601a      	str	r2, [r3, #0]
  return 0;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d522:	2300      	movs	r3, #0
 800d524:	607b      	str	r3, [r7, #4]
 800d526:	4b12      	ldr	r3, [pc, #72]	@ (800d570 <HAL_MspInit+0x54>)
 800d528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d52a:	4a11      	ldr	r2, [pc, #68]	@ (800d570 <HAL_MspInit+0x54>)
 800d52c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d530:	6453      	str	r3, [r2, #68]	@ 0x44
 800d532:	4b0f      	ldr	r3, [pc, #60]	@ (800d570 <HAL_MspInit+0x54>)
 800d534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d536:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d53a:	607b      	str	r3, [r7, #4]
 800d53c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d53e:	2300      	movs	r3, #0
 800d540:	603b      	str	r3, [r7, #0]
 800d542:	4b0b      	ldr	r3, [pc, #44]	@ (800d570 <HAL_MspInit+0x54>)
 800d544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d546:	4a0a      	ldr	r2, [pc, #40]	@ (800d570 <HAL_MspInit+0x54>)
 800d548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d54c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d54e:	4b08      	ldr	r3, [pc, #32]	@ (800d570 <HAL_MspInit+0x54>)
 800d550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d556:	603b      	str	r3, [r7, #0]
 800d558:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d55a:	2200      	movs	r2, #0
 800d55c:	210f      	movs	r1, #15
 800d55e:	f06f 0001 	mvn.w	r0, #1
 800d562:	f000 fb79 	bl	800dc58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d566:	bf00      	nop
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	40023800 	.word	0x40023800

0800d574 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4a0b      	ldr	r2, [pc, #44]	@ (800d5b0 <HAL_CRC_MspInit+0x3c>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d10d      	bne.n	800d5a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800d586:	2300      	movs	r3, #0
 800d588:	60fb      	str	r3, [r7, #12]
 800d58a:	4b0a      	ldr	r3, [pc, #40]	@ (800d5b4 <HAL_CRC_MspInit+0x40>)
 800d58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d58e:	4a09      	ldr	r2, [pc, #36]	@ (800d5b4 <HAL_CRC_MspInit+0x40>)
 800d590:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d594:	6313      	str	r3, [r2, #48]	@ 0x30
 800d596:	4b07      	ldr	r3, [pc, #28]	@ (800d5b4 <HAL_CRC_MspInit+0x40>)
 800d598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d59a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d59e:	60fb      	str	r3, [r7, #12]
 800d5a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800d5a2:	bf00      	nop
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr
 800d5ae:	bf00      	nop
 800d5b0:	40023000 	.word	0x40023000
 800d5b4:	40023800 	.word	0x40023800

0800d5b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a0b      	ldr	r2, [pc, #44]	@ (800d5f4 <HAL_TIM_Base_MspInit+0x3c>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d10d      	bne.n	800d5e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	4b0a      	ldr	r3, [pc, #40]	@ (800d5f8 <HAL_TIM_Base_MspInit+0x40>)
 800d5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5d2:	4a09      	ldr	r2, [pc, #36]	@ (800d5f8 <HAL_TIM_Base_MspInit+0x40>)
 800d5d4:	f043 0301 	orr.w	r3, r3, #1
 800d5d8:	6453      	str	r3, [r2, #68]	@ 0x44
 800d5da:	4b07      	ldr	r3, [pc, #28]	@ (800d5f8 <HAL_TIM_Base_MspInit+0x40>)
 800d5dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800d5e6:	bf00      	nop
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	40010000 	.word	0x40010000
 800d5f8:	40023800 	.word	0x40023800

0800d5fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b08c      	sub	sp, #48	@ 0x30
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d604:	f107 031c 	add.w	r3, r7, #28
 800d608:	2200      	movs	r2, #0
 800d60a:	601a      	str	r2, [r3, #0]
 800d60c:	605a      	str	r2, [r3, #4]
 800d60e:	609a      	str	r2, [r3, #8]
 800d610:	60da      	str	r2, [r3, #12]
 800d612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a32      	ldr	r2, [pc, #200]	@ (800d6e4 <HAL_UART_MspInit+0xe8>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d12d      	bne.n	800d67a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800d61e:	2300      	movs	r3, #0
 800d620:	61bb      	str	r3, [r7, #24]
 800d622:	4b31      	ldr	r3, [pc, #196]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d626:	4a30      	ldr	r2, [pc, #192]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d628:	f043 0310 	orr.w	r3, r3, #16
 800d62c:	6453      	str	r3, [r2, #68]	@ 0x44
 800d62e:	4b2e      	ldr	r3, [pc, #184]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d632:	f003 0310 	and.w	r3, r3, #16
 800d636:	61bb      	str	r3, [r7, #24]
 800d638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d63a:	2300      	movs	r3, #0
 800d63c:	617b      	str	r3, [r7, #20]
 800d63e:	4b2a      	ldr	r3, [pc, #168]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d642:	4a29      	ldr	r2, [pc, #164]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d644:	f043 0301 	orr.w	r3, r3, #1
 800d648:	6313      	str	r3, [r2, #48]	@ 0x30
 800d64a:	4b27      	ldr	r3, [pc, #156]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d64c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	617b      	str	r3, [r7, #20]
 800d654:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d656:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800d65a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d65c:	2302      	movs	r3, #2
 800d65e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d660:	2300      	movs	r3, #0
 800d662:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d664:	2300      	movs	r3, #0
 800d666:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d668:	2307      	movs	r3, #7
 800d66a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d66c:	f107 031c 	add.w	r3, r7, #28
 800d670:	4619      	mov	r1, r3
 800d672:	481e      	ldr	r0, [pc, #120]	@ (800d6ec <HAL_UART_MspInit+0xf0>)
 800d674:	f000 fe42 	bl	800e2fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800d678:	e030      	b.n	800d6dc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	4a1c      	ldr	r2, [pc, #112]	@ (800d6f0 <HAL_UART_MspInit+0xf4>)
 800d680:	4293      	cmp	r3, r2
 800d682:	d12b      	bne.n	800d6dc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d684:	2300      	movs	r3, #0
 800d686:	613b      	str	r3, [r7, #16]
 800d688:	4b17      	ldr	r3, [pc, #92]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d68c:	4a16      	ldr	r2, [pc, #88]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d68e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d692:	6413      	str	r3, [r2, #64]	@ 0x40
 800d694:	4b14      	ldr	r3, [pc, #80]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d69c:	613b      	str	r3, [r7, #16]
 800d69e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	60fb      	str	r3, [r7, #12]
 800d6a4:	4b10      	ldr	r3, [pc, #64]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d6a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6a8:	4a0f      	ldr	r2, [pc, #60]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d6aa:	f043 0301 	orr.w	r3, r3, #1
 800d6ae:	6313      	str	r3, [r2, #48]	@ 0x30
 800d6b0:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e8 <HAL_UART_MspInit+0xec>)
 800d6b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6b4:	f003 0301 	and.w	r3, r3, #1
 800d6b8:	60fb      	str	r3, [r7, #12]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800d6bc:	230c      	movs	r3, #12
 800d6be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d6cc:	2307      	movs	r3, #7
 800d6ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6d0:	f107 031c 	add.w	r3, r7, #28
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	4805      	ldr	r0, [pc, #20]	@ (800d6ec <HAL_UART_MspInit+0xf0>)
 800d6d8:	f000 fe10 	bl	800e2fc <HAL_GPIO_Init>
}
 800d6dc:	bf00      	nop
 800d6de:	3730      	adds	r7, #48	@ 0x30
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	40011000 	.word	0x40011000
 800d6e8:	40023800 	.word	0x40023800
 800d6ec:	40020000 	.word	0x40020000
 800d6f0:	40004400 	.word	0x40004400

0800d6f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b08e      	sub	sp, #56	@ 0x38
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800d700:	2300      	movs	r3, #0
 800d702:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800d704:	2300      	movs	r3, #0
 800d706:	60fb      	str	r3, [r7, #12]
 800d708:	4b33      	ldr	r3, [pc, #204]	@ (800d7d8 <HAL_InitTick+0xe4>)
 800d70a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d70c:	4a32      	ldr	r2, [pc, #200]	@ (800d7d8 <HAL_InitTick+0xe4>)
 800d70e:	f043 0308 	orr.w	r3, r3, #8
 800d712:	6413      	str	r3, [r2, #64]	@ 0x40
 800d714:	4b30      	ldr	r3, [pc, #192]	@ (800d7d8 <HAL_InitTick+0xe4>)
 800d716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d718:	f003 0308 	and.w	r3, r3, #8
 800d71c:	60fb      	str	r3, [r7, #12]
 800d71e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d720:	f107 0210 	add.w	r2, r7, #16
 800d724:	f107 0314 	add.w	r3, r7, #20
 800d728:	4611      	mov	r1, r2
 800d72a:	4618      	mov	r0, r3
 800d72c:	f001 fc4e 	bl	800efcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800d734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d736:	2b00      	cmp	r3, #0
 800d738:	d103      	bne.n	800d742 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800d73a:	f001 fc1f 	bl	800ef7c <HAL_RCC_GetPCLK1Freq>
 800d73e:	6378      	str	r0, [r7, #52]	@ 0x34
 800d740:	e004      	b.n	800d74c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800d742:	f001 fc1b 	bl	800ef7c <HAL_RCC_GetPCLK1Freq>
 800d746:	4603      	mov	r3, r0
 800d748:	005b      	lsls	r3, r3, #1
 800d74a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d74e:	4a23      	ldr	r2, [pc, #140]	@ (800d7dc <HAL_InitTick+0xe8>)
 800d750:	fba2 2303 	umull	r2, r3, r2, r3
 800d754:	0c9b      	lsrs	r3, r3, #18
 800d756:	3b01      	subs	r3, #1
 800d758:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800d75a:	4b21      	ldr	r3, [pc, #132]	@ (800d7e0 <HAL_InitTick+0xec>)
 800d75c:	4a21      	ldr	r2, [pc, #132]	@ (800d7e4 <HAL_InitTick+0xf0>)
 800d75e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800d760:	4b1f      	ldr	r3, [pc, #124]	@ (800d7e0 <HAL_InitTick+0xec>)
 800d762:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800d766:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800d768:	4a1d      	ldr	r2, [pc, #116]	@ (800d7e0 <HAL_InitTick+0xec>)
 800d76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800d76e:	4b1c      	ldr	r3, [pc, #112]	@ (800d7e0 <HAL_InitTick+0xec>)
 800d770:	2200      	movs	r2, #0
 800d772:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d774:	4b1a      	ldr	r3, [pc, #104]	@ (800d7e0 <HAL_InitTick+0xec>)
 800d776:	2200      	movs	r2, #0
 800d778:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d77a:	4b19      	ldr	r3, [pc, #100]	@ (800d7e0 <HAL_InitTick+0xec>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800d780:	4817      	ldr	r0, [pc, #92]	@ (800d7e0 <HAL_InitTick+0xec>)
 800d782:	f001 fc55 	bl	800f030 <HAL_TIM_Base_Init>
 800d786:	4603      	mov	r3, r0
 800d788:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800d78c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d790:	2b00      	cmp	r3, #0
 800d792:	d11b      	bne.n	800d7cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800d794:	4812      	ldr	r0, [pc, #72]	@ (800d7e0 <HAL_InitTick+0xec>)
 800d796:	f001 fc9b 	bl	800f0d0 <HAL_TIM_Base_Start_IT>
 800d79a:	4603      	mov	r3, r0
 800d79c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800d7a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d111      	bne.n	800d7cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800d7a8:	2032      	movs	r0, #50	@ 0x32
 800d7aa:	f000 fa71 	bl	800dc90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2b0f      	cmp	r3, #15
 800d7b2:	d808      	bhi.n	800d7c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	6879      	ldr	r1, [r7, #4]
 800d7b8:	2032      	movs	r0, #50	@ 0x32
 800d7ba:	f000 fa4d 	bl	800dc58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d7be:	4a0a      	ldr	r2, [pc, #40]	@ (800d7e8 <HAL_InitTick+0xf4>)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6013      	str	r3, [r2, #0]
 800d7c4:	e002      	b.n	800d7cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800d7cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	3738      	adds	r7, #56	@ 0x38
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	bd80      	pop	{r7, pc}
 800d7d8:	40023800 	.word	0x40023800
 800d7dc:	431bde83 	.word	0x431bde83
 800d7e0:	20000428 	.word	0x20000428
 800d7e4:	40000c00 	.word	0x40000c00
 800d7e8:	2000000c 	.word	0x2000000c

0800d7ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800d7f0:	bf00      	nop
 800d7f2:	e7fd      	b.n	800d7f0 <NMI_Handler+0x4>

0800d7f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d7f8:	bf00      	nop
 800d7fa:	e7fd      	b.n	800d7f8 <HardFault_Handler+0x4>

0800d7fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d800:	bf00      	nop
 800d802:	e7fd      	b.n	800d800 <MemManage_Handler+0x4>

0800d804 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d804:	b480      	push	{r7}
 800d806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d808:	bf00      	nop
 800d80a:	e7fd      	b.n	800d808 <BusFault_Handler+0x4>

0800d80c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d80c:	b480      	push	{r7}
 800d80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d810:	bf00      	nop
 800d812:	e7fd      	b.n	800d810 <UsageFault_Handler+0x4>

0800d814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d814:	b480      	push	{r7}
 800d816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d818:	bf00      	nop
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr

0800d822 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800d826:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800d82a:	f000 ff1f 	bl	800e66c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800d82e:	bf00      	nop
 800d830:	bd80      	pop	{r7, pc}
	...

0800d834 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800d838:	4802      	ldr	r0, [pc, #8]	@ (800d844 <TIM5_IRQHandler+0x10>)
 800d83a:	f001 fcab 	bl	800f194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800d83e:	bf00      	nop
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	20000428 	.word	0x20000428

0800d848 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d850:	4a14      	ldr	r2, [pc, #80]	@ (800d8a4 <_sbrk+0x5c>)
 800d852:	4b15      	ldr	r3, [pc, #84]	@ (800d8a8 <_sbrk+0x60>)
 800d854:	1ad3      	subs	r3, r2, r3
 800d856:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d85c:	4b13      	ldr	r3, [pc, #76]	@ (800d8ac <_sbrk+0x64>)
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d102      	bne.n	800d86a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d864:	4b11      	ldr	r3, [pc, #68]	@ (800d8ac <_sbrk+0x64>)
 800d866:	4a12      	ldr	r2, [pc, #72]	@ (800d8b0 <_sbrk+0x68>)
 800d868:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d86a:	4b10      	ldr	r3, [pc, #64]	@ (800d8ac <_sbrk+0x64>)
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4413      	add	r3, r2
 800d872:	693a      	ldr	r2, [r7, #16]
 800d874:	429a      	cmp	r2, r3
 800d876:	d207      	bcs.n	800d888 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d878:	f004 fdd6 	bl	8012428 <__errno>
 800d87c:	4603      	mov	r3, r0
 800d87e:	220c      	movs	r2, #12
 800d880:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d882:	f04f 33ff 	mov.w	r3, #4294967295
 800d886:	e009      	b.n	800d89c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d888:	4b08      	ldr	r3, [pc, #32]	@ (800d8ac <_sbrk+0x64>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d88e:	4b07      	ldr	r3, [pc, #28]	@ (800d8ac <_sbrk+0x64>)
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4413      	add	r3, r2
 800d896:	4a05      	ldr	r2, [pc, #20]	@ (800d8ac <_sbrk+0x64>)
 800d898:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d89a:	68fb      	ldr	r3, [r7, #12]
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3718      	adds	r7, #24
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	20018000 	.word	0x20018000
 800d8a8:	00000512 	.word	0x00000512
 800d8ac:	20000470 	.word	0x20000470
 800d8b0:	20004390 	.word	0x20004390

0800d8b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d8b8:	4b06      	ldr	r3, [pc, #24]	@ (800d8d4 <SystemInit+0x20>)
 800d8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8be:	4a05      	ldr	r2, [pc, #20]	@ (800d8d4 <SystemInit+0x20>)
 800d8c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d8c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d8c8:	bf00      	nop
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
 800d8d2:	bf00      	nop
 800d8d4:	e000ed00 	.word	0xe000ed00

0800d8d8 <writeToFlash>:
		'n', '.', 'p', 'l' };
uint8_t VarDataTabRead[NB_OF_VAR];
uint16_t VarDataTmp = 0;


void writeToFlash(UART_HandleTypeDef huart2, char data[100]){
 800d8d8:	b084      	sub	sp, #16
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b082      	sub	sp, #8
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	f107 0c10 	add.w	ip, r7, #16
 800d8e4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t dataLength = strlen(data);
 800d8e8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d8ea:	f7fe fbf9 	bl	800c0e0 <strlen>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	707b      	strb	r3, [r7, #1]

	// Unlock the Flash Program Erase controller
	HAL_FLASH_Unlock();
 800d8f2:	f000 fa7f 	bl	800ddf4 <HAL_FLASH_Unlock>
	// Turn LED on
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	2120      	movs	r1, #32
 800d8fa:	483e      	ldr	r0, [pc, #248]	@ (800d9f4 <writeToFlash+0x11c>)
 800d8fc:	f000 fe82 	bl	800e604 <HAL_GPIO_WritePin>

	/* EEPROM Init */
	if (EE_Init() != EE_OK) {
 800d900:	f7fe fd6e 	bl	800c3e0 <EE_Init>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d001      	beq.n	800d90e <writeToFlash+0x36>
		Error_Handler();
 800d90a:	f7ff fd3b 	bl	800d384 <Error_Handler>
	}

	// Fill EEPROM variables addresses
	for (uint16_t i = 1; i <= dataLength; i++) {
 800d90e:	2301      	movs	r3, #1
 800d910:	80fb      	strh	r3, [r7, #6]
 800d912:	e008      	b.n	800d926 <writeToFlash+0x4e>
		VirtAddVarTab[i - 1] = i;
 800d914:	88fb      	ldrh	r3, [r7, #6]
 800d916:	3b01      	subs	r3, #1
 800d918:	4937      	ldr	r1, [pc, #220]	@ (800d9f8 <writeToFlash+0x120>)
 800d91a:	88fa      	ldrh	r2, [r7, #6]
 800d91c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (uint16_t i = 1; i <= dataLength; i++) {
 800d920:	88fb      	ldrh	r3, [r7, #6]
 800d922:	3301      	adds	r3, #1
 800d924:	80fb      	strh	r3, [r7, #6]
 800d926:	787b      	ldrb	r3, [r7, #1]
 800d928:	b29b      	uxth	r3, r3
 800d92a:	88fa      	ldrh	r2, [r7, #6]
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d9f1      	bls.n	800d914 <writeToFlash+0x3c>
	}

	// Store Values in EEPROM emulation
	HAL_UART_Transmit(&huart2, "Store values\n\r", 14, 100);
 800d930:	2364      	movs	r3, #100	@ 0x64
 800d932:	220e      	movs	r2, #14
 800d934:	4931      	ldr	r1, [pc, #196]	@ (800d9fc <writeToFlash+0x124>)
 800d936:	f107 0010 	add.w	r0, r7, #16
 800d93a:	f002 f803 	bl	800f944 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < dataLength; i++) {
 800d93e:	2300      	movs	r3, #0
 800d940:	80bb      	strh	r3, [r7, #4]
 800d942:	e012      	b.n	800d96a <writeToFlash+0x92>
		/* Sequence 1 */
		if ((EE_WriteVariable(VirtAddVarTab[i], data[i]))
 800d944:	88bb      	ldrh	r3, [r7, #4]
 800d946:	4a2c      	ldr	r2, [pc, #176]	@ (800d9f8 <writeToFlash+0x120>)
 800d948:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800d94c:	88bb      	ldrh	r3, [r7, #4]
 800d94e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d950:	4413      	add	r3, r2
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	4619      	mov	r1, r3
 800d956:	f7fe ff97 	bl	800c888 <EE_WriteVariable>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d001      	beq.n	800d964 <writeToFlash+0x8c>
				!= HAL_OK) {
			Error_Handler();
 800d960:	f7ff fd10 	bl	800d384 <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 800d964:	88bb      	ldrh	r3, [r7, #4]
 800d966:	3301      	adds	r3, #1
 800d968:	80bb      	strh	r3, [r7, #4]
 800d96a:	787b      	ldrb	r3, [r7, #1]
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	88ba      	ldrh	r2, [r7, #4]
 800d970:	429a      	cmp	r2, r3
 800d972:	d3e7      	bcc.n	800d944 <writeToFlash+0x6c>
		}
	}

	// Read values
	HAL_UART_Transmit(&huart2, "Read values\n\r", 13, 100);
 800d974:	2364      	movs	r3, #100	@ 0x64
 800d976:	220d      	movs	r2, #13
 800d978:	4921      	ldr	r1, [pc, #132]	@ (800da00 <writeToFlash+0x128>)
 800d97a:	f107 0010 	add.w	r0, r7, #16
 800d97e:	f001 ffe1 	bl	800f944 <HAL_UART_Transmit>
	for (uint16_t i = 0; i < dataLength; i++) {
 800d982:	2300      	movs	r3, #0
 800d984:	807b      	strh	r3, [r7, #2]
 800d986:	e012      	b.n	800d9ae <writeToFlash+0xd6>
		if ((EE_ReadVariable(VirtAddVarTab[i],
 800d988:	887b      	ldrh	r3, [r7, #2]
 800d98a:	4a1b      	ldr	r2, [pc, #108]	@ (800d9f8 <writeToFlash+0x120>)
 800d98c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
				&VarDataTabRead[i])) != HAL_OK) {
 800d990:	887b      	ldrh	r3, [r7, #2]
 800d992:	491c      	ldr	r1, [pc, #112]	@ (800da04 <writeToFlash+0x12c>)
 800d994:	440b      	add	r3, r1
		if ((EE_ReadVariable(VirtAddVarTab[i],
 800d996:	4619      	mov	r1, r3
 800d998:	4610      	mov	r0, r2
 800d99a:	f7fe ff2b 	bl	800c7f4 <EE_ReadVariable>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <writeToFlash+0xd0>
			Error_Handler();
 800d9a4:	f7ff fcee 	bl	800d384 <Error_Handler>
	for (uint16_t i = 0; i < dataLength; i++) {
 800d9a8:	887b      	ldrh	r3, [r7, #2]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	807b      	strh	r3, [r7, #2]
 800d9ae:	787b      	ldrb	r3, [r7, #1]
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	887a      	ldrh	r2, [r7, #2]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d3e7      	bcc.n	800d988 <writeToFlash+0xb0>
		}
	}

	HAL_UART_Transmit(&huart2, "Read table: ", 12, 100);
 800d9b8:	2364      	movs	r3, #100	@ 0x64
 800d9ba:	220c      	movs	r2, #12
 800d9bc:	4912      	ldr	r1, [pc, #72]	@ (800da08 <writeToFlash+0x130>)
 800d9be:	f107 0010 	add.w	r0, r7, #16
 800d9c2:	f001 ffbf 	bl	800f944 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, VarDataTabRead, dataLength, 1000);
 800d9c6:	787b      	ldrb	r3, [r7, #1]
 800d9c8:	b29a      	uxth	r2, r3
 800d9ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d9ce:	490d      	ldr	r1, [pc, #52]	@ (800da04 <writeToFlash+0x12c>)
 800d9d0:	f107 0010 	add.w	r0, r7, #16
 800d9d4:	f001 ffb6 	bl	800f944 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 800d9d8:	2364      	movs	r3, #100	@ 0x64
 800d9da:	2202      	movs	r2, #2
 800d9dc:	490b      	ldr	r1, [pc, #44]	@ (800da0c <writeToFlash+0x134>)
 800d9de:	f107 0010 	add.w	r0, r7, #16
 800d9e2:	f001 ffaf 	bl	800f944 <HAL_UART_Transmit>
}
 800d9e6:	bf00      	nop
 800d9e8:	3708      	adds	r7, #8
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d9f0:	b004      	add	sp, #16
 800d9f2:	4770      	bx	lr
 800d9f4:	40020000 	.word	0x40020000
 800d9f8:	20000474 	.word	0x20000474
 800d9fc:	080130b8 	.word	0x080130b8
 800da00:	080130c8 	.word	0x080130c8
 800da04:	200004ac 	.word	0x200004ac
 800da08:	080130d8 	.word	0x080130d8
 800da0c:	080130e8 	.word	0x080130e8

0800da10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800da10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800da48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800da14:	f7ff ff4e 	bl	800d8b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800da18:	480c      	ldr	r0, [pc, #48]	@ (800da4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800da1a:	490d      	ldr	r1, [pc, #52]	@ (800da50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800da1c:	4a0d      	ldr	r2, [pc, #52]	@ (800da54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800da1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800da20:	e002      	b.n	800da28 <LoopCopyDataInit>

0800da22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800da22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800da24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800da26:	3304      	adds	r3, #4

0800da28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800da28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800da2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800da2c:	d3f9      	bcc.n	800da22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800da2e:	4a0a      	ldr	r2, [pc, #40]	@ (800da58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800da30:	4c0a      	ldr	r4, [pc, #40]	@ (800da5c <LoopFillZerobss+0x22>)
  movs r3, #0
 800da32:	2300      	movs	r3, #0
  b LoopFillZerobss
 800da34:	e001      	b.n	800da3a <LoopFillZerobss>

0800da36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800da36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800da38:	3204      	adds	r2, #4

0800da3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800da3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800da3c:	d3fb      	bcc.n	800da36 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800da3e:	f004 fcf9 	bl	8012434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800da42:	f7ff f913 	bl	800cc6c <main>
  bx  lr    
 800da46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800da48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800da4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800da50:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800da54:	08013150 	.word	0x08013150
  ldr r2, =_sbss
 800da58:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800da5c:	2000438c 	.word	0x2000438c

0800da60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800da60:	e7fe      	b.n	800da60 <ADC_IRQHandler>
	...

0800da64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800da68:	4b0e      	ldr	r3, [pc, #56]	@ (800daa4 <HAL_Init+0x40>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a0d      	ldr	r2, [pc, #52]	@ (800daa4 <HAL_Init+0x40>)
 800da6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800da72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800da74:	4b0b      	ldr	r3, [pc, #44]	@ (800daa4 <HAL_Init+0x40>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	4a0a      	ldr	r2, [pc, #40]	@ (800daa4 <HAL_Init+0x40>)
 800da7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800da7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800da80:	4b08      	ldr	r3, [pc, #32]	@ (800daa4 <HAL_Init+0x40>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	4a07      	ldr	r2, [pc, #28]	@ (800daa4 <HAL_Init+0x40>)
 800da86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800da8c:	2003      	movs	r0, #3
 800da8e:	f000 f8d8 	bl	800dc42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800da92:	200f      	movs	r0, #15
 800da94:	f7ff fe2e 	bl	800d6f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800da98:	f7ff fd40 	bl	800d51c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	40023c00 	.word	0x40023c00

0800daa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800daa8:	b480      	push	{r7}
 800daaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800daac:	4b06      	ldr	r3, [pc, #24]	@ (800dac8 <HAL_IncTick+0x20>)
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	461a      	mov	r2, r3
 800dab2:	4b06      	ldr	r3, [pc, #24]	@ (800dacc <HAL_IncTick+0x24>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4413      	add	r3, r2
 800dab8:	4a04      	ldr	r2, [pc, #16]	@ (800dacc <HAL_IncTick+0x24>)
 800daba:	6013      	str	r3, [r2, #0]
}
 800dabc:	bf00      	nop
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	20000010 	.word	0x20000010
 800dacc:	200004c8 	.word	0x200004c8

0800dad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dad0:	b480      	push	{r7}
 800dad2:	af00      	add	r7, sp, #0
  return uwTick;
 800dad4:	4b03      	ldr	r3, [pc, #12]	@ (800dae4 <HAL_GetTick+0x14>)
 800dad6:	681b      	ldr	r3, [r3, #0]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	200004c8 	.word	0x200004c8

0800dae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dae8:	b480      	push	{r7}
 800daea:	b085      	sub	sp, #20
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f003 0307 	and.w	r3, r3, #7
 800daf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800daf8:	4b0c      	ldr	r3, [pc, #48]	@ (800db2c <__NVIC_SetPriorityGrouping+0x44>)
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dafe:	68ba      	ldr	r2, [r7, #8]
 800db00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800db04:	4013      	ands	r3, r2
 800db06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800db10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800db14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800db18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800db1a:	4a04      	ldr	r2, [pc, #16]	@ (800db2c <__NVIC_SetPriorityGrouping+0x44>)
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	60d3      	str	r3, [r2, #12]
}
 800db20:	bf00      	nop
 800db22:	3714      	adds	r7, #20
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr
 800db2c:	e000ed00 	.word	0xe000ed00

0800db30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800db30:	b480      	push	{r7}
 800db32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800db34:	4b04      	ldr	r3, [pc, #16]	@ (800db48 <__NVIC_GetPriorityGrouping+0x18>)
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	0a1b      	lsrs	r3, r3, #8
 800db3a:	f003 0307 	and.w	r3, r3, #7
}
 800db3e:	4618      	mov	r0, r3
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr
 800db48:	e000ed00 	.word	0xe000ed00

0800db4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	4603      	mov	r3, r0
 800db54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	db0b      	blt.n	800db76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800db5e:	79fb      	ldrb	r3, [r7, #7]
 800db60:	f003 021f 	and.w	r2, r3, #31
 800db64:	4907      	ldr	r1, [pc, #28]	@ (800db84 <__NVIC_EnableIRQ+0x38>)
 800db66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db6a:	095b      	lsrs	r3, r3, #5
 800db6c:	2001      	movs	r0, #1
 800db6e:	fa00 f202 	lsl.w	r2, r0, r2
 800db72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800db76:	bf00      	nop
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
 800db82:	bf00      	nop
 800db84:	e000e100 	.word	0xe000e100

0800db88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	4603      	mov	r3, r0
 800db90:	6039      	str	r1, [r7, #0]
 800db92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800db94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	db0a      	blt.n	800dbb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	b2da      	uxtb	r2, r3
 800dba0:	490c      	ldr	r1, [pc, #48]	@ (800dbd4 <__NVIC_SetPriority+0x4c>)
 800dba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dba6:	0112      	lsls	r2, r2, #4
 800dba8:	b2d2      	uxtb	r2, r2
 800dbaa:	440b      	add	r3, r1
 800dbac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800dbb0:	e00a      	b.n	800dbc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	4908      	ldr	r1, [pc, #32]	@ (800dbd8 <__NVIC_SetPriority+0x50>)
 800dbb8:	79fb      	ldrb	r3, [r7, #7]
 800dbba:	f003 030f 	and.w	r3, r3, #15
 800dbbe:	3b04      	subs	r3, #4
 800dbc0:	0112      	lsls	r2, r2, #4
 800dbc2:	b2d2      	uxtb	r2, r2
 800dbc4:	440b      	add	r3, r1
 800dbc6:	761a      	strb	r2, [r3, #24]
}
 800dbc8:	bf00      	nop
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr
 800dbd4:	e000e100 	.word	0xe000e100
 800dbd8:	e000ed00 	.word	0xe000ed00

0800dbdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b089      	sub	sp, #36	@ 0x24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f003 0307 	and.w	r3, r3, #7
 800dbee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	f1c3 0307 	rsb	r3, r3, #7
 800dbf6:	2b04      	cmp	r3, #4
 800dbf8:	bf28      	it	cs
 800dbfa:	2304      	movcs	r3, #4
 800dbfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	3304      	adds	r3, #4
 800dc02:	2b06      	cmp	r3, #6
 800dc04:	d902      	bls.n	800dc0c <NVIC_EncodePriority+0x30>
 800dc06:	69fb      	ldr	r3, [r7, #28]
 800dc08:	3b03      	subs	r3, #3
 800dc0a:	e000      	b.n	800dc0e <NVIC_EncodePriority+0x32>
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dc10:	f04f 32ff 	mov.w	r2, #4294967295
 800dc14:	69bb      	ldr	r3, [r7, #24]
 800dc16:	fa02 f303 	lsl.w	r3, r2, r3
 800dc1a:	43da      	mvns	r2, r3
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	401a      	ands	r2, r3
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800dc24:	f04f 31ff 	mov.w	r1, #4294967295
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	fa01 f303 	lsl.w	r3, r1, r3
 800dc2e:	43d9      	mvns	r1, r3
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800dc34:	4313      	orrs	r3, r2
         );
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3724      	adds	r7, #36	@ 0x24
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b082      	sub	sp, #8
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff ff4c 	bl	800dae8 <__NVIC_SetPriorityGrouping>
}
 800dc50:	bf00      	nop
 800dc52:	3708      	adds	r7, #8
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	4603      	mov	r3, r0
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]
 800dc64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800dc66:	2300      	movs	r3, #0
 800dc68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dc6a:	f7ff ff61 	bl	800db30 <__NVIC_GetPriorityGrouping>
 800dc6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dc70:	687a      	ldr	r2, [r7, #4]
 800dc72:	68b9      	ldr	r1, [r7, #8]
 800dc74:	6978      	ldr	r0, [r7, #20]
 800dc76:	f7ff ffb1 	bl	800dbdc <NVIC_EncodePriority>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc80:	4611      	mov	r1, r2
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff ff80 	bl	800db88 <__NVIC_SetPriority>
}
 800dc88:	bf00      	nop
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	4603      	mov	r3, r0
 800dc98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dc9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff ff54 	bl	800db4c <__NVIC_EnableIRQ>
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d101      	bne.n	800dcbe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	e00e      	b.n	800dcdc <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	795b      	ldrb	r3, [r3, #5]
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d105      	bne.n	800dcd4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f7ff fc50 	bl	800d574 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b087      	sub	sp, #28
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2202      	movs	r2, #2
 800dcf8:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	689a      	ldr	r2, [r3, #8]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f042 0201 	orr.w	r2, r2, #1
 800dd08:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	617b      	str	r3, [r7, #20]
 800dd0e:	e00a      	b.n	800dd26 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800dd10:	697b      	ldr	r3, [r7, #20]
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	441a      	add	r2, r3
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	6812      	ldr	r2, [r2, #0]
 800dd1e:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800dd20:	697b      	ldr	r3, [r7, #20]
 800dd22:	3301      	adds	r3, #1
 800dd24:	617b      	str	r3, [r7, #20]
 800dd26:	697a      	ldr	r2, [r7, #20]
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d3f0      	bcc.n	800dd10 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	2201      	movs	r2, #1
 800dd3a:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800dd3c:	693b      	ldr	r3, [r7, #16]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	371c      	adds	r7, #28
 800dd42:	46bd      	mov	sp, r7
 800dd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd48:	4770      	bx	lr
	...

0800dd4c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b086      	sub	sp, #24
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800dd5e:	4b23      	ldr	r3, [pc, #140]	@ (800ddec <HAL_FLASH_Program+0xa0>)
 800dd60:	7e1b      	ldrb	r3, [r3, #24]
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d101      	bne.n	800dd6a <HAL_FLASH_Program+0x1e>
 800dd66:	2302      	movs	r3, #2
 800dd68:	e03b      	b.n	800dde2 <HAL_FLASH_Program+0x96>
 800dd6a:	4b20      	ldr	r3, [pc, #128]	@ (800ddec <HAL_FLASH_Program+0xa0>)
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800dd70:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800dd74:	f000 f860 	bl	800de38 <FLASH_WaitForLastOperation>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800dd7c:	7dfb      	ldrb	r3, [r7, #23]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d12b      	bne.n	800ddda <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d105      	bne.n	800dd94 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800dd88:	783b      	ldrb	r3, [r7, #0]
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	68b8      	ldr	r0, [r7, #8]
 800dd8e:	f000 f90b 	bl	800dfa8 <FLASH_Program_Byte>
 800dd92:	e016      	b.n	800ddc2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d105      	bne.n	800dda6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800dd9a:	883b      	ldrh	r3, [r7, #0]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	68b8      	ldr	r0, [r7, #8]
 800dda0:	f000 f8de 	bl	800df60 <FLASH_Program_HalfWord>
 800dda4:	e00d      	b.n	800ddc2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d105      	bne.n	800ddb8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	4619      	mov	r1, r3
 800ddb0:	68b8      	ldr	r0, [r7, #8]
 800ddb2:	f000 f8b3 	bl	800df1c <FLASH_Program_Word>
 800ddb6:	e004      	b.n	800ddc2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800ddb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ddbc:	68b8      	ldr	r0, [r7, #8]
 800ddbe:	f000 f87b 	bl	800deb8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ddc2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ddc6:	f000 f837 	bl	800de38 <FLASH_WaitForLastOperation>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800ddce:	4b08      	ldr	r3, [pc, #32]	@ (800ddf0 <HAL_FLASH_Program+0xa4>)
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	4a07      	ldr	r2, [pc, #28]	@ (800ddf0 <HAL_FLASH_Program+0xa4>)
 800ddd4:	f023 0301 	bic.w	r3, r3, #1
 800ddd8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ddda:	4b04      	ldr	r3, [pc, #16]	@ (800ddec <HAL_FLASH_Program+0xa0>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	761a      	strb	r2, [r3, #24]
  
  return status;
 800dde0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3718      	adds	r7, #24
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	200004cc 	.word	0x200004cc
 800ddf0:	40023c00 	.word	0x40023c00

0800ddf4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ddfe:	4b0b      	ldr	r3, [pc, #44]	@ (800de2c <HAL_FLASH_Unlock+0x38>)
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	2b00      	cmp	r3, #0
 800de04:	da0b      	bge.n	800de1e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800de06:	4b09      	ldr	r3, [pc, #36]	@ (800de2c <HAL_FLASH_Unlock+0x38>)
 800de08:	4a09      	ldr	r2, [pc, #36]	@ (800de30 <HAL_FLASH_Unlock+0x3c>)
 800de0a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800de0c:	4b07      	ldr	r3, [pc, #28]	@ (800de2c <HAL_FLASH_Unlock+0x38>)
 800de0e:	4a09      	ldr	r2, [pc, #36]	@ (800de34 <HAL_FLASH_Unlock+0x40>)
 800de10:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800de12:	4b06      	ldr	r3, [pc, #24]	@ (800de2c <HAL_FLASH_Unlock+0x38>)
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	2b00      	cmp	r3, #0
 800de18:	da01      	bge.n	800de1e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800de1a:	2301      	movs	r3, #1
 800de1c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800de1e:	79fb      	ldrb	r3, [r7, #7]
}
 800de20:	4618      	mov	r0, r3
 800de22:	370c      	adds	r7, #12
 800de24:	46bd      	mov	sp, r7
 800de26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2a:	4770      	bx	lr
 800de2c:	40023c00 	.word	0x40023c00
 800de30:	45670123 	.word	0x45670123
 800de34:	cdef89ab 	.word	0xcdef89ab

0800de38 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800de40:	2300      	movs	r3, #0
 800de42:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800de44:	4b1a      	ldr	r3, [pc, #104]	@ (800deb0 <FLASH_WaitForLastOperation+0x78>)
 800de46:	2200      	movs	r2, #0
 800de48:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800de4a:	f7ff fe41 	bl	800dad0 <HAL_GetTick>
 800de4e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800de50:	e010      	b.n	800de74 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de58:	d00c      	beq.n	800de74 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d007      	beq.n	800de70 <FLASH_WaitForLastOperation+0x38>
 800de60:	f7ff fe36 	bl	800dad0 <HAL_GetTick>
 800de64:	4602      	mov	r2, r0
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	1ad3      	subs	r3, r2, r3
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d201      	bcs.n	800de74 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800de70:	2303      	movs	r3, #3
 800de72:	e019      	b.n	800dea8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800de74:	4b0f      	ldr	r3, [pc, #60]	@ (800deb4 <FLASH_WaitForLastOperation+0x7c>)
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d1e8      	bne.n	800de52 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800de80:	4b0c      	ldr	r3, [pc, #48]	@ (800deb4 <FLASH_WaitForLastOperation+0x7c>)
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d002      	beq.n	800de92 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800de8c:	4b09      	ldr	r3, [pc, #36]	@ (800deb4 <FLASH_WaitForLastOperation+0x7c>)
 800de8e:	2201      	movs	r2, #1
 800de90:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800de92:	4b08      	ldr	r3, [pc, #32]	@ (800deb4 <FLASH_WaitForLastOperation+0x7c>)
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d003      	beq.n	800dea6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800de9e:	f000 f8a5 	bl	800dfec <FLASH_SetErrorCode>
    return HAL_ERROR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	e000      	b.n	800dea8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800dea6:	2300      	movs	r3, #0
  
}  
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	200004cc 	.word	0x200004cc
 800deb4:	40023c00 	.word	0x40023c00

0800deb8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800deb8:	b480      	push	{r7}
 800deba:	b085      	sub	sp, #20
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800dec4:	4b14      	ldr	r3, [pc, #80]	@ (800df18 <FLASH_Program_DoubleWord+0x60>)
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	4a13      	ldr	r2, [pc, #76]	@ (800df18 <FLASH_Program_DoubleWord+0x60>)
 800deca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dece:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ded0:	4b11      	ldr	r3, [pc, #68]	@ (800df18 <FLASH_Program_DoubleWord+0x60>)
 800ded2:	691b      	ldr	r3, [r3, #16]
 800ded4:	4a10      	ldr	r2, [pc, #64]	@ (800df18 <FLASH_Program_DoubleWord+0x60>)
 800ded6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800deda:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800dedc:	4b0e      	ldr	r3, [pc, #56]	@ (800df18 <FLASH_Program_DoubleWord+0x60>)
 800dede:	691b      	ldr	r3, [r3, #16]
 800dee0:	4a0d      	ldr	r2, [pc, #52]	@ (800df18 <FLASH_Program_DoubleWord+0x60>)
 800dee2:	f043 0301 	orr.w	r3, r3, #1
 800dee6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800deee:	f3bf 8f6f 	isb	sy
}
 800def2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800def4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800def8:	f04f 0200 	mov.w	r2, #0
 800defc:	f04f 0300 	mov.w	r3, #0
 800df00:	000a      	movs	r2, r1
 800df02:	2300      	movs	r3, #0
 800df04:	68f9      	ldr	r1, [r7, #12]
 800df06:	3104      	adds	r1, #4
 800df08:	4613      	mov	r3, r2
 800df0a:	600b      	str	r3, [r1, #0]
}
 800df0c:	bf00      	nop
 800df0e:	3714      	adds	r7, #20
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr
 800df18:	40023c00 	.word	0x40023c00

0800df1c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800df26:	4b0d      	ldr	r3, [pc, #52]	@ (800df5c <FLASH_Program_Word+0x40>)
 800df28:	691b      	ldr	r3, [r3, #16]
 800df2a:	4a0c      	ldr	r2, [pc, #48]	@ (800df5c <FLASH_Program_Word+0x40>)
 800df2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800df32:	4b0a      	ldr	r3, [pc, #40]	@ (800df5c <FLASH_Program_Word+0x40>)
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	4a09      	ldr	r2, [pc, #36]	@ (800df5c <FLASH_Program_Word+0x40>)
 800df38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800df3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800df3e:	4b07      	ldr	r3, [pc, #28]	@ (800df5c <FLASH_Program_Word+0x40>)
 800df40:	691b      	ldr	r3, [r3, #16]
 800df42:	4a06      	ldr	r2, [pc, #24]	@ (800df5c <FLASH_Program_Word+0x40>)
 800df44:	f043 0301 	orr.w	r3, r3, #1
 800df48:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	683a      	ldr	r2, [r7, #0]
 800df4e:	601a      	str	r2, [r3, #0]
}
 800df50:	bf00      	nop
 800df52:	370c      	adds	r7, #12
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	40023c00 	.word	0x40023c00

0800df60 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	460b      	mov	r3, r1
 800df6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800df6c:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa4 <FLASH_Program_HalfWord+0x44>)
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	4a0c      	ldr	r2, [pc, #48]	@ (800dfa4 <FLASH_Program_HalfWord+0x44>)
 800df72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800df76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800df78:	4b0a      	ldr	r3, [pc, #40]	@ (800dfa4 <FLASH_Program_HalfWord+0x44>)
 800df7a:	691b      	ldr	r3, [r3, #16]
 800df7c:	4a09      	ldr	r2, [pc, #36]	@ (800dfa4 <FLASH_Program_HalfWord+0x44>)
 800df7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800df84:	4b07      	ldr	r3, [pc, #28]	@ (800dfa4 <FLASH_Program_HalfWord+0x44>)
 800df86:	691b      	ldr	r3, [r3, #16]
 800df88:	4a06      	ldr	r2, [pc, #24]	@ (800dfa4 <FLASH_Program_HalfWord+0x44>)
 800df8a:	f043 0301 	orr.w	r3, r3, #1
 800df8e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	887a      	ldrh	r2, [r7, #2]
 800df94:	801a      	strh	r2, [r3, #0]
}
 800df96:	bf00      	nop
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
 800dfa2:	bf00      	nop
 800dfa4:	40023c00 	.word	0x40023c00

0800dfa8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800dfb4:	4b0c      	ldr	r3, [pc, #48]	@ (800dfe8 <FLASH_Program_Byte+0x40>)
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	4a0b      	ldr	r2, [pc, #44]	@ (800dfe8 <FLASH_Program_Byte+0x40>)
 800dfba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dfbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800dfc0:	4b09      	ldr	r3, [pc, #36]	@ (800dfe8 <FLASH_Program_Byte+0x40>)
 800dfc2:	4a09      	ldr	r2, [pc, #36]	@ (800dfe8 <FLASH_Program_Byte+0x40>)
 800dfc4:	691b      	ldr	r3, [r3, #16]
 800dfc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800dfc8:	4b07      	ldr	r3, [pc, #28]	@ (800dfe8 <FLASH_Program_Byte+0x40>)
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	4a06      	ldr	r2, [pc, #24]	@ (800dfe8 <FLASH_Program_Byte+0x40>)
 800dfce:	f043 0301 	orr.w	r3, r3, #1
 800dfd2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	78fa      	ldrb	r2, [r7, #3]
 800dfd8:	701a      	strb	r2, [r3, #0]
}
 800dfda:	bf00      	nop
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	40023c00 	.word	0x40023c00

0800dfec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800dfec:	b480      	push	{r7}
 800dfee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800dff0:	4b2f      	ldr	r3, [pc, #188]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	f003 0310 	and.w	r3, r3, #16
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d008      	beq.n	800e00e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800dffc:	4b2d      	ldr	r3, [pc, #180]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800dffe:	69db      	ldr	r3, [r3, #28]
 800e000:	f043 0310 	orr.w	r3, r3, #16
 800e004:	4a2b      	ldr	r2, [pc, #172]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e006:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800e008:	4b29      	ldr	r3, [pc, #164]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e00a:	2210      	movs	r2, #16
 800e00c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800e00e:	4b28      	ldr	r3, [pc, #160]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	f003 0320 	and.w	r3, r3, #32
 800e016:	2b00      	cmp	r3, #0
 800e018:	d008      	beq.n	800e02c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e01a:	4b26      	ldr	r3, [pc, #152]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e01c:	69db      	ldr	r3, [r3, #28]
 800e01e:	f043 0308 	orr.w	r3, r3, #8
 800e022:	4a24      	ldr	r2, [pc, #144]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e024:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800e026:	4b22      	ldr	r3, [pc, #136]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e028:	2220      	movs	r2, #32
 800e02a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800e02c:	4b20      	ldr	r3, [pc, #128]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e034:	2b00      	cmp	r3, #0
 800e036:	d008      	beq.n	800e04a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800e038:	4b1e      	ldr	r3, [pc, #120]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e03a:	69db      	ldr	r3, [r3, #28]
 800e03c:	f043 0304 	orr.w	r3, r3, #4
 800e040:	4a1c      	ldr	r2, [pc, #112]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e042:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800e044:	4b1a      	ldr	r3, [pc, #104]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e046:	2240      	movs	r2, #64	@ 0x40
 800e048:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800e04a:	4b19      	ldr	r3, [pc, #100]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e04c:	68db      	ldr	r3, [r3, #12]
 800e04e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e052:	2b00      	cmp	r3, #0
 800e054:	d008      	beq.n	800e068 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800e056:	4b17      	ldr	r3, [pc, #92]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e058:	69db      	ldr	r3, [r3, #28]
 800e05a:	f043 0302 	orr.w	r3, r3, #2
 800e05e:	4a15      	ldr	r2, [pc, #84]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e060:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800e062:	4b13      	ldr	r3, [pc, #76]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e064:	2280      	movs	r2, #128	@ 0x80
 800e066:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800e068:	4b11      	ldr	r3, [pc, #68]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e070:	2b00      	cmp	r3, #0
 800e072:	d009      	beq.n	800e088 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e074:	4b0f      	ldr	r3, [pc, #60]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e076:	69db      	ldr	r3, [r3, #28]
 800e078:	f043 0301 	orr.w	r3, r3, #1
 800e07c:	4a0d      	ldr	r2, [pc, #52]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e07e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800e080:	4b0b      	ldr	r3, [pc, #44]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e082:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e086:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800e088:	4b09      	ldr	r3, [pc, #36]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e08a:	68db      	ldr	r3, [r3, #12]
 800e08c:	f003 0302 	and.w	r3, r3, #2
 800e090:	2b00      	cmp	r3, #0
 800e092:	d008      	beq.n	800e0a6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800e094:	4b07      	ldr	r3, [pc, #28]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	f043 0320 	orr.w	r3, r3, #32
 800e09c:	4a05      	ldr	r2, [pc, #20]	@ (800e0b4 <FLASH_SetErrorCode+0xc8>)
 800e09e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800e0a0:	4b03      	ldr	r3, [pc, #12]	@ (800e0b0 <FLASH_SetErrorCode+0xc4>)
 800e0a2:	2202      	movs	r2, #2
 800e0a4:	60da      	str	r2, [r3, #12]
  }
}
 800e0a6:	bf00      	nop
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ae:	4770      	bx	lr
 800e0b0:	40023c00 	.word	0x40023c00
 800e0b4:	200004cc 	.word	0x200004cc

0800e0b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e0ca:	4b31      	ldr	r3, [pc, #196]	@ (800e190 <HAL_FLASHEx_Erase+0xd8>)
 800e0cc:	7e1b      	ldrb	r3, [r3, #24]
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d101      	bne.n	800e0d6 <HAL_FLASHEx_Erase+0x1e>
 800e0d2:	2302      	movs	r3, #2
 800e0d4:	e058      	b.n	800e188 <HAL_FLASHEx_Erase+0xd0>
 800e0d6:	4b2e      	ldr	r3, [pc, #184]	@ (800e190 <HAL_FLASHEx_Erase+0xd8>)
 800e0d8:	2201      	movs	r2, #1
 800e0da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e0dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e0e0:	f7ff feaa 	bl	800de38 <FLASH_WaitForLastOperation>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d148      	bne.n	800e180 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d115      	bne.n	800e12a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	691b      	ldr	r3, [r3, #16]
 800e102:	b2da      	uxtb	r2, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	4619      	mov	r1, r3
 800e10a:	4610      	mov	r0, r2
 800e10c:	f000 f844 	bl	800e198 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e110:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e114:	f7ff fe90 	bl	800de38 <FLASH_WaitForLastOperation>
 800e118:	4603      	mov	r3, r0
 800e11a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800e11c:	4b1d      	ldr	r3, [pc, #116]	@ (800e194 <HAL_FLASHEx_Erase+0xdc>)
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	4a1c      	ldr	r2, [pc, #112]	@ (800e194 <HAL_FLASHEx_Erase+0xdc>)
 800e122:	f023 0304 	bic.w	r3, r3, #4
 800e126:	6113      	str	r3, [r2, #16]
 800e128:	e028      	b.n	800e17c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	60bb      	str	r3, [r7, #8]
 800e130:	e01c      	b.n	800e16c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	691b      	ldr	r3, [r3, #16]
 800e136:	b2db      	uxtb	r3, r3
 800e138:	4619      	mov	r1, r3
 800e13a:	68b8      	ldr	r0, [r7, #8]
 800e13c:	f000 f850 	bl	800e1e0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e140:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800e144:	f7ff fe78 	bl	800de38 <FLASH_WaitForLastOperation>
 800e148:	4603      	mov	r3, r0
 800e14a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800e14c:	4b11      	ldr	r3, [pc, #68]	@ (800e194 <HAL_FLASHEx_Erase+0xdc>)
 800e14e:	691b      	ldr	r3, [r3, #16]
 800e150:	4a10      	ldr	r2, [pc, #64]	@ (800e194 <HAL_FLASHEx_Erase+0xdc>)
 800e152:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800e156:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800e158:	7bfb      	ldrb	r3, [r7, #15]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d003      	beq.n	800e166 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	68ba      	ldr	r2, [r7, #8]
 800e162:	601a      	str	r2, [r3, #0]
          break;
 800e164:	e00a      	b.n	800e17c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	3301      	adds	r3, #1
 800e16a:	60bb      	str	r3, [r7, #8]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	68da      	ldr	r2, [r3, #12]
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	4413      	add	r3, r2
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d3da      	bcc.n	800e132 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800e17c:	f000 f878 	bl	800e270 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e180:	4b03      	ldr	r3, [pc, #12]	@ (800e190 <HAL_FLASHEx_Erase+0xd8>)
 800e182:	2200      	movs	r2, #0
 800e184:	761a      	strb	r2, [r3, #24]

  return status;
 800e186:	7bfb      	ldrb	r3, [r7, #15]
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3710      	adds	r7, #16
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	200004cc 	.word	0x200004cc
 800e194:	40023c00 	.word	0x40023c00

0800e198 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	4603      	mov	r3, r0
 800e1a0:	6039      	str	r1, [r7, #0]
 800e1a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e1a4:	4b0d      	ldr	r3, [pc, #52]	@ (800e1dc <FLASH_MassErase+0x44>)
 800e1a6:	691b      	ldr	r3, [r3, #16]
 800e1a8:	4a0c      	ldr	r2, [pc, #48]	@ (800e1dc <FLASH_MassErase+0x44>)
 800e1aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800e1b0:	4b0a      	ldr	r3, [pc, #40]	@ (800e1dc <FLASH_MassErase+0x44>)
 800e1b2:	691b      	ldr	r3, [r3, #16]
 800e1b4:	4a09      	ldr	r2, [pc, #36]	@ (800e1dc <FLASH_MassErase+0x44>)
 800e1b6:	f043 0304 	orr.w	r3, r3, #4
 800e1ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800e1bc:	4b07      	ldr	r3, [pc, #28]	@ (800e1dc <FLASH_MassErase+0x44>)
 800e1be:	691a      	ldr	r2, [r3, #16]
 800e1c0:	79fb      	ldrb	r3, [r7, #7]
 800e1c2:	021b      	lsls	r3, r3, #8
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	4a05      	ldr	r2, [pc, #20]	@ (800e1dc <FLASH_MassErase+0x44>)
 800e1c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e1cc:	6113      	str	r3, [r2, #16]
}
 800e1ce:	bf00      	nop
 800e1d0:	370c      	adds	r7, #12
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop
 800e1dc:	40023c00 	.word	0x40023c00

0800e1e0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800e1e0:	b480      	push	{r7}
 800e1e2:	b085      	sub	sp, #20
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800e1f0:	78fb      	ldrb	r3, [r7, #3]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d102      	bne.n	800e1fc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	60fb      	str	r3, [r7, #12]
 800e1fa:	e010      	b.n	800e21e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800e1fc:	78fb      	ldrb	r3, [r7, #3]
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	d103      	bne.n	800e20a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800e202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e206:	60fb      	str	r3, [r7, #12]
 800e208:	e009      	b.n	800e21e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800e20a:	78fb      	ldrb	r3, [r7, #3]
 800e20c:	2b02      	cmp	r3, #2
 800e20e:	d103      	bne.n	800e218 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800e210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e214:	60fb      	str	r3, [r7, #12]
 800e216:	e002      	b.n	800e21e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800e218:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800e21c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e21e:	4b13      	ldr	r3, [pc, #76]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e220:	691b      	ldr	r3, [r3, #16]
 800e222:	4a12      	ldr	r2, [pc, #72]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e224:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e228:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800e22a:	4b10      	ldr	r3, [pc, #64]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e22c:	691a      	ldr	r2, [r3, #16]
 800e22e:	490f      	ldr	r1, [pc, #60]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	4313      	orrs	r3, r2
 800e234:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800e236:	4b0d      	ldr	r3, [pc, #52]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e238:	691b      	ldr	r3, [r3, #16]
 800e23a:	4a0c      	ldr	r2, [pc, #48]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e23c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800e240:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800e242:	4b0a      	ldr	r3, [pc, #40]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e244:	691a      	ldr	r2, [r3, #16]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	00db      	lsls	r3, r3, #3
 800e24a:	4313      	orrs	r3, r2
 800e24c:	4a07      	ldr	r2, [pc, #28]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e24e:	f043 0302 	orr.w	r3, r3, #2
 800e252:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800e254:	4b05      	ldr	r3, [pc, #20]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e256:	691b      	ldr	r3, [r3, #16]
 800e258:	4a04      	ldr	r2, [pc, #16]	@ (800e26c <FLASH_Erase_Sector+0x8c>)
 800e25a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e25e:	6113      	str	r3, [r2, #16]
}
 800e260:	bf00      	nop
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	40023c00 	.word	0x40023c00

0800e270 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e270:	b480      	push	{r7}
 800e272:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800e274:	4b20      	ldr	r3, [pc, #128]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d017      	beq.n	800e2b0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e280:	4b1d      	ldr	r3, [pc, #116]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4a1c      	ldr	r2, [pc, #112]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e286:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e28a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e28c:	4b1a      	ldr	r3, [pc, #104]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4a19      	ldr	r2, [pc, #100]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e292:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e296:	6013      	str	r3, [r2, #0]
 800e298:	4b17      	ldr	r3, [pc, #92]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	4a16      	ldr	r2, [pc, #88]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e29e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e2a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e2a4:	4b14      	ldr	r3, [pc, #80]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4a13      	ldr	r2, [pc, #76]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e2ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800e2b0:	4b11      	ldr	r3, [pc, #68]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d017      	beq.n	800e2ec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e2bc:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a0d      	ldr	r2, [pc, #52]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e2c6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e2c8:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a0a      	ldr	r2, [pc, #40]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800e2d2:	6013      	str	r3, [r2, #0]
 800e2d4:	4b08      	ldr	r3, [pc, #32]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	4a07      	ldr	r2, [pc, #28]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e2de:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e2e0:	4b05      	ldr	r3, [pc, #20]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4a04      	ldr	r2, [pc, #16]	@ (800e2f8 <FLASH_FlushCaches+0x88>)
 800e2e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800e2ea:	6013      	str	r3, [r2, #0]
  }
}
 800e2ec:	bf00      	nop
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr
 800e2f6:	bf00      	nop
 800e2f8:	40023c00 	.word	0x40023c00

0800e2fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b089      	sub	sp, #36	@ 0x24
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e306:	2300      	movs	r3, #0
 800e308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e30a:	2300      	movs	r3, #0
 800e30c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e30e:	2300      	movs	r3, #0
 800e310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e312:	2300      	movs	r3, #0
 800e314:	61fb      	str	r3, [r7, #28]
 800e316:	e159      	b.n	800e5cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e318:	2201      	movs	r2, #1
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	fa02 f303 	lsl.w	r3, r2, r3
 800e320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	697a      	ldr	r2, [r7, #20]
 800e328:	4013      	ands	r3, r2
 800e32a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e32c:	693a      	ldr	r2, [r7, #16]
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	429a      	cmp	r2, r3
 800e332:	f040 8148 	bne.w	800e5c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	f003 0303 	and.w	r3, r3, #3
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d005      	beq.n	800e34e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	685b      	ldr	r3, [r3, #4]
 800e346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d130      	bne.n	800e3b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	005b      	lsls	r3, r3, #1
 800e358:	2203      	movs	r2, #3
 800e35a:	fa02 f303 	lsl.w	r3, r2, r3
 800e35e:	43db      	mvns	r3, r3
 800e360:	69ba      	ldr	r2, [r7, #24]
 800e362:	4013      	ands	r3, r2
 800e364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	68da      	ldr	r2, [r3, #12]
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	fa02 f303 	lsl.w	r3, r2, r3
 800e372:	69ba      	ldr	r2, [r7, #24]
 800e374:	4313      	orrs	r3, r2
 800e376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	69ba      	ldr	r2, [r7, #24]
 800e37c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	685b      	ldr	r3, [r3, #4]
 800e382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e384:	2201      	movs	r2, #1
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	fa02 f303 	lsl.w	r3, r2, r3
 800e38c:	43db      	mvns	r3, r3
 800e38e:	69ba      	ldr	r2, [r7, #24]
 800e390:	4013      	ands	r3, r2
 800e392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	091b      	lsrs	r3, r3, #4
 800e39a:	f003 0201 	and.w	r2, r3, #1
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e3a4:	69ba      	ldr	r2, [r7, #24]
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	69ba      	ldr	r2, [r7, #24]
 800e3ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	f003 0303 	and.w	r3, r3, #3
 800e3b8:	2b03      	cmp	r3, #3
 800e3ba:	d017      	beq.n	800e3ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e3c2:	69fb      	ldr	r3, [r7, #28]
 800e3c4:	005b      	lsls	r3, r3, #1
 800e3c6:	2203      	movs	r2, #3
 800e3c8:	fa02 f303 	lsl.w	r3, r2, r3
 800e3cc:	43db      	mvns	r3, r3
 800e3ce:	69ba      	ldr	r2, [r7, #24]
 800e3d0:	4013      	ands	r3, r2
 800e3d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	689a      	ldr	r2, [r3, #8]
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	005b      	lsls	r3, r3, #1
 800e3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800e3e0:	69ba      	ldr	r2, [r7, #24]
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	69ba      	ldr	r2, [r7, #24]
 800e3ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	f003 0303 	and.w	r3, r3, #3
 800e3f4:	2b02      	cmp	r3, #2
 800e3f6:	d123      	bne.n	800e440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e3f8:	69fb      	ldr	r3, [r7, #28]
 800e3fa:	08da      	lsrs	r2, r3, #3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	3208      	adds	r2, #8
 800e400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	f003 0307 	and.w	r3, r3, #7
 800e40c:	009b      	lsls	r3, r3, #2
 800e40e:	220f      	movs	r2, #15
 800e410:	fa02 f303 	lsl.w	r3, r2, r3
 800e414:	43db      	mvns	r3, r3
 800e416:	69ba      	ldr	r2, [r7, #24]
 800e418:	4013      	ands	r3, r2
 800e41a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	691a      	ldr	r2, [r3, #16]
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	f003 0307 	and.w	r3, r3, #7
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	fa02 f303 	lsl.w	r3, r2, r3
 800e42c:	69ba      	ldr	r2, [r7, #24]
 800e42e:	4313      	orrs	r3, r2
 800e430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	08da      	lsrs	r2, r3, #3
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	3208      	adds	r2, #8
 800e43a:	69b9      	ldr	r1, [r7, #24]
 800e43c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	005b      	lsls	r3, r3, #1
 800e44a:	2203      	movs	r2, #3
 800e44c:	fa02 f303 	lsl.w	r3, r2, r3
 800e450:	43db      	mvns	r3, r3
 800e452:	69ba      	ldr	r2, [r7, #24]
 800e454:	4013      	ands	r3, r2
 800e456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	f003 0203 	and.w	r2, r3, #3
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	005b      	lsls	r3, r3, #1
 800e464:	fa02 f303 	lsl.w	r3, r2, r3
 800e468:	69ba      	ldr	r2, [r7, #24]
 800e46a:	4313      	orrs	r3, r2
 800e46c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	69ba      	ldr	r2, [r7, #24]
 800e472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f000 80a2 	beq.w	800e5c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e482:	2300      	movs	r3, #0
 800e484:	60fb      	str	r3, [r7, #12]
 800e486:	4b57      	ldr	r3, [pc, #348]	@ (800e5e4 <HAL_GPIO_Init+0x2e8>)
 800e488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e48a:	4a56      	ldr	r2, [pc, #344]	@ (800e5e4 <HAL_GPIO_Init+0x2e8>)
 800e48c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e490:	6453      	str	r3, [r2, #68]	@ 0x44
 800e492:	4b54      	ldr	r3, [pc, #336]	@ (800e5e4 <HAL_GPIO_Init+0x2e8>)
 800e494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e49a:	60fb      	str	r3, [r7, #12]
 800e49c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e49e:	4a52      	ldr	r2, [pc, #328]	@ (800e5e8 <HAL_GPIO_Init+0x2ec>)
 800e4a0:	69fb      	ldr	r3, [r7, #28]
 800e4a2:	089b      	lsrs	r3, r3, #2
 800e4a4:	3302      	adds	r3, #2
 800e4a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	f003 0303 	and.w	r3, r3, #3
 800e4b2:	009b      	lsls	r3, r3, #2
 800e4b4:	220f      	movs	r2, #15
 800e4b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e4ba:	43db      	mvns	r3, r3
 800e4bc:	69ba      	ldr	r2, [r7, #24]
 800e4be:	4013      	ands	r3, r2
 800e4c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4a49      	ldr	r2, [pc, #292]	@ (800e5ec <HAL_GPIO_Init+0x2f0>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d019      	beq.n	800e4fe <HAL_GPIO_Init+0x202>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4a48      	ldr	r2, [pc, #288]	@ (800e5f0 <HAL_GPIO_Init+0x2f4>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d013      	beq.n	800e4fa <HAL_GPIO_Init+0x1fe>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a47      	ldr	r2, [pc, #284]	@ (800e5f4 <HAL_GPIO_Init+0x2f8>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d00d      	beq.n	800e4f6 <HAL_GPIO_Init+0x1fa>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4a46      	ldr	r2, [pc, #280]	@ (800e5f8 <HAL_GPIO_Init+0x2fc>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d007      	beq.n	800e4f2 <HAL_GPIO_Init+0x1f6>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4a45      	ldr	r2, [pc, #276]	@ (800e5fc <HAL_GPIO_Init+0x300>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d101      	bne.n	800e4ee <HAL_GPIO_Init+0x1f2>
 800e4ea:	2304      	movs	r3, #4
 800e4ec:	e008      	b.n	800e500 <HAL_GPIO_Init+0x204>
 800e4ee:	2307      	movs	r3, #7
 800e4f0:	e006      	b.n	800e500 <HAL_GPIO_Init+0x204>
 800e4f2:	2303      	movs	r3, #3
 800e4f4:	e004      	b.n	800e500 <HAL_GPIO_Init+0x204>
 800e4f6:	2302      	movs	r3, #2
 800e4f8:	e002      	b.n	800e500 <HAL_GPIO_Init+0x204>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	e000      	b.n	800e500 <HAL_GPIO_Init+0x204>
 800e4fe:	2300      	movs	r3, #0
 800e500:	69fa      	ldr	r2, [r7, #28]
 800e502:	f002 0203 	and.w	r2, r2, #3
 800e506:	0092      	lsls	r2, r2, #2
 800e508:	4093      	lsls	r3, r2
 800e50a:	69ba      	ldr	r2, [r7, #24]
 800e50c:	4313      	orrs	r3, r2
 800e50e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800e510:	4935      	ldr	r1, [pc, #212]	@ (800e5e8 <HAL_GPIO_Init+0x2ec>)
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	089b      	lsrs	r3, r3, #2
 800e516:	3302      	adds	r3, #2
 800e518:	69ba      	ldr	r2, [r7, #24]
 800e51a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800e51e:	4b38      	ldr	r3, [pc, #224]	@ (800e600 <HAL_GPIO_Init+0x304>)
 800e520:	689b      	ldr	r3, [r3, #8]
 800e522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	43db      	mvns	r3, r3
 800e528:	69ba      	ldr	r2, [r7, #24]
 800e52a:	4013      	ands	r3, r2
 800e52c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e536:	2b00      	cmp	r3, #0
 800e538:	d003      	beq.n	800e542 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800e53a:	69ba      	ldr	r2, [r7, #24]
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	4313      	orrs	r3, r2
 800e540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800e542:	4a2f      	ldr	r2, [pc, #188]	@ (800e600 <HAL_GPIO_Init+0x304>)
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800e548:	4b2d      	ldr	r3, [pc, #180]	@ (800e600 <HAL_GPIO_Init+0x304>)
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	43db      	mvns	r3, r3
 800e552:	69ba      	ldr	r2, [r7, #24]
 800e554:	4013      	ands	r3, r2
 800e556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	685b      	ldr	r3, [r3, #4]
 800e55c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d003      	beq.n	800e56c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800e564:	69ba      	ldr	r2, [r7, #24]
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	4313      	orrs	r3, r2
 800e56a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800e56c:	4a24      	ldr	r2, [pc, #144]	@ (800e600 <HAL_GPIO_Init+0x304>)
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800e572:	4b23      	ldr	r3, [pc, #140]	@ (800e600 <HAL_GPIO_Init+0x304>)
 800e574:	685b      	ldr	r3, [r3, #4]
 800e576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	43db      	mvns	r3, r3
 800e57c:	69ba      	ldr	r2, [r7, #24]
 800e57e:	4013      	ands	r3, r2
 800e580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d003      	beq.n	800e596 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800e58e:	69ba      	ldr	r2, [r7, #24]
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	4313      	orrs	r3, r2
 800e594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800e596:	4a1a      	ldr	r2, [pc, #104]	@ (800e600 <HAL_GPIO_Init+0x304>)
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800e59c:	4b18      	ldr	r3, [pc, #96]	@ (800e600 <HAL_GPIO_Init+0x304>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	43db      	mvns	r3, r3
 800e5a6:	69ba      	ldr	r2, [r7, #24]
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	685b      	ldr	r3, [r3, #4]
 800e5b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d003      	beq.n	800e5c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800e5b8:	69ba      	ldr	r2, [r7, #24]
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800e5c0:	4a0f      	ldr	r2, [pc, #60]	@ (800e600 <HAL_GPIO_Init+0x304>)
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	61fb      	str	r3, [r7, #28]
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	2b0f      	cmp	r3, #15
 800e5d0:	f67f aea2 	bls.w	800e318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800e5d4:	bf00      	nop
 800e5d6:	bf00      	nop
 800e5d8:	3724      	adds	r7, #36	@ 0x24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	40023800 	.word	0x40023800
 800e5e8:	40013800 	.word	0x40013800
 800e5ec:	40020000 	.word	0x40020000
 800e5f0:	40020400 	.word	0x40020400
 800e5f4:	40020800 	.word	0x40020800
 800e5f8:	40020c00 	.word	0x40020c00
 800e5fc:	40021000 	.word	0x40021000
 800e600:	40013c00 	.word	0x40013c00

0800e604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e604:	b480      	push	{r7}
 800e606:	b083      	sub	sp, #12
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	807b      	strh	r3, [r7, #2]
 800e610:	4613      	mov	r3, r2
 800e612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e614:	787b      	ldrb	r3, [r7, #1]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d003      	beq.n	800e622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800e61a:	887a      	ldrh	r2, [r7, #2]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800e620:	e003      	b.n	800e62a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800e622:	887b      	ldrh	r3, [r7, #2]
 800e624:	041a      	lsls	r2, r3, #16
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	619a      	str	r2, [r3, #24]
}
 800e62a:	bf00      	nop
 800e62c:	370c      	adds	r7, #12
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr

0800e636 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e636:	b480      	push	{r7}
 800e638:	b085      	sub	sp, #20
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	695b      	ldr	r3, [r3, #20]
 800e646:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800e648:	887a      	ldrh	r2, [r7, #2]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	4013      	ands	r3, r2
 800e64e:	041a      	lsls	r2, r3, #16
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	43d9      	mvns	r1, r3
 800e654:	887b      	ldrh	r3, [r7, #2]
 800e656:	400b      	ands	r3, r1
 800e658:	431a      	orrs	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	619a      	str	r2, [r3, #24]
}
 800e65e:	bf00      	nop
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
	...

0800e66c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b082      	sub	sp, #8
 800e670:	af00      	add	r7, sp, #0
 800e672:	4603      	mov	r3, r0
 800e674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800e676:	4b08      	ldr	r3, [pc, #32]	@ (800e698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e678:	695a      	ldr	r2, [r3, #20]
 800e67a:	88fb      	ldrh	r3, [r7, #6]
 800e67c:	4013      	ands	r3, r2
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d006      	beq.n	800e690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e682:	4a05      	ldr	r2, [pc, #20]	@ (800e698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e684:	88fb      	ldrh	r3, [r7, #6]
 800e686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e688:	88fb      	ldrh	r3, [r7, #6]
 800e68a:	4618      	mov	r0, r3
 800e68c:	f7fe fd34 	bl	800d0f8 <HAL_GPIO_EXTI_Callback>
  }
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}
 800e698:	40013c00 	.word	0x40013c00

0800e69c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d101      	bne.n	800e6ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	e267      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f003 0301 	and.w	r3, r3, #1
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d075      	beq.n	800e7a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e6ba:	4b88      	ldr	r3, [pc, #544]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	f003 030c 	and.w	r3, r3, #12
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d00c      	beq.n	800e6e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e6c6:	4b85      	ldr	r3, [pc, #532]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e6c8:	689b      	ldr	r3, [r3, #8]
 800e6ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800e6ce:	2b08      	cmp	r3, #8
 800e6d0:	d112      	bne.n	800e6f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800e6d2:	4b82      	ldr	r3, [pc, #520]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e6da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e6de:	d10b      	bne.n	800e6f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e6e0:	4b7e      	ldr	r3, [pc, #504]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d05b      	beq.n	800e7a4 <HAL_RCC_OscConfig+0x108>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	685b      	ldr	r3, [r3, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d157      	bne.n	800e7a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	e242      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	685b      	ldr	r3, [r3, #4]
 800e6fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e700:	d106      	bne.n	800e710 <HAL_RCC_OscConfig+0x74>
 800e702:	4b76      	ldr	r3, [pc, #472]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a75      	ldr	r2, [pc, #468]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e70c:	6013      	str	r3, [r2, #0]
 800e70e:	e01d      	b.n	800e74c <HAL_RCC_OscConfig+0xb0>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	685b      	ldr	r3, [r3, #4]
 800e714:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800e718:	d10c      	bne.n	800e734 <HAL_RCC_OscConfig+0x98>
 800e71a:	4b70      	ldr	r3, [pc, #448]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	4a6f      	ldr	r2, [pc, #444]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800e724:	6013      	str	r3, [r2, #0]
 800e726:	4b6d      	ldr	r3, [pc, #436]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a6c      	ldr	r2, [pc, #432]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e72c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e730:	6013      	str	r3, [r2, #0]
 800e732:	e00b      	b.n	800e74c <HAL_RCC_OscConfig+0xb0>
 800e734:	4b69      	ldr	r3, [pc, #420]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a68      	ldr	r2, [pc, #416]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e73a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e73e:	6013      	str	r3, [r2, #0]
 800e740:	4b66      	ldr	r3, [pc, #408]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a65      	ldr	r2, [pc, #404]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e746:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e74a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	685b      	ldr	r3, [r3, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d013      	beq.n	800e77c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e754:	f7ff f9bc 	bl	800dad0 <HAL_GetTick>
 800e758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e75a:	e008      	b.n	800e76e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e75c:	f7ff f9b8 	bl	800dad0 <HAL_GetTick>
 800e760:	4602      	mov	r2, r0
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	1ad3      	subs	r3, r2, r3
 800e766:	2b64      	cmp	r3, #100	@ 0x64
 800e768:	d901      	bls.n	800e76e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800e76a:	2303      	movs	r3, #3
 800e76c:	e207      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e76e:	4b5b      	ldr	r3, [pc, #364]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e776:	2b00      	cmp	r3, #0
 800e778:	d0f0      	beq.n	800e75c <HAL_RCC_OscConfig+0xc0>
 800e77a:	e014      	b.n	800e7a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e77c:	f7ff f9a8 	bl	800dad0 <HAL_GetTick>
 800e780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e782:	e008      	b.n	800e796 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e784:	f7ff f9a4 	bl	800dad0 <HAL_GetTick>
 800e788:	4602      	mov	r2, r0
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	2b64      	cmp	r3, #100	@ 0x64
 800e790:	d901      	bls.n	800e796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e792:	2303      	movs	r3, #3
 800e794:	e1f3      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800e796:	4b51      	ldr	r3, [pc, #324]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d1f0      	bne.n	800e784 <HAL_RCC_OscConfig+0xe8>
 800e7a2:	e000      	b.n	800e7a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e7a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f003 0302 	and.w	r3, r3, #2
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d063      	beq.n	800e87a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e7b2:	4b4a      	ldr	r3, [pc, #296]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	f003 030c 	and.w	r3, r3, #12
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d00b      	beq.n	800e7d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e7be:	4b47      	ldr	r3, [pc, #284]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e7c0:	689b      	ldr	r3, [r3, #8]
 800e7c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800e7c6:	2b08      	cmp	r3, #8
 800e7c8:	d11c      	bne.n	800e804 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800e7ca:	4b44      	ldr	r3, [pc, #272]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d116      	bne.n	800e804 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e7d6:	4b41      	ldr	r3, [pc, #260]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f003 0302 	and.w	r3, r3, #2
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d005      	beq.n	800e7ee <HAL_RCC_OscConfig+0x152>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d001      	beq.n	800e7ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e1c7      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e7ee:	4b3b      	ldr	r3, [pc, #236]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	00db      	lsls	r3, r3, #3
 800e7fc:	4937      	ldr	r1, [pc, #220]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e7fe:	4313      	orrs	r3, r2
 800e800:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800e802:	e03a      	b.n	800e87a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d020      	beq.n	800e84e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800e80c:	4b34      	ldr	r3, [pc, #208]	@ (800e8e0 <HAL_RCC_OscConfig+0x244>)
 800e80e:	2201      	movs	r2, #1
 800e810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e812:	f7ff f95d 	bl	800dad0 <HAL_GetTick>
 800e816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e818:	e008      	b.n	800e82c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e81a:	f7ff f959 	bl	800dad0 <HAL_GetTick>
 800e81e:	4602      	mov	r2, r0
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	1ad3      	subs	r3, r2, r3
 800e824:	2b02      	cmp	r3, #2
 800e826:	d901      	bls.n	800e82c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800e828:	2303      	movs	r3, #3
 800e82a:	e1a8      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e82c:	4b2b      	ldr	r3, [pc, #172]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f003 0302 	and.w	r3, r3, #2
 800e834:	2b00      	cmp	r3, #0
 800e836:	d0f0      	beq.n	800e81a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e838:	4b28      	ldr	r3, [pc, #160]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	691b      	ldr	r3, [r3, #16]
 800e844:	00db      	lsls	r3, r3, #3
 800e846:	4925      	ldr	r1, [pc, #148]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e848:	4313      	orrs	r3, r2
 800e84a:	600b      	str	r3, [r1, #0]
 800e84c:	e015      	b.n	800e87a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e84e:	4b24      	ldr	r3, [pc, #144]	@ (800e8e0 <HAL_RCC_OscConfig+0x244>)
 800e850:	2200      	movs	r2, #0
 800e852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e854:	f7ff f93c 	bl	800dad0 <HAL_GetTick>
 800e858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e85a:	e008      	b.n	800e86e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e85c:	f7ff f938 	bl	800dad0 <HAL_GetTick>
 800e860:	4602      	mov	r2, r0
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	2b02      	cmp	r3, #2
 800e868:	d901      	bls.n	800e86e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800e86a:	2303      	movs	r3, #3
 800e86c:	e187      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800e86e:	4b1b      	ldr	r3, [pc, #108]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f003 0302 	and.w	r3, r3, #2
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1f0      	bne.n	800e85c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f003 0308 	and.w	r3, r3, #8
 800e882:	2b00      	cmp	r3, #0
 800e884:	d036      	beq.n	800e8f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	695b      	ldr	r3, [r3, #20]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d016      	beq.n	800e8bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e88e:	4b15      	ldr	r3, [pc, #84]	@ (800e8e4 <HAL_RCC_OscConfig+0x248>)
 800e890:	2201      	movs	r2, #1
 800e892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e894:	f7ff f91c 	bl	800dad0 <HAL_GetTick>
 800e898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e89a:	e008      	b.n	800e8ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e89c:	f7ff f918 	bl	800dad0 <HAL_GetTick>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	1ad3      	subs	r3, r2, r3
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d901      	bls.n	800e8ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	e167      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800e8ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e8dc <HAL_RCC_OscConfig+0x240>)
 800e8b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8b2:	f003 0302 	and.w	r3, r3, #2
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d0f0      	beq.n	800e89c <HAL_RCC_OscConfig+0x200>
 800e8ba:	e01b      	b.n	800e8f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800e8bc:	4b09      	ldr	r3, [pc, #36]	@ (800e8e4 <HAL_RCC_OscConfig+0x248>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e8c2:	f7ff f905 	bl	800dad0 <HAL_GetTick>
 800e8c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e8c8:	e00e      	b.n	800e8e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800e8ca:	f7ff f901 	bl	800dad0 <HAL_GetTick>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	1ad3      	subs	r3, r2, r3
 800e8d4:	2b02      	cmp	r3, #2
 800e8d6:	d907      	bls.n	800e8e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800e8d8:	2303      	movs	r3, #3
 800e8da:	e150      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
 800e8dc:	40023800 	.word	0x40023800
 800e8e0:	42470000 	.word	0x42470000
 800e8e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800e8e8:	4b88      	ldr	r3, [pc, #544]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e8ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8ec:	f003 0302 	and.w	r3, r3, #2
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d1ea      	bne.n	800e8ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f003 0304 	and.w	r3, r3, #4
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	f000 8097 	beq.w	800ea30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e902:	2300      	movs	r3, #0
 800e904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e906:	4b81      	ldr	r3, [pc, #516]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e90a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10f      	bne.n	800e932 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e912:	2300      	movs	r3, #0
 800e914:	60bb      	str	r3, [r7, #8]
 800e916:	4b7d      	ldr	r3, [pc, #500]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e91a:	4a7c      	ldr	r2, [pc, #496]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e91c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e920:	6413      	str	r3, [r2, #64]	@ 0x40
 800e922:	4b7a      	ldr	r3, [pc, #488]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e92a:	60bb      	str	r3, [r7, #8]
 800e92c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e92e:	2301      	movs	r3, #1
 800e930:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e932:	4b77      	ldr	r3, [pc, #476]	@ (800eb10 <HAL_RCC_OscConfig+0x474>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d118      	bne.n	800e970 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800e93e:	4b74      	ldr	r3, [pc, #464]	@ (800eb10 <HAL_RCC_OscConfig+0x474>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4a73      	ldr	r2, [pc, #460]	@ (800eb10 <HAL_RCC_OscConfig+0x474>)
 800e944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800e94a:	f7ff f8c1 	bl	800dad0 <HAL_GetTick>
 800e94e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e950:	e008      	b.n	800e964 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e952:	f7ff f8bd 	bl	800dad0 <HAL_GetTick>
 800e956:	4602      	mov	r2, r0
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	2b02      	cmp	r3, #2
 800e95e:	d901      	bls.n	800e964 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800e960:	2303      	movs	r3, #3
 800e962:	e10c      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800e964:	4b6a      	ldr	r3, [pc, #424]	@ (800eb10 <HAL_RCC_OscConfig+0x474>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d0f0      	beq.n	800e952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	2b01      	cmp	r3, #1
 800e976:	d106      	bne.n	800e986 <HAL_RCC_OscConfig+0x2ea>
 800e978:	4b64      	ldr	r3, [pc, #400]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e97a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e97c:	4a63      	ldr	r2, [pc, #396]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e97e:	f043 0301 	orr.w	r3, r3, #1
 800e982:	6713      	str	r3, [r2, #112]	@ 0x70
 800e984:	e01c      	b.n	800e9c0 <HAL_RCC_OscConfig+0x324>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	689b      	ldr	r3, [r3, #8]
 800e98a:	2b05      	cmp	r3, #5
 800e98c:	d10c      	bne.n	800e9a8 <HAL_RCC_OscConfig+0x30c>
 800e98e:	4b5f      	ldr	r3, [pc, #380]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e992:	4a5e      	ldr	r2, [pc, #376]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e994:	f043 0304 	orr.w	r3, r3, #4
 800e998:	6713      	str	r3, [r2, #112]	@ 0x70
 800e99a:	4b5c      	ldr	r3, [pc, #368]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e99c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e99e:	4a5b      	ldr	r2, [pc, #364]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e9a0:	f043 0301 	orr.w	r3, r3, #1
 800e9a4:	6713      	str	r3, [r2, #112]	@ 0x70
 800e9a6:	e00b      	b.n	800e9c0 <HAL_RCC_OscConfig+0x324>
 800e9a8:	4b58      	ldr	r3, [pc, #352]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e9aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9ac:	4a57      	ldr	r2, [pc, #348]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e9ae:	f023 0301 	bic.w	r3, r3, #1
 800e9b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800e9b4:	4b55      	ldr	r3, [pc, #340]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e9b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9b8:	4a54      	ldr	r2, [pc, #336]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e9ba:	f023 0304 	bic.w	r3, r3, #4
 800e9be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d015      	beq.n	800e9f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9c8:	f7ff f882 	bl	800dad0 <HAL_GetTick>
 800e9cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e9ce:	e00a      	b.n	800e9e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e9d0:	f7ff f87e 	bl	800dad0 <HAL_GetTick>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	1ad3      	subs	r3, r2, r3
 800e9da:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d901      	bls.n	800e9e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800e9e2:	2303      	movs	r3, #3
 800e9e4:	e0cb      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e9e6:	4b49      	ldr	r3, [pc, #292]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800e9e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9ea:	f003 0302 	and.w	r3, r3, #2
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d0ee      	beq.n	800e9d0 <HAL_RCC_OscConfig+0x334>
 800e9f2:	e014      	b.n	800ea1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800e9f4:	f7ff f86c 	bl	800dad0 <HAL_GetTick>
 800e9f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800e9fa:	e00a      	b.n	800ea12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e9fc:	f7ff f868 	bl	800dad0 <HAL_GetTick>
 800ea00:	4602      	mov	r2, r0
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	1ad3      	subs	r3, r2, r3
 800ea06:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d901      	bls.n	800ea12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ea0e:	2303      	movs	r3, #3
 800ea10:	e0b5      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ea12:	4b3e      	ldr	r3, [pc, #248]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800ea14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea16:	f003 0302 	and.w	r3, r3, #2
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1ee      	bne.n	800e9fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ea1e:	7dfb      	ldrb	r3, [r7, #23]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d105      	bne.n	800ea30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ea24:	4b39      	ldr	r3, [pc, #228]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800ea26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea28:	4a38      	ldr	r2, [pc, #224]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800ea2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ea2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	699b      	ldr	r3, [r3, #24]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f000 80a1 	beq.w	800eb7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ea3a:	4b34      	ldr	r3, [pc, #208]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	f003 030c 	and.w	r3, r3, #12
 800ea42:	2b08      	cmp	r3, #8
 800ea44:	d05c      	beq.n	800eb00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	2b02      	cmp	r3, #2
 800ea4c:	d141      	bne.n	800ead2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ea4e:	4b31      	ldr	r3, [pc, #196]	@ (800eb14 <HAL_RCC_OscConfig+0x478>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea54:	f7ff f83c 	bl	800dad0 <HAL_GetTick>
 800ea58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea5a:	e008      	b.n	800ea6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ea5c:	f7ff f838 	bl	800dad0 <HAL_GetTick>
 800ea60:	4602      	mov	r2, r0
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	2b02      	cmp	r3, #2
 800ea68:	d901      	bls.n	800ea6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	e087      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ea6e:	4b27      	ldr	r3, [pc, #156]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1f0      	bne.n	800ea5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	69da      	ldr	r2, [r3, #28]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6a1b      	ldr	r3, [r3, #32]
 800ea82:	431a      	orrs	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea88:	019b      	lsls	r3, r3, #6
 800ea8a:	431a      	orrs	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea90:	085b      	lsrs	r3, r3, #1
 800ea92:	3b01      	subs	r3, #1
 800ea94:	041b      	lsls	r3, r3, #16
 800ea96:	431a      	orrs	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea9c:	061b      	lsls	r3, r3, #24
 800ea9e:	491b      	ldr	r1, [pc, #108]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800eaa4:	4b1b      	ldr	r3, [pc, #108]	@ (800eb14 <HAL_RCC_OscConfig+0x478>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eaaa:	f7ff f811 	bl	800dad0 <HAL_GetTick>
 800eaae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eab0:	e008      	b.n	800eac4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eab2:	f7ff f80d 	bl	800dad0 <HAL_GetTick>
 800eab6:	4602      	mov	r2, r0
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d901      	bls.n	800eac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800eac0:	2303      	movs	r3, #3
 800eac2:	e05c      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800eac4:	4b11      	ldr	r3, [pc, #68]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d0f0      	beq.n	800eab2 <HAL_RCC_OscConfig+0x416>
 800ead0:	e054      	b.n	800eb7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ead2:	4b10      	ldr	r3, [pc, #64]	@ (800eb14 <HAL_RCC_OscConfig+0x478>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ead8:	f7fe fffa 	bl	800dad0 <HAL_GetTick>
 800eadc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eade:	e008      	b.n	800eaf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eae0:	f7fe fff6 	bl	800dad0 <HAL_GetTick>
 800eae4:	4602      	mov	r2, r0
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	2b02      	cmp	r3, #2
 800eaec:	d901      	bls.n	800eaf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800eaee:	2303      	movs	r3, #3
 800eaf0:	e045      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800eaf2:	4b06      	ldr	r3, [pc, #24]	@ (800eb0c <HAL_RCC_OscConfig+0x470>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1f0      	bne.n	800eae0 <HAL_RCC_OscConfig+0x444>
 800eafe:	e03d      	b.n	800eb7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	2b01      	cmp	r3, #1
 800eb06:	d107      	bne.n	800eb18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	e038      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
 800eb0c:	40023800 	.word	0x40023800
 800eb10:	40007000 	.word	0x40007000
 800eb14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800eb18:	4b1b      	ldr	r3, [pc, #108]	@ (800eb88 <HAL_RCC_OscConfig+0x4ec>)
 800eb1a:	685b      	ldr	r3, [r3, #4]
 800eb1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	699b      	ldr	r3, [r3, #24]
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d028      	beq.n	800eb78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d121      	bne.n	800eb78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eb3e:	429a      	cmp	r2, r3
 800eb40:	d11a      	bne.n	800eb78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eb42:	68fa      	ldr	r2, [r7, #12]
 800eb44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800eb48:	4013      	ands	r3, r2
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800eb4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d111      	bne.n	800eb78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb5e:	085b      	lsrs	r3, r3, #1
 800eb60:	3b01      	subs	r3, #1
 800eb62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d107      	bne.n	800eb78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d001      	beq.n	800eb7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e000      	b.n	800eb7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3718      	adds	r7, #24
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	40023800 	.word	0x40023800

0800eb8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e0cc      	b.n	800ed3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eba0:	4b68      	ldr	r3, [pc, #416]	@ (800ed44 <HAL_RCC_ClockConfig+0x1b8>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	f003 0307 	and.w	r3, r3, #7
 800eba8:	683a      	ldr	r2, [r7, #0]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d90c      	bls.n	800ebc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ebae:	4b65      	ldr	r3, [pc, #404]	@ (800ed44 <HAL_RCC_ClockConfig+0x1b8>)
 800ebb0:	683a      	ldr	r2, [r7, #0]
 800ebb2:	b2d2      	uxtb	r2, r2
 800ebb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ebb6:	4b63      	ldr	r3, [pc, #396]	@ (800ed44 <HAL_RCC_ClockConfig+0x1b8>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f003 0307 	and.w	r3, r3, #7
 800ebbe:	683a      	ldr	r2, [r7, #0]
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d001      	beq.n	800ebc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e0b8      	b.n	800ed3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f003 0302 	and.w	r3, r3, #2
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d020      	beq.n	800ec16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f003 0304 	and.w	r3, r3, #4
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d005      	beq.n	800ebec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ebe0:	4b59      	ldr	r3, [pc, #356]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	4a58      	ldr	r2, [pc, #352]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ebe6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ebea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f003 0308 	and.w	r3, r3, #8
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d005      	beq.n	800ec04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ebf8:	4b53      	ldr	r3, [pc, #332]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	4a52      	ldr	r2, [pc, #328]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ebfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ec02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ec04:	4b50      	ldr	r3, [pc, #320]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ec06:	689b      	ldr	r3, [r3, #8]
 800ec08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	689b      	ldr	r3, [r3, #8]
 800ec10:	494d      	ldr	r1, [pc, #308]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ec12:	4313      	orrs	r3, r2
 800ec14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d044      	beq.n	800ecac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d107      	bne.n	800ec3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ec2a:	4b47      	ldr	r3, [pc, #284]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d119      	bne.n	800ec6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec36:	2301      	movs	r3, #1
 800ec38:	e07f      	b.n	800ed3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d003      	beq.n	800ec4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ec46:	2b03      	cmp	r3, #3
 800ec48:	d107      	bne.n	800ec5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ec4a:	4b3f      	ldr	r3, [pc, #252]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d109      	bne.n	800ec6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec56:	2301      	movs	r3, #1
 800ec58:	e06f      	b.n	800ed3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ec5a:	4b3b      	ldr	r3, [pc, #236]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f003 0302 	and.w	r3, r3, #2
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d101      	bne.n	800ec6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ec66:	2301      	movs	r3, #1
 800ec68:	e067      	b.n	800ed3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ec6a:	4b37      	ldr	r3, [pc, #220]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ec6c:	689b      	ldr	r3, [r3, #8]
 800ec6e:	f023 0203 	bic.w	r2, r3, #3
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	4934      	ldr	r1, [pc, #208]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ec7c:	f7fe ff28 	bl	800dad0 <HAL_GetTick>
 800ec80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec82:	e00a      	b.n	800ec9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ec84:	f7fe ff24 	bl	800dad0 <HAL_GetTick>
 800ec88:	4602      	mov	r2, r0
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	1ad3      	subs	r3, r2, r3
 800ec8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec92:	4293      	cmp	r3, r2
 800ec94:	d901      	bls.n	800ec9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ec96:	2303      	movs	r3, #3
 800ec98:	e04f      	b.n	800ed3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ec9a:	4b2b      	ldr	r3, [pc, #172]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	f003 020c 	and.w	r2, r3, #12
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	685b      	ldr	r3, [r3, #4]
 800eca6:	009b      	lsls	r3, r3, #2
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d1eb      	bne.n	800ec84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ecac:	4b25      	ldr	r3, [pc, #148]	@ (800ed44 <HAL_RCC_ClockConfig+0x1b8>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f003 0307 	and.w	r3, r3, #7
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	d20c      	bcs.n	800ecd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ecba:	4b22      	ldr	r3, [pc, #136]	@ (800ed44 <HAL_RCC_ClockConfig+0x1b8>)
 800ecbc:	683a      	ldr	r2, [r7, #0]
 800ecbe:	b2d2      	uxtb	r2, r2
 800ecc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ecc2:	4b20      	ldr	r3, [pc, #128]	@ (800ed44 <HAL_RCC_ClockConfig+0x1b8>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f003 0307 	and.w	r3, r3, #7
 800ecca:	683a      	ldr	r2, [r7, #0]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d001      	beq.n	800ecd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	e032      	b.n	800ed3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f003 0304 	and.w	r3, r3, #4
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d008      	beq.n	800ecf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ece0:	4b19      	ldr	r3, [pc, #100]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	4916      	ldr	r1, [pc, #88]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	f003 0308 	and.w	r3, r3, #8
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d009      	beq.n	800ed12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ecfe:	4b12      	ldr	r3, [pc, #72]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ed00:	689b      	ldr	r3, [r3, #8]
 800ed02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	691b      	ldr	r3, [r3, #16]
 800ed0a:	00db      	lsls	r3, r3, #3
 800ed0c:	490e      	ldr	r1, [pc, #56]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ed12:	f000 f821 	bl	800ed58 <HAL_RCC_GetSysClockFreq>
 800ed16:	4602      	mov	r2, r0
 800ed18:	4b0b      	ldr	r3, [pc, #44]	@ (800ed48 <HAL_RCC_ClockConfig+0x1bc>)
 800ed1a:	689b      	ldr	r3, [r3, #8]
 800ed1c:	091b      	lsrs	r3, r3, #4
 800ed1e:	f003 030f 	and.w	r3, r3, #15
 800ed22:	490a      	ldr	r1, [pc, #40]	@ (800ed4c <HAL_RCC_ClockConfig+0x1c0>)
 800ed24:	5ccb      	ldrb	r3, [r1, r3]
 800ed26:	fa22 f303 	lsr.w	r3, r2, r3
 800ed2a:	4a09      	ldr	r2, [pc, #36]	@ (800ed50 <HAL_RCC_ClockConfig+0x1c4>)
 800ed2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ed2e:	4b09      	ldr	r3, [pc, #36]	@ (800ed54 <HAL_RCC_ClockConfig+0x1c8>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fe fcde 	bl	800d6f4 <HAL_InitTick>

  return HAL_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	40023c00 	.word	0x40023c00
 800ed48:	40023800 	.word	0x40023800
 800ed4c:	080130f4 	.word	0x080130f4
 800ed50:	20000008 	.word	0x20000008
 800ed54:	2000000c 	.word	0x2000000c

0800ed58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ed58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ed5c:	b094      	sub	sp, #80	@ 0x50
 800ed5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ed60:	2300      	movs	r3, #0
 800ed62:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed64:	2300      	movs	r3, #0
 800ed66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ed68:	2300      	movs	r3, #0
 800ed6a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ed70:	4b79      	ldr	r3, [pc, #484]	@ (800ef58 <HAL_RCC_GetSysClockFreq+0x200>)
 800ed72:	689b      	ldr	r3, [r3, #8]
 800ed74:	f003 030c 	and.w	r3, r3, #12
 800ed78:	2b08      	cmp	r3, #8
 800ed7a:	d00d      	beq.n	800ed98 <HAL_RCC_GetSysClockFreq+0x40>
 800ed7c:	2b08      	cmp	r3, #8
 800ed7e:	f200 80e1 	bhi.w	800ef44 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d002      	beq.n	800ed8c <HAL_RCC_GetSysClockFreq+0x34>
 800ed86:	2b04      	cmp	r3, #4
 800ed88:	d003      	beq.n	800ed92 <HAL_RCC_GetSysClockFreq+0x3a>
 800ed8a:	e0db      	b.n	800ef44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ed8c:	4b73      	ldr	r3, [pc, #460]	@ (800ef5c <HAL_RCC_GetSysClockFreq+0x204>)
 800ed8e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800ed90:	e0db      	b.n	800ef4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ed92:	4b73      	ldr	r3, [pc, #460]	@ (800ef60 <HAL_RCC_GetSysClockFreq+0x208>)
 800ed94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ed96:	e0d8      	b.n	800ef4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ed98:	4b6f      	ldr	r3, [pc, #444]	@ (800ef58 <HAL_RCC_GetSysClockFreq+0x200>)
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800eda0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800eda2:	4b6d      	ldr	r3, [pc, #436]	@ (800ef58 <HAL_RCC_GetSysClockFreq+0x200>)
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d063      	beq.n	800ee76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800edae:	4b6a      	ldr	r3, [pc, #424]	@ (800ef58 <HAL_RCC_GetSysClockFreq+0x200>)
 800edb0:	685b      	ldr	r3, [r3, #4]
 800edb2:	099b      	lsrs	r3, r3, #6
 800edb4:	2200      	movs	r2, #0
 800edb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800edb8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800edba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800edc2:	2300      	movs	r3, #0
 800edc4:	637b      	str	r3, [r7, #52]	@ 0x34
 800edc6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800edca:	4622      	mov	r2, r4
 800edcc:	462b      	mov	r3, r5
 800edce:	f04f 0000 	mov.w	r0, #0
 800edd2:	f04f 0100 	mov.w	r1, #0
 800edd6:	0159      	lsls	r1, r3, #5
 800edd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eddc:	0150      	lsls	r0, r2, #5
 800edde:	4602      	mov	r2, r0
 800ede0:	460b      	mov	r3, r1
 800ede2:	4621      	mov	r1, r4
 800ede4:	1a51      	subs	r1, r2, r1
 800ede6:	6139      	str	r1, [r7, #16]
 800ede8:	4629      	mov	r1, r5
 800edea:	eb63 0301 	sbc.w	r3, r3, r1
 800edee:	617b      	str	r3, [r7, #20]
 800edf0:	f04f 0200 	mov.w	r2, #0
 800edf4:	f04f 0300 	mov.w	r3, #0
 800edf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800edfc:	4659      	mov	r1, fp
 800edfe:	018b      	lsls	r3, r1, #6
 800ee00:	4651      	mov	r1, sl
 800ee02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ee06:	4651      	mov	r1, sl
 800ee08:	018a      	lsls	r2, r1, #6
 800ee0a:	4651      	mov	r1, sl
 800ee0c:	ebb2 0801 	subs.w	r8, r2, r1
 800ee10:	4659      	mov	r1, fp
 800ee12:	eb63 0901 	sbc.w	r9, r3, r1
 800ee16:	f04f 0200 	mov.w	r2, #0
 800ee1a:	f04f 0300 	mov.w	r3, #0
 800ee1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ee22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ee26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ee2a:	4690      	mov	r8, r2
 800ee2c:	4699      	mov	r9, r3
 800ee2e:	4623      	mov	r3, r4
 800ee30:	eb18 0303 	adds.w	r3, r8, r3
 800ee34:	60bb      	str	r3, [r7, #8]
 800ee36:	462b      	mov	r3, r5
 800ee38:	eb49 0303 	adc.w	r3, r9, r3
 800ee3c:	60fb      	str	r3, [r7, #12]
 800ee3e:	f04f 0200 	mov.w	r2, #0
 800ee42:	f04f 0300 	mov.w	r3, #0
 800ee46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	024b      	lsls	r3, r1, #9
 800ee4e:	4621      	mov	r1, r4
 800ee50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800ee54:	4621      	mov	r1, r4
 800ee56:	024a      	lsls	r2, r1, #9
 800ee58:	4610      	mov	r0, r2
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee5e:	2200      	movs	r2, #0
 800ee60:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ee62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ee64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ee68:	f7fd f942 	bl	800c0f0 <__aeabi_uldivmod>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	460b      	mov	r3, r1
 800ee70:	4613      	mov	r3, r2
 800ee72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ee74:	e058      	b.n	800ef28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ee76:	4b38      	ldr	r3, [pc, #224]	@ (800ef58 <HAL_RCC_GetSysClockFreq+0x200>)
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	099b      	lsrs	r3, r3, #6
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	4618      	mov	r0, r3
 800ee80:	4611      	mov	r1, r2
 800ee82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ee86:	623b      	str	r3, [r7, #32]
 800ee88:	2300      	movs	r3, #0
 800ee8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ee90:	4642      	mov	r2, r8
 800ee92:	464b      	mov	r3, r9
 800ee94:	f04f 0000 	mov.w	r0, #0
 800ee98:	f04f 0100 	mov.w	r1, #0
 800ee9c:	0159      	lsls	r1, r3, #5
 800ee9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800eea2:	0150      	lsls	r0, r2, #5
 800eea4:	4602      	mov	r2, r0
 800eea6:	460b      	mov	r3, r1
 800eea8:	4641      	mov	r1, r8
 800eeaa:	ebb2 0a01 	subs.w	sl, r2, r1
 800eeae:	4649      	mov	r1, r9
 800eeb0:	eb63 0b01 	sbc.w	fp, r3, r1
 800eeb4:	f04f 0200 	mov.w	r2, #0
 800eeb8:	f04f 0300 	mov.w	r3, #0
 800eebc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800eec0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800eec4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800eec8:	ebb2 040a 	subs.w	r4, r2, sl
 800eecc:	eb63 050b 	sbc.w	r5, r3, fp
 800eed0:	f04f 0200 	mov.w	r2, #0
 800eed4:	f04f 0300 	mov.w	r3, #0
 800eed8:	00eb      	lsls	r3, r5, #3
 800eeda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800eede:	00e2      	lsls	r2, r4, #3
 800eee0:	4614      	mov	r4, r2
 800eee2:	461d      	mov	r5, r3
 800eee4:	4643      	mov	r3, r8
 800eee6:	18e3      	adds	r3, r4, r3
 800eee8:	603b      	str	r3, [r7, #0]
 800eeea:	464b      	mov	r3, r9
 800eeec:	eb45 0303 	adc.w	r3, r5, r3
 800eef0:	607b      	str	r3, [r7, #4]
 800eef2:	f04f 0200 	mov.w	r2, #0
 800eef6:	f04f 0300 	mov.w	r3, #0
 800eefa:	e9d7 4500 	ldrd	r4, r5, [r7]
 800eefe:	4629      	mov	r1, r5
 800ef00:	028b      	lsls	r3, r1, #10
 800ef02:	4621      	mov	r1, r4
 800ef04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ef08:	4621      	mov	r1, r4
 800ef0a:	028a      	lsls	r2, r1, #10
 800ef0c:	4610      	mov	r0, r2
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef12:	2200      	movs	r2, #0
 800ef14:	61bb      	str	r3, [r7, #24]
 800ef16:	61fa      	str	r2, [r7, #28]
 800ef18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ef1c:	f7fd f8e8 	bl	800c0f0 <__aeabi_uldivmod>
 800ef20:	4602      	mov	r2, r0
 800ef22:	460b      	mov	r3, r1
 800ef24:	4613      	mov	r3, r2
 800ef26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ef28:	4b0b      	ldr	r3, [pc, #44]	@ (800ef58 <HAL_RCC_GetSysClockFreq+0x200>)
 800ef2a:	685b      	ldr	r3, [r3, #4]
 800ef2c:	0c1b      	lsrs	r3, r3, #16
 800ef2e:	f003 0303 	and.w	r3, r3, #3
 800ef32:	3301      	adds	r3, #1
 800ef34:	005b      	lsls	r3, r3, #1
 800ef36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800ef38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ef3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ef3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ef42:	e002      	b.n	800ef4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ef44:	4b05      	ldr	r3, [pc, #20]	@ (800ef5c <HAL_RCC_GetSysClockFreq+0x204>)
 800ef46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ef48:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ef4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3750      	adds	r7, #80	@ 0x50
 800ef50:	46bd      	mov	sp, r7
 800ef52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef56:	bf00      	nop
 800ef58:	40023800 	.word	0x40023800
 800ef5c:	00f42400 	.word	0x00f42400
 800ef60:	007a1200 	.word	0x007a1200

0800ef64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ef64:	b480      	push	{r7}
 800ef66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ef68:	4b03      	ldr	r3, [pc, #12]	@ (800ef78 <HAL_RCC_GetHCLKFreq+0x14>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr
 800ef76:	bf00      	nop
 800ef78:	20000008 	.word	0x20000008

0800ef7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ef80:	f7ff fff0 	bl	800ef64 <HAL_RCC_GetHCLKFreq>
 800ef84:	4602      	mov	r2, r0
 800ef86:	4b05      	ldr	r3, [pc, #20]	@ (800ef9c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ef88:	689b      	ldr	r3, [r3, #8]
 800ef8a:	0a9b      	lsrs	r3, r3, #10
 800ef8c:	f003 0307 	and.w	r3, r3, #7
 800ef90:	4903      	ldr	r1, [pc, #12]	@ (800efa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ef92:	5ccb      	ldrb	r3, [r1, r3]
 800ef94:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	40023800 	.word	0x40023800
 800efa0:	08013104 	.word	0x08013104

0800efa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800efa8:	f7ff ffdc 	bl	800ef64 <HAL_RCC_GetHCLKFreq>
 800efac:	4602      	mov	r2, r0
 800efae:	4b05      	ldr	r3, [pc, #20]	@ (800efc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800efb0:	689b      	ldr	r3, [r3, #8]
 800efb2:	0b5b      	lsrs	r3, r3, #13
 800efb4:	f003 0307 	and.w	r3, r3, #7
 800efb8:	4903      	ldr	r1, [pc, #12]	@ (800efc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800efba:	5ccb      	ldrb	r3, [r1, r3]
 800efbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	40023800 	.word	0x40023800
 800efc8:	08013104 	.word	0x08013104

0800efcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	220f      	movs	r2, #15
 800efda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800efdc:	4b12      	ldr	r3, [pc, #72]	@ (800f028 <HAL_RCC_GetClockConfig+0x5c>)
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	f003 0203 	and.w	r2, r3, #3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800efe8:	4b0f      	ldr	r3, [pc, #60]	@ (800f028 <HAL_RCC_GetClockConfig+0x5c>)
 800efea:	689b      	ldr	r3, [r3, #8]
 800efec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800eff4:	4b0c      	ldr	r3, [pc, #48]	@ (800f028 <HAL_RCC_GetClockConfig+0x5c>)
 800eff6:	689b      	ldr	r3, [r3, #8]
 800eff8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800f000:	4b09      	ldr	r3, [pc, #36]	@ (800f028 <HAL_RCC_GetClockConfig+0x5c>)
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	08db      	lsrs	r3, r3, #3
 800f006:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800f00e:	4b07      	ldr	r3, [pc, #28]	@ (800f02c <HAL_RCC_GetClockConfig+0x60>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f003 0207 	and.w	r2, r3, #7
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	601a      	str	r2, [r3, #0]
}
 800f01a:	bf00      	nop
 800f01c:	370c      	adds	r7, #12
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr
 800f026:	bf00      	nop
 800f028:	40023800 	.word	0x40023800
 800f02c:	40023c00 	.word	0x40023c00

0800f030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b082      	sub	sp, #8
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d101      	bne.n	800f042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f03e:	2301      	movs	r3, #1
 800f040:	e041      	b.n	800f0c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f048:	b2db      	uxtb	r3, r3
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d106      	bne.n	800f05c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	2200      	movs	r2, #0
 800f052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7fe faae 	bl	800d5b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2202      	movs	r2, #2
 800f060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	3304      	adds	r3, #4
 800f06c:	4619      	mov	r1, r3
 800f06e:	4610      	mov	r0, r2
 800f070:	f000 fa70 	bl	800f554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2201      	movs	r2, #1
 800f088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2201      	movs	r2, #1
 800f090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2201      	movs	r2, #1
 800f098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2201      	movs	r2, #1
 800f0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f0c4:	2300      	movs	r3, #0
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
	...

0800f0d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d001      	beq.n	800f0e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	e044      	b.n	800f172 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2202      	movs	r2, #2
 800f0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	68da      	ldr	r2, [r3, #12]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f042 0201 	orr.w	r2, r2, #1
 800f0fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a1e      	ldr	r2, [pc, #120]	@ (800f180 <HAL_TIM_Base_Start_IT+0xb0>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d018      	beq.n	800f13c <HAL_TIM_Base_Start_IT+0x6c>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f112:	d013      	beq.n	800f13c <HAL_TIM_Base_Start_IT+0x6c>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a1a      	ldr	r2, [pc, #104]	@ (800f184 <HAL_TIM_Base_Start_IT+0xb4>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d00e      	beq.n	800f13c <HAL_TIM_Base_Start_IT+0x6c>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4a19      	ldr	r2, [pc, #100]	@ (800f188 <HAL_TIM_Base_Start_IT+0xb8>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d009      	beq.n	800f13c <HAL_TIM_Base_Start_IT+0x6c>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	4a17      	ldr	r2, [pc, #92]	@ (800f18c <HAL_TIM_Base_Start_IT+0xbc>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d004      	beq.n	800f13c <HAL_TIM_Base_Start_IT+0x6c>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a16      	ldr	r2, [pc, #88]	@ (800f190 <HAL_TIM_Base_Start_IT+0xc0>)
 800f138:	4293      	cmp	r3, r2
 800f13a:	d111      	bne.n	800f160 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	689b      	ldr	r3, [r3, #8]
 800f142:	f003 0307 	and.w	r3, r3, #7
 800f146:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2b06      	cmp	r3, #6
 800f14c:	d010      	beq.n	800f170 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f042 0201 	orr.w	r2, r2, #1
 800f15c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f15e:	e007      	b.n	800f170 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f042 0201 	orr.w	r2, r2, #1
 800f16e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f170:	2300      	movs	r3, #0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3714      	adds	r7, #20
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr
 800f17e:	bf00      	nop
 800f180:	40010000 	.word	0x40010000
 800f184:	40000400 	.word	0x40000400
 800f188:	40000800 	.word	0x40000800
 800f18c:	40000c00 	.word	0x40000c00
 800f190:	40014000 	.word	0x40014000

0800f194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	68db      	ldr	r3, [r3, #12]
 800f1a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	f003 0302 	and.w	r3, r3, #2
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d020      	beq.n	800f1f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	f003 0302 	and.w	r3, r3, #2
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d01b      	beq.n	800f1f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	f06f 0202 	mvn.w	r2, #2
 800f1c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2201      	movs	r2, #1
 800f1ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	699b      	ldr	r3, [r3, #24]
 800f1d6:	f003 0303 	and.w	r3, r3, #3
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d003      	beq.n	800f1e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 f999 	bl	800f516 <HAL_TIM_IC_CaptureCallback>
 800f1e4:	e005      	b.n	800f1f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f98b 	bl	800f502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 f99c 	bl	800f52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	f003 0304 	and.w	r3, r3, #4
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d020      	beq.n	800f244 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f003 0304 	and.w	r3, r3, #4
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d01b      	beq.n	800f244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	f06f 0204 	mvn.w	r2, #4
 800f214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2202      	movs	r2, #2
 800f21a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	699b      	ldr	r3, [r3, #24]
 800f222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f226:	2b00      	cmp	r3, #0
 800f228:	d003      	beq.n	800f232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 f973 	bl	800f516 <HAL_TIM_IC_CaptureCallback>
 800f230:	e005      	b.n	800f23e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f965 	bl	800f502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 f976 	bl	800f52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	f003 0308 	and.w	r3, r3, #8
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d020      	beq.n	800f290 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f003 0308 	and.w	r3, r3, #8
 800f254:	2b00      	cmp	r3, #0
 800f256:	d01b      	beq.n	800f290 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f06f 0208 	mvn.w	r2, #8
 800f260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2204      	movs	r2, #4
 800f266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	69db      	ldr	r3, [r3, #28]
 800f26e:	f003 0303 	and.w	r3, r3, #3
 800f272:	2b00      	cmp	r3, #0
 800f274:	d003      	beq.n	800f27e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 f94d 	bl	800f516 <HAL_TIM_IC_CaptureCallback>
 800f27c:	e005      	b.n	800f28a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 f93f 	bl	800f502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f000 f950 	bl	800f52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2200      	movs	r2, #0
 800f28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	f003 0310 	and.w	r3, r3, #16
 800f296:	2b00      	cmp	r3, #0
 800f298:	d020      	beq.n	800f2dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f003 0310 	and.w	r3, r3, #16
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d01b      	beq.n	800f2dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f06f 0210 	mvn.w	r2, #16
 800f2ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2208      	movs	r2, #8
 800f2b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	69db      	ldr	r3, [r3, #28]
 800f2ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d003      	beq.n	800f2ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 f927 	bl	800f516 <HAL_TIM_IC_CaptureCallback>
 800f2c8:	e005      	b.n	800f2d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 f919 	bl	800f502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 f92a 	bl	800f52a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	f003 0301 	and.w	r3, r3, #1
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00c      	beq.n	800f300 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f003 0301 	and.w	r3, r3, #1
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d007      	beq.n	800f300 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	f06f 0201 	mvn.w	r2, #1
 800f2f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f7fe f830 	bl	800d360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f306:	2b00      	cmp	r3, #0
 800f308:	d00c      	beq.n	800f324 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f310:	2b00      	cmp	r3, #0
 800f312:	d007      	beq.n	800f324 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f31c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f000 fab6 	bl	800f890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00c      	beq.n	800f348 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f334:	2b00      	cmp	r3, #0
 800f336:	d007      	beq.n	800f348 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 f8fb 	bl	800f53e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	f003 0320 	and.w	r3, r3, #32
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00c      	beq.n	800f36c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f003 0320 	and.w	r3, r3, #32
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d007      	beq.n	800f36c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f06f 0220 	mvn.w	r2, #32
 800f364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 fa88 	bl	800f87c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f36c:	bf00      	nop
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f37e:	2300      	movs	r3, #0
 800f380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d101      	bne.n	800f390 <HAL_TIM_ConfigClockSource+0x1c>
 800f38c:	2302      	movs	r3, #2
 800f38e:	e0b4      	b.n	800f4fa <HAL_TIM_ConfigClockSource+0x186>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2201      	movs	r2, #1
 800f394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	2202      	movs	r2, #2
 800f39c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	689b      	ldr	r3, [r3, #8]
 800f3a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f3a8:	68bb      	ldr	r3, [r7, #8]
 800f3aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f3ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f3b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	68ba      	ldr	r2, [r7, #8]
 800f3be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3c8:	d03e      	beq.n	800f448 <HAL_TIM_ConfigClockSource+0xd4>
 800f3ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f3ce:	f200 8087 	bhi.w	800f4e0 <HAL_TIM_ConfigClockSource+0x16c>
 800f3d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3d6:	f000 8086 	beq.w	800f4e6 <HAL_TIM_ConfigClockSource+0x172>
 800f3da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3de:	d87f      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x16c>
 800f3e0:	2b70      	cmp	r3, #112	@ 0x70
 800f3e2:	d01a      	beq.n	800f41a <HAL_TIM_ConfigClockSource+0xa6>
 800f3e4:	2b70      	cmp	r3, #112	@ 0x70
 800f3e6:	d87b      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x16c>
 800f3e8:	2b60      	cmp	r3, #96	@ 0x60
 800f3ea:	d050      	beq.n	800f48e <HAL_TIM_ConfigClockSource+0x11a>
 800f3ec:	2b60      	cmp	r3, #96	@ 0x60
 800f3ee:	d877      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x16c>
 800f3f0:	2b50      	cmp	r3, #80	@ 0x50
 800f3f2:	d03c      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0xfa>
 800f3f4:	2b50      	cmp	r3, #80	@ 0x50
 800f3f6:	d873      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x16c>
 800f3f8:	2b40      	cmp	r3, #64	@ 0x40
 800f3fa:	d058      	beq.n	800f4ae <HAL_TIM_ConfigClockSource+0x13a>
 800f3fc:	2b40      	cmp	r3, #64	@ 0x40
 800f3fe:	d86f      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x16c>
 800f400:	2b30      	cmp	r3, #48	@ 0x30
 800f402:	d064      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0x15a>
 800f404:	2b30      	cmp	r3, #48	@ 0x30
 800f406:	d86b      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x16c>
 800f408:	2b20      	cmp	r3, #32
 800f40a:	d060      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0x15a>
 800f40c:	2b20      	cmp	r3, #32
 800f40e:	d867      	bhi.n	800f4e0 <HAL_TIM_ConfigClockSource+0x16c>
 800f410:	2b00      	cmp	r3, #0
 800f412:	d05c      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0x15a>
 800f414:	2b10      	cmp	r3, #16
 800f416:	d05a      	beq.n	800f4ce <HAL_TIM_ConfigClockSource+0x15a>
 800f418:	e062      	b.n	800f4e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f42a:	f000 f999 	bl	800f760 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f436:	68bb      	ldr	r3, [r7, #8]
 800f438:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f43c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	68ba      	ldr	r2, [r7, #8]
 800f444:	609a      	str	r2, [r3, #8]
      break;
 800f446:	e04f      	b.n	800f4e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f458:	f000 f982 	bl	800f760 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	689a      	ldr	r2, [r3, #8]
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f46a:	609a      	str	r2, [r3, #8]
      break;
 800f46c:	e03c      	b.n	800f4e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f47a:	461a      	mov	r2, r3
 800f47c:	f000 f8f6 	bl	800f66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	2150      	movs	r1, #80	@ 0x50
 800f486:	4618      	mov	r0, r3
 800f488:	f000 f94f 	bl	800f72a <TIM_ITRx_SetConfig>
      break;
 800f48c:	e02c      	b.n	800f4e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f49a:	461a      	mov	r2, r3
 800f49c:	f000 f915 	bl	800f6ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2160      	movs	r1, #96	@ 0x60
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f000 f93f 	bl	800f72a <TIM_ITRx_SetConfig>
      break;
 800f4ac:	e01c      	b.n	800f4e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	f000 f8d6 	bl	800f66c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	2140      	movs	r1, #64	@ 0x40
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f000 f92f 	bl	800f72a <TIM_ITRx_SetConfig>
      break;
 800f4cc:	e00c      	b.n	800f4e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	4610      	mov	r0, r2
 800f4da:	f000 f926 	bl	800f72a <TIM_ITRx_SetConfig>
      break;
 800f4de:	e003      	b.n	800f4e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f4e4:	e000      	b.n	800f4e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f4e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	3710      	adds	r7, #16
 800f4fe:	46bd      	mov	sp, r7
 800f500:	bd80      	pop	{r7, pc}

0800f502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f502:	b480      	push	{r7}
 800f504:	b083      	sub	sp, #12
 800f506:	af00      	add	r7, sp, #0
 800f508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f50a:	bf00      	nop
 800f50c:	370c      	adds	r7, #12
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr

0800f516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f516:	b480      	push	{r7}
 800f518:	b083      	sub	sp, #12
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f51e:	bf00      	nop
 800f520:	370c      	adds	r7, #12
 800f522:	46bd      	mov	sp, r7
 800f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f528:	4770      	bx	lr

0800f52a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f52a:	b480      	push	{r7}
 800f52c:	b083      	sub	sp, #12
 800f52e:	af00      	add	r7, sp, #0
 800f530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f532:	bf00      	nop
 800f534:	370c      	adds	r7, #12
 800f536:	46bd      	mov	sp, r7
 800f538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53c:	4770      	bx	lr

0800f53e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f53e:	b480      	push	{r7}
 800f540:	b083      	sub	sp, #12
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f546:	bf00      	nop
 800f548:	370c      	adds	r7, #12
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
	...

0800f554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f554:	b480      	push	{r7}
 800f556:	b085      	sub	sp, #20
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	4a3a      	ldr	r2, [pc, #232]	@ (800f650 <TIM_Base_SetConfig+0xfc>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d00f      	beq.n	800f58c <TIM_Base_SetConfig+0x38>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f572:	d00b      	beq.n	800f58c <TIM_Base_SetConfig+0x38>
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	4a37      	ldr	r2, [pc, #220]	@ (800f654 <TIM_Base_SetConfig+0x100>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d007      	beq.n	800f58c <TIM_Base_SetConfig+0x38>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4a36      	ldr	r2, [pc, #216]	@ (800f658 <TIM_Base_SetConfig+0x104>)
 800f580:	4293      	cmp	r3, r2
 800f582:	d003      	beq.n	800f58c <TIM_Base_SetConfig+0x38>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	4a35      	ldr	r2, [pc, #212]	@ (800f65c <TIM_Base_SetConfig+0x108>)
 800f588:	4293      	cmp	r3, r2
 800f58a:	d108      	bne.n	800f59e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	68fa      	ldr	r2, [r7, #12]
 800f59a:	4313      	orrs	r3, r2
 800f59c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4a2b      	ldr	r2, [pc, #172]	@ (800f650 <TIM_Base_SetConfig+0xfc>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d01b      	beq.n	800f5de <TIM_Base_SetConfig+0x8a>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5ac:	d017      	beq.n	800f5de <TIM_Base_SetConfig+0x8a>
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4a28      	ldr	r2, [pc, #160]	@ (800f654 <TIM_Base_SetConfig+0x100>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d013      	beq.n	800f5de <TIM_Base_SetConfig+0x8a>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	4a27      	ldr	r2, [pc, #156]	@ (800f658 <TIM_Base_SetConfig+0x104>)
 800f5ba:	4293      	cmp	r3, r2
 800f5bc:	d00f      	beq.n	800f5de <TIM_Base_SetConfig+0x8a>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	4a26      	ldr	r2, [pc, #152]	@ (800f65c <TIM_Base_SetConfig+0x108>)
 800f5c2:	4293      	cmp	r3, r2
 800f5c4:	d00b      	beq.n	800f5de <TIM_Base_SetConfig+0x8a>
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	4a25      	ldr	r2, [pc, #148]	@ (800f660 <TIM_Base_SetConfig+0x10c>)
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d007      	beq.n	800f5de <TIM_Base_SetConfig+0x8a>
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	4a24      	ldr	r2, [pc, #144]	@ (800f664 <TIM_Base_SetConfig+0x110>)
 800f5d2:	4293      	cmp	r3, r2
 800f5d4:	d003      	beq.n	800f5de <TIM_Base_SetConfig+0x8a>
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	4a23      	ldr	r2, [pc, #140]	@ (800f668 <TIM_Base_SetConfig+0x114>)
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d108      	bne.n	800f5f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f5e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	68fa      	ldr	r2, [r7, #12]
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	695b      	ldr	r3, [r3, #20]
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	68fa      	ldr	r2, [r7, #12]
 800f602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	689a      	ldr	r2, [r3, #8]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	4a0e      	ldr	r2, [pc, #56]	@ (800f650 <TIM_Base_SetConfig+0xfc>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d103      	bne.n	800f624 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	691a      	ldr	r2, [r3, #16]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2201      	movs	r2, #1
 800f628:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	691b      	ldr	r3, [r3, #16]
 800f62e:	f003 0301 	and.w	r3, r3, #1
 800f632:	2b01      	cmp	r3, #1
 800f634:	d105      	bne.n	800f642 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	691b      	ldr	r3, [r3, #16]
 800f63a:	f023 0201 	bic.w	r2, r3, #1
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	611a      	str	r2, [r3, #16]
  }
}
 800f642:	bf00      	nop
 800f644:	3714      	adds	r7, #20
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop
 800f650:	40010000 	.word	0x40010000
 800f654:	40000400 	.word	0x40000400
 800f658:	40000800 	.word	0x40000800
 800f65c:	40000c00 	.word	0x40000c00
 800f660:	40014000 	.word	0x40014000
 800f664:	40014400 	.word	0x40014400
 800f668:	40014800 	.word	0x40014800

0800f66c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f66c:	b480      	push	{r7}
 800f66e:	b087      	sub	sp, #28
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	60b9      	str	r1, [r7, #8]
 800f676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	6a1b      	ldr	r3, [r3, #32]
 800f67c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	6a1b      	ldr	r3, [r3, #32]
 800f682:	f023 0201 	bic.w	r2, r3, #1
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	699b      	ldr	r3, [r3, #24]
 800f68e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	011b      	lsls	r3, r3, #4
 800f69c:	693a      	ldr	r2, [r7, #16]
 800f69e:	4313      	orrs	r3, r2
 800f6a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	f023 030a 	bic.w	r3, r3, #10
 800f6a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f6aa:	697a      	ldr	r2, [r7, #20]
 800f6ac:	68bb      	ldr	r3, [r7, #8]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	693a      	ldr	r2, [r7, #16]
 800f6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	621a      	str	r2, [r3, #32]
}
 800f6be:	bf00      	nop
 800f6c0:	371c      	adds	r7, #28
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6ca:	b480      	push	{r7}
 800f6cc:	b087      	sub	sp, #28
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	60f8      	str	r0, [r7, #12]
 800f6d2:	60b9      	str	r1, [r7, #8]
 800f6d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	6a1b      	ldr	r3, [r3, #32]
 800f6da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6a1b      	ldr	r3, [r3, #32]
 800f6e0:	f023 0210 	bic.w	r2, r3, #16
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	699b      	ldr	r3, [r3, #24]
 800f6ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f6f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	031b      	lsls	r3, r3, #12
 800f6fa:	693a      	ldr	r2, [r7, #16]
 800f6fc:	4313      	orrs	r3, r2
 800f6fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	011b      	lsls	r3, r3, #4
 800f70c:	697a      	ldr	r2, [r7, #20]
 800f70e:	4313      	orrs	r3, r2
 800f710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	693a      	ldr	r2, [r7, #16]
 800f716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	621a      	str	r2, [r3, #32]
}
 800f71e:	bf00      	nop
 800f720:	371c      	adds	r7, #28
 800f722:	46bd      	mov	sp, r7
 800f724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f728:	4770      	bx	lr

0800f72a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f72a:	b480      	push	{r7}
 800f72c:	b085      	sub	sp, #20
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
 800f732:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	689b      	ldr	r3, [r3, #8]
 800f738:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f740:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f742:	683a      	ldr	r2, [r7, #0]
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	4313      	orrs	r3, r2
 800f748:	f043 0307 	orr.w	r3, r3, #7
 800f74c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	609a      	str	r2, [r3, #8]
}
 800f754:	bf00      	nop
 800f756:	3714      	adds	r7, #20
 800f758:	46bd      	mov	sp, r7
 800f75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75e:	4770      	bx	lr

0800f760 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f760:	b480      	push	{r7}
 800f762:	b087      	sub	sp, #28
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	607a      	str	r2, [r7, #4]
 800f76c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f77a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	021a      	lsls	r2, r3, #8
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	431a      	orrs	r2, r3
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	4313      	orrs	r3, r2
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	4313      	orrs	r3, r2
 800f78c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	697a      	ldr	r2, [r7, #20]
 800f792:	609a      	str	r2, [r3, #8]
}
 800f794:	bf00      	nop
 800f796:	371c      	adds	r7, #28
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b085      	sub	sp, #20
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
 800f7a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d101      	bne.n	800f7b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f7b4:	2302      	movs	r3, #2
 800f7b6:	e050      	b.n	800f85a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2201      	movs	r2, #1
 800f7bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2202      	movs	r2, #2
 800f7c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	689b      	ldr	r3, [r3, #8]
 800f7d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f7de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	4313      	orrs	r3, r2
 800f7e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	68fa      	ldr	r2, [r7, #12]
 800f7f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4a1c      	ldr	r2, [pc, #112]	@ (800f868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f7f8:	4293      	cmp	r3, r2
 800f7fa:	d018      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f804:	d013      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4a18      	ldr	r2, [pc, #96]	@ (800f86c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d00e      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a16      	ldr	r2, [pc, #88]	@ (800f870 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d009      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	4a15      	ldr	r2, [pc, #84]	@ (800f874 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800f820:	4293      	cmp	r3, r2
 800f822:	d004      	beq.n	800f82e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	4a13      	ldr	r2, [pc, #76]	@ (800f878 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d10c      	bne.n	800f848 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	68ba      	ldr	r2, [r7, #8]
 800f83c:	4313      	orrs	r3, r2
 800f83e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	68ba      	ldr	r2, [r7, #8]
 800f846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	2201      	movs	r2, #1
 800f84c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f858:	2300      	movs	r3, #0
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3714      	adds	r7, #20
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	40010000 	.word	0x40010000
 800f86c:	40000400 	.word	0x40000400
 800f870:	40000800 	.word	0x40000800
 800f874:	40000c00 	.word	0x40000c00
 800f878:	40014000 	.word	0x40014000

0800f87c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b083      	sub	sp, #12
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f884:	bf00      	nop
 800f886:	370c      	adds	r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f890:	b480      	push	{r7}
 800f892:	b083      	sub	sp, #12
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f898:	bf00      	nop
 800f89a:	370c      	adds	r7, #12
 800f89c:	46bd      	mov	sp, r7
 800f89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a2:	4770      	bx	lr

0800f8a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d101      	bne.n	800f8b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e042      	b.n	800f93c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d106      	bne.n	800f8d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7fd fe96 	bl	800d5fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2224      	movs	r2, #36	@ 0x24
 800f8d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	68da      	ldr	r2, [r3, #12]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f8e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fa09 	bl	800fd00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	691a      	ldr	r2, [r3, #16]
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f8fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	695a      	ldr	r2, [r3, #20]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f90c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	68da      	ldr	r2, [r3, #12]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f91c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2220      	movs	r2, #32
 800f928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2220      	movs	r2, #32
 800f930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	2200      	movs	r2, #0
 800f938:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f93a:	2300      	movs	r3, #0
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3708      	adds	r7, #8
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b08a      	sub	sp, #40	@ 0x28
 800f948:	af02      	add	r7, sp, #8
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	603b      	str	r3, [r7, #0]
 800f950:	4613      	mov	r3, r2
 800f952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f954:	2300      	movs	r3, #0
 800f956:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	2b20      	cmp	r3, #32
 800f962:	d175      	bne.n	800fa50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d002      	beq.n	800f970 <HAL_UART_Transmit+0x2c>
 800f96a:	88fb      	ldrh	r3, [r7, #6]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d101      	bne.n	800f974 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f970:	2301      	movs	r3, #1
 800f972:	e06e      	b.n	800fa52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	2200      	movs	r2, #0
 800f978:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	2221      	movs	r2, #33	@ 0x21
 800f97e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f982:	f7fe f8a5 	bl	800dad0 <HAL_GetTick>
 800f986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	88fa      	ldrh	r2, [r7, #6]
 800f98c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	88fa      	ldrh	r2, [r7, #6]
 800f992:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	689b      	ldr	r3, [r3, #8]
 800f998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f99c:	d108      	bne.n	800f9b0 <HAL_UART_Transmit+0x6c>
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	691b      	ldr	r3, [r3, #16]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d104      	bne.n	800f9b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f9aa:	68bb      	ldr	r3, [r7, #8]
 800f9ac:	61bb      	str	r3, [r7, #24]
 800f9ae:	e003      	b.n	800f9b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f9b8:	e02e      	b.n	800fa18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	9300      	str	r3, [sp, #0]
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	2180      	movs	r1, #128	@ 0x80
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f000 f8df 	bl	800fb88 <UART_WaitOnFlagUntilTimeout>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d005      	beq.n	800f9dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2220      	movs	r2, #32
 800f9d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800f9d8:	2303      	movs	r3, #3
 800f9da:	e03a      	b.n	800fa52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d10b      	bne.n	800f9fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	881b      	ldrh	r3, [r3, #0]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f9f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	3302      	adds	r3, #2
 800f9f6:	61bb      	str	r3, [r7, #24]
 800f9f8:	e007      	b.n	800fa0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f9fa:	69fb      	ldr	r3, [r7, #28]
 800f9fc:	781a      	ldrb	r2, [r3, #0]
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	3301      	adds	r3, #1
 800fa08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	3b01      	subs	r3, #1
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d1cb      	bne.n	800f9ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	9300      	str	r3, [sp, #0]
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	2140      	movs	r1, #64	@ 0x40
 800fa2c:	68f8      	ldr	r0, [r7, #12]
 800fa2e:	f000 f8ab 	bl	800fb88 <UART_WaitOnFlagUntilTimeout>
 800fa32:	4603      	mov	r3, r0
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d005      	beq.n	800fa44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2220      	movs	r2, #32
 800fa3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800fa40:	2303      	movs	r3, #3
 800fa42:	e006      	b.n	800fa52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2220      	movs	r2, #32
 800fa48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	e000      	b.n	800fa52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800fa50:	2302      	movs	r3, #2
  }
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3720      	adds	r7, #32
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}

0800fa5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fa5a:	b580      	push	{r7, lr}
 800fa5c:	b08a      	sub	sp, #40	@ 0x28
 800fa5e:	af02      	add	r7, sp, #8
 800fa60:	60f8      	str	r0, [r7, #12]
 800fa62:	60b9      	str	r1, [r7, #8]
 800fa64:	603b      	str	r3, [r7, #0]
 800fa66:	4613      	mov	r3, r2
 800fa68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b20      	cmp	r3, #32
 800fa78:	f040 8081 	bne.w	800fb7e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <HAL_UART_Receive+0x2e>
 800fa82:	88fb      	ldrh	r3, [r7, #6]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d101      	bne.n	800fa8c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e079      	b.n	800fb80 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2222      	movs	r2, #34	@ 0x22
 800fa96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800faa0:	f7fe f816 	bl	800dad0 <HAL_GetTick>
 800faa4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	88fa      	ldrh	r2, [r7, #6]
 800faaa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	88fa      	ldrh	r2, [r7, #6]
 800fab0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800faba:	d108      	bne.n	800face <HAL_UART_Receive+0x74>
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	691b      	ldr	r3, [r3, #16]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d104      	bne.n	800face <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800fac4:	2300      	movs	r3, #0
 800fac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	61bb      	str	r3, [r7, #24]
 800facc:	e003      	b.n	800fad6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fad2:	2300      	movs	r3, #0
 800fad4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800fad6:	e047      	b.n	800fb68 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	9300      	str	r3, [sp, #0]
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	2200      	movs	r2, #0
 800fae0:	2120      	movs	r1, #32
 800fae2:	68f8      	ldr	r0, [r7, #12]
 800fae4:	f000 f850 	bl	800fb88 <UART_WaitOnFlagUntilTimeout>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d005      	beq.n	800fafa <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2220      	movs	r2, #32
 800faf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800faf6:	2303      	movs	r3, #3
 800faf8:	e042      	b.n	800fb80 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d10c      	bne.n	800fb1a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	b29b      	uxth	r3, r3
 800fb08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	69bb      	ldr	r3, [r7, #24]
 800fb10:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	3302      	adds	r3, #2
 800fb16:	61bb      	str	r3, [r7, #24]
 800fb18:	e01f      	b.n	800fb5a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fb22:	d007      	beq.n	800fb34 <HAL_UART_Receive+0xda>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d10a      	bne.n	800fb42 <HAL_UART_Receive+0xe8>
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	691b      	ldr	r3, [r3, #16]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d106      	bne.n	800fb42 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	685b      	ldr	r3, [r3, #4]
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	701a      	strb	r2, [r3, #0]
 800fb40:	e008      	b.n	800fb54 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb4e:	b2da      	uxtb	r2, r3
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	3301      	adds	r3, #1
 800fb58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fb5e:	b29b      	uxth	r3, r3
 800fb60:	3b01      	subs	r3, #1
 800fb62:	b29a      	uxth	r2, r3
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1b2      	bne.n	800fad8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2220      	movs	r2, #32
 800fb76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	e000      	b.n	800fb80 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800fb7e:	2302      	movs	r3, #2
  }
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3720      	adds	r7, #32
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	603b      	str	r3, [r7, #0]
 800fb94:	4613      	mov	r3, r2
 800fb96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb98:	e03b      	b.n	800fc12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fb9a:	6a3b      	ldr	r3, [r7, #32]
 800fb9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba0:	d037      	beq.n	800fc12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fba2:	f7fd ff95 	bl	800dad0 <HAL_GetTick>
 800fba6:	4602      	mov	r2, r0
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	1ad3      	subs	r3, r2, r3
 800fbac:	6a3a      	ldr	r2, [r7, #32]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d302      	bcc.n	800fbb8 <UART_WaitOnFlagUntilTimeout+0x30>
 800fbb2:	6a3b      	ldr	r3, [r7, #32]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d101      	bne.n	800fbbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fbb8:	2303      	movs	r3, #3
 800fbba:	e03a      	b.n	800fc32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	f003 0304 	and.w	r3, r3, #4
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d023      	beq.n	800fc12 <UART_WaitOnFlagUntilTimeout+0x8a>
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2b80      	cmp	r3, #128	@ 0x80
 800fbce:	d020      	beq.n	800fc12 <UART_WaitOnFlagUntilTimeout+0x8a>
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	2b40      	cmp	r3, #64	@ 0x40
 800fbd4:	d01d      	beq.n	800fc12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f003 0308 	and.w	r3, r3, #8
 800fbe0:	2b08      	cmp	r3, #8
 800fbe2:	d116      	bne.n	800fc12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	617b      	str	r3, [r7, #20]
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	617b      	str	r3, [r7, #20]
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	617b      	str	r3, [r7, #20]
 800fbf8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f000 f81d 	bl	800fc3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2208      	movs	r2, #8
 800fc04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e00f      	b.n	800fc32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	681a      	ldr	r2, [r3, #0]
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	4013      	ands	r3, r2
 800fc1c:	68ba      	ldr	r2, [r7, #8]
 800fc1e:	429a      	cmp	r2, r3
 800fc20:	bf0c      	ite	eq
 800fc22:	2301      	moveq	r3, #1
 800fc24:	2300      	movne	r3, #0
 800fc26:	b2db      	uxtb	r3, r3
 800fc28:	461a      	mov	r2, r3
 800fc2a:	79fb      	ldrb	r3, [r7, #7]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d0b4      	beq.n	800fb9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3718      	adds	r7, #24
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fc3a:	b480      	push	{r7}
 800fc3c:	b095      	sub	sp, #84	@ 0x54
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	330c      	adds	r3, #12
 800fc48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc4c:	e853 3f00 	ldrex	r3, [r3]
 800fc50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	330c      	adds	r3, #12
 800fc60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fc62:	643a      	str	r2, [r7, #64]	@ 0x40
 800fc64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc6a:	e841 2300 	strex	r3, r2, [r1]
 800fc6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1e5      	bne.n	800fc42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	3314      	adds	r3, #20
 800fc7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	e853 3f00 	ldrex	r3, [r3]
 800fc84:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc86:	69fb      	ldr	r3, [r7, #28]
 800fc88:	f023 0301 	bic.w	r3, r3, #1
 800fc8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	3314      	adds	r3, #20
 800fc94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc9e:	e841 2300 	strex	r3, r2, [r1]
 800fca2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1e5      	bne.n	800fc76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d119      	bne.n	800fce6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	330c      	adds	r3, #12
 800fcb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	e853 3f00 	ldrex	r3, [r3]
 800fcc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	f023 0310 	bic.w	r3, r3, #16
 800fcc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	330c      	adds	r3, #12
 800fcd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fcd2:	61ba      	str	r2, [r7, #24]
 800fcd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd6:	6979      	ldr	r1, [r7, #20]
 800fcd8:	69ba      	ldr	r2, [r7, #24]
 800fcda:	e841 2300 	strex	r3, r2, [r1]
 800fcde:	613b      	str	r3, [r7, #16]
   return(result);
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1e5      	bne.n	800fcb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2220      	movs	r2, #32
 800fcea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800fcf4:	bf00      	nop
 800fcf6:	3754      	adds	r7, #84	@ 0x54
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr

0800fd00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd04:	b0c0      	sub	sp, #256	@ 0x100
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	691b      	ldr	r3, [r3, #16]
 800fd14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800fd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd1c:	68d9      	ldr	r1, [r3, #12]
 800fd1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	ea40 0301 	orr.w	r3, r0, r1
 800fd28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fd2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd2e:	689a      	ldr	r2, [r3, #8]
 800fd30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd34:	691b      	ldr	r3, [r3, #16]
 800fd36:	431a      	orrs	r2, r3
 800fd38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd3c:	695b      	ldr	r3, [r3, #20]
 800fd3e:	431a      	orrs	r2, r3
 800fd40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd44:	69db      	ldr	r3, [r3, #28]
 800fd46:	4313      	orrs	r3, r2
 800fd48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800fd4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800fd58:	f021 010c 	bic.w	r1, r1, #12
 800fd5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800fd66:	430b      	orrs	r3, r1
 800fd68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fd6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800fd76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd7a:	6999      	ldr	r1, [r3, #24]
 800fd7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd80:	681a      	ldr	r2, [r3, #0]
 800fd82:	ea40 0301 	orr.w	r3, r0, r1
 800fd86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fd88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd8c:	681a      	ldr	r2, [r3, #0]
 800fd8e:	4b8f      	ldr	r3, [pc, #572]	@ (800ffcc <UART_SetConfig+0x2cc>)
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d005      	beq.n	800fda0 <UART_SetConfig+0xa0>
 800fd94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fd98:	681a      	ldr	r2, [r3, #0]
 800fd9a:	4b8d      	ldr	r3, [pc, #564]	@ (800ffd0 <UART_SetConfig+0x2d0>)
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d104      	bne.n	800fdaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fda0:	f7ff f900 	bl	800efa4 <HAL_RCC_GetPCLK2Freq>
 800fda4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800fda8:	e003      	b.n	800fdb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fdaa:	f7ff f8e7 	bl	800ef7c <HAL_RCC_GetPCLK1Freq>
 800fdae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fdb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fdb6:	69db      	ldr	r3, [r3, #28]
 800fdb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fdbc:	f040 810c 	bne.w	800ffd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fdc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fdca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800fdce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800fdd2:	4622      	mov	r2, r4
 800fdd4:	462b      	mov	r3, r5
 800fdd6:	1891      	adds	r1, r2, r2
 800fdd8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800fdda:	415b      	adcs	r3, r3
 800fddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fdde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800fde2:	4621      	mov	r1, r4
 800fde4:	eb12 0801 	adds.w	r8, r2, r1
 800fde8:	4629      	mov	r1, r5
 800fdea:	eb43 0901 	adc.w	r9, r3, r1
 800fdee:	f04f 0200 	mov.w	r2, #0
 800fdf2:	f04f 0300 	mov.w	r3, #0
 800fdf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800fdfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800fdfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800fe02:	4690      	mov	r8, r2
 800fe04:	4699      	mov	r9, r3
 800fe06:	4623      	mov	r3, r4
 800fe08:	eb18 0303 	adds.w	r3, r8, r3
 800fe0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800fe10:	462b      	mov	r3, r5
 800fe12:	eb49 0303 	adc.w	r3, r9, r3
 800fe16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800fe1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	2200      	movs	r2, #0
 800fe22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800fe26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800fe2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800fe2e:	460b      	mov	r3, r1
 800fe30:	18db      	adds	r3, r3, r3
 800fe32:	653b      	str	r3, [r7, #80]	@ 0x50
 800fe34:	4613      	mov	r3, r2
 800fe36:	eb42 0303 	adc.w	r3, r2, r3
 800fe3a:	657b      	str	r3, [r7, #84]	@ 0x54
 800fe3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800fe40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800fe44:	f7fc f954 	bl	800c0f0 <__aeabi_uldivmod>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	4b61      	ldr	r3, [pc, #388]	@ (800ffd4 <UART_SetConfig+0x2d4>)
 800fe4e:	fba3 2302 	umull	r2, r3, r3, r2
 800fe52:	095b      	lsrs	r3, r3, #5
 800fe54:	011c      	lsls	r4, r3, #4
 800fe56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fe60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800fe64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800fe68:	4642      	mov	r2, r8
 800fe6a:	464b      	mov	r3, r9
 800fe6c:	1891      	adds	r1, r2, r2
 800fe6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800fe70:	415b      	adcs	r3, r3
 800fe72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fe74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800fe78:	4641      	mov	r1, r8
 800fe7a:	eb12 0a01 	adds.w	sl, r2, r1
 800fe7e:	4649      	mov	r1, r9
 800fe80:	eb43 0b01 	adc.w	fp, r3, r1
 800fe84:	f04f 0200 	mov.w	r2, #0
 800fe88:	f04f 0300 	mov.w	r3, #0
 800fe8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800fe90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800fe94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe98:	4692      	mov	sl, r2
 800fe9a:	469b      	mov	fp, r3
 800fe9c:	4643      	mov	r3, r8
 800fe9e:	eb1a 0303 	adds.w	r3, sl, r3
 800fea2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fea6:	464b      	mov	r3, r9
 800fea8:	eb4b 0303 	adc.w	r3, fp, r3
 800feac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800feb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800feb4:	685b      	ldr	r3, [r3, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800febc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800fec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800fec4:	460b      	mov	r3, r1
 800fec6:	18db      	adds	r3, r3, r3
 800fec8:	643b      	str	r3, [r7, #64]	@ 0x40
 800feca:	4613      	mov	r3, r2
 800fecc:	eb42 0303 	adc.w	r3, r2, r3
 800fed0:	647b      	str	r3, [r7, #68]	@ 0x44
 800fed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800fed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800feda:	f7fc f909 	bl	800c0f0 <__aeabi_uldivmod>
 800fede:	4602      	mov	r2, r0
 800fee0:	460b      	mov	r3, r1
 800fee2:	4611      	mov	r1, r2
 800fee4:	4b3b      	ldr	r3, [pc, #236]	@ (800ffd4 <UART_SetConfig+0x2d4>)
 800fee6:	fba3 2301 	umull	r2, r3, r3, r1
 800feea:	095b      	lsrs	r3, r3, #5
 800feec:	2264      	movs	r2, #100	@ 0x64
 800feee:	fb02 f303 	mul.w	r3, r2, r3
 800fef2:	1acb      	subs	r3, r1, r3
 800fef4:	00db      	lsls	r3, r3, #3
 800fef6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800fefa:	4b36      	ldr	r3, [pc, #216]	@ (800ffd4 <UART_SetConfig+0x2d4>)
 800fefc:	fba3 2302 	umull	r2, r3, r3, r2
 800ff00:	095b      	lsrs	r3, r3, #5
 800ff02:	005b      	lsls	r3, r3, #1
 800ff04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ff08:	441c      	add	r4, r3
 800ff0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ff14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ff18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ff1c:	4642      	mov	r2, r8
 800ff1e:	464b      	mov	r3, r9
 800ff20:	1891      	adds	r1, r2, r2
 800ff22:	63b9      	str	r1, [r7, #56]	@ 0x38
 800ff24:	415b      	adcs	r3, r3
 800ff26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800ff2c:	4641      	mov	r1, r8
 800ff2e:	1851      	adds	r1, r2, r1
 800ff30:	6339      	str	r1, [r7, #48]	@ 0x30
 800ff32:	4649      	mov	r1, r9
 800ff34:	414b      	adcs	r3, r1
 800ff36:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff38:	f04f 0200 	mov.w	r2, #0
 800ff3c:	f04f 0300 	mov.w	r3, #0
 800ff40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800ff44:	4659      	mov	r1, fp
 800ff46:	00cb      	lsls	r3, r1, #3
 800ff48:	4651      	mov	r1, sl
 800ff4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ff4e:	4651      	mov	r1, sl
 800ff50:	00ca      	lsls	r2, r1, #3
 800ff52:	4610      	mov	r0, r2
 800ff54:	4619      	mov	r1, r3
 800ff56:	4603      	mov	r3, r0
 800ff58:	4642      	mov	r2, r8
 800ff5a:	189b      	adds	r3, r3, r2
 800ff5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ff60:	464b      	mov	r3, r9
 800ff62:	460a      	mov	r2, r1
 800ff64:	eb42 0303 	adc.w	r3, r2, r3
 800ff68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ff6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff70:	685b      	ldr	r3, [r3, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ff78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ff7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ff80:	460b      	mov	r3, r1
 800ff82:	18db      	adds	r3, r3, r3
 800ff84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ff86:	4613      	mov	r3, r2
 800ff88:	eb42 0303 	adc.w	r3, r2, r3
 800ff8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ff92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ff96:	f7fc f8ab 	bl	800c0f0 <__aeabi_uldivmod>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ffd4 <UART_SetConfig+0x2d4>)
 800ffa0:	fba3 1302 	umull	r1, r3, r3, r2
 800ffa4:	095b      	lsrs	r3, r3, #5
 800ffa6:	2164      	movs	r1, #100	@ 0x64
 800ffa8:	fb01 f303 	mul.w	r3, r1, r3
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	00db      	lsls	r3, r3, #3
 800ffb0:	3332      	adds	r3, #50	@ 0x32
 800ffb2:	4a08      	ldr	r2, [pc, #32]	@ (800ffd4 <UART_SetConfig+0x2d4>)
 800ffb4:	fba2 2303 	umull	r2, r3, r2, r3
 800ffb8:	095b      	lsrs	r3, r3, #5
 800ffba:	f003 0207 	and.w	r2, r3, #7
 800ffbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4422      	add	r2, r4
 800ffc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ffc8:	e106      	b.n	80101d8 <UART_SetConfig+0x4d8>
 800ffca:	bf00      	nop
 800ffcc:	40011000 	.word	0x40011000
 800ffd0:	40011400 	.word	0x40011400
 800ffd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ffd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ffdc:	2200      	movs	r2, #0
 800ffde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ffe2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ffe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ffea:	4642      	mov	r2, r8
 800ffec:	464b      	mov	r3, r9
 800ffee:	1891      	adds	r1, r2, r2
 800fff0:	6239      	str	r1, [r7, #32]
 800fff2:	415b      	adcs	r3, r3
 800fff4:	627b      	str	r3, [r7, #36]	@ 0x24
 800fff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800fffa:	4641      	mov	r1, r8
 800fffc:	1854      	adds	r4, r2, r1
 800fffe:	4649      	mov	r1, r9
 8010000:	eb43 0501 	adc.w	r5, r3, r1
 8010004:	f04f 0200 	mov.w	r2, #0
 8010008:	f04f 0300 	mov.w	r3, #0
 801000c:	00eb      	lsls	r3, r5, #3
 801000e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010012:	00e2      	lsls	r2, r4, #3
 8010014:	4614      	mov	r4, r2
 8010016:	461d      	mov	r5, r3
 8010018:	4643      	mov	r3, r8
 801001a:	18e3      	adds	r3, r4, r3
 801001c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010020:	464b      	mov	r3, r9
 8010022:	eb45 0303 	adc.w	r3, r5, r3
 8010026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801002a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	2200      	movs	r2, #0
 8010032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010036:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801003a:	f04f 0200 	mov.w	r2, #0
 801003e:	f04f 0300 	mov.w	r3, #0
 8010042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010046:	4629      	mov	r1, r5
 8010048:	008b      	lsls	r3, r1, #2
 801004a:	4621      	mov	r1, r4
 801004c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010050:	4621      	mov	r1, r4
 8010052:	008a      	lsls	r2, r1, #2
 8010054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010058:	f7fc f84a 	bl	800c0f0 <__aeabi_uldivmod>
 801005c:	4602      	mov	r2, r0
 801005e:	460b      	mov	r3, r1
 8010060:	4b60      	ldr	r3, [pc, #384]	@ (80101e4 <UART_SetConfig+0x4e4>)
 8010062:	fba3 2302 	umull	r2, r3, r3, r2
 8010066:	095b      	lsrs	r3, r3, #5
 8010068:	011c      	lsls	r4, r3, #4
 801006a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801006e:	2200      	movs	r2, #0
 8010070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010074:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 801007c:	4642      	mov	r2, r8
 801007e:	464b      	mov	r3, r9
 8010080:	1891      	adds	r1, r2, r2
 8010082:	61b9      	str	r1, [r7, #24]
 8010084:	415b      	adcs	r3, r3
 8010086:	61fb      	str	r3, [r7, #28]
 8010088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801008c:	4641      	mov	r1, r8
 801008e:	1851      	adds	r1, r2, r1
 8010090:	6139      	str	r1, [r7, #16]
 8010092:	4649      	mov	r1, r9
 8010094:	414b      	adcs	r3, r1
 8010096:	617b      	str	r3, [r7, #20]
 8010098:	f04f 0200 	mov.w	r2, #0
 801009c:	f04f 0300 	mov.w	r3, #0
 80100a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80100a4:	4659      	mov	r1, fp
 80100a6:	00cb      	lsls	r3, r1, #3
 80100a8:	4651      	mov	r1, sl
 80100aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80100ae:	4651      	mov	r1, sl
 80100b0:	00ca      	lsls	r2, r1, #3
 80100b2:	4610      	mov	r0, r2
 80100b4:	4619      	mov	r1, r3
 80100b6:	4603      	mov	r3, r0
 80100b8:	4642      	mov	r2, r8
 80100ba:	189b      	adds	r3, r3, r2
 80100bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80100c0:	464b      	mov	r3, r9
 80100c2:	460a      	mov	r2, r1
 80100c4:	eb42 0303 	adc.w	r3, r2, r3
 80100c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80100cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	2200      	movs	r2, #0
 80100d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80100d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80100d8:	f04f 0200 	mov.w	r2, #0
 80100dc:	f04f 0300 	mov.w	r3, #0
 80100e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80100e4:	4649      	mov	r1, r9
 80100e6:	008b      	lsls	r3, r1, #2
 80100e8:	4641      	mov	r1, r8
 80100ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80100ee:	4641      	mov	r1, r8
 80100f0:	008a      	lsls	r2, r1, #2
 80100f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80100f6:	f7fb fffb 	bl	800c0f0 <__aeabi_uldivmod>
 80100fa:	4602      	mov	r2, r0
 80100fc:	460b      	mov	r3, r1
 80100fe:	4611      	mov	r1, r2
 8010100:	4b38      	ldr	r3, [pc, #224]	@ (80101e4 <UART_SetConfig+0x4e4>)
 8010102:	fba3 2301 	umull	r2, r3, r3, r1
 8010106:	095b      	lsrs	r3, r3, #5
 8010108:	2264      	movs	r2, #100	@ 0x64
 801010a:	fb02 f303 	mul.w	r3, r2, r3
 801010e:	1acb      	subs	r3, r1, r3
 8010110:	011b      	lsls	r3, r3, #4
 8010112:	3332      	adds	r3, #50	@ 0x32
 8010114:	4a33      	ldr	r2, [pc, #204]	@ (80101e4 <UART_SetConfig+0x4e4>)
 8010116:	fba2 2303 	umull	r2, r3, r2, r3
 801011a:	095b      	lsrs	r3, r3, #5
 801011c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010120:	441c      	add	r4, r3
 8010122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010126:	2200      	movs	r2, #0
 8010128:	673b      	str	r3, [r7, #112]	@ 0x70
 801012a:	677a      	str	r2, [r7, #116]	@ 0x74
 801012c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010130:	4642      	mov	r2, r8
 8010132:	464b      	mov	r3, r9
 8010134:	1891      	adds	r1, r2, r2
 8010136:	60b9      	str	r1, [r7, #8]
 8010138:	415b      	adcs	r3, r3
 801013a:	60fb      	str	r3, [r7, #12]
 801013c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010140:	4641      	mov	r1, r8
 8010142:	1851      	adds	r1, r2, r1
 8010144:	6039      	str	r1, [r7, #0]
 8010146:	4649      	mov	r1, r9
 8010148:	414b      	adcs	r3, r1
 801014a:	607b      	str	r3, [r7, #4]
 801014c:	f04f 0200 	mov.w	r2, #0
 8010150:	f04f 0300 	mov.w	r3, #0
 8010154:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010158:	4659      	mov	r1, fp
 801015a:	00cb      	lsls	r3, r1, #3
 801015c:	4651      	mov	r1, sl
 801015e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010162:	4651      	mov	r1, sl
 8010164:	00ca      	lsls	r2, r1, #3
 8010166:	4610      	mov	r0, r2
 8010168:	4619      	mov	r1, r3
 801016a:	4603      	mov	r3, r0
 801016c:	4642      	mov	r2, r8
 801016e:	189b      	adds	r3, r3, r2
 8010170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010172:	464b      	mov	r3, r9
 8010174:	460a      	mov	r2, r1
 8010176:	eb42 0303 	adc.w	r3, r2, r3
 801017a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801017c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	2200      	movs	r2, #0
 8010184:	663b      	str	r3, [r7, #96]	@ 0x60
 8010186:	667a      	str	r2, [r7, #100]	@ 0x64
 8010188:	f04f 0200 	mov.w	r2, #0
 801018c:	f04f 0300 	mov.w	r3, #0
 8010190:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010194:	4649      	mov	r1, r9
 8010196:	008b      	lsls	r3, r1, #2
 8010198:	4641      	mov	r1, r8
 801019a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801019e:	4641      	mov	r1, r8
 80101a0:	008a      	lsls	r2, r1, #2
 80101a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80101a6:	f7fb ffa3 	bl	800c0f0 <__aeabi_uldivmod>
 80101aa:	4602      	mov	r2, r0
 80101ac:	460b      	mov	r3, r1
 80101ae:	4b0d      	ldr	r3, [pc, #52]	@ (80101e4 <UART_SetConfig+0x4e4>)
 80101b0:	fba3 1302 	umull	r1, r3, r3, r2
 80101b4:	095b      	lsrs	r3, r3, #5
 80101b6:	2164      	movs	r1, #100	@ 0x64
 80101b8:	fb01 f303 	mul.w	r3, r1, r3
 80101bc:	1ad3      	subs	r3, r2, r3
 80101be:	011b      	lsls	r3, r3, #4
 80101c0:	3332      	adds	r3, #50	@ 0x32
 80101c2:	4a08      	ldr	r2, [pc, #32]	@ (80101e4 <UART_SetConfig+0x4e4>)
 80101c4:	fba2 2303 	umull	r2, r3, r2, r3
 80101c8:	095b      	lsrs	r3, r3, #5
 80101ca:	f003 020f 	and.w	r2, r3, #15
 80101ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4422      	add	r2, r4
 80101d6:	609a      	str	r2, [r3, #8]
}
 80101d8:	bf00      	nop
 80101da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80101de:	46bd      	mov	sp, r7
 80101e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80101e4:	51eb851f 	.word	0x51eb851f

080101e8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	4603      	mov	r3, r0
 80101f0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80101f2:	2300      	movs	r3, #0
 80101f4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80101f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80101fa:	2b84      	cmp	r3, #132	@ 0x84
 80101fc:	d005      	beq.n	801020a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80101fe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	4413      	add	r3, r2
 8010206:	3303      	adds	r3, #3
 8010208:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801020a:	68fb      	ldr	r3, [r7, #12]
}
 801020c:	4618      	mov	r0, r3
 801020e:	3714      	adds	r7, #20
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801021c:	f000 fb90 	bl	8010940 <vTaskStartScheduler>
  
  return osOK;
 8010220:	2300      	movs	r3, #0
}
 8010222:	4618      	mov	r0, r3
 8010224:	bd80      	pop	{r7, pc}

08010226 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010226:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010228:	b089      	sub	sp, #36	@ 0x24
 801022a:	af04      	add	r7, sp, #16
 801022c:	6078      	str	r0, [r7, #4]
 801022e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	695b      	ldr	r3, [r3, #20]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d020      	beq.n	801027a <osThreadCreate+0x54>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	699b      	ldr	r3, [r3, #24]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d01c      	beq.n	801027a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	685c      	ldr	r4, [r3, #4]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	691e      	ldr	r6, [r3, #16]
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010252:	4618      	mov	r0, r3
 8010254:	f7ff ffc8 	bl	80101e8 <makeFreeRtosPriority>
 8010258:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	695b      	ldr	r3, [r3, #20]
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010262:	9202      	str	r2, [sp, #8]
 8010264:	9301      	str	r3, [sp, #4]
 8010266:	9100      	str	r1, [sp, #0]
 8010268:	683b      	ldr	r3, [r7, #0]
 801026a:	4632      	mov	r2, r6
 801026c:	4629      	mov	r1, r5
 801026e:	4620      	mov	r0, r4
 8010270:	f000 f8ed 	bl	801044e <xTaskCreateStatic>
 8010274:	4603      	mov	r3, r0
 8010276:	60fb      	str	r3, [r7, #12]
 8010278:	e01c      	b.n	80102b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	685c      	ldr	r4, [r3, #4]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010286:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff ffaa 	bl	80101e8 <makeFreeRtosPriority>
 8010294:	4602      	mov	r2, r0
 8010296:	f107 030c 	add.w	r3, r7, #12
 801029a:	9301      	str	r3, [sp, #4]
 801029c:	9200      	str	r2, [sp, #0]
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	4632      	mov	r2, r6
 80102a2:	4629      	mov	r1, r5
 80102a4:	4620      	mov	r0, r4
 80102a6:	f000 f932 	bl	801050e <xTaskCreate>
 80102aa:	4603      	mov	r3, r0
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d001      	beq.n	80102b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80102b0:	2300      	movs	r3, #0
 80102b2:	e000      	b.n	80102b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80102b4:	68fb      	ldr	r3, [r7, #12]
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3714      	adds	r7, #20
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080102be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b084      	sub	sp, #16
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d001      	beq.n	80102d4 <osDelay+0x16>
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	e000      	b.n	80102d6 <osDelay+0x18>
 80102d4:	2301      	movs	r3, #1
 80102d6:	4618      	mov	r0, r3
 80102d8:	f000 fa68 	bl	80107ac <vTaskDelay>
  
  return osOK;
 80102dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3710      	adds	r7, #16
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80102e6:	b480      	push	{r7}
 80102e8:	b083      	sub	sp, #12
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	f103 0208 	add.w	r2, r3, #8
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f04f 32ff 	mov.w	r2, #4294967295
 80102fe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f103 0208 	add.w	r2, r3, #8
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f103 0208 	add.w	r2, r3, #8
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801031a:	bf00      	nop
 801031c:	370c      	adds	r7, #12
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010326:	b480      	push	{r7}
 8010328:	b083      	sub	sp, #12
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2200      	movs	r2, #0
 8010332:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010334:	bf00      	nop
 8010336:	370c      	adds	r7, #12
 8010338:	46bd      	mov	sp, r7
 801033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033e:	4770      	bx	lr

08010340 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010340:	b480      	push	{r7}
 8010342:	b085      	sub	sp, #20
 8010344:	af00      	add	r7, sp, #0
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	68fa      	ldr	r2, [r7, #12]
 8010354:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	689a      	ldr	r2, [r3, #8]
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	689b      	ldr	r3, [r3, #8]
 8010362:	683a      	ldr	r2, [r7, #0]
 8010364:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	683a      	ldr	r2, [r7, #0]
 801036a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	1c5a      	adds	r2, r3, #1
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	601a      	str	r2, [r3, #0]
}
 801037c:	bf00      	nop
 801037e:	3714      	adds	r7, #20
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010388:	b480      	push	{r7}
 801038a:	b085      	sub	sp, #20
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039e:	d103      	bne.n	80103a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	691b      	ldr	r3, [r3, #16]
 80103a4:	60fb      	str	r3, [r7, #12]
 80103a6:	e00c      	b.n	80103c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	3308      	adds	r3, #8
 80103ac:	60fb      	str	r3, [r7, #12]
 80103ae:	e002      	b.n	80103b6 <vListInsert+0x2e>
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	685b      	ldr	r3, [r3, #4]
 80103b4:	60fb      	str	r3, [r7, #12]
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d2f6      	bcs.n	80103b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	685a      	ldr	r2, [r3, #4]
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80103ca:	683b      	ldr	r3, [r7, #0]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	683a      	ldr	r2, [r7, #0]
 80103d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	68fa      	ldr	r2, [r7, #12]
 80103d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	683a      	ldr	r2, [r7, #0]
 80103dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	601a      	str	r2, [r3, #0]
}
 80103ee:	bf00      	nop
 80103f0:	3714      	adds	r7, #20
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr

080103fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80103fa:	b480      	push	{r7}
 80103fc:	b085      	sub	sp, #20
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	687a      	ldr	r2, [r7, #4]
 801040e:	6892      	ldr	r2, [r2, #8]
 8010410:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	689b      	ldr	r3, [r3, #8]
 8010416:	687a      	ldr	r2, [r7, #4]
 8010418:	6852      	ldr	r2, [r2, #4]
 801041a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	685b      	ldr	r3, [r3, #4]
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	429a      	cmp	r2, r3
 8010424:	d103      	bne.n	801042e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	689a      	ldr	r2, [r3, #8]
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	1e5a      	subs	r2, r3, #1
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3714      	adds	r7, #20
 8010446:	46bd      	mov	sp, r7
 8010448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044c:	4770      	bx	lr

0801044e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801044e:	b580      	push	{r7, lr}
 8010450:	b08e      	sub	sp, #56	@ 0x38
 8010452:	af04      	add	r7, sp, #16
 8010454:	60f8      	str	r0, [r7, #12]
 8010456:	60b9      	str	r1, [r7, #8]
 8010458:	607a      	str	r2, [r7, #4]
 801045a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801045c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801045e:	2b00      	cmp	r3, #0
 8010460:	d10b      	bne.n	801047a <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010466:	f383 8811 	msr	BASEPRI, r3
 801046a:	f3bf 8f6f 	isb	sy
 801046e:	f3bf 8f4f 	dsb	sy
 8010472:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010474:	bf00      	nop
 8010476:	bf00      	nop
 8010478:	e7fd      	b.n	8010476 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801047a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801047c:	2b00      	cmp	r3, #0
 801047e:	d10b      	bne.n	8010498 <xTaskCreateStatic+0x4a>
	__asm volatile
 8010480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010484:	f383 8811 	msr	BASEPRI, r3
 8010488:	f3bf 8f6f 	isb	sy
 801048c:	f3bf 8f4f 	dsb	sy
 8010490:	61fb      	str	r3, [r7, #28]
}
 8010492:	bf00      	nop
 8010494:	bf00      	nop
 8010496:	e7fd      	b.n	8010494 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010498:	23a0      	movs	r3, #160	@ 0xa0
 801049a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801049c:	693b      	ldr	r3, [r7, #16]
 801049e:	2ba0      	cmp	r3, #160	@ 0xa0
 80104a0:	d00b      	beq.n	80104ba <xTaskCreateStatic+0x6c>
	__asm volatile
 80104a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104a6:	f383 8811 	msr	BASEPRI, r3
 80104aa:	f3bf 8f6f 	isb	sy
 80104ae:	f3bf 8f4f 	dsb	sy
 80104b2:	61bb      	str	r3, [r7, #24]
}
 80104b4:	bf00      	nop
 80104b6:	bf00      	nop
 80104b8:	e7fd      	b.n	80104b6 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80104ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80104bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d01e      	beq.n	8010500 <xTaskCreateStatic+0xb2>
 80104c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d01b      	beq.n	8010500 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80104c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104ca:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80104cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104d0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80104d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104d4:	2202      	movs	r2, #2
 80104d6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80104da:	2300      	movs	r3, #0
 80104dc:	9303      	str	r3, [sp, #12]
 80104de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e0:	9302      	str	r3, [sp, #8]
 80104e2:	f107 0314 	add.w	r3, r7, #20
 80104e6:	9301      	str	r3, [sp, #4]
 80104e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80104ea:	9300      	str	r3, [sp, #0]
 80104ec:	683b      	ldr	r3, [r7, #0]
 80104ee:	687a      	ldr	r2, [r7, #4]
 80104f0:	68b9      	ldr	r1, [r7, #8]
 80104f2:	68f8      	ldr	r0, [r7, #12]
 80104f4:	f000 f850 	bl	8010598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80104f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104fa:	f000 f8ed 	bl	80106d8 <prvAddNewTaskToReadyList>
 80104fe:	e001      	b.n	8010504 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010500:	2300      	movs	r3, #0
 8010502:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010504:	697b      	ldr	r3, [r7, #20]
	}
 8010506:	4618      	mov	r0, r3
 8010508:	3728      	adds	r7, #40	@ 0x28
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801050e:	b580      	push	{r7, lr}
 8010510:	b08c      	sub	sp, #48	@ 0x30
 8010512:	af04      	add	r7, sp, #16
 8010514:	60f8      	str	r0, [r7, #12]
 8010516:	60b9      	str	r1, [r7, #8]
 8010518:	603b      	str	r3, [r7, #0]
 801051a:	4613      	mov	r3, r2
 801051c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801051e:	88fb      	ldrh	r3, [r7, #6]
 8010520:	009b      	lsls	r3, r3, #2
 8010522:	4618      	mov	r0, r3
 8010524:	f001 f91a 	bl	801175c <pvPortMalloc>
 8010528:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00e      	beq.n	801054e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010530:	20a0      	movs	r0, #160	@ 0xa0
 8010532:	f001 f913 	bl	801175c <pvPortMalloc>
 8010536:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d003      	beq.n	8010546 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801053e:	69fb      	ldr	r3, [r7, #28]
 8010540:	697a      	ldr	r2, [r7, #20]
 8010542:	631a      	str	r2, [r3, #48]	@ 0x30
 8010544:	e005      	b.n	8010552 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010546:	6978      	ldr	r0, [r7, #20]
 8010548:	f001 f9d6 	bl	80118f8 <vPortFree>
 801054c:	e001      	b.n	8010552 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801054e:	2300      	movs	r3, #0
 8010550:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	2b00      	cmp	r3, #0
 8010556:	d017      	beq.n	8010588 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010558:	69fb      	ldr	r3, [r7, #28]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010560:	88fa      	ldrh	r2, [r7, #6]
 8010562:	2300      	movs	r3, #0
 8010564:	9303      	str	r3, [sp, #12]
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	9302      	str	r3, [sp, #8]
 801056a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801056c:	9301      	str	r3, [sp, #4]
 801056e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010570:	9300      	str	r3, [sp, #0]
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	68b9      	ldr	r1, [r7, #8]
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f000 f80e 	bl	8010598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801057c:	69f8      	ldr	r0, [r7, #28]
 801057e:	f000 f8ab 	bl	80106d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010582:	2301      	movs	r3, #1
 8010584:	61bb      	str	r3, [r7, #24]
 8010586:	e002      	b.n	801058e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010588:	f04f 33ff 	mov.w	r3, #4294967295
 801058c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801058e:	69bb      	ldr	r3, [r7, #24]
	}
 8010590:	4618      	mov	r0, r3
 8010592:	3720      	adds	r7, #32
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b088      	sub	sp, #32
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
 80105a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80105a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80105b0:	3b01      	subs	r3, #1
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	4413      	add	r3, r2
 80105b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	f023 0307 	bic.w	r3, r3, #7
 80105be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80105c0:	69bb      	ldr	r3, [r7, #24]
 80105c2:	f003 0307 	and.w	r3, r3, #7
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d00b      	beq.n	80105e2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80105ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ce:	f383 8811 	msr	BASEPRI, r3
 80105d2:	f3bf 8f6f 	isb	sy
 80105d6:	f3bf 8f4f 	dsb	sy
 80105da:	617b      	str	r3, [r7, #20]
}
 80105dc:	bf00      	nop
 80105de:	bf00      	nop
 80105e0:	e7fd      	b.n	80105de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d01f      	beq.n	8010628 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80105e8:	2300      	movs	r3, #0
 80105ea:	61fb      	str	r3, [r7, #28]
 80105ec:	e012      	b.n	8010614 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80105ee:	68ba      	ldr	r2, [r7, #8]
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	4413      	add	r3, r2
 80105f4:	7819      	ldrb	r1, [r3, #0]
 80105f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80105f8:	69fb      	ldr	r3, [r7, #28]
 80105fa:	4413      	add	r3, r2
 80105fc:	3334      	adds	r3, #52	@ 0x34
 80105fe:	460a      	mov	r2, r1
 8010600:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010602:	68ba      	ldr	r2, [r7, #8]
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	4413      	add	r3, r2
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d006      	beq.n	801061c <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	3301      	adds	r3, #1
 8010612:	61fb      	str	r3, [r7, #28]
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	2b0f      	cmp	r3, #15
 8010618:	d9e9      	bls.n	80105ee <prvInitialiseNewTask+0x56>
 801061a:	e000      	b.n	801061e <prvInitialiseNewTask+0x86>
			{
				break;
 801061c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801061e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010620:	2200      	movs	r2, #0
 8010622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010626:	e003      	b.n	8010630 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801062a:	2200      	movs	r2, #0
 801062c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010632:	2b06      	cmp	r3, #6
 8010634:	d901      	bls.n	801063a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010636:	2306      	movs	r3, #6
 8010638:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801063a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801063c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801063e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010644:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010648:	2200      	movs	r2, #0
 801064a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801064c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801064e:	3304      	adds	r3, #4
 8010650:	4618      	mov	r0, r3
 8010652:	f7ff fe68 	bl	8010326 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010658:	3318      	adds	r3, #24
 801065a:	4618      	mov	r0, r3
 801065c:	f7ff fe63 	bl	8010326 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010664:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010668:	f1c3 0207 	rsb	r2, r3, #7
 801066c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801066e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010674:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010678:	2200      	movs	r2, #0
 801067a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801067e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010680:	2200      	movs	r2, #0
 8010682:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010688:	334c      	adds	r3, #76	@ 0x4c
 801068a:	224c      	movs	r2, #76	@ 0x4c
 801068c:	2100      	movs	r1, #0
 801068e:	4618      	mov	r0, r3
 8010690:	f001 fe26 	bl	80122e0 <memset>
 8010694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010696:	4a0d      	ldr	r2, [pc, #52]	@ (80106cc <prvInitialiseNewTask+0x134>)
 8010698:	651a      	str	r2, [r3, #80]	@ 0x50
 801069a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801069c:	4a0c      	ldr	r2, [pc, #48]	@ (80106d0 <prvInitialiseNewTask+0x138>)
 801069e:	655a      	str	r2, [r3, #84]	@ 0x54
 80106a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106a2:	4a0c      	ldr	r2, [pc, #48]	@ (80106d4 <prvInitialiseNewTask+0x13c>)
 80106a4:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80106a6:	683a      	ldr	r2, [r7, #0]
 80106a8:	68f9      	ldr	r1, [r7, #12]
 80106aa:	69b8      	ldr	r0, [r7, #24]
 80106ac:	f000 fe04 	bl	80112b8 <pxPortInitialiseStack>
 80106b0:	4602      	mov	r2, r0
 80106b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80106b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d002      	beq.n	80106c2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80106bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106c2:	bf00      	nop
 80106c4:	3720      	adds	r7, #32
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	20004240 	.word	0x20004240
 80106d0:	200042a8 	.word	0x200042a8
 80106d4:	20004310 	.word	0x20004310

080106d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80106e0:	f000 ff1a 	bl	8011518 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80106e4:	4b2a      	ldr	r3, [pc, #168]	@ (8010790 <prvAddNewTaskToReadyList+0xb8>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	3301      	adds	r3, #1
 80106ea:	4a29      	ldr	r2, [pc, #164]	@ (8010790 <prvAddNewTaskToReadyList+0xb8>)
 80106ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80106ee:	4b29      	ldr	r3, [pc, #164]	@ (8010794 <prvAddNewTaskToReadyList+0xbc>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d109      	bne.n	801070a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80106f6:	4a27      	ldr	r2, [pc, #156]	@ (8010794 <prvAddNewTaskToReadyList+0xbc>)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80106fc:	4b24      	ldr	r3, [pc, #144]	@ (8010790 <prvAddNewTaskToReadyList+0xb8>)
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	2b01      	cmp	r3, #1
 8010702:	d110      	bne.n	8010726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010704:	f000 fb68 	bl	8010dd8 <prvInitialiseTaskLists>
 8010708:	e00d      	b.n	8010726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801070a:	4b23      	ldr	r3, [pc, #140]	@ (8010798 <prvAddNewTaskToReadyList+0xc0>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d109      	bne.n	8010726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010712:	4b20      	ldr	r3, [pc, #128]	@ (8010794 <prvAddNewTaskToReadyList+0xbc>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801071c:	429a      	cmp	r2, r3
 801071e:	d802      	bhi.n	8010726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010720:	4a1c      	ldr	r2, [pc, #112]	@ (8010794 <prvAddNewTaskToReadyList+0xbc>)
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010726:	4b1d      	ldr	r3, [pc, #116]	@ (801079c <prvAddNewTaskToReadyList+0xc4>)
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	3301      	adds	r3, #1
 801072c:	4a1b      	ldr	r2, [pc, #108]	@ (801079c <prvAddNewTaskToReadyList+0xc4>)
 801072e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010734:	2201      	movs	r2, #1
 8010736:	409a      	lsls	r2, r3
 8010738:	4b19      	ldr	r3, [pc, #100]	@ (80107a0 <prvAddNewTaskToReadyList+0xc8>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	4313      	orrs	r3, r2
 801073e:	4a18      	ldr	r2, [pc, #96]	@ (80107a0 <prvAddNewTaskToReadyList+0xc8>)
 8010740:	6013      	str	r3, [r2, #0]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010746:	4613      	mov	r3, r2
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	4413      	add	r3, r2
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	4a15      	ldr	r2, [pc, #84]	@ (80107a4 <prvAddNewTaskToReadyList+0xcc>)
 8010750:	441a      	add	r2, r3
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	3304      	adds	r3, #4
 8010756:	4619      	mov	r1, r3
 8010758:	4610      	mov	r0, r2
 801075a:	f7ff fdf1 	bl	8010340 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801075e:	f000 ff0d 	bl	801157c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010762:	4b0d      	ldr	r3, [pc, #52]	@ (8010798 <prvAddNewTaskToReadyList+0xc0>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00e      	beq.n	8010788 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801076a:	4b0a      	ldr	r3, [pc, #40]	@ (8010794 <prvAddNewTaskToReadyList+0xbc>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010774:	429a      	cmp	r2, r3
 8010776:	d207      	bcs.n	8010788 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010778:	4b0b      	ldr	r3, [pc, #44]	@ (80107a8 <prvAddNewTaskToReadyList+0xd0>)
 801077a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801077e:	601a      	str	r2, [r3, #0]
 8010780:	f3bf 8f4f 	dsb	sy
 8010784:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010788:	bf00      	nop
 801078a:	3708      	adds	r7, #8
 801078c:	46bd      	mov	sp, r7
 801078e:	bd80      	pop	{r7, pc}
 8010790:	200005ec 	.word	0x200005ec
 8010794:	200004ec 	.word	0x200004ec
 8010798:	200005f8 	.word	0x200005f8
 801079c:	20000608 	.word	0x20000608
 80107a0:	200005f4 	.word	0x200005f4
 80107a4:	200004f0 	.word	0x200004f0
 80107a8:	e000ed04 	.word	0xe000ed04

080107ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b084      	sub	sp, #16
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80107b4:	2300      	movs	r3, #0
 80107b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d018      	beq.n	80107f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80107be:	4b14      	ldr	r3, [pc, #80]	@ (8010810 <vTaskDelay+0x64>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d00b      	beq.n	80107de <vTaskDelay+0x32>
	__asm volatile
 80107c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	60bb      	str	r3, [r7, #8]
}
 80107d8:	bf00      	nop
 80107da:	bf00      	nop
 80107dc:	e7fd      	b.n	80107da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80107de:	f000 f919 	bl	8010a14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80107e2:	2100      	movs	r1, #0
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 fd01 	bl	80111ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80107ea:	f000 f921 	bl	8010a30 <xTaskResumeAll>
 80107ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d107      	bne.n	8010806 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80107f6:	4b07      	ldr	r3, [pc, #28]	@ (8010814 <vTaskDelay+0x68>)
 80107f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107fc:	601a      	str	r2, [r3, #0]
 80107fe:	f3bf 8f4f 	dsb	sy
 8010802:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010806:	bf00      	nop
 8010808:	3710      	adds	r7, #16
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	20000614 	.word	0x20000614
 8010814:	e000ed04 	.word	0xe000ed04

08010818 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010820:	f000 fe7a 	bl	8011518 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d102      	bne.n	8010830 <vTaskSuspend+0x18>
 801082a:	4b3d      	ldr	r3, [pc, #244]	@ (8010920 <vTaskSuspend+0x108>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	e000      	b.n	8010832 <vTaskSuspend+0x1a>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	3304      	adds	r3, #4
 8010838:	4618      	mov	r0, r3
 801083a:	f7ff fdde 	bl	80103fa <uxListRemove>
 801083e:	4603      	mov	r3, r0
 8010840:	2b00      	cmp	r3, #0
 8010842:	d115      	bne.n	8010870 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010848:	4936      	ldr	r1, [pc, #216]	@ (8010924 <vTaskSuspend+0x10c>)
 801084a:	4613      	mov	r3, r2
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	4413      	add	r3, r2
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	440b      	add	r3, r1
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d10a      	bne.n	8010870 <vTaskSuspend+0x58>
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801085e:	2201      	movs	r2, #1
 8010860:	fa02 f303 	lsl.w	r3, r2, r3
 8010864:	43da      	mvns	r2, r3
 8010866:	4b30      	ldr	r3, [pc, #192]	@ (8010928 <vTaskSuspend+0x110>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	4013      	ands	r3, r2
 801086c:	4a2e      	ldr	r2, [pc, #184]	@ (8010928 <vTaskSuspend+0x110>)
 801086e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010874:	2b00      	cmp	r3, #0
 8010876:	d004      	beq.n	8010882 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	3318      	adds	r3, #24
 801087c:	4618      	mov	r0, r3
 801087e:	f7ff fdbc 	bl	80103fa <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	3304      	adds	r3, #4
 8010886:	4619      	mov	r1, r3
 8010888:	4828      	ldr	r0, [pc, #160]	@ (801092c <vTaskSuspend+0x114>)
 801088a:	f7ff fd59 	bl	8010340 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8010894:	b2db      	uxtb	r3, r3
 8010896:	2b01      	cmp	r3, #1
 8010898:	d103      	bne.n	80108a2 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	2200      	movs	r2, #0
 801089e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80108a2:	f000 fe6b 	bl	801157c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80108a6:	4b22      	ldr	r3, [pc, #136]	@ (8010930 <vTaskSuspend+0x118>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d005      	beq.n	80108ba <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80108ae:	f000 fe33 	bl	8011518 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80108b2:	f000 fb35 	bl	8010f20 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80108b6:	f000 fe61 	bl	801157c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80108ba:	4b19      	ldr	r3, [pc, #100]	@ (8010920 <vTaskSuspend+0x108>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d128      	bne.n	8010916 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 80108c4:	4b1a      	ldr	r3, [pc, #104]	@ (8010930 <vTaskSuspend+0x118>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d018      	beq.n	80108fe <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80108cc:	4b19      	ldr	r3, [pc, #100]	@ (8010934 <vTaskSuspend+0x11c>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d00b      	beq.n	80108ec <vTaskSuspend+0xd4>
	__asm volatile
 80108d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108d8:	f383 8811 	msr	BASEPRI, r3
 80108dc:	f3bf 8f6f 	isb	sy
 80108e0:	f3bf 8f4f 	dsb	sy
 80108e4:	60bb      	str	r3, [r7, #8]
}
 80108e6:	bf00      	nop
 80108e8:	bf00      	nop
 80108ea:	e7fd      	b.n	80108e8 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 80108ec:	4b12      	ldr	r3, [pc, #72]	@ (8010938 <vTaskSuspend+0x120>)
 80108ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108f2:	601a      	str	r2, [r3, #0]
 80108f4:	f3bf 8f4f 	dsb	sy
 80108f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80108fc:	e00b      	b.n	8010916 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80108fe:	4b0b      	ldr	r3, [pc, #44]	@ (801092c <vTaskSuspend+0x114>)
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	4b0e      	ldr	r3, [pc, #56]	@ (801093c <vTaskSuspend+0x124>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	429a      	cmp	r2, r3
 8010908:	d103      	bne.n	8010912 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 801090a:	4b05      	ldr	r3, [pc, #20]	@ (8010920 <vTaskSuspend+0x108>)
 801090c:	2200      	movs	r2, #0
 801090e:	601a      	str	r2, [r3, #0]
	}
 8010910:	e001      	b.n	8010916 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8010912:	f000 f9e5 	bl	8010ce0 <vTaskSwitchContext>
	}
 8010916:	bf00      	nop
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
 801091e:	bf00      	nop
 8010920:	200004ec 	.word	0x200004ec
 8010924:	200004f0 	.word	0x200004f0
 8010928:	200005f4 	.word	0x200005f4
 801092c:	200005d8 	.word	0x200005d8
 8010930:	200005f8 	.word	0x200005f8
 8010934:	20000614 	.word	0x20000614
 8010938:	e000ed04 	.word	0xe000ed04
 801093c:	200005ec 	.word	0x200005ec

08010940 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b08a      	sub	sp, #40	@ 0x28
 8010944:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010946:	2300      	movs	r3, #0
 8010948:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801094a:	2300      	movs	r3, #0
 801094c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801094e:	463a      	mov	r2, r7
 8010950:	1d39      	adds	r1, r7, #4
 8010952:	f107 0308 	add.w	r3, r7, #8
 8010956:	4618      	mov	r0, r3
 8010958:	f7fc f96e 	bl	800cc38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801095c:	6839      	ldr	r1, [r7, #0]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	68ba      	ldr	r2, [r7, #8]
 8010962:	9202      	str	r2, [sp, #8]
 8010964:	9301      	str	r3, [sp, #4]
 8010966:	2300      	movs	r3, #0
 8010968:	9300      	str	r3, [sp, #0]
 801096a:	2300      	movs	r3, #0
 801096c:	460a      	mov	r2, r1
 801096e:	4921      	ldr	r1, [pc, #132]	@ (80109f4 <vTaskStartScheduler+0xb4>)
 8010970:	4821      	ldr	r0, [pc, #132]	@ (80109f8 <vTaskStartScheduler+0xb8>)
 8010972:	f7ff fd6c 	bl	801044e <xTaskCreateStatic>
 8010976:	4603      	mov	r3, r0
 8010978:	4a20      	ldr	r2, [pc, #128]	@ (80109fc <vTaskStartScheduler+0xbc>)
 801097a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801097c:	4b1f      	ldr	r3, [pc, #124]	@ (80109fc <vTaskStartScheduler+0xbc>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d002      	beq.n	801098a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010984:	2301      	movs	r3, #1
 8010986:	617b      	str	r3, [r7, #20]
 8010988:	e001      	b.n	801098e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801098a:	2300      	movs	r3, #0
 801098c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	2b01      	cmp	r3, #1
 8010992:	d11b      	bne.n	80109cc <vTaskStartScheduler+0x8c>
	__asm volatile
 8010994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010998:	f383 8811 	msr	BASEPRI, r3
 801099c:	f3bf 8f6f 	isb	sy
 80109a0:	f3bf 8f4f 	dsb	sy
 80109a4:	613b      	str	r3, [r7, #16]
}
 80109a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80109a8:	4b15      	ldr	r3, [pc, #84]	@ (8010a00 <vTaskStartScheduler+0xc0>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	334c      	adds	r3, #76	@ 0x4c
 80109ae:	4a15      	ldr	r2, [pc, #84]	@ (8010a04 <vTaskStartScheduler+0xc4>)
 80109b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80109b2:	4b15      	ldr	r3, [pc, #84]	@ (8010a08 <vTaskStartScheduler+0xc8>)
 80109b4:	f04f 32ff 	mov.w	r2, #4294967295
 80109b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80109ba:	4b14      	ldr	r3, [pc, #80]	@ (8010a0c <vTaskStartScheduler+0xcc>)
 80109bc:	2201      	movs	r2, #1
 80109be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80109c0:	4b13      	ldr	r3, [pc, #76]	@ (8010a10 <vTaskStartScheduler+0xd0>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80109c6:	f000 fd03 	bl	80113d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80109ca:	e00f      	b.n	80109ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d2:	d10b      	bne.n	80109ec <vTaskStartScheduler+0xac>
	__asm volatile
 80109d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d8:	f383 8811 	msr	BASEPRI, r3
 80109dc:	f3bf 8f6f 	isb	sy
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	60fb      	str	r3, [r7, #12]
}
 80109e6:	bf00      	nop
 80109e8:	bf00      	nop
 80109ea:	e7fd      	b.n	80109e8 <vTaskStartScheduler+0xa8>
}
 80109ec:	bf00      	nop
 80109ee:	3718      	adds	r7, #24
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}
 80109f4:	080130ec 	.word	0x080130ec
 80109f8:	08010da9 	.word	0x08010da9
 80109fc:	20000610 	.word	0x20000610
 8010a00:	200004ec 	.word	0x200004ec
 8010a04:	20000024 	.word	0x20000024
 8010a08:	2000060c 	.word	0x2000060c
 8010a0c:	200005f8 	.word	0x200005f8
 8010a10:	200005f0 	.word	0x200005f0

08010a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010a14:	b480      	push	{r7}
 8010a16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010a18:	4b04      	ldr	r3, [pc, #16]	@ (8010a2c <vTaskSuspendAll+0x18>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3301      	adds	r3, #1
 8010a1e:	4a03      	ldr	r2, [pc, #12]	@ (8010a2c <vTaskSuspendAll+0x18>)
 8010a20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010a22:	bf00      	nop
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr
 8010a2c:	20000614 	.word	0x20000614

08010a30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b084      	sub	sp, #16
 8010a34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a36:	2300      	movs	r3, #0
 8010a38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a3e:	4b42      	ldr	r3, [pc, #264]	@ (8010b48 <xTaskResumeAll+0x118>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d10b      	bne.n	8010a5e <xTaskResumeAll+0x2e>
	__asm volatile
 8010a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a4a:	f383 8811 	msr	BASEPRI, r3
 8010a4e:	f3bf 8f6f 	isb	sy
 8010a52:	f3bf 8f4f 	dsb	sy
 8010a56:	603b      	str	r3, [r7, #0]
}
 8010a58:	bf00      	nop
 8010a5a:	bf00      	nop
 8010a5c:	e7fd      	b.n	8010a5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010a5e:	f000 fd5b 	bl	8011518 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010a62:	4b39      	ldr	r3, [pc, #228]	@ (8010b48 <xTaskResumeAll+0x118>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	3b01      	subs	r3, #1
 8010a68:	4a37      	ldr	r2, [pc, #220]	@ (8010b48 <xTaskResumeAll+0x118>)
 8010a6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010a6c:	4b36      	ldr	r3, [pc, #216]	@ (8010b48 <xTaskResumeAll+0x118>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d161      	bne.n	8010b38 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010a74:	4b35      	ldr	r3, [pc, #212]	@ (8010b4c <xTaskResumeAll+0x11c>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d05d      	beq.n	8010b38 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010a7c:	e02e      	b.n	8010adc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a7e:	4b34      	ldr	r3, [pc, #208]	@ (8010b50 <xTaskResumeAll+0x120>)
 8010a80:	68db      	ldr	r3, [r3, #12]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	3318      	adds	r3, #24
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7ff fcb5 	bl	80103fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	3304      	adds	r3, #4
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7ff fcb0 	bl	80103fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a9e:	2201      	movs	r2, #1
 8010aa0:	409a      	lsls	r2, r3
 8010aa2:	4b2c      	ldr	r3, [pc, #176]	@ (8010b54 <xTaskResumeAll+0x124>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	4a2a      	ldr	r2, [pc, #168]	@ (8010b54 <xTaskResumeAll+0x124>)
 8010aaa:	6013      	str	r3, [r2, #0]
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	4413      	add	r3, r2
 8010ab6:	009b      	lsls	r3, r3, #2
 8010ab8:	4a27      	ldr	r2, [pc, #156]	@ (8010b58 <xTaskResumeAll+0x128>)
 8010aba:	441a      	add	r2, r3
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	3304      	adds	r3, #4
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	f7ff fc3c 	bl	8010340 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010acc:	4b23      	ldr	r3, [pc, #140]	@ (8010b5c <xTaskResumeAll+0x12c>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d302      	bcc.n	8010adc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010ad6:	4b22      	ldr	r3, [pc, #136]	@ (8010b60 <xTaskResumeAll+0x130>)
 8010ad8:	2201      	movs	r2, #1
 8010ada:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010adc:	4b1c      	ldr	r3, [pc, #112]	@ (8010b50 <xTaskResumeAll+0x120>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d1cc      	bne.n	8010a7e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d001      	beq.n	8010aee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010aea:	f000 fa19 	bl	8010f20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010aee:	4b1d      	ldr	r3, [pc, #116]	@ (8010b64 <xTaskResumeAll+0x134>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d010      	beq.n	8010b1c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010afa:	f000 f837 	bl	8010b6c <xTaskIncrementTick>
 8010afe:	4603      	mov	r3, r0
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d002      	beq.n	8010b0a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010b04:	4b16      	ldr	r3, [pc, #88]	@ (8010b60 <xTaskResumeAll+0x130>)
 8010b06:	2201      	movs	r2, #1
 8010b08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1f1      	bne.n	8010afa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010b16:	4b13      	ldr	r3, [pc, #76]	@ (8010b64 <xTaskResumeAll+0x134>)
 8010b18:	2200      	movs	r2, #0
 8010b1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010b1c:	4b10      	ldr	r3, [pc, #64]	@ (8010b60 <xTaskResumeAll+0x130>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d009      	beq.n	8010b38 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010b24:	2301      	movs	r3, #1
 8010b26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010b28:	4b0f      	ldr	r3, [pc, #60]	@ (8010b68 <xTaskResumeAll+0x138>)
 8010b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b2e:	601a      	str	r2, [r3, #0]
 8010b30:	f3bf 8f4f 	dsb	sy
 8010b34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b38:	f000 fd20 	bl	801157c <vPortExitCritical>

	return xAlreadyYielded;
 8010b3c:	68bb      	ldr	r3, [r7, #8]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	20000614 	.word	0x20000614
 8010b4c:	200005ec 	.word	0x200005ec
 8010b50:	200005ac 	.word	0x200005ac
 8010b54:	200005f4 	.word	0x200005f4
 8010b58:	200004f0 	.word	0x200004f0
 8010b5c:	200004ec 	.word	0x200004ec
 8010b60:	20000600 	.word	0x20000600
 8010b64:	200005fc 	.word	0x200005fc
 8010b68:	e000ed04 	.word	0xe000ed04

08010b6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b086      	sub	sp, #24
 8010b70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010b72:	2300      	movs	r3, #0
 8010b74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010b76:	4b4f      	ldr	r3, [pc, #316]	@ (8010cb4 <xTaskIncrementTick+0x148>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	f040 808f 	bne.w	8010c9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010b80:	4b4d      	ldr	r3, [pc, #308]	@ (8010cb8 <xTaskIncrementTick+0x14c>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	3301      	adds	r3, #1
 8010b86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010b88:	4a4b      	ldr	r2, [pc, #300]	@ (8010cb8 <xTaskIncrementTick+0x14c>)
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d121      	bne.n	8010bd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010b94:	4b49      	ldr	r3, [pc, #292]	@ (8010cbc <xTaskIncrementTick+0x150>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d00b      	beq.n	8010bb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8010b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ba2:	f383 8811 	msr	BASEPRI, r3
 8010ba6:	f3bf 8f6f 	isb	sy
 8010baa:	f3bf 8f4f 	dsb	sy
 8010bae:	603b      	str	r3, [r7, #0]
}
 8010bb0:	bf00      	nop
 8010bb2:	bf00      	nop
 8010bb4:	e7fd      	b.n	8010bb2 <xTaskIncrementTick+0x46>
 8010bb6:	4b41      	ldr	r3, [pc, #260]	@ (8010cbc <xTaskIncrementTick+0x150>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	60fb      	str	r3, [r7, #12]
 8010bbc:	4b40      	ldr	r3, [pc, #256]	@ (8010cc0 <xTaskIncrementTick+0x154>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4a3e      	ldr	r2, [pc, #248]	@ (8010cbc <xTaskIncrementTick+0x150>)
 8010bc2:	6013      	str	r3, [r2, #0]
 8010bc4:	4a3e      	ldr	r2, [pc, #248]	@ (8010cc0 <xTaskIncrementTick+0x154>)
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	6013      	str	r3, [r2, #0]
 8010bca:	4b3e      	ldr	r3, [pc, #248]	@ (8010cc4 <xTaskIncrementTick+0x158>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	3301      	adds	r3, #1
 8010bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8010cc4 <xTaskIncrementTick+0x158>)
 8010bd2:	6013      	str	r3, [r2, #0]
 8010bd4:	f000 f9a4 	bl	8010f20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8010cc8 <xTaskIncrementTick+0x15c>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	693a      	ldr	r2, [r7, #16]
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d348      	bcc.n	8010c74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010be2:	4b36      	ldr	r3, [pc, #216]	@ (8010cbc <xTaskIncrementTick+0x150>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d104      	bne.n	8010bf6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010bec:	4b36      	ldr	r3, [pc, #216]	@ (8010cc8 <xTaskIncrementTick+0x15c>)
 8010bee:	f04f 32ff 	mov.w	r2, #4294967295
 8010bf2:	601a      	str	r2, [r3, #0]
					break;
 8010bf4:	e03e      	b.n	8010c74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bf6:	4b31      	ldr	r3, [pc, #196]	@ (8010cbc <xTaskIncrementTick+0x150>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	68db      	ldr	r3, [r3, #12]
 8010bfc:	68db      	ldr	r3, [r3, #12]
 8010bfe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010c06:	693a      	ldr	r2, [r7, #16]
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	429a      	cmp	r2, r3
 8010c0c:	d203      	bcs.n	8010c16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010c0e:	4a2e      	ldr	r2, [pc, #184]	@ (8010cc8 <xTaskIncrementTick+0x15c>)
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010c14:	e02e      	b.n	8010c74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	3304      	adds	r3, #4
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7ff fbed 	bl	80103fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d004      	beq.n	8010c32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	3318      	adds	r3, #24
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f7ff fbe4 	bl	80103fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c36:	2201      	movs	r2, #1
 8010c38:	409a      	lsls	r2, r3
 8010c3a:	4b24      	ldr	r3, [pc, #144]	@ (8010ccc <xTaskIncrementTick+0x160>)
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	4a22      	ldr	r2, [pc, #136]	@ (8010ccc <xTaskIncrementTick+0x160>)
 8010c42:	6013      	str	r3, [r2, #0]
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c48:	4613      	mov	r3, r2
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	4413      	add	r3, r2
 8010c4e:	009b      	lsls	r3, r3, #2
 8010c50:	4a1f      	ldr	r2, [pc, #124]	@ (8010cd0 <xTaskIncrementTick+0x164>)
 8010c52:	441a      	add	r2, r3
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	3304      	adds	r3, #4
 8010c58:	4619      	mov	r1, r3
 8010c5a:	4610      	mov	r0, r2
 8010c5c:	f7ff fb70 	bl	8010340 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c64:	4b1b      	ldr	r3, [pc, #108]	@ (8010cd4 <xTaskIncrementTick+0x168>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d3b9      	bcc.n	8010be2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c72:	e7b6      	b.n	8010be2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010c74:	4b17      	ldr	r3, [pc, #92]	@ (8010cd4 <xTaskIncrementTick+0x168>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c7a:	4915      	ldr	r1, [pc, #84]	@ (8010cd0 <xTaskIncrementTick+0x164>)
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	009b      	lsls	r3, r3, #2
 8010c80:	4413      	add	r3, r2
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	440b      	add	r3, r1
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2b01      	cmp	r3, #1
 8010c8a:	d901      	bls.n	8010c90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010c90:	4b11      	ldr	r3, [pc, #68]	@ (8010cd8 <xTaskIncrementTick+0x16c>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d007      	beq.n	8010ca8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010c98:	2301      	movs	r3, #1
 8010c9a:	617b      	str	r3, [r7, #20]
 8010c9c:	e004      	b.n	8010ca8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8010cdc <xTaskIncrementTick+0x170>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8010cdc <xTaskIncrementTick+0x170>)
 8010ca6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010ca8:	697b      	ldr	r3, [r7, #20]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3718      	adds	r7, #24
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	20000614 	.word	0x20000614
 8010cb8:	200005f0 	.word	0x200005f0
 8010cbc:	200005a4 	.word	0x200005a4
 8010cc0:	200005a8 	.word	0x200005a8
 8010cc4:	20000604 	.word	0x20000604
 8010cc8:	2000060c 	.word	0x2000060c
 8010ccc:	200005f4 	.word	0x200005f4
 8010cd0:	200004f0 	.word	0x200004f0
 8010cd4:	200004ec 	.word	0x200004ec
 8010cd8:	20000600 	.word	0x20000600
 8010cdc:	200005fc 	.word	0x200005fc

08010ce0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b087      	sub	sp, #28
 8010ce4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010ce6:	4b2a      	ldr	r3, [pc, #168]	@ (8010d90 <vTaskSwitchContext+0xb0>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d003      	beq.n	8010cf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010cee:	4b29      	ldr	r3, [pc, #164]	@ (8010d94 <vTaskSwitchContext+0xb4>)
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010cf4:	e045      	b.n	8010d82 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8010cf6:	4b27      	ldr	r3, [pc, #156]	@ (8010d94 <vTaskSwitchContext+0xb4>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010cfc:	4b26      	ldr	r3, [pc, #152]	@ (8010d98 <vTaskSwitchContext+0xb8>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	fab3 f383 	clz	r3, r3
 8010d08:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010d0a:	7afb      	ldrb	r3, [r7, #11]
 8010d0c:	f1c3 031f 	rsb	r3, r3, #31
 8010d10:	617b      	str	r3, [r7, #20]
 8010d12:	4922      	ldr	r1, [pc, #136]	@ (8010d9c <vTaskSwitchContext+0xbc>)
 8010d14:	697a      	ldr	r2, [r7, #20]
 8010d16:	4613      	mov	r3, r2
 8010d18:	009b      	lsls	r3, r3, #2
 8010d1a:	4413      	add	r3, r2
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	440b      	add	r3, r1
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10b      	bne.n	8010d3e <vTaskSwitchContext+0x5e>
	__asm volatile
 8010d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d2a:	f383 8811 	msr	BASEPRI, r3
 8010d2e:	f3bf 8f6f 	isb	sy
 8010d32:	f3bf 8f4f 	dsb	sy
 8010d36:	607b      	str	r3, [r7, #4]
}
 8010d38:	bf00      	nop
 8010d3a:	bf00      	nop
 8010d3c:	e7fd      	b.n	8010d3a <vTaskSwitchContext+0x5a>
 8010d3e:	697a      	ldr	r2, [r7, #20]
 8010d40:	4613      	mov	r3, r2
 8010d42:	009b      	lsls	r3, r3, #2
 8010d44:	4413      	add	r3, r2
 8010d46:	009b      	lsls	r3, r3, #2
 8010d48:	4a14      	ldr	r2, [pc, #80]	@ (8010d9c <vTaskSwitchContext+0xbc>)
 8010d4a:	4413      	add	r3, r2
 8010d4c:	613b      	str	r3, [r7, #16]
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	685b      	ldr	r3, [r3, #4]
 8010d52:	685a      	ldr	r2, [r3, #4]
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	605a      	str	r2, [r3, #4]
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	685a      	ldr	r2, [r3, #4]
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	3308      	adds	r3, #8
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d104      	bne.n	8010d6e <vTaskSwitchContext+0x8e>
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	685a      	ldr	r2, [r3, #4]
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	605a      	str	r2, [r3, #4]
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	4a0a      	ldr	r2, [pc, #40]	@ (8010da0 <vTaskSwitchContext+0xc0>)
 8010d76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010d78:	4b09      	ldr	r3, [pc, #36]	@ (8010da0 <vTaskSwitchContext+0xc0>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	334c      	adds	r3, #76	@ 0x4c
 8010d7e:	4a09      	ldr	r2, [pc, #36]	@ (8010da4 <vTaskSwitchContext+0xc4>)
 8010d80:	6013      	str	r3, [r2, #0]
}
 8010d82:	bf00      	nop
 8010d84:	371c      	adds	r7, #28
 8010d86:	46bd      	mov	sp, r7
 8010d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8c:	4770      	bx	lr
 8010d8e:	bf00      	nop
 8010d90:	20000614 	.word	0x20000614
 8010d94:	20000600 	.word	0x20000600
 8010d98:	200005f4 	.word	0x200005f4
 8010d9c:	200004f0 	.word	0x200004f0
 8010da0:	200004ec 	.word	0x200004ec
 8010da4:	20000024 	.word	0x20000024

08010da8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010db0:	f000 f852 	bl	8010e58 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010db4:	4b06      	ldr	r3, [pc, #24]	@ (8010dd0 <prvIdleTask+0x28>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d9f9      	bls.n	8010db0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010dbc:	4b05      	ldr	r3, [pc, #20]	@ (8010dd4 <prvIdleTask+0x2c>)
 8010dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010dc2:	601a      	str	r2, [r3, #0]
 8010dc4:	f3bf 8f4f 	dsb	sy
 8010dc8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010dcc:	e7f0      	b.n	8010db0 <prvIdleTask+0x8>
 8010dce:	bf00      	nop
 8010dd0:	200004f0 	.word	0x200004f0
 8010dd4:	e000ed04 	.word	0xe000ed04

08010dd8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b082      	sub	sp, #8
 8010ddc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010dde:	2300      	movs	r3, #0
 8010de0:	607b      	str	r3, [r7, #4]
 8010de2:	e00c      	b.n	8010dfe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	4613      	mov	r3, r2
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	4413      	add	r3, r2
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	4a12      	ldr	r2, [pc, #72]	@ (8010e38 <prvInitialiseTaskLists+0x60>)
 8010df0:	4413      	add	r3, r2
 8010df2:	4618      	mov	r0, r3
 8010df4:	f7ff fa77 	bl	80102e6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	607b      	str	r3, [r7, #4]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2b06      	cmp	r3, #6
 8010e02:	d9ef      	bls.n	8010de4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010e04:	480d      	ldr	r0, [pc, #52]	@ (8010e3c <prvInitialiseTaskLists+0x64>)
 8010e06:	f7ff fa6e 	bl	80102e6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010e0a:	480d      	ldr	r0, [pc, #52]	@ (8010e40 <prvInitialiseTaskLists+0x68>)
 8010e0c:	f7ff fa6b 	bl	80102e6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010e10:	480c      	ldr	r0, [pc, #48]	@ (8010e44 <prvInitialiseTaskLists+0x6c>)
 8010e12:	f7ff fa68 	bl	80102e6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010e16:	480c      	ldr	r0, [pc, #48]	@ (8010e48 <prvInitialiseTaskLists+0x70>)
 8010e18:	f7ff fa65 	bl	80102e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010e1c:	480b      	ldr	r0, [pc, #44]	@ (8010e4c <prvInitialiseTaskLists+0x74>)
 8010e1e:	f7ff fa62 	bl	80102e6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010e22:	4b0b      	ldr	r3, [pc, #44]	@ (8010e50 <prvInitialiseTaskLists+0x78>)
 8010e24:	4a05      	ldr	r2, [pc, #20]	@ (8010e3c <prvInitialiseTaskLists+0x64>)
 8010e26:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010e28:	4b0a      	ldr	r3, [pc, #40]	@ (8010e54 <prvInitialiseTaskLists+0x7c>)
 8010e2a:	4a05      	ldr	r2, [pc, #20]	@ (8010e40 <prvInitialiseTaskLists+0x68>)
 8010e2c:	601a      	str	r2, [r3, #0]
}
 8010e2e:	bf00      	nop
 8010e30:	3708      	adds	r7, #8
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	200004f0 	.word	0x200004f0
 8010e3c:	2000057c 	.word	0x2000057c
 8010e40:	20000590 	.word	0x20000590
 8010e44:	200005ac 	.word	0x200005ac
 8010e48:	200005c0 	.word	0x200005c0
 8010e4c:	200005d8 	.word	0x200005d8
 8010e50:	200005a4 	.word	0x200005a4
 8010e54:	200005a8 	.word	0x200005a8

08010e58 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e5e:	e019      	b.n	8010e94 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010e60:	f000 fb5a 	bl	8011518 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e64:	4b10      	ldr	r3, [pc, #64]	@ (8010ea8 <prvCheckTasksWaitingTermination+0x50>)
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	68db      	ldr	r3, [r3, #12]
 8010e6a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	3304      	adds	r3, #4
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7ff fac2 	bl	80103fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010e76:	4b0d      	ldr	r3, [pc, #52]	@ (8010eac <prvCheckTasksWaitingTermination+0x54>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8010eac <prvCheckTasksWaitingTermination+0x54>)
 8010e7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010e80:	4b0b      	ldr	r3, [pc, #44]	@ (8010eb0 <prvCheckTasksWaitingTermination+0x58>)
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	3b01      	subs	r3, #1
 8010e86:	4a0a      	ldr	r2, [pc, #40]	@ (8010eb0 <prvCheckTasksWaitingTermination+0x58>)
 8010e88:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010e8a:	f000 fb77 	bl	801157c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f000 f810 	bl	8010eb4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e94:	4b06      	ldr	r3, [pc, #24]	@ (8010eb0 <prvCheckTasksWaitingTermination+0x58>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d1e1      	bne.n	8010e60 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010e9c:	bf00      	nop
 8010e9e:	bf00      	nop
 8010ea0:	3708      	adds	r7, #8
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	200005c0 	.word	0x200005c0
 8010eac:	200005ec 	.word	0x200005ec
 8010eb0:	200005d4 	.word	0x200005d4

08010eb4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	334c      	adds	r3, #76	@ 0x4c
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f001 fa25 	bl	8012310 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d108      	bne.n	8010ee2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f000 fd0f 	bl	80118f8 <vPortFree>
				vPortFree( pxTCB );
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f000 fd0c 	bl	80118f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010ee0:	e019      	b.n	8010f16 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010ee8:	2b01      	cmp	r3, #1
 8010eea:	d103      	bne.n	8010ef4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 fd03 	bl	80118f8 <vPortFree>
	}
 8010ef2:	e010      	b.n	8010f16 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8010efa:	2b02      	cmp	r3, #2
 8010efc:	d00b      	beq.n	8010f16 <prvDeleteTCB+0x62>
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f02:	f383 8811 	msr	BASEPRI, r3
 8010f06:	f3bf 8f6f 	isb	sy
 8010f0a:	f3bf 8f4f 	dsb	sy
 8010f0e:	60fb      	str	r3, [r7, #12]
}
 8010f10:	bf00      	nop
 8010f12:	bf00      	nop
 8010f14:	e7fd      	b.n	8010f12 <prvDeleteTCB+0x5e>
	}
 8010f16:	bf00      	nop
 8010f18:	3710      	adds	r7, #16
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
	...

08010f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010f20:	b480      	push	{r7}
 8010f22:	b083      	sub	sp, #12
 8010f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f26:	4b0c      	ldr	r3, [pc, #48]	@ (8010f58 <prvResetNextTaskUnblockTime+0x38>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d104      	bne.n	8010f3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010f30:	4b0a      	ldr	r3, [pc, #40]	@ (8010f5c <prvResetNextTaskUnblockTime+0x3c>)
 8010f32:	f04f 32ff 	mov.w	r2, #4294967295
 8010f36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010f38:	e008      	b.n	8010f4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f3a:	4b07      	ldr	r3, [pc, #28]	@ (8010f58 <prvResetNextTaskUnblockTime+0x38>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	4a04      	ldr	r2, [pc, #16]	@ (8010f5c <prvResetNextTaskUnblockTime+0x3c>)
 8010f4a:	6013      	str	r3, [r2, #0]
}
 8010f4c:	bf00      	nop
 8010f4e:	370c      	adds	r7, #12
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr
 8010f58:	200005a4 	.word	0x200005a4
 8010f5c:	2000060c 	.word	0x2000060c

08010f60 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b086      	sub	sp, #24
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	607a      	str	r2, [r7, #4]
 8010f6c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8010f6e:	f000 fad3 	bl	8011518 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010f72:	4b29      	ldr	r3, [pc, #164]	@ (8011018 <xTaskNotifyWait+0xb8>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8010f7a:	b2db      	uxtb	r3, r3
 8010f7c:	2b02      	cmp	r3, #2
 8010f7e:	d01c      	beq.n	8010fba <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8010f80:	4b25      	ldr	r3, [pc, #148]	@ (8011018 <xTaskNotifyWait+0xb8>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	43d2      	mvns	r2, r2
 8010f8c:	400a      	ands	r2, r1
 8010f8e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8010f92:	4b21      	ldr	r3, [pc, #132]	@ (8011018 <xTaskNotifyWait+0xb8>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	2201      	movs	r2, #1
 8010f98:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d00b      	beq.n	8010fba <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010fa2:	2101      	movs	r1, #1
 8010fa4:	6838      	ldr	r0, [r7, #0]
 8010fa6:	f000 f921 	bl	80111ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8010faa:	4b1c      	ldr	r3, [pc, #112]	@ (801101c <xTaskNotifyWait+0xbc>)
 8010fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010fb0:	601a      	str	r2, [r3, #0]
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010fba:	f000 fadf 	bl	801157c <vPortExitCritical>

		taskENTER_CRITICAL();
 8010fbe:	f000 faab 	bl	8011518 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d005      	beq.n	8010fd4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8010fc8:	4b13      	ldr	r3, [pc, #76]	@ (8011018 <xTaskNotifyWait+0xb8>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8010fd4:	4b10      	ldr	r3, [pc, #64]	@ (8011018 <xTaskNotifyWait+0xb8>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	2b02      	cmp	r3, #2
 8010fe0:	d002      	beq.n	8010fe8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	617b      	str	r3, [r7, #20]
 8010fe6:	e00a      	b.n	8010ffe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8010fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8011018 <xTaskNotifyWait+0xb8>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 8010ff0:	68ba      	ldr	r2, [r7, #8]
 8010ff2:	43d2      	mvns	r2, r2
 8010ff4:	400a      	ands	r2, r1
 8010ff6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
				xReturn = pdTRUE;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010ffe:	4b06      	ldr	r3, [pc, #24]	@ (8011018 <xTaskNotifyWait+0xb8>)
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	2200      	movs	r2, #0
 8011004:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 8011008:	f000 fab8 	bl	801157c <vPortExitCritical>

		return xReturn;
 801100c:	697b      	ldr	r3, [r7, #20]
	}
 801100e:	4618      	mov	r0, r3
 8011010:	3718      	adds	r7, #24
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	200004ec 	.word	0x200004ec
 801101c:	e000ed04 	.word	0xe000ed04

08011020 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011020:	b580      	push	{r7, lr}
 8011022:	b08e      	sub	sp, #56	@ 0x38
 8011024:	af00      	add	r7, sp, #0
 8011026:	60f8      	str	r0, [r7, #12]
 8011028:	60b9      	str	r1, [r7, #8]
 801102a:	603b      	str	r3, [r7, #0]
 801102c:	4613      	mov	r3, r2
 801102e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011030:	2301      	movs	r3, #1
 8011032:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d10b      	bne.n	8011052 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 801103a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801103e:	f383 8811 	msr	BASEPRI, r3
 8011042:	f3bf 8f6f 	isb	sy
 8011046:	f3bf 8f4f 	dsb	sy
 801104a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801104c:	bf00      	nop
 801104e:	bf00      	nop
 8011050:	e7fd      	b.n	801104e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011052:	f000 fb41 	bl	80116d8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801105a:	f3ef 8211 	mrs	r2, BASEPRI
 801105e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011062:	f383 8811 	msr	BASEPRI, r3
 8011066:	f3bf 8f6f 	isb	sy
 801106a:	f3bf 8f4f 	dsb	sy
 801106e:	623a      	str	r2, [r7, #32]
 8011070:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011072:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011074:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d004      	beq.n	8011086 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801107c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801107e:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011088:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 801108c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011092:	2202      	movs	r2, #2
 8011094:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			switch( eAction )
 8011098:	79fb      	ldrb	r3, [r7, #7]
 801109a:	2b04      	cmp	r3, #4
 801109c:	d82e      	bhi.n	80110fc <xTaskGenericNotifyFromISR+0xdc>
 801109e:	a201      	add	r2, pc, #4	@ (adr r2, 80110a4 <xTaskGenericNotifyFromISR+0x84>)
 80110a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a4:	08011121 	.word	0x08011121
 80110a8:	080110b9 	.word	0x080110b9
 80110ac:	080110cb 	.word	0x080110cb
 80110b0:	080110db 	.word	0x080110db
 80110b4:	080110e5 	.word	0x080110e5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80110b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110ba:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	431a      	orrs	r2, r3
 80110c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80110c8:	e02d      	b.n	8011126 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80110ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80110d0:	1c5a      	adds	r2, r3, #1
 80110d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110d4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80110d8:	e025      	b.n	8011126 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80110da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110dc:	68ba      	ldr	r2, [r7, #8]
 80110de:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					break;
 80110e2:	e020      	b.n	8011126 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80110e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80110e8:	2b02      	cmp	r3, #2
 80110ea:	d004      	beq.n	80110f6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80110ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110ee:	68ba      	ldr	r2, [r7, #8]
 80110f0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80110f4:	e017      	b.n	8011126 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 80110f6:	2300      	movs	r3, #0
 80110f8:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80110fa:	e014      	b.n	8011126 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80110fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011106:	d00d      	beq.n	8011124 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8011108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801110c:	f383 8811 	msr	BASEPRI, r3
 8011110:	f3bf 8f6f 	isb	sy
 8011114:	f3bf 8f4f 	dsb	sy
 8011118:	61bb      	str	r3, [r7, #24]
}
 801111a:	bf00      	nop
 801111c:	bf00      	nop
 801111e:	e7fd      	b.n	801111c <xTaskGenericNotifyFromISR+0xfc>
					break;
 8011120:	bf00      	nop
 8011122:	e000      	b.n	8011126 <xTaskGenericNotifyFromISR+0x106>
					break;
 8011124:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011126:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801112a:	2b01      	cmp	r3, #1
 801112c:	d146      	bne.n	80111bc <xTaskGenericNotifyFromISR+0x19c>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801112e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00b      	beq.n	801114e <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8011136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801113a:	f383 8811 	msr	BASEPRI, r3
 801113e:	f3bf 8f6f 	isb	sy
 8011142:	f3bf 8f4f 	dsb	sy
 8011146:	617b      	str	r3, [r7, #20]
}
 8011148:	bf00      	nop
 801114a:	bf00      	nop
 801114c:	e7fd      	b.n	801114a <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801114e:	4b21      	ldr	r3, [pc, #132]	@ (80111d4 <xTaskGenericNotifyFromISR+0x1b4>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d11c      	bne.n	8011190 <xTaskGenericNotifyFromISR+0x170>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011158:	3304      	adds	r3, #4
 801115a:	4618      	mov	r0, r3
 801115c:	f7ff f94d 	bl	80103fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011164:	2201      	movs	r2, #1
 8011166:	409a      	lsls	r2, r3
 8011168:	4b1b      	ldr	r3, [pc, #108]	@ (80111d8 <xTaskGenericNotifyFromISR+0x1b8>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4313      	orrs	r3, r2
 801116e:	4a1a      	ldr	r2, [pc, #104]	@ (80111d8 <xTaskGenericNotifyFromISR+0x1b8>)
 8011170:	6013      	str	r3, [r2, #0]
 8011172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011176:	4613      	mov	r3, r2
 8011178:	009b      	lsls	r3, r3, #2
 801117a:	4413      	add	r3, r2
 801117c:	009b      	lsls	r3, r3, #2
 801117e:	4a17      	ldr	r2, [pc, #92]	@ (80111dc <xTaskGenericNotifyFromISR+0x1bc>)
 8011180:	441a      	add	r2, r3
 8011182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011184:	3304      	adds	r3, #4
 8011186:	4619      	mov	r1, r3
 8011188:	4610      	mov	r0, r2
 801118a:	f7ff f8d9 	bl	8010340 <vListInsertEnd>
 801118e:	e005      	b.n	801119c <xTaskGenericNotifyFromISR+0x17c>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011192:	3318      	adds	r3, #24
 8011194:	4619      	mov	r1, r3
 8011196:	4812      	ldr	r0, [pc, #72]	@ (80111e0 <xTaskGenericNotifyFromISR+0x1c0>)
 8011198:	f7ff f8d2 	bl	8010340 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801119c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801119e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111a0:	4b10      	ldr	r3, [pc, #64]	@ (80111e4 <xTaskGenericNotifyFromISR+0x1c4>)
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d908      	bls.n	80111bc <xTaskGenericNotifyFromISR+0x19c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80111aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d002      	beq.n	80111b6 <xTaskGenericNotifyFromISR+0x196>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80111b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111b2:	2201      	movs	r2, #1
 80111b4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80111b6:	4b0c      	ldr	r3, [pc, #48]	@ (80111e8 <xTaskGenericNotifyFromISR+0x1c8>)
 80111b8:	2201      	movs	r2, #1
 80111ba:	601a      	str	r2, [r3, #0]
 80111bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111be:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80111c0:	693b      	ldr	r3, [r7, #16]
 80111c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80111c6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80111c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3738      	adds	r7, #56	@ 0x38
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	20000614 	.word	0x20000614
 80111d8:	200005f4 	.word	0x200005f4
 80111dc:	200004f0 	.word	0x200004f0
 80111e0:	200005ac 	.word	0x200005ac
 80111e4:	200004ec 	.word	0x200004ec
 80111e8:	20000600 	.word	0x20000600

080111ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80111f6:	4b29      	ldr	r3, [pc, #164]	@ (801129c <prvAddCurrentTaskToDelayedList+0xb0>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111fc:	4b28      	ldr	r3, [pc, #160]	@ (80112a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	3304      	adds	r3, #4
 8011202:	4618      	mov	r0, r3
 8011204:	f7ff f8f9 	bl	80103fa <uxListRemove>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d10b      	bne.n	8011226 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801120e:	4b24      	ldr	r3, [pc, #144]	@ (80112a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011214:	2201      	movs	r2, #1
 8011216:	fa02 f303 	lsl.w	r3, r2, r3
 801121a:	43da      	mvns	r2, r3
 801121c:	4b21      	ldr	r3, [pc, #132]	@ (80112a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	4013      	ands	r3, r2
 8011222:	4a20      	ldr	r2, [pc, #128]	@ (80112a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011224:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801122c:	d10a      	bne.n	8011244 <prvAddCurrentTaskToDelayedList+0x58>
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d007      	beq.n	8011244 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011234:	4b1a      	ldr	r3, [pc, #104]	@ (80112a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	3304      	adds	r3, #4
 801123a:	4619      	mov	r1, r3
 801123c:	481a      	ldr	r0, [pc, #104]	@ (80112a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801123e:	f7ff f87f 	bl	8010340 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011242:	e026      	b.n	8011292 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011244:	68fa      	ldr	r2, [r7, #12]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	4413      	add	r3, r2
 801124a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801124c:	4b14      	ldr	r3, [pc, #80]	@ (80112a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	68ba      	ldr	r2, [r7, #8]
 8011252:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011254:	68ba      	ldr	r2, [r7, #8]
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	429a      	cmp	r2, r3
 801125a:	d209      	bcs.n	8011270 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801125c:	4b13      	ldr	r3, [pc, #76]	@ (80112ac <prvAddCurrentTaskToDelayedList+0xc0>)
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	4b0f      	ldr	r3, [pc, #60]	@ (80112a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	3304      	adds	r3, #4
 8011266:	4619      	mov	r1, r3
 8011268:	4610      	mov	r0, r2
 801126a:	f7ff f88d 	bl	8010388 <vListInsert>
}
 801126e:	e010      	b.n	8011292 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011270:	4b0f      	ldr	r3, [pc, #60]	@ (80112b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011272:	681a      	ldr	r2, [r3, #0]
 8011274:	4b0a      	ldr	r3, [pc, #40]	@ (80112a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	3304      	adds	r3, #4
 801127a:	4619      	mov	r1, r3
 801127c:	4610      	mov	r0, r2
 801127e:	f7ff f883 	bl	8010388 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011282:	4b0c      	ldr	r3, [pc, #48]	@ (80112b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	68ba      	ldr	r2, [r7, #8]
 8011288:	429a      	cmp	r2, r3
 801128a:	d202      	bcs.n	8011292 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801128c:	4a09      	ldr	r2, [pc, #36]	@ (80112b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	6013      	str	r3, [r2, #0]
}
 8011292:	bf00      	nop
 8011294:	3710      	adds	r7, #16
 8011296:	46bd      	mov	sp, r7
 8011298:	bd80      	pop	{r7, pc}
 801129a:	bf00      	nop
 801129c:	200005f0 	.word	0x200005f0
 80112a0:	200004ec 	.word	0x200004ec
 80112a4:	200005f4 	.word	0x200005f4
 80112a8:	200005d8 	.word	0x200005d8
 80112ac:	200005a8 	.word	0x200005a8
 80112b0:	200005a4 	.word	0x200005a4
 80112b4:	2000060c 	.word	0x2000060c

080112b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80112b8:	b480      	push	{r7}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	3b04      	subs	r3, #4
 80112c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80112d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	3b04      	subs	r3, #4
 80112d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	f023 0201 	bic.w	r2, r3, #1
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	3b04      	subs	r3, #4
 80112e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80112e8:	4a0c      	ldr	r2, [pc, #48]	@ (801131c <pxPortInitialiseStack+0x64>)
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	3b14      	subs	r3, #20
 80112f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	3b04      	subs	r3, #4
 80112fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f06f 0202 	mvn.w	r2, #2
 8011306:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	3b20      	subs	r3, #32
 801130c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801130e:	68fb      	ldr	r3, [r7, #12]
}
 8011310:	4618      	mov	r0, r3
 8011312:	3714      	adds	r7, #20
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr
 801131c:	08011321 	.word	0x08011321

08011320 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011320:	b480      	push	{r7}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011326:	2300      	movs	r3, #0
 8011328:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801132a:	4b13      	ldr	r3, [pc, #76]	@ (8011378 <prvTaskExitError+0x58>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011332:	d00b      	beq.n	801134c <prvTaskExitError+0x2c>
	__asm volatile
 8011334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011338:	f383 8811 	msr	BASEPRI, r3
 801133c:	f3bf 8f6f 	isb	sy
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	60fb      	str	r3, [r7, #12]
}
 8011346:	bf00      	nop
 8011348:	bf00      	nop
 801134a:	e7fd      	b.n	8011348 <prvTaskExitError+0x28>
	__asm volatile
 801134c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011350:	f383 8811 	msr	BASEPRI, r3
 8011354:	f3bf 8f6f 	isb	sy
 8011358:	f3bf 8f4f 	dsb	sy
 801135c:	60bb      	str	r3, [r7, #8]
}
 801135e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011360:	bf00      	nop
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d0fc      	beq.n	8011362 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011368:	bf00      	nop
 801136a:	bf00      	nop
 801136c:	3714      	adds	r7, #20
 801136e:	46bd      	mov	sp, r7
 8011370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011374:	4770      	bx	lr
 8011376:	bf00      	nop
 8011378:	20000014 	.word	0x20000014
 801137c:	00000000 	.word	0x00000000

08011380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011380:	4b07      	ldr	r3, [pc, #28]	@ (80113a0 <pxCurrentTCBConst2>)
 8011382:	6819      	ldr	r1, [r3, #0]
 8011384:	6808      	ldr	r0, [r1, #0]
 8011386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801138a:	f380 8809 	msr	PSP, r0
 801138e:	f3bf 8f6f 	isb	sy
 8011392:	f04f 0000 	mov.w	r0, #0
 8011396:	f380 8811 	msr	BASEPRI, r0
 801139a:	4770      	bx	lr
 801139c:	f3af 8000 	nop.w

080113a0 <pxCurrentTCBConst2>:
 80113a0:	200004ec 	.word	0x200004ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80113a4:	bf00      	nop
 80113a6:	bf00      	nop

080113a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80113a8:	4808      	ldr	r0, [pc, #32]	@ (80113cc <prvPortStartFirstTask+0x24>)
 80113aa:	6800      	ldr	r0, [r0, #0]
 80113ac:	6800      	ldr	r0, [r0, #0]
 80113ae:	f380 8808 	msr	MSP, r0
 80113b2:	f04f 0000 	mov.w	r0, #0
 80113b6:	f380 8814 	msr	CONTROL, r0
 80113ba:	b662      	cpsie	i
 80113bc:	b661      	cpsie	f
 80113be:	f3bf 8f4f 	dsb	sy
 80113c2:	f3bf 8f6f 	isb	sy
 80113c6:	df00      	svc	0
 80113c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80113ca:	bf00      	nop
 80113cc:	e000ed08 	.word	0xe000ed08

080113d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b086      	sub	sp, #24
 80113d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80113d6:	4b47      	ldr	r3, [pc, #284]	@ (80114f4 <xPortStartScheduler+0x124>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	4a47      	ldr	r2, [pc, #284]	@ (80114f8 <xPortStartScheduler+0x128>)
 80113dc:	4293      	cmp	r3, r2
 80113de:	d10b      	bne.n	80113f8 <xPortStartScheduler+0x28>
	__asm volatile
 80113e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113e4:	f383 8811 	msr	BASEPRI, r3
 80113e8:	f3bf 8f6f 	isb	sy
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	613b      	str	r3, [r7, #16]
}
 80113f2:	bf00      	nop
 80113f4:	bf00      	nop
 80113f6:	e7fd      	b.n	80113f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80113f8:	4b3e      	ldr	r3, [pc, #248]	@ (80114f4 <xPortStartScheduler+0x124>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a3f      	ldr	r2, [pc, #252]	@ (80114fc <xPortStartScheduler+0x12c>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d10b      	bne.n	801141a <xPortStartScheduler+0x4a>
	__asm volatile
 8011402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011406:	f383 8811 	msr	BASEPRI, r3
 801140a:	f3bf 8f6f 	isb	sy
 801140e:	f3bf 8f4f 	dsb	sy
 8011412:	60fb      	str	r3, [r7, #12]
}
 8011414:	bf00      	nop
 8011416:	bf00      	nop
 8011418:	e7fd      	b.n	8011416 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801141a:	4b39      	ldr	r3, [pc, #228]	@ (8011500 <xPortStartScheduler+0x130>)
 801141c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	b2db      	uxtb	r3, r3
 8011424:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	22ff      	movs	r2, #255	@ 0xff
 801142a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801142c:	697b      	ldr	r3, [r7, #20]
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	b2db      	uxtb	r3, r3
 8011432:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011434:	78fb      	ldrb	r3, [r7, #3]
 8011436:	b2db      	uxtb	r3, r3
 8011438:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801143c:	b2da      	uxtb	r2, r3
 801143e:	4b31      	ldr	r3, [pc, #196]	@ (8011504 <xPortStartScheduler+0x134>)
 8011440:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011442:	4b31      	ldr	r3, [pc, #196]	@ (8011508 <xPortStartScheduler+0x138>)
 8011444:	2207      	movs	r2, #7
 8011446:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011448:	e009      	b.n	801145e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801144a:	4b2f      	ldr	r3, [pc, #188]	@ (8011508 <xPortStartScheduler+0x138>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	3b01      	subs	r3, #1
 8011450:	4a2d      	ldr	r2, [pc, #180]	@ (8011508 <xPortStartScheduler+0x138>)
 8011452:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011454:	78fb      	ldrb	r3, [r7, #3]
 8011456:	b2db      	uxtb	r3, r3
 8011458:	005b      	lsls	r3, r3, #1
 801145a:	b2db      	uxtb	r3, r3
 801145c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801145e:	78fb      	ldrb	r3, [r7, #3]
 8011460:	b2db      	uxtb	r3, r3
 8011462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011466:	2b80      	cmp	r3, #128	@ 0x80
 8011468:	d0ef      	beq.n	801144a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801146a:	4b27      	ldr	r3, [pc, #156]	@ (8011508 <xPortStartScheduler+0x138>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f1c3 0307 	rsb	r3, r3, #7
 8011472:	2b04      	cmp	r3, #4
 8011474:	d00b      	beq.n	801148e <xPortStartScheduler+0xbe>
	__asm volatile
 8011476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801147a:	f383 8811 	msr	BASEPRI, r3
 801147e:	f3bf 8f6f 	isb	sy
 8011482:	f3bf 8f4f 	dsb	sy
 8011486:	60bb      	str	r3, [r7, #8]
}
 8011488:	bf00      	nop
 801148a:	bf00      	nop
 801148c:	e7fd      	b.n	801148a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801148e:	4b1e      	ldr	r3, [pc, #120]	@ (8011508 <xPortStartScheduler+0x138>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	021b      	lsls	r3, r3, #8
 8011494:	4a1c      	ldr	r2, [pc, #112]	@ (8011508 <xPortStartScheduler+0x138>)
 8011496:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011498:	4b1b      	ldr	r3, [pc, #108]	@ (8011508 <xPortStartScheduler+0x138>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80114a0:	4a19      	ldr	r2, [pc, #100]	@ (8011508 <xPortStartScheduler+0x138>)
 80114a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	b2da      	uxtb	r2, r3
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80114ac:	4b17      	ldr	r3, [pc, #92]	@ (801150c <xPortStartScheduler+0x13c>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	4a16      	ldr	r2, [pc, #88]	@ (801150c <xPortStartScheduler+0x13c>)
 80114b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80114b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80114b8:	4b14      	ldr	r3, [pc, #80]	@ (801150c <xPortStartScheduler+0x13c>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	4a13      	ldr	r2, [pc, #76]	@ (801150c <xPortStartScheduler+0x13c>)
 80114be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80114c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80114c4:	f000 f8da 	bl	801167c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80114c8:	4b11      	ldr	r3, [pc, #68]	@ (8011510 <xPortStartScheduler+0x140>)
 80114ca:	2200      	movs	r2, #0
 80114cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80114ce:	f000 f8f9 	bl	80116c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80114d2:	4b10      	ldr	r3, [pc, #64]	@ (8011514 <xPortStartScheduler+0x144>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	4a0f      	ldr	r2, [pc, #60]	@ (8011514 <xPortStartScheduler+0x144>)
 80114d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80114dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80114de:	f7ff ff63 	bl	80113a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80114e2:	f7ff fbfd 	bl	8010ce0 <vTaskSwitchContext>
	prvTaskExitError();
 80114e6:	f7ff ff1b 	bl	8011320 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80114ea:	2300      	movs	r3, #0
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3718      	adds	r7, #24
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	e000ed00 	.word	0xe000ed00
 80114f8:	410fc271 	.word	0x410fc271
 80114fc:	410fc270 	.word	0x410fc270
 8011500:	e000e400 	.word	0xe000e400
 8011504:	20000618 	.word	0x20000618
 8011508:	2000061c 	.word	0x2000061c
 801150c:	e000ed20 	.word	0xe000ed20
 8011510:	20000014 	.word	0x20000014
 8011514:	e000ef34 	.word	0xe000ef34

08011518 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011518:	b480      	push	{r7}
 801151a:	b083      	sub	sp, #12
 801151c:	af00      	add	r7, sp, #0
	__asm volatile
 801151e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011522:	f383 8811 	msr	BASEPRI, r3
 8011526:	f3bf 8f6f 	isb	sy
 801152a:	f3bf 8f4f 	dsb	sy
 801152e:	607b      	str	r3, [r7, #4]
}
 8011530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011532:	4b10      	ldr	r3, [pc, #64]	@ (8011574 <vPortEnterCritical+0x5c>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	3301      	adds	r3, #1
 8011538:	4a0e      	ldr	r2, [pc, #56]	@ (8011574 <vPortEnterCritical+0x5c>)
 801153a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801153c:	4b0d      	ldr	r3, [pc, #52]	@ (8011574 <vPortEnterCritical+0x5c>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b01      	cmp	r3, #1
 8011542:	d110      	bne.n	8011566 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011544:	4b0c      	ldr	r3, [pc, #48]	@ (8011578 <vPortEnterCritical+0x60>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	b2db      	uxtb	r3, r3
 801154a:	2b00      	cmp	r3, #0
 801154c:	d00b      	beq.n	8011566 <vPortEnterCritical+0x4e>
	__asm volatile
 801154e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011552:	f383 8811 	msr	BASEPRI, r3
 8011556:	f3bf 8f6f 	isb	sy
 801155a:	f3bf 8f4f 	dsb	sy
 801155e:	603b      	str	r3, [r7, #0]
}
 8011560:	bf00      	nop
 8011562:	bf00      	nop
 8011564:	e7fd      	b.n	8011562 <vPortEnterCritical+0x4a>
	}
}
 8011566:	bf00      	nop
 8011568:	370c      	adds	r7, #12
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr
 8011572:	bf00      	nop
 8011574:	20000014 	.word	0x20000014
 8011578:	e000ed04 	.word	0xe000ed04

0801157c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011582:	4b12      	ldr	r3, [pc, #72]	@ (80115cc <vPortExitCritical+0x50>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d10b      	bne.n	80115a2 <vPortExitCritical+0x26>
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	607b      	str	r3, [r7, #4]
}
 801159c:	bf00      	nop
 801159e:	bf00      	nop
 80115a0:	e7fd      	b.n	801159e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80115a2:	4b0a      	ldr	r3, [pc, #40]	@ (80115cc <vPortExitCritical+0x50>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	3b01      	subs	r3, #1
 80115a8:	4a08      	ldr	r2, [pc, #32]	@ (80115cc <vPortExitCritical+0x50>)
 80115aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80115ac:	4b07      	ldr	r3, [pc, #28]	@ (80115cc <vPortExitCritical+0x50>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d105      	bne.n	80115c0 <vPortExitCritical+0x44>
 80115b4:	2300      	movs	r3, #0
 80115b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	f383 8811 	msr	BASEPRI, r3
}
 80115be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80115c0:	bf00      	nop
 80115c2:	370c      	adds	r7, #12
 80115c4:	46bd      	mov	sp, r7
 80115c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ca:	4770      	bx	lr
 80115cc:	20000014 	.word	0x20000014

080115d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80115d0:	f3ef 8009 	mrs	r0, PSP
 80115d4:	f3bf 8f6f 	isb	sy
 80115d8:	4b15      	ldr	r3, [pc, #84]	@ (8011630 <pxCurrentTCBConst>)
 80115da:	681a      	ldr	r2, [r3, #0]
 80115dc:	f01e 0f10 	tst.w	lr, #16
 80115e0:	bf08      	it	eq
 80115e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80115e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ea:	6010      	str	r0, [r2, #0]
 80115ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80115f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80115f4:	f380 8811 	msr	BASEPRI, r0
 80115f8:	f3bf 8f4f 	dsb	sy
 80115fc:	f3bf 8f6f 	isb	sy
 8011600:	f7ff fb6e 	bl	8010ce0 <vTaskSwitchContext>
 8011604:	f04f 0000 	mov.w	r0, #0
 8011608:	f380 8811 	msr	BASEPRI, r0
 801160c:	bc09      	pop	{r0, r3}
 801160e:	6819      	ldr	r1, [r3, #0]
 8011610:	6808      	ldr	r0, [r1, #0]
 8011612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011616:	f01e 0f10 	tst.w	lr, #16
 801161a:	bf08      	it	eq
 801161c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011620:	f380 8809 	msr	PSP, r0
 8011624:	f3bf 8f6f 	isb	sy
 8011628:	4770      	bx	lr
 801162a:	bf00      	nop
 801162c:	f3af 8000 	nop.w

08011630 <pxCurrentTCBConst>:
 8011630:	200004ec 	.word	0x200004ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011634:	bf00      	nop
 8011636:	bf00      	nop

08011638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
	__asm volatile
 801163e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011642:	f383 8811 	msr	BASEPRI, r3
 8011646:	f3bf 8f6f 	isb	sy
 801164a:	f3bf 8f4f 	dsb	sy
 801164e:	607b      	str	r3, [r7, #4]
}
 8011650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011652:	f7ff fa8b 	bl	8010b6c <xTaskIncrementTick>
 8011656:	4603      	mov	r3, r0
 8011658:	2b00      	cmp	r3, #0
 801165a:	d003      	beq.n	8011664 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801165c:	4b06      	ldr	r3, [pc, #24]	@ (8011678 <SysTick_Handler+0x40>)
 801165e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011662:	601a      	str	r2, [r3, #0]
 8011664:	2300      	movs	r3, #0
 8011666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	f383 8811 	msr	BASEPRI, r3
}
 801166e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011670:	bf00      	nop
 8011672:	3708      	adds	r7, #8
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}
 8011678:	e000ed04 	.word	0xe000ed04

0801167c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801167c:	b480      	push	{r7}
 801167e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011680:	4b0b      	ldr	r3, [pc, #44]	@ (80116b0 <vPortSetupTimerInterrupt+0x34>)
 8011682:	2200      	movs	r2, #0
 8011684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011686:	4b0b      	ldr	r3, [pc, #44]	@ (80116b4 <vPortSetupTimerInterrupt+0x38>)
 8011688:	2200      	movs	r2, #0
 801168a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801168c:	4b0a      	ldr	r3, [pc, #40]	@ (80116b8 <vPortSetupTimerInterrupt+0x3c>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4a0a      	ldr	r2, [pc, #40]	@ (80116bc <vPortSetupTimerInterrupt+0x40>)
 8011692:	fba2 2303 	umull	r2, r3, r2, r3
 8011696:	099b      	lsrs	r3, r3, #6
 8011698:	4a09      	ldr	r2, [pc, #36]	@ (80116c0 <vPortSetupTimerInterrupt+0x44>)
 801169a:	3b01      	subs	r3, #1
 801169c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801169e:	4b04      	ldr	r3, [pc, #16]	@ (80116b0 <vPortSetupTimerInterrupt+0x34>)
 80116a0:	2207      	movs	r2, #7
 80116a2:	601a      	str	r2, [r3, #0]
}
 80116a4:	bf00      	nop
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr
 80116ae:	bf00      	nop
 80116b0:	e000e010 	.word	0xe000e010
 80116b4:	e000e018 	.word	0xe000e018
 80116b8:	20000008 	.word	0x20000008
 80116bc:	10624dd3 	.word	0x10624dd3
 80116c0:	e000e014 	.word	0xe000e014

080116c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80116c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80116d4 <vPortEnableVFP+0x10>
 80116c8:	6801      	ldr	r1, [r0, #0]
 80116ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80116ce:	6001      	str	r1, [r0, #0]
 80116d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80116d2:	bf00      	nop
 80116d4:	e000ed88 	.word	0xe000ed88

080116d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80116d8:	b480      	push	{r7}
 80116da:	b085      	sub	sp, #20
 80116dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80116de:	f3ef 8305 	mrs	r3, IPSR
 80116e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	2b0f      	cmp	r3, #15
 80116e8:	d915      	bls.n	8011716 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80116ea:	4a18      	ldr	r2, [pc, #96]	@ (801174c <vPortValidateInterruptPriority+0x74>)
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	4413      	add	r3, r2
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80116f4:	4b16      	ldr	r3, [pc, #88]	@ (8011750 <vPortValidateInterruptPriority+0x78>)
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	7afa      	ldrb	r2, [r7, #11]
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d20b      	bcs.n	8011716 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80116fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011702:	f383 8811 	msr	BASEPRI, r3
 8011706:	f3bf 8f6f 	isb	sy
 801170a:	f3bf 8f4f 	dsb	sy
 801170e:	607b      	str	r3, [r7, #4]
}
 8011710:	bf00      	nop
 8011712:	bf00      	nop
 8011714:	e7fd      	b.n	8011712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011716:	4b0f      	ldr	r3, [pc, #60]	@ (8011754 <vPortValidateInterruptPriority+0x7c>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801171e:	4b0e      	ldr	r3, [pc, #56]	@ (8011758 <vPortValidateInterruptPriority+0x80>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	429a      	cmp	r2, r3
 8011724:	d90b      	bls.n	801173e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8011726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801172a:	f383 8811 	msr	BASEPRI, r3
 801172e:	f3bf 8f6f 	isb	sy
 8011732:	f3bf 8f4f 	dsb	sy
 8011736:	603b      	str	r3, [r7, #0]
}
 8011738:	bf00      	nop
 801173a:	bf00      	nop
 801173c:	e7fd      	b.n	801173a <vPortValidateInterruptPriority+0x62>
	}
 801173e:	bf00      	nop
 8011740:	3714      	adds	r7, #20
 8011742:	46bd      	mov	sp, r7
 8011744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011748:	4770      	bx	lr
 801174a:	bf00      	nop
 801174c:	e000e3f0 	.word	0xe000e3f0
 8011750:	20000618 	.word	0x20000618
 8011754:	e000ed0c 	.word	0xe000ed0c
 8011758:	2000061c 	.word	0x2000061c

0801175c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b08a      	sub	sp, #40	@ 0x28
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011764:	2300      	movs	r3, #0
 8011766:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011768:	f7ff f954 	bl	8010a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801176c:	4b5c      	ldr	r3, [pc, #368]	@ (80118e0 <pvPortMalloc+0x184>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	2b00      	cmp	r3, #0
 8011772:	d101      	bne.n	8011778 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011774:	f000 f924 	bl	80119c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011778:	4b5a      	ldr	r3, [pc, #360]	@ (80118e4 <pvPortMalloc+0x188>)
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	4013      	ands	r3, r2
 8011780:	2b00      	cmp	r3, #0
 8011782:	f040 8095 	bne.w	80118b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d01e      	beq.n	80117ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801178c:	2208      	movs	r2, #8
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	4413      	add	r3, r2
 8011792:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	f003 0307 	and.w	r3, r3, #7
 801179a:	2b00      	cmp	r3, #0
 801179c:	d015      	beq.n	80117ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f023 0307 	bic.w	r3, r3, #7
 80117a4:	3308      	adds	r3, #8
 80117a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f003 0307 	and.w	r3, r3, #7
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d00b      	beq.n	80117ca <pvPortMalloc+0x6e>
	__asm volatile
 80117b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80117b6:	f383 8811 	msr	BASEPRI, r3
 80117ba:	f3bf 8f6f 	isb	sy
 80117be:	f3bf 8f4f 	dsb	sy
 80117c2:	617b      	str	r3, [r7, #20]
}
 80117c4:	bf00      	nop
 80117c6:	bf00      	nop
 80117c8:	e7fd      	b.n	80117c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d06f      	beq.n	80118b0 <pvPortMalloc+0x154>
 80117d0:	4b45      	ldr	r3, [pc, #276]	@ (80118e8 <pvPortMalloc+0x18c>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d86a      	bhi.n	80118b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80117da:	4b44      	ldr	r3, [pc, #272]	@ (80118ec <pvPortMalloc+0x190>)
 80117dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80117de:	4b43      	ldr	r3, [pc, #268]	@ (80118ec <pvPortMalloc+0x190>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80117e4:	e004      	b.n	80117f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80117e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80117ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80117f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d903      	bls.n	8011802 <pvPortMalloc+0xa6>
 80117fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1f1      	bne.n	80117e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011802:	4b37      	ldr	r3, [pc, #220]	@ (80118e0 <pvPortMalloc+0x184>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011808:	429a      	cmp	r2, r3
 801180a:	d051      	beq.n	80118b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801180c:	6a3b      	ldr	r3, [r7, #32]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	2208      	movs	r2, #8
 8011812:	4413      	add	r3, r2
 8011814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011818:	681a      	ldr	r2, [r3, #0]
 801181a:	6a3b      	ldr	r3, [r7, #32]
 801181c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011820:	685a      	ldr	r2, [r3, #4]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	1ad2      	subs	r2, r2, r3
 8011826:	2308      	movs	r3, #8
 8011828:	005b      	lsls	r3, r3, #1
 801182a:	429a      	cmp	r2, r3
 801182c:	d920      	bls.n	8011870 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801182e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	4413      	add	r3, r2
 8011834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	f003 0307 	and.w	r3, r3, #7
 801183c:	2b00      	cmp	r3, #0
 801183e:	d00b      	beq.n	8011858 <pvPortMalloc+0xfc>
	__asm volatile
 8011840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011844:	f383 8811 	msr	BASEPRI, r3
 8011848:	f3bf 8f6f 	isb	sy
 801184c:	f3bf 8f4f 	dsb	sy
 8011850:	613b      	str	r3, [r7, #16]
}
 8011852:	bf00      	nop
 8011854:	bf00      	nop
 8011856:	e7fd      	b.n	8011854 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801185a:	685a      	ldr	r2, [r3, #4]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	1ad2      	subs	r2, r2, r3
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801186a:	69b8      	ldr	r0, [r7, #24]
 801186c:	f000 f90a 	bl	8011a84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011870:	4b1d      	ldr	r3, [pc, #116]	@ (80118e8 <pvPortMalloc+0x18c>)
 8011872:	681a      	ldr	r2, [r3, #0]
 8011874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	1ad3      	subs	r3, r2, r3
 801187a:	4a1b      	ldr	r2, [pc, #108]	@ (80118e8 <pvPortMalloc+0x18c>)
 801187c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801187e:	4b1a      	ldr	r3, [pc, #104]	@ (80118e8 <pvPortMalloc+0x18c>)
 8011880:	681a      	ldr	r2, [r3, #0]
 8011882:	4b1b      	ldr	r3, [pc, #108]	@ (80118f0 <pvPortMalloc+0x194>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	429a      	cmp	r2, r3
 8011888:	d203      	bcs.n	8011892 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801188a:	4b17      	ldr	r3, [pc, #92]	@ (80118e8 <pvPortMalloc+0x18c>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	4a18      	ldr	r2, [pc, #96]	@ (80118f0 <pvPortMalloc+0x194>)
 8011890:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011894:	685a      	ldr	r2, [r3, #4]
 8011896:	4b13      	ldr	r3, [pc, #76]	@ (80118e4 <pvPortMalloc+0x188>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	431a      	orrs	r2, r3
 801189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801189e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80118a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118a2:	2200      	movs	r2, #0
 80118a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80118a6:	4b13      	ldr	r3, [pc, #76]	@ (80118f4 <pvPortMalloc+0x198>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	3301      	adds	r3, #1
 80118ac:	4a11      	ldr	r2, [pc, #68]	@ (80118f4 <pvPortMalloc+0x198>)
 80118ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80118b0:	f7ff f8be 	bl	8010a30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80118b4:	69fb      	ldr	r3, [r7, #28]
 80118b6:	f003 0307 	and.w	r3, r3, #7
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00b      	beq.n	80118d6 <pvPortMalloc+0x17a>
	__asm volatile
 80118be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118c2:	f383 8811 	msr	BASEPRI, r3
 80118c6:	f3bf 8f6f 	isb	sy
 80118ca:	f3bf 8f4f 	dsb	sy
 80118ce:	60fb      	str	r3, [r7, #12]
}
 80118d0:	bf00      	nop
 80118d2:	bf00      	nop
 80118d4:	e7fd      	b.n	80118d2 <pvPortMalloc+0x176>
	return pvReturn;
 80118d6:	69fb      	ldr	r3, [r7, #28]
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3728      	adds	r7, #40	@ 0x28
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}
 80118e0:	20004228 	.word	0x20004228
 80118e4:	2000423c 	.word	0x2000423c
 80118e8:	2000422c 	.word	0x2000422c
 80118ec:	20004220 	.word	0x20004220
 80118f0:	20004230 	.word	0x20004230
 80118f4:	20004234 	.word	0x20004234

080118f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b086      	sub	sp, #24
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d04f      	beq.n	80119aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801190a:	2308      	movs	r3, #8
 801190c:	425b      	negs	r3, r3
 801190e:	697a      	ldr	r2, [r7, #20]
 8011910:	4413      	add	r3, r2
 8011912:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011914:	697b      	ldr	r3, [r7, #20]
 8011916:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	685a      	ldr	r2, [r3, #4]
 801191c:	4b25      	ldr	r3, [pc, #148]	@ (80119b4 <vPortFree+0xbc>)
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	4013      	ands	r3, r2
 8011922:	2b00      	cmp	r3, #0
 8011924:	d10b      	bne.n	801193e <vPortFree+0x46>
	__asm volatile
 8011926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801192a:	f383 8811 	msr	BASEPRI, r3
 801192e:	f3bf 8f6f 	isb	sy
 8011932:	f3bf 8f4f 	dsb	sy
 8011936:	60fb      	str	r3, [r7, #12]
}
 8011938:	bf00      	nop
 801193a:	bf00      	nop
 801193c:	e7fd      	b.n	801193a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801193e:	693b      	ldr	r3, [r7, #16]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d00b      	beq.n	801195e <vPortFree+0x66>
	__asm volatile
 8011946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801194a:	f383 8811 	msr	BASEPRI, r3
 801194e:	f3bf 8f6f 	isb	sy
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	60bb      	str	r3, [r7, #8]
}
 8011958:	bf00      	nop
 801195a:	bf00      	nop
 801195c:	e7fd      	b.n	801195a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	685a      	ldr	r2, [r3, #4]
 8011962:	4b14      	ldr	r3, [pc, #80]	@ (80119b4 <vPortFree+0xbc>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	4013      	ands	r3, r2
 8011968:	2b00      	cmp	r3, #0
 801196a:	d01e      	beq.n	80119aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d11a      	bne.n	80119aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011974:	693b      	ldr	r3, [r7, #16]
 8011976:	685a      	ldr	r2, [r3, #4]
 8011978:	4b0e      	ldr	r3, [pc, #56]	@ (80119b4 <vPortFree+0xbc>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	43db      	mvns	r3, r3
 801197e:	401a      	ands	r2, r3
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011984:	f7ff f846 	bl	8010a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	685a      	ldr	r2, [r3, #4]
 801198c:	4b0a      	ldr	r3, [pc, #40]	@ (80119b8 <vPortFree+0xc0>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	4413      	add	r3, r2
 8011992:	4a09      	ldr	r2, [pc, #36]	@ (80119b8 <vPortFree+0xc0>)
 8011994:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011996:	6938      	ldr	r0, [r7, #16]
 8011998:	f000 f874 	bl	8011a84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801199c:	4b07      	ldr	r3, [pc, #28]	@ (80119bc <vPortFree+0xc4>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	3301      	adds	r3, #1
 80119a2:	4a06      	ldr	r2, [pc, #24]	@ (80119bc <vPortFree+0xc4>)
 80119a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80119a6:	f7ff f843 	bl	8010a30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80119aa:	bf00      	nop
 80119ac:	3718      	adds	r7, #24
 80119ae:	46bd      	mov	sp, r7
 80119b0:	bd80      	pop	{r7, pc}
 80119b2:	bf00      	nop
 80119b4:	2000423c 	.word	0x2000423c
 80119b8:	2000422c 	.word	0x2000422c
 80119bc:	20004238 	.word	0x20004238

080119c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80119c0:	b480      	push	{r7}
 80119c2:	b085      	sub	sp, #20
 80119c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80119c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80119ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80119cc:	4b27      	ldr	r3, [pc, #156]	@ (8011a6c <prvHeapInit+0xac>)
 80119ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	f003 0307 	and.w	r3, r3, #7
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d00c      	beq.n	80119f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	3307      	adds	r3, #7
 80119de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	f023 0307 	bic.w	r3, r3, #7
 80119e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80119e8:	68ba      	ldr	r2, [r7, #8]
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	1ad3      	subs	r3, r2, r3
 80119ee:	4a1f      	ldr	r2, [pc, #124]	@ (8011a6c <prvHeapInit+0xac>)
 80119f0:	4413      	add	r3, r2
 80119f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80119f8:	4a1d      	ldr	r2, [pc, #116]	@ (8011a70 <prvHeapInit+0xb0>)
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80119fe:	4b1c      	ldr	r3, [pc, #112]	@ (8011a70 <prvHeapInit+0xb0>)
 8011a00:	2200      	movs	r2, #0
 8011a02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	68ba      	ldr	r2, [r7, #8]
 8011a08:	4413      	add	r3, r2
 8011a0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011a0c:	2208      	movs	r2, #8
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	1a9b      	subs	r3, r3, r2
 8011a12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f023 0307 	bic.w	r3, r3, #7
 8011a1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	4a15      	ldr	r2, [pc, #84]	@ (8011a74 <prvHeapInit+0xb4>)
 8011a20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011a22:	4b14      	ldr	r3, [pc, #80]	@ (8011a74 <prvHeapInit+0xb4>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2200      	movs	r2, #0
 8011a28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011a2a:	4b12      	ldr	r3, [pc, #72]	@ (8011a74 <prvHeapInit+0xb4>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2200      	movs	r2, #0
 8011a30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	68fa      	ldr	r2, [r7, #12]
 8011a3a:	1ad2      	subs	r2, r2, r3
 8011a3c:	683b      	ldr	r3, [r7, #0]
 8011a3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011a40:	4b0c      	ldr	r3, [pc, #48]	@ (8011a74 <prvHeapInit+0xb4>)
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	685b      	ldr	r3, [r3, #4]
 8011a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8011a78 <prvHeapInit+0xb8>)
 8011a4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	685b      	ldr	r3, [r3, #4]
 8011a54:	4a09      	ldr	r2, [pc, #36]	@ (8011a7c <prvHeapInit+0xbc>)
 8011a56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011a58:	4b09      	ldr	r3, [pc, #36]	@ (8011a80 <prvHeapInit+0xc0>)
 8011a5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011a5e:	601a      	str	r2, [r3, #0]
}
 8011a60:	bf00      	nop
 8011a62:	3714      	adds	r7, #20
 8011a64:	46bd      	mov	sp, r7
 8011a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6a:	4770      	bx	lr
 8011a6c:	20000620 	.word	0x20000620
 8011a70:	20004220 	.word	0x20004220
 8011a74:	20004228 	.word	0x20004228
 8011a78:	20004230 	.word	0x20004230
 8011a7c:	2000422c 	.word	0x2000422c
 8011a80:	2000423c 	.word	0x2000423c

08011a84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011a84:	b480      	push	{r7}
 8011a86:	b085      	sub	sp, #20
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011a8c:	4b28      	ldr	r3, [pc, #160]	@ (8011b30 <prvInsertBlockIntoFreeList+0xac>)
 8011a8e:	60fb      	str	r3, [r7, #12]
 8011a90:	e002      	b.n	8011a98 <prvInsertBlockIntoFreeList+0x14>
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	60fb      	str	r3, [r7, #12]
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	687a      	ldr	r2, [r7, #4]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d8f7      	bhi.n	8011a92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	68ba      	ldr	r2, [r7, #8]
 8011aac:	4413      	add	r3, r2
 8011aae:	687a      	ldr	r2, [r7, #4]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d108      	bne.n	8011ac6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	685a      	ldr	r2, [r3, #4]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	685b      	ldr	r3, [r3, #4]
 8011abc:	441a      	add	r2, r3
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	441a      	add	r2, r3
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d118      	bne.n	8011b0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	681a      	ldr	r2, [r3, #0]
 8011ade:	4b15      	ldr	r3, [pc, #84]	@ (8011b34 <prvInsertBlockIntoFreeList+0xb0>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d00d      	beq.n	8011b02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	685a      	ldr	r2, [r3, #4]
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	441a      	add	r2, r3
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	601a      	str	r2, [r3, #0]
 8011b00:	e008      	b.n	8011b14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011b02:	4b0c      	ldr	r3, [pc, #48]	@ (8011b34 <prvInsertBlockIntoFreeList+0xb0>)
 8011b04:	681a      	ldr	r2, [r3, #0]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	601a      	str	r2, [r3, #0]
 8011b0a:	e003      	b.n	8011b14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011b14:	68fa      	ldr	r2, [r7, #12]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d002      	beq.n	8011b22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	687a      	ldr	r2, [r7, #4]
 8011b20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011b22:	bf00      	nop
 8011b24:	3714      	adds	r7, #20
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	20004220 	.word	0x20004220
 8011b34:	20004228 	.word	0x20004228

08011b38 <feof>:
 8011b38:	b538      	push	{r3, r4, r5, lr}
 8011b3a:	4b10      	ldr	r3, [pc, #64]	@ (8011b7c <feof+0x44>)
 8011b3c:	4604      	mov	r4, r0
 8011b3e:	6818      	ldr	r0, [r3, #0]
 8011b40:	b118      	cbz	r0, 8011b4a <feof+0x12>
 8011b42:	6a03      	ldr	r3, [r0, #32]
 8011b44:	b90b      	cbnz	r3, 8011b4a <feof+0x12>
 8011b46:	f000 f917 	bl	8011d78 <__sinit>
 8011b4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b4c:	07d8      	lsls	r0, r3, #31
 8011b4e:	d405      	bmi.n	8011b5c <feof+0x24>
 8011b50:	89a3      	ldrh	r3, [r4, #12]
 8011b52:	0599      	lsls	r1, r3, #22
 8011b54:	d402      	bmi.n	8011b5c <feof+0x24>
 8011b56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b58:	f000 fc91 	bl	801247e <__retarget_lock_acquire_recursive>
 8011b5c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011b5e:	89a5      	ldrh	r5, [r4, #12]
 8011b60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b64:	07d2      	lsls	r2, r2, #31
 8011b66:	f3c5 1540 	ubfx	r5, r5, #5, #1
 8011b6a:	d404      	bmi.n	8011b76 <feof+0x3e>
 8011b6c:	059b      	lsls	r3, r3, #22
 8011b6e:	d402      	bmi.n	8011b76 <feof+0x3e>
 8011b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011b72:	f000 fc85 	bl	8012480 <__retarget_lock_release_recursive>
 8011b76:	4628      	mov	r0, r5
 8011b78:	bd38      	pop	{r3, r4, r5, pc}
 8011b7a:	bf00      	nop
 8011b7c:	20000024 	.word	0x20000024

08011b80 <_fgets_r>:
 8011b80:	2a01      	cmp	r2, #1
 8011b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b86:	4681      	mov	r9, r0
 8011b88:	460e      	mov	r6, r1
 8011b8a:	4615      	mov	r5, r2
 8011b8c:	461c      	mov	r4, r3
 8011b8e:	dd21      	ble.n	8011bd4 <_fgets_r+0x54>
 8011b90:	b118      	cbz	r0, 8011b9a <_fgets_r+0x1a>
 8011b92:	6a03      	ldr	r3, [r0, #32]
 8011b94:	b90b      	cbnz	r3, 8011b9a <_fgets_r+0x1a>
 8011b96:	f000 f8ef 	bl	8011d78 <__sinit>
 8011b9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011b9c:	07db      	lsls	r3, r3, #31
 8011b9e:	d405      	bmi.n	8011bac <_fgets_r+0x2c>
 8011ba0:	89a3      	ldrh	r3, [r4, #12]
 8011ba2:	059f      	lsls	r7, r3, #22
 8011ba4:	d402      	bmi.n	8011bac <_fgets_r+0x2c>
 8011ba6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011ba8:	f000 fc69 	bl	801247e <__retarget_lock_acquire_recursive>
 8011bac:	3d01      	subs	r5, #1
 8011bae:	4637      	mov	r7, r6
 8011bb0:	6863      	ldr	r3, [r4, #4]
 8011bb2:	b99b      	cbnz	r3, 8011bdc <_fgets_r+0x5c>
 8011bb4:	4621      	mov	r1, r4
 8011bb6:	4648      	mov	r0, r9
 8011bb8:	f000 f992 	bl	8011ee0 <__srefill_r>
 8011bbc:	b168      	cbz	r0, 8011bda <_fgets_r+0x5a>
 8011bbe:	42b7      	cmp	r7, r6
 8011bc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011bc2:	d139      	bne.n	8011c38 <_fgets_r+0xb8>
 8011bc4:	07d8      	lsls	r0, r3, #31
 8011bc6:	d405      	bmi.n	8011bd4 <_fgets_r+0x54>
 8011bc8:	89a3      	ldrh	r3, [r4, #12]
 8011bca:	0599      	lsls	r1, r3, #22
 8011bcc:	d402      	bmi.n	8011bd4 <_fgets_r+0x54>
 8011bce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bd0:	f000 fc56 	bl	8012480 <__retarget_lock_release_recursive>
 8011bd4:	2000      	movs	r0, #0
 8011bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bda:	6863      	ldr	r3, [r4, #4]
 8011bdc:	f8d4 a000 	ldr.w	sl, [r4]
 8011be0:	42ab      	cmp	r3, r5
 8011be2:	bf28      	it	cs
 8011be4:	462b      	movcs	r3, r5
 8011be6:	461a      	mov	r2, r3
 8011be8:	210a      	movs	r1, #10
 8011bea:	4650      	mov	r0, sl
 8011bec:	4698      	mov	r8, r3
 8011bee:	f7fa fa27 	bl	800c040 <memchr>
 8011bf2:	6863      	ldr	r3, [r4, #4]
 8011bf4:	b188      	cbz	r0, 8011c1a <_fgets_r+0x9a>
 8011bf6:	3001      	adds	r0, #1
 8011bf8:	eba0 050a 	sub.w	r5, r0, sl
 8011bfc:	1b5b      	subs	r3, r3, r5
 8011bfe:	e9c4 0300 	strd	r0, r3, [r4]
 8011c02:	462a      	mov	r2, r5
 8011c04:	4651      	mov	r1, sl
 8011c06:	4638      	mov	r0, r7
 8011c08:	f000 fc3b 	bl	8012482 <memcpy>
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	557b      	strb	r3, [r7, r5]
 8011c10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c12:	07da      	lsls	r2, r3, #31
 8011c14:	d513      	bpl.n	8011c3e <_fgets_r+0xbe>
 8011c16:	4630      	mov	r0, r6
 8011c18:	e7dd      	b.n	8011bd6 <_fgets_r+0x56>
 8011c1a:	eba3 0308 	sub.w	r3, r3, r8
 8011c1e:	6063      	str	r3, [r4, #4]
 8011c20:	6823      	ldr	r3, [r4, #0]
 8011c22:	4443      	add	r3, r8
 8011c24:	4638      	mov	r0, r7
 8011c26:	6023      	str	r3, [r4, #0]
 8011c28:	4642      	mov	r2, r8
 8011c2a:	4651      	mov	r1, sl
 8011c2c:	f000 fc29 	bl	8012482 <memcpy>
 8011c30:	ebb5 0508 	subs.w	r5, r5, r8
 8011c34:	4447      	add	r7, r8
 8011c36:	d1bb      	bne.n	8011bb0 <_fgets_r+0x30>
 8011c38:	2300      	movs	r3, #0
 8011c3a:	703b      	strb	r3, [r7, #0]
 8011c3c:	e7e8      	b.n	8011c10 <_fgets_r+0x90>
 8011c3e:	89a3      	ldrh	r3, [r4, #12]
 8011c40:	059b      	lsls	r3, r3, #22
 8011c42:	d4e8      	bmi.n	8011c16 <_fgets_r+0x96>
 8011c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c46:	f000 fc1b 	bl	8012480 <__retarget_lock_release_recursive>
 8011c4a:	e7e4      	b.n	8011c16 <_fgets_r+0x96>

08011c4c <fgets>:
 8011c4c:	4613      	mov	r3, r2
 8011c4e:	460a      	mov	r2, r1
 8011c50:	4601      	mov	r1, r0
 8011c52:	4802      	ldr	r0, [pc, #8]	@ (8011c5c <fgets+0x10>)
 8011c54:	6800      	ldr	r0, [r0, #0]
 8011c56:	f7ff bf93 	b.w	8011b80 <_fgets_r>
 8011c5a:	bf00      	nop
 8011c5c:	20000024 	.word	0x20000024

08011c60 <std>:
 8011c60:	2300      	movs	r3, #0
 8011c62:	b510      	push	{r4, lr}
 8011c64:	4604      	mov	r4, r0
 8011c66:	e9c0 3300 	strd	r3, r3, [r0]
 8011c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c6e:	6083      	str	r3, [r0, #8]
 8011c70:	8181      	strh	r1, [r0, #12]
 8011c72:	6643      	str	r3, [r0, #100]	@ 0x64
 8011c74:	81c2      	strh	r2, [r0, #14]
 8011c76:	6183      	str	r3, [r0, #24]
 8011c78:	4619      	mov	r1, r3
 8011c7a:	2208      	movs	r2, #8
 8011c7c:	305c      	adds	r0, #92	@ 0x5c
 8011c7e:	f000 fb2f 	bl	80122e0 <memset>
 8011c82:	4b0d      	ldr	r3, [pc, #52]	@ (8011cb8 <std+0x58>)
 8011c84:	6263      	str	r3, [r4, #36]	@ 0x24
 8011c86:	4b0d      	ldr	r3, [pc, #52]	@ (8011cbc <std+0x5c>)
 8011c88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8011cc0 <std+0x60>)
 8011c8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8011cc4 <std+0x64>)
 8011c90:	6323      	str	r3, [r4, #48]	@ 0x30
 8011c92:	4b0d      	ldr	r3, [pc, #52]	@ (8011cc8 <std+0x68>)
 8011c94:	6224      	str	r4, [r4, #32]
 8011c96:	429c      	cmp	r4, r3
 8011c98:	d006      	beq.n	8011ca8 <std+0x48>
 8011c9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011c9e:	4294      	cmp	r4, r2
 8011ca0:	d002      	beq.n	8011ca8 <std+0x48>
 8011ca2:	33d0      	adds	r3, #208	@ 0xd0
 8011ca4:	429c      	cmp	r4, r3
 8011ca6:	d105      	bne.n	8011cb4 <std+0x54>
 8011ca8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cb0:	f000 bbe4 	b.w	801247c <__retarget_lock_init_recursive>
 8011cb4:	bd10      	pop	{r4, pc}
 8011cb6:	bf00      	nop
 8011cb8:	08012131 	.word	0x08012131
 8011cbc:	08012153 	.word	0x08012153
 8011cc0:	0801218b 	.word	0x0801218b
 8011cc4:	080121af 	.word	0x080121af
 8011cc8:	20004240 	.word	0x20004240

08011ccc <stdio_exit_handler>:
 8011ccc:	4a02      	ldr	r2, [pc, #8]	@ (8011cd8 <stdio_exit_handler+0xc>)
 8011cce:	4903      	ldr	r1, [pc, #12]	@ (8011cdc <stdio_exit_handler+0x10>)
 8011cd0:	4803      	ldr	r0, [pc, #12]	@ (8011ce0 <stdio_exit_handler+0x14>)
 8011cd2:	f000 b869 	b.w	8011da8 <_fwalk_sglue>
 8011cd6:	bf00      	nop
 8011cd8:	20000018 	.word	0x20000018
 8011cdc:	08012d49 	.word	0x08012d49
 8011ce0:	20000028 	.word	0x20000028

08011ce4 <cleanup_stdio>:
 8011ce4:	6841      	ldr	r1, [r0, #4]
 8011ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8011d18 <cleanup_stdio+0x34>)
 8011ce8:	4299      	cmp	r1, r3
 8011cea:	b510      	push	{r4, lr}
 8011cec:	4604      	mov	r4, r0
 8011cee:	d001      	beq.n	8011cf4 <cleanup_stdio+0x10>
 8011cf0:	f001 f82a 	bl	8012d48 <_fflush_r>
 8011cf4:	68a1      	ldr	r1, [r4, #8]
 8011cf6:	4b09      	ldr	r3, [pc, #36]	@ (8011d1c <cleanup_stdio+0x38>)
 8011cf8:	4299      	cmp	r1, r3
 8011cfa:	d002      	beq.n	8011d02 <cleanup_stdio+0x1e>
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	f001 f823 	bl	8012d48 <_fflush_r>
 8011d02:	68e1      	ldr	r1, [r4, #12]
 8011d04:	4b06      	ldr	r3, [pc, #24]	@ (8011d20 <cleanup_stdio+0x3c>)
 8011d06:	4299      	cmp	r1, r3
 8011d08:	d004      	beq.n	8011d14 <cleanup_stdio+0x30>
 8011d0a:	4620      	mov	r0, r4
 8011d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d10:	f001 b81a 	b.w	8012d48 <_fflush_r>
 8011d14:	bd10      	pop	{r4, pc}
 8011d16:	bf00      	nop
 8011d18:	20004240 	.word	0x20004240
 8011d1c:	200042a8 	.word	0x200042a8
 8011d20:	20004310 	.word	0x20004310

08011d24 <global_stdio_init.part.0>:
 8011d24:	b510      	push	{r4, lr}
 8011d26:	4b0b      	ldr	r3, [pc, #44]	@ (8011d54 <global_stdio_init.part.0+0x30>)
 8011d28:	4c0b      	ldr	r4, [pc, #44]	@ (8011d58 <global_stdio_init.part.0+0x34>)
 8011d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8011d5c <global_stdio_init.part.0+0x38>)
 8011d2c:	601a      	str	r2, [r3, #0]
 8011d2e:	4620      	mov	r0, r4
 8011d30:	2200      	movs	r2, #0
 8011d32:	2104      	movs	r1, #4
 8011d34:	f7ff ff94 	bl	8011c60 <std>
 8011d38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011d3c:	2201      	movs	r2, #1
 8011d3e:	2109      	movs	r1, #9
 8011d40:	f7ff ff8e 	bl	8011c60 <std>
 8011d44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011d48:	2202      	movs	r2, #2
 8011d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d4e:	2112      	movs	r1, #18
 8011d50:	f7ff bf86 	b.w	8011c60 <std>
 8011d54:	20004378 	.word	0x20004378
 8011d58:	20004240 	.word	0x20004240
 8011d5c:	08011ccd 	.word	0x08011ccd

08011d60 <__sfp_lock_acquire>:
 8011d60:	4801      	ldr	r0, [pc, #4]	@ (8011d68 <__sfp_lock_acquire+0x8>)
 8011d62:	f000 bb8c 	b.w	801247e <__retarget_lock_acquire_recursive>
 8011d66:	bf00      	nop
 8011d68:	20004381 	.word	0x20004381

08011d6c <__sfp_lock_release>:
 8011d6c:	4801      	ldr	r0, [pc, #4]	@ (8011d74 <__sfp_lock_release+0x8>)
 8011d6e:	f000 bb87 	b.w	8012480 <__retarget_lock_release_recursive>
 8011d72:	bf00      	nop
 8011d74:	20004381 	.word	0x20004381

08011d78 <__sinit>:
 8011d78:	b510      	push	{r4, lr}
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	f7ff fff0 	bl	8011d60 <__sfp_lock_acquire>
 8011d80:	6a23      	ldr	r3, [r4, #32]
 8011d82:	b11b      	cbz	r3, 8011d8c <__sinit+0x14>
 8011d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d88:	f7ff bff0 	b.w	8011d6c <__sfp_lock_release>
 8011d8c:	4b04      	ldr	r3, [pc, #16]	@ (8011da0 <__sinit+0x28>)
 8011d8e:	6223      	str	r3, [r4, #32]
 8011d90:	4b04      	ldr	r3, [pc, #16]	@ (8011da4 <__sinit+0x2c>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d1f5      	bne.n	8011d84 <__sinit+0xc>
 8011d98:	f7ff ffc4 	bl	8011d24 <global_stdio_init.part.0>
 8011d9c:	e7f2      	b.n	8011d84 <__sinit+0xc>
 8011d9e:	bf00      	nop
 8011da0:	08011ce5 	.word	0x08011ce5
 8011da4:	20004378 	.word	0x20004378

08011da8 <_fwalk_sglue>:
 8011da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dac:	4607      	mov	r7, r0
 8011dae:	4688      	mov	r8, r1
 8011db0:	4614      	mov	r4, r2
 8011db2:	2600      	movs	r6, #0
 8011db4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011db8:	f1b9 0901 	subs.w	r9, r9, #1
 8011dbc:	d505      	bpl.n	8011dca <_fwalk_sglue+0x22>
 8011dbe:	6824      	ldr	r4, [r4, #0]
 8011dc0:	2c00      	cmp	r4, #0
 8011dc2:	d1f7      	bne.n	8011db4 <_fwalk_sglue+0xc>
 8011dc4:	4630      	mov	r0, r6
 8011dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dca:	89ab      	ldrh	r3, [r5, #12]
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d907      	bls.n	8011de0 <_fwalk_sglue+0x38>
 8011dd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	d003      	beq.n	8011de0 <_fwalk_sglue+0x38>
 8011dd8:	4629      	mov	r1, r5
 8011dda:	4638      	mov	r0, r7
 8011ddc:	47c0      	blx	r8
 8011dde:	4306      	orrs	r6, r0
 8011de0:	3568      	adds	r5, #104	@ 0x68
 8011de2:	e7e9      	b.n	8011db8 <_fwalk_sglue+0x10>

08011de4 <iprintf>:
 8011de4:	b40f      	push	{r0, r1, r2, r3}
 8011de6:	b507      	push	{r0, r1, r2, lr}
 8011de8:	4906      	ldr	r1, [pc, #24]	@ (8011e04 <iprintf+0x20>)
 8011dea:	ab04      	add	r3, sp, #16
 8011dec:	6808      	ldr	r0, [r1, #0]
 8011dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8011df2:	6881      	ldr	r1, [r0, #8]
 8011df4:	9301      	str	r3, [sp, #4]
 8011df6:	f000 fc7d 	bl	80126f4 <_vfiprintf_r>
 8011dfa:	b003      	add	sp, #12
 8011dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e00:	b004      	add	sp, #16
 8011e02:	4770      	bx	lr
 8011e04:	20000024 	.word	0x20000024

08011e08 <_puts_r>:
 8011e08:	6a03      	ldr	r3, [r0, #32]
 8011e0a:	b570      	push	{r4, r5, r6, lr}
 8011e0c:	6884      	ldr	r4, [r0, #8]
 8011e0e:	4605      	mov	r5, r0
 8011e10:	460e      	mov	r6, r1
 8011e12:	b90b      	cbnz	r3, 8011e18 <_puts_r+0x10>
 8011e14:	f7ff ffb0 	bl	8011d78 <__sinit>
 8011e18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e1a:	07db      	lsls	r3, r3, #31
 8011e1c:	d405      	bmi.n	8011e2a <_puts_r+0x22>
 8011e1e:	89a3      	ldrh	r3, [r4, #12]
 8011e20:	0598      	lsls	r0, r3, #22
 8011e22:	d402      	bmi.n	8011e2a <_puts_r+0x22>
 8011e24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e26:	f000 fb2a 	bl	801247e <__retarget_lock_acquire_recursive>
 8011e2a:	89a3      	ldrh	r3, [r4, #12]
 8011e2c:	0719      	lsls	r1, r3, #28
 8011e2e:	d502      	bpl.n	8011e36 <_puts_r+0x2e>
 8011e30:	6923      	ldr	r3, [r4, #16]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d135      	bne.n	8011ea2 <_puts_r+0x9a>
 8011e36:	4621      	mov	r1, r4
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f000 f9fb 	bl	8012234 <__swsetup_r>
 8011e3e:	b380      	cbz	r0, 8011ea2 <_puts_r+0x9a>
 8011e40:	f04f 35ff 	mov.w	r5, #4294967295
 8011e44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011e46:	07da      	lsls	r2, r3, #31
 8011e48:	d405      	bmi.n	8011e56 <_puts_r+0x4e>
 8011e4a:	89a3      	ldrh	r3, [r4, #12]
 8011e4c:	059b      	lsls	r3, r3, #22
 8011e4e:	d402      	bmi.n	8011e56 <_puts_r+0x4e>
 8011e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011e52:	f000 fb15 	bl	8012480 <__retarget_lock_release_recursive>
 8011e56:	4628      	mov	r0, r5
 8011e58:	bd70      	pop	{r4, r5, r6, pc}
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	da04      	bge.n	8011e68 <_puts_r+0x60>
 8011e5e:	69a2      	ldr	r2, [r4, #24]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	dc17      	bgt.n	8011e94 <_puts_r+0x8c>
 8011e64:	290a      	cmp	r1, #10
 8011e66:	d015      	beq.n	8011e94 <_puts_r+0x8c>
 8011e68:	6823      	ldr	r3, [r4, #0]
 8011e6a:	1c5a      	adds	r2, r3, #1
 8011e6c:	6022      	str	r2, [r4, #0]
 8011e6e:	7019      	strb	r1, [r3, #0]
 8011e70:	68a3      	ldr	r3, [r4, #8]
 8011e72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e76:	3b01      	subs	r3, #1
 8011e78:	60a3      	str	r3, [r4, #8]
 8011e7a:	2900      	cmp	r1, #0
 8011e7c:	d1ed      	bne.n	8011e5a <_puts_r+0x52>
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	da11      	bge.n	8011ea6 <_puts_r+0x9e>
 8011e82:	4622      	mov	r2, r4
 8011e84:	210a      	movs	r1, #10
 8011e86:	4628      	mov	r0, r5
 8011e88:	f000 f995 	bl	80121b6 <__swbuf_r>
 8011e8c:	3001      	adds	r0, #1
 8011e8e:	d0d7      	beq.n	8011e40 <_puts_r+0x38>
 8011e90:	250a      	movs	r5, #10
 8011e92:	e7d7      	b.n	8011e44 <_puts_r+0x3c>
 8011e94:	4622      	mov	r2, r4
 8011e96:	4628      	mov	r0, r5
 8011e98:	f000 f98d 	bl	80121b6 <__swbuf_r>
 8011e9c:	3001      	adds	r0, #1
 8011e9e:	d1e7      	bne.n	8011e70 <_puts_r+0x68>
 8011ea0:	e7ce      	b.n	8011e40 <_puts_r+0x38>
 8011ea2:	3e01      	subs	r6, #1
 8011ea4:	e7e4      	b.n	8011e70 <_puts_r+0x68>
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	1c5a      	adds	r2, r3, #1
 8011eaa:	6022      	str	r2, [r4, #0]
 8011eac:	220a      	movs	r2, #10
 8011eae:	701a      	strb	r2, [r3, #0]
 8011eb0:	e7ee      	b.n	8011e90 <_puts_r+0x88>
	...

08011eb4 <puts>:
 8011eb4:	4b02      	ldr	r3, [pc, #8]	@ (8011ec0 <puts+0xc>)
 8011eb6:	4601      	mov	r1, r0
 8011eb8:	6818      	ldr	r0, [r3, #0]
 8011eba:	f7ff bfa5 	b.w	8011e08 <_puts_r>
 8011ebe:	bf00      	nop
 8011ec0:	20000024 	.word	0x20000024

08011ec4 <lflush>:
 8011ec4:	898b      	ldrh	r3, [r1, #12]
 8011ec6:	f003 0309 	and.w	r3, r3, #9
 8011eca:	2b09      	cmp	r3, #9
 8011ecc:	d103      	bne.n	8011ed6 <lflush+0x12>
 8011ece:	4b03      	ldr	r3, [pc, #12]	@ (8011edc <lflush+0x18>)
 8011ed0:	6818      	ldr	r0, [r3, #0]
 8011ed2:	f000 bf39 	b.w	8012d48 <_fflush_r>
 8011ed6:	2000      	movs	r0, #0
 8011ed8:	4770      	bx	lr
 8011eda:	bf00      	nop
 8011edc:	20000024 	.word	0x20000024

08011ee0 <__srefill_r>:
 8011ee0:	b570      	push	{r4, r5, r6, lr}
 8011ee2:	460c      	mov	r4, r1
 8011ee4:	4605      	mov	r5, r0
 8011ee6:	b118      	cbz	r0, 8011ef0 <__srefill_r+0x10>
 8011ee8:	6a03      	ldr	r3, [r0, #32]
 8011eea:	b90b      	cbnz	r3, 8011ef0 <__srefill_r+0x10>
 8011eec:	f7ff ff44 	bl	8011d78 <__sinit>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	6063      	str	r3, [r4, #4]
 8011ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ef8:	069e      	lsls	r6, r3, #26
 8011efa:	d408      	bmi.n	8011f0e <__srefill_r+0x2e>
 8011efc:	0758      	lsls	r0, r3, #29
 8011efe:	d445      	bmi.n	8011f8c <__srefill_r+0xac>
 8011f00:	06d9      	lsls	r1, r3, #27
 8011f02:	d407      	bmi.n	8011f14 <__srefill_r+0x34>
 8011f04:	2209      	movs	r2, #9
 8011f06:	602a      	str	r2, [r5, #0]
 8011f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f0c:	81a3      	strh	r3, [r4, #12]
 8011f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8011f12:	bd70      	pop	{r4, r5, r6, pc}
 8011f14:	071a      	lsls	r2, r3, #28
 8011f16:	d50b      	bpl.n	8011f30 <__srefill_r+0x50>
 8011f18:	4621      	mov	r1, r4
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	f000 ff14 	bl	8012d48 <_fflush_r>
 8011f20:	2800      	cmp	r0, #0
 8011f22:	d1f4      	bne.n	8011f0e <__srefill_r+0x2e>
 8011f24:	89a3      	ldrh	r3, [r4, #12]
 8011f26:	60a0      	str	r0, [r4, #8]
 8011f28:	f023 0308 	bic.w	r3, r3, #8
 8011f2c:	81a3      	strh	r3, [r4, #12]
 8011f2e:	61a0      	str	r0, [r4, #24]
 8011f30:	89a3      	ldrh	r3, [r4, #12]
 8011f32:	f043 0304 	orr.w	r3, r3, #4
 8011f36:	81a3      	strh	r3, [r4, #12]
 8011f38:	6923      	ldr	r3, [r4, #16]
 8011f3a:	b91b      	cbnz	r3, 8011f44 <__srefill_r+0x64>
 8011f3c:	4621      	mov	r1, r4
 8011f3e:	4628      	mov	r0, r5
 8011f40:	f000 ff50 	bl	8012de4 <__smakebuf_r>
 8011f44:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8011f48:	07b3      	lsls	r3, r6, #30
 8011f4a:	d00f      	beq.n	8011f6c <__srefill_r+0x8c>
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8011fbc <__srefill_r+0xdc>)
 8011f50:	491b      	ldr	r1, [pc, #108]	@ (8011fc0 <__srefill_r+0xe0>)
 8011f52:	481c      	ldr	r0, [pc, #112]	@ (8011fc4 <__srefill_r+0xe4>)
 8011f54:	81a3      	strh	r3, [r4, #12]
 8011f56:	f7ff ff27 	bl	8011da8 <_fwalk_sglue>
 8011f5a:	81a6      	strh	r6, [r4, #12]
 8011f5c:	f006 0609 	and.w	r6, r6, #9
 8011f60:	2e09      	cmp	r6, #9
 8011f62:	d103      	bne.n	8011f6c <__srefill_r+0x8c>
 8011f64:	4621      	mov	r1, r4
 8011f66:	4628      	mov	r0, r5
 8011f68:	f000 fe6a 	bl	8012c40 <__sflush_r>
 8011f6c:	6922      	ldr	r2, [r4, #16]
 8011f6e:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8011f70:	6963      	ldr	r3, [r4, #20]
 8011f72:	6a21      	ldr	r1, [r4, #32]
 8011f74:	6022      	str	r2, [r4, #0]
 8011f76:	4628      	mov	r0, r5
 8011f78:	47b0      	blx	r6
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	6060      	str	r0, [r4, #4]
 8011f7e:	dc17      	bgt.n	8011fb0 <__srefill_r+0xd0>
 8011f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f84:	d116      	bne.n	8011fb4 <__srefill_r+0xd4>
 8011f86:	f043 0320 	orr.w	r3, r3, #32
 8011f8a:	e7bf      	b.n	8011f0c <__srefill_r+0x2c>
 8011f8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011f8e:	2900      	cmp	r1, #0
 8011f90:	d0d2      	beq.n	8011f38 <__srefill_r+0x58>
 8011f92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f96:	4299      	cmp	r1, r3
 8011f98:	d002      	beq.n	8011fa0 <__srefill_r+0xc0>
 8011f9a:	4628      	mov	r0, r5
 8011f9c:	f000 fa80 	bl	80124a0 <_free_r>
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	6363      	str	r3, [r4, #52]	@ 0x34
 8011fa4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011fa6:	6063      	str	r3, [r4, #4]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d0c5      	beq.n	8011f38 <__srefill_r+0x58>
 8011fac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011fae:	6023      	str	r3, [r4, #0]
 8011fb0:	2000      	movs	r0, #0
 8011fb2:	e7ae      	b.n	8011f12 <__srefill_r+0x32>
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	6062      	str	r2, [r4, #4]
 8011fb8:	e7a6      	b.n	8011f08 <__srefill_r+0x28>
 8011fba:	bf00      	nop
 8011fbc:	20000018 	.word	0x20000018
 8011fc0:	08011ec5 	.word	0x08011ec5
 8011fc4:	20000028 	.word	0x20000028

08011fc8 <setvbuf>:
 8011fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011fcc:	461d      	mov	r5, r3
 8011fce:	4b57      	ldr	r3, [pc, #348]	@ (801212c <setvbuf+0x164>)
 8011fd0:	681f      	ldr	r7, [r3, #0]
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	460e      	mov	r6, r1
 8011fd6:	4690      	mov	r8, r2
 8011fd8:	b127      	cbz	r7, 8011fe4 <setvbuf+0x1c>
 8011fda:	6a3b      	ldr	r3, [r7, #32]
 8011fdc:	b913      	cbnz	r3, 8011fe4 <setvbuf+0x1c>
 8011fde:	4638      	mov	r0, r7
 8011fe0:	f7ff feca 	bl	8011d78 <__sinit>
 8011fe4:	f1b8 0f02 	cmp.w	r8, #2
 8011fe8:	d006      	beq.n	8011ff8 <setvbuf+0x30>
 8011fea:	f1b8 0f01 	cmp.w	r8, #1
 8011fee:	f200 809a 	bhi.w	8012126 <setvbuf+0x15e>
 8011ff2:	2d00      	cmp	r5, #0
 8011ff4:	f2c0 8097 	blt.w	8012126 <setvbuf+0x15e>
 8011ff8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011ffa:	07d9      	lsls	r1, r3, #31
 8011ffc:	d405      	bmi.n	801200a <setvbuf+0x42>
 8011ffe:	89a3      	ldrh	r3, [r4, #12]
 8012000:	059a      	lsls	r2, r3, #22
 8012002:	d402      	bmi.n	801200a <setvbuf+0x42>
 8012004:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012006:	f000 fa3a 	bl	801247e <__retarget_lock_acquire_recursive>
 801200a:	4621      	mov	r1, r4
 801200c:	4638      	mov	r0, r7
 801200e:	f000 fe9b 	bl	8012d48 <_fflush_r>
 8012012:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012014:	b141      	cbz	r1, 8012028 <setvbuf+0x60>
 8012016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801201a:	4299      	cmp	r1, r3
 801201c:	d002      	beq.n	8012024 <setvbuf+0x5c>
 801201e:	4638      	mov	r0, r7
 8012020:	f000 fa3e 	bl	80124a0 <_free_r>
 8012024:	2300      	movs	r3, #0
 8012026:	6363      	str	r3, [r4, #52]	@ 0x34
 8012028:	2300      	movs	r3, #0
 801202a:	61a3      	str	r3, [r4, #24]
 801202c:	6063      	str	r3, [r4, #4]
 801202e:	89a3      	ldrh	r3, [r4, #12]
 8012030:	061b      	lsls	r3, r3, #24
 8012032:	d503      	bpl.n	801203c <setvbuf+0x74>
 8012034:	6921      	ldr	r1, [r4, #16]
 8012036:	4638      	mov	r0, r7
 8012038:	f000 fa32 	bl	80124a0 <_free_r>
 801203c:	89a3      	ldrh	r3, [r4, #12]
 801203e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8012042:	f023 0303 	bic.w	r3, r3, #3
 8012046:	f1b8 0f02 	cmp.w	r8, #2
 801204a:	81a3      	strh	r3, [r4, #12]
 801204c:	d061      	beq.n	8012112 <setvbuf+0x14a>
 801204e:	ab01      	add	r3, sp, #4
 8012050:	466a      	mov	r2, sp
 8012052:	4621      	mov	r1, r4
 8012054:	4638      	mov	r0, r7
 8012056:	f000 fe9f 	bl	8012d98 <__swhatbuf_r>
 801205a:	89a3      	ldrh	r3, [r4, #12]
 801205c:	4318      	orrs	r0, r3
 801205e:	81a0      	strh	r0, [r4, #12]
 8012060:	bb2d      	cbnz	r5, 80120ae <setvbuf+0xe6>
 8012062:	9d00      	ldr	r5, [sp, #0]
 8012064:	4628      	mov	r0, r5
 8012066:	f000 fa65 	bl	8012534 <malloc>
 801206a:	4606      	mov	r6, r0
 801206c:	2800      	cmp	r0, #0
 801206e:	d152      	bne.n	8012116 <setvbuf+0x14e>
 8012070:	f8dd 9000 	ldr.w	r9, [sp]
 8012074:	45a9      	cmp	r9, r5
 8012076:	d140      	bne.n	80120fa <setvbuf+0x132>
 8012078:	f04f 35ff 	mov.w	r5, #4294967295
 801207c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012080:	f043 0202 	orr.w	r2, r3, #2
 8012084:	81a2      	strh	r2, [r4, #12]
 8012086:	2200      	movs	r2, #0
 8012088:	60a2      	str	r2, [r4, #8]
 801208a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 801208e:	6022      	str	r2, [r4, #0]
 8012090:	6122      	str	r2, [r4, #16]
 8012092:	2201      	movs	r2, #1
 8012094:	6162      	str	r2, [r4, #20]
 8012096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012098:	07d6      	lsls	r6, r2, #31
 801209a:	d404      	bmi.n	80120a6 <setvbuf+0xde>
 801209c:	0598      	lsls	r0, r3, #22
 801209e:	d402      	bmi.n	80120a6 <setvbuf+0xde>
 80120a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80120a2:	f000 f9ed 	bl	8012480 <__retarget_lock_release_recursive>
 80120a6:	4628      	mov	r0, r5
 80120a8:	b003      	add	sp, #12
 80120aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120ae:	2e00      	cmp	r6, #0
 80120b0:	d0d8      	beq.n	8012064 <setvbuf+0x9c>
 80120b2:	6a3b      	ldr	r3, [r7, #32]
 80120b4:	b913      	cbnz	r3, 80120bc <setvbuf+0xf4>
 80120b6:	4638      	mov	r0, r7
 80120b8:	f7ff fe5e 	bl	8011d78 <__sinit>
 80120bc:	f1b8 0f01 	cmp.w	r8, #1
 80120c0:	bf08      	it	eq
 80120c2:	89a3      	ldrheq	r3, [r4, #12]
 80120c4:	6026      	str	r6, [r4, #0]
 80120c6:	bf04      	itt	eq
 80120c8:	f043 0301 	orreq.w	r3, r3, #1
 80120cc:	81a3      	strheq	r3, [r4, #12]
 80120ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120d2:	f013 0208 	ands.w	r2, r3, #8
 80120d6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80120da:	d01e      	beq.n	801211a <setvbuf+0x152>
 80120dc:	07d9      	lsls	r1, r3, #31
 80120de:	bf41      	itttt	mi
 80120e0:	2200      	movmi	r2, #0
 80120e2:	426d      	negmi	r5, r5
 80120e4:	60a2      	strmi	r2, [r4, #8]
 80120e6:	61a5      	strmi	r5, [r4, #24]
 80120e8:	bf58      	it	pl
 80120ea:	60a5      	strpl	r5, [r4, #8]
 80120ec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80120ee:	07d2      	lsls	r2, r2, #31
 80120f0:	d401      	bmi.n	80120f6 <setvbuf+0x12e>
 80120f2:	059b      	lsls	r3, r3, #22
 80120f4:	d513      	bpl.n	801211e <setvbuf+0x156>
 80120f6:	2500      	movs	r5, #0
 80120f8:	e7d5      	b.n	80120a6 <setvbuf+0xde>
 80120fa:	4648      	mov	r0, r9
 80120fc:	f000 fa1a 	bl	8012534 <malloc>
 8012100:	4606      	mov	r6, r0
 8012102:	2800      	cmp	r0, #0
 8012104:	d0b8      	beq.n	8012078 <setvbuf+0xb0>
 8012106:	89a3      	ldrh	r3, [r4, #12]
 8012108:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801210c:	81a3      	strh	r3, [r4, #12]
 801210e:	464d      	mov	r5, r9
 8012110:	e7cf      	b.n	80120b2 <setvbuf+0xea>
 8012112:	2500      	movs	r5, #0
 8012114:	e7b2      	b.n	801207c <setvbuf+0xb4>
 8012116:	46a9      	mov	r9, r5
 8012118:	e7f5      	b.n	8012106 <setvbuf+0x13e>
 801211a:	60a2      	str	r2, [r4, #8]
 801211c:	e7e6      	b.n	80120ec <setvbuf+0x124>
 801211e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012120:	f000 f9ae 	bl	8012480 <__retarget_lock_release_recursive>
 8012124:	e7e7      	b.n	80120f6 <setvbuf+0x12e>
 8012126:	f04f 35ff 	mov.w	r5, #4294967295
 801212a:	e7bc      	b.n	80120a6 <setvbuf+0xde>
 801212c:	20000024 	.word	0x20000024

08012130 <__sread>:
 8012130:	b510      	push	{r4, lr}
 8012132:	460c      	mov	r4, r1
 8012134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012138:	f000 f952 	bl	80123e0 <_read_r>
 801213c:	2800      	cmp	r0, #0
 801213e:	bfab      	itete	ge
 8012140:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012142:	89a3      	ldrhlt	r3, [r4, #12]
 8012144:	181b      	addge	r3, r3, r0
 8012146:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801214a:	bfac      	ite	ge
 801214c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801214e:	81a3      	strhlt	r3, [r4, #12]
 8012150:	bd10      	pop	{r4, pc}

08012152 <__swrite>:
 8012152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012156:	461f      	mov	r7, r3
 8012158:	898b      	ldrh	r3, [r1, #12]
 801215a:	05db      	lsls	r3, r3, #23
 801215c:	4605      	mov	r5, r0
 801215e:	460c      	mov	r4, r1
 8012160:	4616      	mov	r6, r2
 8012162:	d505      	bpl.n	8012170 <__swrite+0x1e>
 8012164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012168:	2302      	movs	r3, #2
 801216a:	2200      	movs	r2, #0
 801216c:	f000 f926 	bl	80123bc <_lseek_r>
 8012170:	89a3      	ldrh	r3, [r4, #12]
 8012172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012176:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801217a:	81a3      	strh	r3, [r4, #12]
 801217c:	4632      	mov	r2, r6
 801217e:	463b      	mov	r3, r7
 8012180:	4628      	mov	r0, r5
 8012182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012186:	f000 b93d 	b.w	8012404 <_write_r>

0801218a <__sseek>:
 801218a:	b510      	push	{r4, lr}
 801218c:	460c      	mov	r4, r1
 801218e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012192:	f000 f913 	bl	80123bc <_lseek_r>
 8012196:	1c43      	adds	r3, r0, #1
 8012198:	89a3      	ldrh	r3, [r4, #12]
 801219a:	bf15      	itete	ne
 801219c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801219e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80121a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80121a6:	81a3      	strheq	r3, [r4, #12]
 80121a8:	bf18      	it	ne
 80121aa:	81a3      	strhne	r3, [r4, #12]
 80121ac:	bd10      	pop	{r4, pc}

080121ae <__sclose>:
 80121ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121b2:	f000 b89d 	b.w	80122f0 <_close_r>

080121b6 <__swbuf_r>:
 80121b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b8:	460e      	mov	r6, r1
 80121ba:	4614      	mov	r4, r2
 80121bc:	4605      	mov	r5, r0
 80121be:	b118      	cbz	r0, 80121c8 <__swbuf_r+0x12>
 80121c0:	6a03      	ldr	r3, [r0, #32]
 80121c2:	b90b      	cbnz	r3, 80121c8 <__swbuf_r+0x12>
 80121c4:	f7ff fdd8 	bl	8011d78 <__sinit>
 80121c8:	69a3      	ldr	r3, [r4, #24]
 80121ca:	60a3      	str	r3, [r4, #8]
 80121cc:	89a3      	ldrh	r3, [r4, #12]
 80121ce:	071a      	lsls	r2, r3, #28
 80121d0:	d501      	bpl.n	80121d6 <__swbuf_r+0x20>
 80121d2:	6923      	ldr	r3, [r4, #16]
 80121d4:	b943      	cbnz	r3, 80121e8 <__swbuf_r+0x32>
 80121d6:	4621      	mov	r1, r4
 80121d8:	4628      	mov	r0, r5
 80121da:	f000 f82b 	bl	8012234 <__swsetup_r>
 80121de:	b118      	cbz	r0, 80121e8 <__swbuf_r+0x32>
 80121e0:	f04f 37ff 	mov.w	r7, #4294967295
 80121e4:	4638      	mov	r0, r7
 80121e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121e8:	6823      	ldr	r3, [r4, #0]
 80121ea:	6922      	ldr	r2, [r4, #16]
 80121ec:	1a98      	subs	r0, r3, r2
 80121ee:	6963      	ldr	r3, [r4, #20]
 80121f0:	b2f6      	uxtb	r6, r6
 80121f2:	4283      	cmp	r3, r0
 80121f4:	4637      	mov	r7, r6
 80121f6:	dc05      	bgt.n	8012204 <__swbuf_r+0x4e>
 80121f8:	4621      	mov	r1, r4
 80121fa:	4628      	mov	r0, r5
 80121fc:	f000 fda4 	bl	8012d48 <_fflush_r>
 8012200:	2800      	cmp	r0, #0
 8012202:	d1ed      	bne.n	80121e0 <__swbuf_r+0x2a>
 8012204:	68a3      	ldr	r3, [r4, #8]
 8012206:	3b01      	subs	r3, #1
 8012208:	60a3      	str	r3, [r4, #8]
 801220a:	6823      	ldr	r3, [r4, #0]
 801220c:	1c5a      	adds	r2, r3, #1
 801220e:	6022      	str	r2, [r4, #0]
 8012210:	701e      	strb	r6, [r3, #0]
 8012212:	6962      	ldr	r2, [r4, #20]
 8012214:	1c43      	adds	r3, r0, #1
 8012216:	429a      	cmp	r2, r3
 8012218:	d004      	beq.n	8012224 <__swbuf_r+0x6e>
 801221a:	89a3      	ldrh	r3, [r4, #12]
 801221c:	07db      	lsls	r3, r3, #31
 801221e:	d5e1      	bpl.n	80121e4 <__swbuf_r+0x2e>
 8012220:	2e0a      	cmp	r6, #10
 8012222:	d1df      	bne.n	80121e4 <__swbuf_r+0x2e>
 8012224:	4621      	mov	r1, r4
 8012226:	4628      	mov	r0, r5
 8012228:	f000 fd8e 	bl	8012d48 <_fflush_r>
 801222c:	2800      	cmp	r0, #0
 801222e:	d0d9      	beq.n	80121e4 <__swbuf_r+0x2e>
 8012230:	e7d6      	b.n	80121e0 <__swbuf_r+0x2a>
	...

08012234 <__swsetup_r>:
 8012234:	b538      	push	{r3, r4, r5, lr}
 8012236:	4b29      	ldr	r3, [pc, #164]	@ (80122dc <__swsetup_r+0xa8>)
 8012238:	4605      	mov	r5, r0
 801223a:	6818      	ldr	r0, [r3, #0]
 801223c:	460c      	mov	r4, r1
 801223e:	b118      	cbz	r0, 8012248 <__swsetup_r+0x14>
 8012240:	6a03      	ldr	r3, [r0, #32]
 8012242:	b90b      	cbnz	r3, 8012248 <__swsetup_r+0x14>
 8012244:	f7ff fd98 	bl	8011d78 <__sinit>
 8012248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801224c:	0719      	lsls	r1, r3, #28
 801224e:	d422      	bmi.n	8012296 <__swsetup_r+0x62>
 8012250:	06da      	lsls	r2, r3, #27
 8012252:	d407      	bmi.n	8012264 <__swsetup_r+0x30>
 8012254:	2209      	movs	r2, #9
 8012256:	602a      	str	r2, [r5, #0]
 8012258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801225c:	81a3      	strh	r3, [r4, #12]
 801225e:	f04f 30ff 	mov.w	r0, #4294967295
 8012262:	e033      	b.n	80122cc <__swsetup_r+0x98>
 8012264:	0758      	lsls	r0, r3, #29
 8012266:	d512      	bpl.n	801228e <__swsetup_r+0x5a>
 8012268:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801226a:	b141      	cbz	r1, 801227e <__swsetup_r+0x4a>
 801226c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012270:	4299      	cmp	r1, r3
 8012272:	d002      	beq.n	801227a <__swsetup_r+0x46>
 8012274:	4628      	mov	r0, r5
 8012276:	f000 f913 	bl	80124a0 <_free_r>
 801227a:	2300      	movs	r3, #0
 801227c:	6363      	str	r3, [r4, #52]	@ 0x34
 801227e:	89a3      	ldrh	r3, [r4, #12]
 8012280:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012284:	81a3      	strh	r3, [r4, #12]
 8012286:	2300      	movs	r3, #0
 8012288:	6063      	str	r3, [r4, #4]
 801228a:	6923      	ldr	r3, [r4, #16]
 801228c:	6023      	str	r3, [r4, #0]
 801228e:	89a3      	ldrh	r3, [r4, #12]
 8012290:	f043 0308 	orr.w	r3, r3, #8
 8012294:	81a3      	strh	r3, [r4, #12]
 8012296:	6923      	ldr	r3, [r4, #16]
 8012298:	b94b      	cbnz	r3, 80122ae <__swsetup_r+0x7a>
 801229a:	89a3      	ldrh	r3, [r4, #12]
 801229c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80122a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80122a4:	d003      	beq.n	80122ae <__swsetup_r+0x7a>
 80122a6:	4621      	mov	r1, r4
 80122a8:	4628      	mov	r0, r5
 80122aa:	f000 fd9b 	bl	8012de4 <__smakebuf_r>
 80122ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122b2:	f013 0201 	ands.w	r2, r3, #1
 80122b6:	d00a      	beq.n	80122ce <__swsetup_r+0x9a>
 80122b8:	2200      	movs	r2, #0
 80122ba:	60a2      	str	r2, [r4, #8]
 80122bc:	6962      	ldr	r2, [r4, #20]
 80122be:	4252      	negs	r2, r2
 80122c0:	61a2      	str	r2, [r4, #24]
 80122c2:	6922      	ldr	r2, [r4, #16]
 80122c4:	b942      	cbnz	r2, 80122d8 <__swsetup_r+0xa4>
 80122c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80122ca:	d1c5      	bne.n	8012258 <__swsetup_r+0x24>
 80122cc:	bd38      	pop	{r3, r4, r5, pc}
 80122ce:	0799      	lsls	r1, r3, #30
 80122d0:	bf58      	it	pl
 80122d2:	6962      	ldrpl	r2, [r4, #20]
 80122d4:	60a2      	str	r2, [r4, #8]
 80122d6:	e7f4      	b.n	80122c2 <__swsetup_r+0x8e>
 80122d8:	2000      	movs	r0, #0
 80122da:	e7f7      	b.n	80122cc <__swsetup_r+0x98>
 80122dc:	20000024 	.word	0x20000024

080122e0 <memset>:
 80122e0:	4402      	add	r2, r0
 80122e2:	4603      	mov	r3, r0
 80122e4:	4293      	cmp	r3, r2
 80122e6:	d100      	bne.n	80122ea <memset+0xa>
 80122e8:	4770      	bx	lr
 80122ea:	f803 1b01 	strb.w	r1, [r3], #1
 80122ee:	e7f9      	b.n	80122e4 <memset+0x4>

080122f0 <_close_r>:
 80122f0:	b538      	push	{r3, r4, r5, lr}
 80122f2:	4d06      	ldr	r5, [pc, #24]	@ (801230c <_close_r+0x1c>)
 80122f4:	2300      	movs	r3, #0
 80122f6:	4604      	mov	r4, r0
 80122f8:	4608      	mov	r0, r1
 80122fa:	602b      	str	r3, [r5, #0]
 80122fc:	f7fb f8a2 	bl	800d444 <_close>
 8012300:	1c43      	adds	r3, r0, #1
 8012302:	d102      	bne.n	801230a <_close_r+0x1a>
 8012304:	682b      	ldr	r3, [r5, #0]
 8012306:	b103      	cbz	r3, 801230a <_close_r+0x1a>
 8012308:	6023      	str	r3, [r4, #0]
 801230a:	bd38      	pop	{r3, r4, r5, pc}
 801230c:	2000437c 	.word	0x2000437c

08012310 <_reclaim_reent>:
 8012310:	4b29      	ldr	r3, [pc, #164]	@ (80123b8 <_reclaim_reent+0xa8>)
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	4283      	cmp	r3, r0
 8012316:	b570      	push	{r4, r5, r6, lr}
 8012318:	4604      	mov	r4, r0
 801231a:	d04b      	beq.n	80123b4 <_reclaim_reent+0xa4>
 801231c:	69c3      	ldr	r3, [r0, #28]
 801231e:	b1ab      	cbz	r3, 801234c <_reclaim_reent+0x3c>
 8012320:	68db      	ldr	r3, [r3, #12]
 8012322:	b16b      	cbz	r3, 8012340 <_reclaim_reent+0x30>
 8012324:	2500      	movs	r5, #0
 8012326:	69e3      	ldr	r3, [r4, #28]
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	5959      	ldr	r1, [r3, r5]
 801232c:	2900      	cmp	r1, #0
 801232e:	d13b      	bne.n	80123a8 <_reclaim_reent+0x98>
 8012330:	3504      	adds	r5, #4
 8012332:	2d80      	cmp	r5, #128	@ 0x80
 8012334:	d1f7      	bne.n	8012326 <_reclaim_reent+0x16>
 8012336:	69e3      	ldr	r3, [r4, #28]
 8012338:	4620      	mov	r0, r4
 801233a:	68d9      	ldr	r1, [r3, #12]
 801233c:	f000 f8b0 	bl	80124a0 <_free_r>
 8012340:	69e3      	ldr	r3, [r4, #28]
 8012342:	6819      	ldr	r1, [r3, #0]
 8012344:	b111      	cbz	r1, 801234c <_reclaim_reent+0x3c>
 8012346:	4620      	mov	r0, r4
 8012348:	f000 f8aa 	bl	80124a0 <_free_r>
 801234c:	6961      	ldr	r1, [r4, #20]
 801234e:	b111      	cbz	r1, 8012356 <_reclaim_reent+0x46>
 8012350:	4620      	mov	r0, r4
 8012352:	f000 f8a5 	bl	80124a0 <_free_r>
 8012356:	69e1      	ldr	r1, [r4, #28]
 8012358:	b111      	cbz	r1, 8012360 <_reclaim_reent+0x50>
 801235a:	4620      	mov	r0, r4
 801235c:	f000 f8a0 	bl	80124a0 <_free_r>
 8012360:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012362:	b111      	cbz	r1, 801236a <_reclaim_reent+0x5a>
 8012364:	4620      	mov	r0, r4
 8012366:	f000 f89b 	bl	80124a0 <_free_r>
 801236a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801236c:	b111      	cbz	r1, 8012374 <_reclaim_reent+0x64>
 801236e:	4620      	mov	r0, r4
 8012370:	f000 f896 	bl	80124a0 <_free_r>
 8012374:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012376:	b111      	cbz	r1, 801237e <_reclaim_reent+0x6e>
 8012378:	4620      	mov	r0, r4
 801237a:	f000 f891 	bl	80124a0 <_free_r>
 801237e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012380:	b111      	cbz	r1, 8012388 <_reclaim_reent+0x78>
 8012382:	4620      	mov	r0, r4
 8012384:	f000 f88c 	bl	80124a0 <_free_r>
 8012388:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801238a:	b111      	cbz	r1, 8012392 <_reclaim_reent+0x82>
 801238c:	4620      	mov	r0, r4
 801238e:	f000 f887 	bl	80124a0 <_free_r>
 8012392:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012394:	b111      	cbz	r1, 801239c <_reclaim_reent+0x8c>
 8012396:	4620      	mov	r0, r4
 8012398:	f000 f882 	bl	80124a0 <_free_r>
 801239c:	6a23      	ldr	r3, [r4, #32]
 801239e:	b14b      	cbz	r3, 80123b4 <_reclaim_reent+0xa4>
 80123a0:	4620      	mov	r0, r4
 80123a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123a6:	4718      	bx	r3
 80123a8:	680e      	ldr	r6, [r1, #0]
 80123aa:	4620      	mov	r0, r4
 80123ac:	f000 f878 	bl	80124a0 <_free_r>
 80123b0:	4631      	mov	r1, r6
 80123b2:	e7bb      	b.n	801232c <_reclaim_reent+0x1c>
 80123b4:	bd70      	pop	{r4, r5, r6, pc}
 80123b6:	bf00      	nop
 80123b8:	20000024 	.word	0x20000024

080123bc <_lseek_r>:
 80123bc:	b538      	push	{r3, r4, r5, lr}
 80123be:	4d07      	ldr	r5, [pc, #28]	@ (80123dc <_lseek_r+0x20>)
 80123c0:	4604      	mov	r4, r0
 80123c2:	4608      	mov	r0, r1
 80123c4:	4611      	mov	r1, r2
 80123c6:	2200      	movs	r2, #0
 80123c8:	602a      	str	r2, [r5, #0]
 80123ca:	461a      	mov	r2, r3
 80123cc:	f7fb f851 	bl	800d472 <_lseek>
 80123d0:	1c43      	adds	r3, r0, #1
 80123d2:	d102      	bne.n	80123da <_lseek_r+0x1e>
 80123d4:	682b      	ldr	r3, [r5, #0]
 80123d6:	b103      	cbz	r3, 80123da <_lseek_r+0x1e>
 80123d8:	6023      	str	r3, [r4, #0]
 80123da:	bd38      	pop	{r3, r4, r5, pc}
 80123dc:	2000437c 	.word	0x2000437c

080123e0 <_read_r>:
 80123e0:	b538      	push	{r3, r4, r5, lr}
 80123e2:	4d07      	ldr	r5, [pc, #28]	@ (8012400 <_read_r+0x20>)
 80123e4:	4604      	mov	r4, r0
 80123e6:	4608      	mov	r0, r1
 80123e8:	4611      	mov	r1, r2
 80123ea:	2200      	movs	r2, #0
 80123ec:	602a      	str	r2, [r5, #0]
 80123ee:	461a      	mov	r2, r3
 80123f0:	f7fb f850 	bl	800d494 <_read>
 80123f4:	1c43      	adds	r3, r0, #1
 80123f6:	d102      	bne.n	80123fe <_read_r+0x1e>
 80123f8:	682b      	ldr	r3, [r5, #0]
 80123fa:	b103      	cbz	r3, 80123fe <_read_r+0x1e>
 80123fc:	6023      	str	r3, [r4, #0]
 80123fe:	bd38      	pop	{r3, r4, r5, pc}
 8012400:	2000437c 	.word	0x2000437c

08012404 <_write_r>:
 8012404:	b538      	push	{r3, r4, r5, lr}
 8012406:	4d07      	ldr	r5, [pc, #28]	@ (8012424 <_write_r+0x20>)
 8012408:	4604      	mov	r4, r0
 801240a:	4608      	mov	r0, r1
 801240c:	4611      	mov	r1, r2
 801240e:	2200      	movs	r2, #0
 8012410:	602a      	str	r2, [r5, #0]
 8012412:	461a      	mov	r2, r3
 8012414:	f7fa ffea 	bl	800d3ec <_write>
 8012418:	1c43      	adds	r3, r0, #1
 801241a:	d102      	bne.n	8012422 <_write_r+0x1e>
 801241c:	682b      	ldr	r3, [r5, #0]
 801241e:	b103      	cbz	r3, 8012422 <_write_r+0x1e>
 8012420:	6023      	str	r3, [r4, #0]
 8012422:	bd38      	pop	{r3, r4, r5, pc}
 8012424:	2000437c 	.word	0x2000437c

08012428 <__errno>:
 8012428:	4b01      	ldr	r3, [pc, #4]	@ (8012430 <__errno+0x8>)
 801242a:	6818      	ldr	r0, [r3, #0]
 801242c:	4770      	bx	lr
 801242e:	bf00      	nop
 8012430:	20000024 	.word	0x20000024

08012434 <__libc_init_array>:
 8012434:	b570      	push	{r4, r5, r6, lr}
 8012436:	4d0d      	ldr	r5, [pc, #52]	@ (801246c <__libc_init_array+0x38>)
 8012438:	4c0d      	ldr	r4, [pc, #52]	@ (8012470 <__libc_init_array+0x3c>)
 801243a:	1b64      	subs	r4, r4, r5
 801243c:	10a4      	asrs	r4, r4, #2
 801243e:	2600      	movs	r6, #0
 8012440:	42a6      	cmp	r6, r4
 8012442:	d109      	bne.n	8012458 <__libc_init_array+0x24>
 8012444:	4d0b      	ldr	r5, [pc, #44]	@ (8012474 <__libc_init_array+0x40>)
 8012446:	4c0c      	ldr	r4, [pc, #48]	@ (8012478 <__libc_init_array+0x44>)
 8012448:	f000 fd3a 	bl	8012ec0 <_init>
 801244c:	1b64      	subs	r4, r4, r5
 801244e:	10a4      	asrs	r4, r4, #2
 8012450:	2600      	movs	r6, #0
 8012452:	42a6      	cmp	r6, r4
 8012454:	d105      	bne.n	8012462 <__libc_init_array+0x2e>
 8012456:	bd70      	pop	{r4, r5, r6, pc}
 8012458:	f855 3b04 	ldr.w	r3, [r5], #4
 801245c:	4798      	blx	r3
 801245e:	3601      	adds	r6, #1
 8012460:	e7ee      	b.n	8012440 <__libc_init_array+0xc>
 8012462:	f855 3b04 	ldr.w	r3, [r5], #4
 8012466:	4798      	blx	r3
 8012468:	3601      	adds	r6, #1
 801246a:	e7f2      	b.n	8012452 <__libc_init_array+0x1e>
 801246c:	08013148 	.word	0x08013148
 8012470:	08013148 	.word	0x08013148
 8012474:	08013148 	.word	0x08013148
 8012478:	0801314c 	.word	0x0801314c

0801247c <__retarget_lock_init_recursive>:
 801247c:	4770      	bx	lr

0801247e <__retarget_lock_acquire_recursive>:
 801247e:	4770      	bx	lr

08012480 <__retarget_lock_release_recursive>:
 8012480:	4770      	bx	lr

08012482 <memcpy>:
 8012482:	440a      	add	r2, r1
 8012484:	4291      	cmp	r1, r2
 8012486:	f100 33ff 	add.w	r3, r0, #4294967295
 801248a:	d100      	bne.n	801248e <memcpy+0xc>
 801248c:	4770      	bx	lr
 801248e:	b510      	push	{r4, lr}
 8012490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012498:	4291      	cmp	r1, r2
 801249a:	d1f9      	bne.n	8012490 <memcpy+0xe>
 801249c:	bd10      	pop	{r4, pc}
	...

080124a0 <_free_r>:
 80124a0:	b538      	push	{r3, r4, r5, lr}
 80124a2:	4605      	mov	r5, r0
 80124a4:	2900      	cmp	r1, #0
 80124a6:	d041      	beq.n	801252c <_free_r+0x8c>
 80124a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124ac:	1f0c      	subs	r4, r1, #4
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	bfb8      	it	lt
 80124b2:	18e4      	addlt	r4, r4, r3
 80124b4:	f000 f8e8 	bl	8012688 <__malloc_lock>
 80124b8:	4a1d      	ldr	r2, [pc, #116]	@ (8012530 <_free_r+0x90>)
 80124ba:	6813      	ldr	r3, [r2, #0]
 80124bc:	b933      	cbnz	r3, 80124cc <_free_r+0x2c>
 80124be:	6063      	str	r3, [r4, #4]
 80124c0:	6014      	str	r4, [r2, #0]
 80124c2:	4628      	mov	r0, r5
 80124c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124c8:	f000 b8e4 	b.w	8012694 <__malloc_unlock>
 80124cc:	42a3      	cmp	r3, r4
 80124ce:	d908      	bls.n	80124e2 <_free_r+0x42>
 80124d0:	6820      	ldr	r0, [r4, #0]
 80124d2:	1821      	adds	r1, r4, r0
 80124d4:	428b      	cmp	r3, r1
 80124d6:	bf01      	itttt	eq
 80124d8:	6819      	ldreq	r1, [r3, #0]
 80124da:	685b      	ldreq	r3, [r3, #4]
 80124dc:	1809      	addeq	r1, r1, r0
 80124de:	6021      	streq	r1, [r4, #0]
 80124e0:	e7ed      	b.n	80124be <_free_r+0x1e>
 80124e2:	461a      	mov	r2, r3
 80124e4:	685b      	ldr	r3, [r3, #4]
 80124e6:	b10b      	cbz	r3, 80124ec <_free_r+0x4c>
 80124e8:	42a3      	cmp	r3, r4
 80124ea:	d9fa      	bls.n	80124e2 <_free_r+0x42>
 80124ec:	6811      	ldr	r1, [r2, #0]
 80124ee:	1850      	adds	r0, r2, r1
 80124f0:	42a0      	cmp	r0, r4
 80124f2:	d10b      	bne.n	801250c <_free_r+0x6c>
 80124f4:	6820      	ldr	r0, [r4, #0]
 80124f6:	4401      	add	r1, r0
 80124f8:	1850      	adds	r0, r2, r1
 80124fa:	4283      	cmp	r3, r0
 80124fc:	6011      	str	r1, [r2, #0]
 80124fe:	d1e0      	bne.n	80124c2 <_free_r+0x22>
 8012500:	6818      	ldr	r0, [r3, #0]
 8012502:	685b      	ldr	r3, [r3, #4]
 8012504:	6053      	str	r3, [r2, #4]
 8012506:	4408      	add	r0, r1
 8012508:	6010      	str	r0, [r2, #0]
 801250a:	e7da      	b.n	80124c2 <_free_r+0x22>
 801250c:	d902      	bls.n	8012514 <_free_r+0x74>
 801250e:	230c      	movs	r3, #12
 8012510:	602b      	str	r3, [r5, #0]
 8012512:	e7d6      	b.n	80124c2 <_free_r+0x22>
 8012514:	6820      	ldr	r0, [r4, #0]
 8012516:	1821      	adds	r1, r4, r0
 8012518:	428b      	cmp	r3, r1
 801251a:	bf04      	itt	eq
 801251c:	6819      	ldreq	r1, [r3, #0]
 801251e:	685b      	ldreq	r3, [r3, #4]
 8012520:	6063      	str	r3, [r4, #4]
 8012522:	bf04      	itt	eq
 8012524:	1809      	addeq	r1, r1, r0
 8012526:	6021      	streq	r1, [r4, #0]
 8012528:	6054      	str	r4, [r2, #4]
 801252a:	e7ca      	b.n	80124c2 <_free_r+0x22>
 801252c:	bd38      	pop	{r3, r4, r5, pc}
 801252e:	bf00      	nop
 8012530:	20004388 	.word	0x20004388

08012534 <malloc>:
 8012534:	4b02      	ldr	r3, [pc, #8]	@ (8012540 <malloc+0xc>)
 8012536:	4601      	mov	r1, r0
 8012538:	6818      	ldr	r0, [r3, #0]
 801253a:	f000 b825 	b.w	8012588 <_malloc_r>
 801253e:	bf00      	nop
 8012540:	20000024 	.word	0x20000024

08012544 <sbrk_aligned>:
 8012544:	b570      	push	{r4, r5, r6, lr}
 8012546:	4e0f      	ldr	r6, [pc, #60]	@ (8012584 <sbrk_aligned+0x40>)
 8012548:	460c      	mov	r4, r1
 801254a:	6831      	ldr	r1, [r6, #0]
 801254c:	4605      	mov	r5, r0
 801254e:	b911      	cbnz	r1, 8012556 <sbrk_aligned+0x12>
 8012550:	f000 fca6 	bl	8012ea0 <_sbrk_r>
 8012554:	6030      	str	r0, [r6, #0]
 8012556:	4621      	mov	r1, r4
 8012558:	4628      	mov	r0, r5
 801255a:	f000 fca1 	bl	8012ea0 <_sbrk_r>
 801255e:	1c43      	adds	r3, r0, #1
 8012560:	d103      	bne.n	801256a <sbrk_aligned+0x26>
 8012562:	f04f 34ff 	mov.w	r4, #4294967295
 8012566:	4620      	mov	r0, r4
 8012568:	bd70      	pop	{r4, r5, r6, pc}
 801256a:	1cc4      	adds	r4, r0, #3
 801256c:	f024 0403 	bic.w	r4, r4, #3
 8012570:	42a0      	cmp	r0, r4
 8012572:	d0f8      	beq.n	8012566 <sbrk_aligned+0x22>
 8012574:	1a21      	subs	r1, r4, r0
 8012576:	4628      	mov	r0, r5
 8012578:	f000 fc92 	bl	8012ea0 <_sbrk_r>
 801257c:	3001      	adds	r0, #1
 801257e:	d1f2      	bne.n	8012566 <sbrk_aligned+0x22>
 8012580:	e7ef      	b.n	8012562 <sbrk_aligned+0x1e>
 8012582:	bf00      	nop
 8012584:	20004384 	.word	0x20004384

08012588 <_malloc_r>:
 8012588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801258c:	1ccd      	adds	r5, r1, #3
 801258e:	f025 0503 	bic.w	r5, r5, #3
 8012592:	3508      	adds	r5, #8
 8012594:	2d0c      	cmp	r5, #12
 8012596:	bf38      	it	cc
 8012598:	250c      	movcc	r5, #12
 801259a:	2d00      	cmp	r5, #0
 801259c:	4606      	mov	r6, r0
 801259e:	db01      	blt.n	80125a4 <_malloc_r+0x1c>
 80125a0:	42a9      	cmp	r1, r5
 80125a2:	d904      	bls.n	80125ae <_malloc_r+0x26>
 80125a4:	230c      	movs	r3, #12
 80125a6:	6033      	str	r3, [r6, #0]
 80125a8:	2000      	movs	r0, #0
 80125aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80125ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012684 <_malloc_r+0xfc>
 80125b2:	f000 f869 	bl	8012688 <__malloc_lock>
 80125b6:	f8d8 3000 	ldr.w	r3, [r8]
 80125ba:	461c      	mov	r4, r3
 80125bc:	bb44      	cbnz	r4, 8012610 <_malloc_r+0x88>
 80125be:	4629      	mov	r1, r5
 80125c0:	4630      	mov	r0, r6
 80125c2:	f7ff ffbf 	bl	8012544 <sbrk_aligned>
 80125c6:	1c43      	adds	r3, r0, #1
 80125c8:	4604      	mov	r4, r0
 80125ca:	d158      	bne.n	801267e <_malloc_r+0xf6>
 80125cc:	f8d8 4000 	ldr.w	r4, [r8]
 80125d0:	4627      	mov	r7, r4
 80125d2:	2f00      	cmp	r7, #0
 80125d4:	d143      	bne.n	801265e <_malloc_r+0xd6>
 80125d6:	2c00      	cmp	r4, #0
 80125d8:	d04b      	beq.n	8012672 <_malloc_r+0xea>
 80125da:	6823      	ldr	r3, [r4, #0]
 80125dc:	4639      	mov	r1, r7
 80125de:	4630      	mov	r0, r6
 80125e0:	eb04 0903 	add.w	r9, r4, r3
 80125e4:	f000 fc5c 	bl	8012ea0 <_sbrk_r>
 80125e8:	4581      	cmp	r9, r0
 80125ea:	d142      	bne.n	8012672 <_malloc_r+0xea>
 80125ec:	6821      	ldr	r1, [r4, #0]
 80125ee:	1a6d      	subs	r5, r5, r1
 80125f0:	4629      	mov	r1, r5
 80125f2:	4630      	mov	r0, r6
 80125f4:	f7ff ffa6 	bl	8012544 <sbrk_aligned>
 80125f8:	3001      	adds	r0, #1
 80125fa:	d03a      	beq.n	8012672 <_malloc_r+0xea>
 80125fc:	6823      	ldr	r3, [r4, #0]
 80125fe:	442b      	add	r3, r5
 8012600:	6023      	str	r3, [r4, #0]
 8012602:	f8d8 3000 	ldr.w	r3, [r8]
 8012606:	685a      	ldr	r2, [r3, #4]
 8012608:	bb62      	cbnz	r2, 8012664 <_malloc_r+0xdc>
 801260a:	f8c8 7000 	str.w	r7, [r8]
 801260e:	e00f      	b.n	8012630 <_malloc_r+0xa8>
 8012610:	6822      	ldr	r2, [r4, #0]
 8012612:	1b52      	subs	r2, r2, r5
 8012614:	d420      	bmi.n	8012658 <_malloc_r+0xd0>
 8012616:	2a0b      	cmp	r2, #11
 8012618:	d917      	bls.n	801264a <_malloc_r+0xc2>
 801261a:	1961      	adds	r1, r4, r5
 801261c:	42a3      	cmp	r3, r4
 801261e:	6025      	str	r5, [r4, #0]
 8012620:	bf18      	it	ne
 8012622:	6059      	strne	r1, [r3, #4]
 8012624:	6863      	ldr	r3, [r4, #4]
 8012626:	bf08      	it	eq
 8012628:	f8c8 1000 	streq.w	r1, [r8]
 801262c:	5162      	str	r2, [r4, r5]
 801262e:	604b      	str	r3, [r1, #4]
 8012630:	4630      	mov	r0, r6
 8012632:	f000 f82f 	bl	8012694 <__malloc_unlock>
 8012636:	f104 000b 	add.w	r0, r4, #11
 801263a:	1d23      	adds	r3, r4, #4
 801263c:	f020 0007 	bic.w	r0, r0, #7
 8012640:	1ac2      	subs	r2, r0, r3
 8012642:	bf1c      	itt	ne
 8012644:	1a1b      	subne	r3, r3, r0
 8012646:	50a3      	strne	r3, [r4, r2]
 8012648:	e7af      	b.n	80125aa <_malloc_r+0x22>
 801264a:	6862      	ldr	r2, [r4, #4]
 801264c:	42a3      	cmp	r3, r4
 801264e:	bf0c      	ite	eq
 8012650:	f8c8 2000 	streq.w	r2, [r8]
 8012654:	605a      	strne	r2, [r3, #4]
 8012656:	e7eb      	b.n	8012630 <_malloc_r+0xa8>
 8012658:	4623      	mov	r3, r4
 801265a:	6864      	ldr	r4, [r4, #4]
 801265c:	e7ae      	b.n	80125bc <_malloc_r+0x34>
 801265e:	463c      	mov	r4, r7
 8012660:	687f      	ldr	r7, [r7, #4]
 8012662:	e7b6      	b.n	80125d2 <_malloc_r+0x4a>
 8012664:	461a      	mov	r2, r3
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	42a3      	cmp	r3, r4
 801266a:	d1fb      	bne.n	8012664 <_malloc_r+0xdc>
 801266c:	2300      	movs	r3, #0
 801266e:	6053      	str	r3, [r2, #4]
 8012670:	e7de      	b.n	8012630 <_malloc_r+0xa8>
 8012672:	230c      	movs	r3, #12
 8012674:	6033      	str	r3, [r6, #0]
 8012676:	4630      	mov	r0, r6
 8012678:	f000 f80c 	bl	8012694 <__malloc_unlock>
 801267c:	e794      	b.n	80125a8 <_malloc_r+0x20>
 801267e:	6005      	str	r5, [r0, #0]
 8012680:	e7d6      	b.n	8012630 <_malloc_r+0xa8>
 8012682:	bf00      	nop
 8012684:	20004388 	.word	0x20004388

08012688 <__malloc_lock>:
 8012688:	4801      	ldr	r0, [pc, #4]	@ (8012690 <__malloc_lock+0x8>)
 801268a:	f7ff bef8 	b.w	801247e <__retarget_lock_acquire_recursive>
 801268e:	bf00      	nop
 8012690:	20004380 	.word	0x20004380

08012694 <__malloc_unlock>:
 8012694:	4801      	ldr	r0, [pc, #4]	@ (801269c <__malloc_unlock+0x8>)
 8012696:	f7ff bef3 	b.w	8012480 <__retarget_lock_release_recursive>
 801269a:	bf00      	nop
 801269c:	20004380 	.word	0x20004380

080126a0 <__sfputc_r>:
 80126a0:	6893      	ldr	r3, [r2, #8]
 80126a2:	3b01      	subs	r3, #1
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	b410      	push	{r4}
 80126a8:	6093      	str	r3, [r2, #8]
 80126aa:	da08      	bge.n	80126be <__sfputc_r+0x1e>
 80126ac:	6994      	ldr	r4, [r2, #24]
 80126ae:	42a3      	cmp	r3, r4
 80126b0:	db01      	blt.n	80126b6 <__sfputc_r+0x16>
 80126b2:	290a      	cmp	r1, #10
 80126b4:	d103      	bne.n	80126be <__sfputc_r+0x1e>
 80126b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126ba:	f7ff bd7c 	b.w	80121b6 <__swbuf_r>
 80126be:	6813      	ldr	r3, [r2, #0]
 80126c0:	1c58      	adds	r0, r3, #1
 80126c2:	6010      	str	r0, [r2, #0]
 80126c4:	7019      	strb	r1, [r3, #0]
 80126c6:	4608      	mov	r0, r1
 80126c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80126cc:	4770      	bx	lr

080126ce <__sfputs_r>:
 80126ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126d0:	4606      	mov	r6, r0
 80126d2:	460f      	mov	r7, r1
 80126d4:	4614      	mov	r4, r2
 80126d6:	18d5      	adds	r5, r2, r3
 80126d8:	42ac      	cmp	r4, r5
 80126da:	d101      	bne.n	80126e0 <__sfputs_r+0x12>
 80126dc:	2000      	movs	r0, #0
 80126de:	e007      	b.n	80126f0 <__sfputs_r+0x22>
 80126e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126e4:	463a      	mov	r2, r7
 80126e6:	4630      	mov	r0, r6
 80126e8:	f7ff ffda 	bl	80126a0 <__sfputc_r>
 80126ec:	1c43      	adds	r3, r0, #1
 80126ee:	d1f3      	bne.n	80126d8 <__sfputs_r+0xa>
 80126f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080126f4 <_vfiprintf_r>:
 80126f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126f8:	460d      	mov	r5, r1
 80126fa:	b09d      	sub	sp, #116	@ 0x74
 80126fc:	4614      	mov	r4, r2
 80126fe:	4698      	mov	r8, r3
 8012700:	4606      	mov	r6, r0
 8012702:	b118      	cbz	r0, 801270c <_vfiprintf_r+0x18>
 8012704:	6a03      	ldr	r3, [r0, #32]
 8012706:	b90b      	cbnz	r3, 801270c <_vfiprintf_r+0x18>
 8012708:	f7ff fb36 	bl	8011d78 <__sinit>
 801270c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801270e:	07d9      	lsls	r1, r3, #31
 8012710:	d405      	bmi.n	801271e <_vfiprintf_r+0x2a>
 8012712:	89ab      	ldrh	r3, [r5, #12]
 8012714:	059a      	lsls	r2, r3, #22
 8012716:	d402      	bmi.n	801271e <_vfiprintf_r+0x2a>
 8012718:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801271a:	f7ff feb0 	bl	801247e <__retarget_lock_acquire_recursive>
 801271e:	89ab      	ldrh	r3, [r5, #12]
 8012720:	071b      	lsls	r3, r3, #28
 8012722:	d501      	bpl.n	8012728 <_vfiprintf_r+0x34>
 8012724:	692b      	ldr	r3, [r5, #16]
 8012726:	b99b      	cbnz	r3, 8012750 <_vfiprintf_r+0x5c>
 8012728:	4629      	mov	r1, r5
 801272a:	4630      	mov	r0, r6
 801272c:	f7ff fd82 	bl	8012234 <__swsetup_r>
 8012730:	b170      	cbz	r0, 8012750 <_vfiprintf_r+0x5c>
 8012732:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012734:	07dc      	lsls	r4, r3, #31
 8012736:	d504      	bpl.n	8012742 <_vfiprintf_r+0x4e>
 8012738:	f04f 30ff 	mov.w	r0, #4294967295
 801273c:	b01d      	add	sp, #116	@ 0x74
 801273e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012742:	89ab      	ldrh	r3, [r5, #12]
 8012744:	0598      	lsls	r0, r3, #22
 8012746:	d4f7      	bmi.n	8012738 <_vfiprintf_r+0x44>
 8012748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801274a:	f7ff fe99 	bl	8012480 <__retarget_lock_release_recursive>
 801274e:	e7f3      	b.n	8012738 <_vfiprintf_r+0x44>
 8012750:	2300      	movs	r3, #0
 8012752:	9309      	str	r3, [sp, #36]	@ 0x24
 8012754:	2320      	movs	r3, #32
 8012756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801275a:	f8cd 800c 	str.w	r8, [sp, #12]
 801275e:	2330      	movs	r3, #48	@ 0x30
 8012760:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012910 <_vfiprintf_r+0x21c>
 8012764:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012768:	f04f 0901 	mov.w	r9, #1
 801276c:	4623      	mov	r3, r4
 801276e:	469a      	mov	sl, r3
 8012770:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012774:	b10a      	cbz	r2, 801277a <_vfiprintf_r+0x86>
 8012776:	2a25      	cmp	r2, #37	@ 0x25
 8012778:	d1f9      	bne.n	801276e <_vfiprintf_r+0x7a>
 801277a:	ebba 0b04 	subs.w	fp, sl, r4
 801277e:	d00b      	beq.n	8012798 <_vfiprintf_r+0xa4>
 8012780:	465b      	mov	r3, fp
 8012782:	4622      	mov	r2, r4
 8012784:	4629      	mov	r1, r5
 8012786:	4630      	mov	r0, r6
 8012788:	f7ff ffa1 	bl	80126ce <__sfputs_r>
 801278c:	3001      	adds	r0, #1
 801278e:	f000 80a7 	beq.w	80128e0 <_vfiprintf_r+0x1ec>
 8012792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012794:	445a      	add	r2, fp
 8012796:	9209      	str	r2, [sp, #36]	@ 0x24
 8012798:	f89a 3000 	ldrb.w	r3, [sl]
 801279c:	2b00      	cmp	r3, #0
 801279e:	f000 809f 	beq.w	80128e0 <_vfiprintf_r+0x1ec>
 80127a2:	2300      	movs	r3, #0
 80127a4:	f04f 32ff 	mov.w	r2, #4294967295
 80127a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80127ac:	f10a 0a01 	add.w	sl, sl, #1
 80127b0:	9304      	str	r3, [sp, #16]
 80127b2:	9307      	str	r3, [sp, #28]
 80127b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80127b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80127ba:	4654      	mov	r4, sl
 80127bc:	2205      	movs	r2, #5
 80127be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127c2:	4853      	ldr	r0, [pc, #332]	@ (8012910 <_vfiprintf_r+0x21c>)
 80127c4:	f7f9 fc3c 	bl	800c040 <memchr>
 80127c8:	9a04      	ldr	r2, [sp, #16]
 80127ca:	b9d8      	cbnz	r0, 8012804 <_vfiprintf_r+0x110>
 80127cc:	06d1      	lsls	r1, r2, #27
 80127ce:	bf44      	itt	mi
 80127d0:	2320      	movmi	r3, #32
 80127d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127d6:	0713      	lsls	r3, r2, #28
 80127d8:	bf44      	itt	mi
 80127da:	232b      	movmi	r3, #43	@ 0x2b
 80127dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80127e0:	f89a 3000 	ldrb.w	r3, [sl]
 80127e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80127e6:	d015      	beq.n	8012814 <_vfiprintf_r+0x120>
 80127e8:	9a07      	ldr	r2, [sp, #28]
 80127ea:	4654      	mov	r4, sl
 80127ec:	2000      	movs	r0, #0
 80127ee:	f04f 0c0a 	mov.w	ip, #10
 80127f2:	4621      	mov	r1, r4
 80127f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80127f8:	3b30      	subs	r3, #48	@ 0x30
 80127fa:	2b09      	cmp	r3, #9
 80127fc:	d94b      	bls.n	8012896 <_vfiprintf_r+0x1a2>
 80127fe:	b1b0      	cbz	r0, 801282e <_vfiprintf_r+0x13a>
 8012800:	9207      	str	r2, [sp, #28]
 8012802:	e014      	b.n	801282e <_vfiprintf_r+0x13a>
 8012804:	eba0 0308 	sub.w	r3, r0, r8
 8012808:	fa09 f303 	lsl.w	r3, r9, r3
 801280c:	4313      	orrs	r3, r2
 801280e:	9304      	str	r3, [sp, #16]
 8012810:	46a2      	mov	sl, r4
 8012812:	e7d2      	b.n	80127ba <_vfiprintf_r+0xc6>
 8012814:	9b03      	ldr	r3, [sp, #12]
 8012816:	1d19      	adds	r1, r3, #4
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	9103      	str	r1, [sp, #12]
 801281c:	2b00      	cmp	r3, #0
 801281e:	bfbb      	ittet	lt
 8012820:	425b      	neglt	r3, r3
 8012822:	f042 0202 	orrlt.w	r2, r2, #2
 8012826:	9307      	strge	r3, [sp, #28]
 8012828:	9307      	strlt	r3, [sp, #28]
 801282a:	bfb8      	it	lt
 801282c:	9204      	strlt	r2, [sp, #16]
 801282e:	7823      	ldrb	r3, [r4, #0]
 8012830:	2b2e      	cmp	r3, #46	@ 0x2e
 8012832:	d10a      	bne.n	801284a <_vfiprintf_r+0x156>
 8012834:	7863      	ldrb	r3, [r4, #1]
 8012836:	2b2a      	cmp	r3, #42	@ 0x2a
 8012838:	d132      	bne.n	80128a0 <_vfiprintf_r+0x1ac>
 801283a:	9b03      	ldr	r3, [sp, #12]
 801283c:	1d1a      	adds	r2, r3, #4
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	9203      	str	r2, [sp, #12]
 8012842:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012846:	3402      	adds	r4, #2
 8012848:	9305      	str	r3, [sp, #20]
 801284a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012920 <_vfiprintf_r+0x22c>
 801284e:	7821      	ldrb	r1, [r4, #0]
 8012850:	2203      	movs	r2, #3
 8012852:	4650      	mov	r0, sl
 8012854:	f7f9 fbf4 	bl	800c040 <memchr>
 8012858:	b138      	cbz	r0, 801286a <_vfiprintf_r+0x176>
 801285a:	9b04      	ldr	r3, [sp, #16]
 801285c:	eba0 000a 	sub.w	r0, r0, sl
 8012860:	2240      	movs	r2, #64	@ 0x40
 8012862:	4082      	lsls	r2, r0
 8012864:	4313      	orrs	r3, r2
 8012866:	3401      	adds	r4, #1
 8012868:	9304      	str	r3, [sp, #16]
 801286a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801286e:	4829      	ldr	r0, [pc, #164]	@ (8012914 <_vfiprintf_r+0x220>)
 8012870:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012874:	2206      	movs	r2, #6
 8012876:	f7f9 fbe3 	bl	800c040 <memchr>
 801287a:	2800      	cmp	r0, #0
 801287c:	d03f      	beq.n	80128fe <_vfiprintf_r+0x20a>
 801287e:	4b26      	ldr	r3, [pc, #152]	@ (8012918 <_vfiprintf_r+0x224>)
 8012880:	bb1b      	cbnz	r3, 80128ca <_vfiprintf_r+0x1d6>
 8012882:	9b03      	ldr	r3, [sp, #12]
 8012884:	3307      	adds	r3, #7
 8012886:	f023 0307 	bic.w	r3, r3, #7
 801288a:	3308      	adds	r3, #8
 801288c:	9303      	str	r3, [sp, #12]
 801288e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012890:	443b      	add	r3, r7
 8012892:	9309      	str	r3, [sp, #36]	@ 0x24
 8012894:	e76a      	b.n	801276c <_vfiprintf_r+0x78>
 8012896:	fb0c 3202 	mla	r2, ip, r2, r3
 801289a:	460c      	mov	r4, r1
 801289c:	2001      	movs	r0, #1
 801289e:	e7a8      	b.n	80127f2 <_vfiprintf_r+0xfe>
 80128a0:	2300      	movs	r3, #0
 80128a2:	3401      	adds	r4, #1
 80128a4:	9305      	str	r3, [sp, #20]
 80128a6:	4619      	mov	r1, r3
 80128a8:	f04f 0c0a 	mov.w	ip, #10
 80128ac:	4620      	mov	r0, r4
 80128ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80128b2:	3a30      	subs	r2, #48	@ 0x30
 80128b4:	2a09      	cmp	r2, #9
 80128b6:	d903      	bls.n	80128c0 <_vfiprintf_r+0x1cc>
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d0c6      	beq.n	801284a <_vfiprintf_r+0x156>
 80128bc:	9105      	str	r1, [sp, #20]
 80128be:	e7c4      	b.n	801284a <_vfiprintf_r+0x156>
 80128c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80128c4:	4604      	mov	r4, r0
 80128c6:	2301      	movs	r3, #1
 80128c8:	e7f0      	b.n	80128ac <_vfiprintf_r+0x1b8>
 80128ca:	ab03      	add	r3, sp, #12
 80128cc:	9300      	str	r3, [sp, #0]
 80128ce:	462a      	mov	r2, r5
 80128d0:	4b12      	ldr	r3, [pc, #72]	@ (801291c <_vfiprintf_r+0x228>)
 80128d2:	a904      	add	r1, sp, #16
 80128d4:	4630      	mov	r0, r6
 80128d6:	f3af 8000 	nop.w
 80128da:	4607      	mov	r7, r0
 80128dc:	1c78      	adds	r0, r7, #1
 80128de:	d1d6      	bne.n	801288e <_vfiprintf_r+0x19a>
 80128e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80128e2:	07d9      	lsls	r1, r3, #31
 80128e4:	d405      	bmi.n	80128f2 <_vfiprintf_r+0x1fe>
 80128e6:	89ab      	ldrh	r3, [r5, #12]
 80128e8:	059a      	lsls	r2, r3, #22
 80128ea:	d402      	bmi.n	80128f2 <_vfiprintf_r+0x1fe>
 80128ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80128ee:	f7ff fdc7 	bl	8012480 <__retarget_lock_release_recursive>
 80128f2:	89ab      	ldrh	r3, [r5, #12]
 80128f4:	065b      	lsls	r3, r3, #25
 80128f6:	f53f af1f 	bmi.w	8012738 <_vfiprintf_r+0x44>
 80128fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128fc:	e71e      	b.n	801273c <_vfiprintf_r+0x48>
 80128fe:	ab03      	add	r3, sp, #12
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	462a      	mov	r2, r5
 8012904:	4b05      	ldr	r3, [pc, #20]	@ (801291c <_vfiprintf_r+0x228>)
 8012906:	a904      	add	r1, sp, #16
 8012908:	4630      	mov	r0, r6
 801290a:	f000 f879 	bl	8012a00 <_printf_i>
 801290e:	e7e4      	b.n	80128da <_vfiprintf_r+0x1e6>
 8012910:	0801310c 	.word	0x0801310c
 8012914:	08013116 	.word	0x08013116
 8012918:	00000000 	.word	0x00000000
 801291c:	080126cf 	.word	0x080126cf
 8012920:	08013112 	.word	0x08013112

08012924 <_printf_common>:
 8012924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012928:	4616      	mov	r6, r2
 801292a:	4698      	mov	r8, r3
 801292c:	688a      	ldr	r2, [r1, #8]
 801292e:	690b      	ldr	r3, [r1, #16]
 8012930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012934:	4293      	cmp	r3, r2
 8012936:	bfb8      	it	lt
 8012938:	4613      	movlt	r3, r2
 801293a:	6033      	str	r3, [r6, #0]
 801293c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012940:	4607      	mov	r7, r0
 8012942:	460c      	mov	r4, r1
 8012944:	b10a      	cbz	r2, 801294a <_printf_common+0x26>
 8012946:	3301      	adds	r3, #1
 8012948:	6033      	str	r3, [r6, #0]
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	0699      	lsls	r1, r3, #26
 801294e:	bf42      	ittt	mi
 8012950:	6833      	ldrmi	r3, [r6, #0]
 8012952:	3302      	addmi	r3, #2
 8012954:	6033      	strmi	r3, [r6, #0]
 8012956:	6825      	ldr	r5, [r4, #0]
 8012958:	f015 0506 	ands.w	r5, r5, #6
 801295c:	d106      	bne.n	801296c <_printf_common+0x48>
 801295e:	f104 0a19 	add.w	sl, r4, #25
 8012962:	68e3      	ldr	r3, [r4, #12]
 8012964:	6832      	ldr	r2, [r6, #0]
 8012966:	1a9b      	subs	r3, r3, r2
 8012968:	42ab      	cmp	r3, r5
 801296a:	dc26      	bgt.n	80129ba <_printf_common+0x96>
 801296c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012970:	6822      	ldr	r2, [r4, #0]
 8012972:	3b00      	subs	r3, #0
 8012974:	bf18      	it	ne
 8012976:	2301      	movne	r3, #1
 8012978:	0692      	lsls	r2, r2, #26
 801297a:	d42b      	bmi.n	80129d4 <_printf_common+0xb0>
 801297c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012980:	4641      	mov	r1, r8
 8012982:	4638      	mov	r0, r7
 8012984:	47c8      	blx	r9
 8012986:	3001      	adds	r0, #1
 8012988:	d01e      	beq.n	80129c8 <_printf_common+0xa4>
 801298a:	6823      	ldr	r3, [r4, #0]
 801298c:	6922      	ldr	r2, [r4, #16]
 801298e:	f003 0306 	and.w	r3, r3, #6
 8012992:	2b04      	cmp	r3, #4
 8012994:	bf02      	ittt	eq
 8012996:	68e5      	ldreq	r5, [r4, #12]
 8012998:	6833      	ldreq	r3, [r6, #0]
 801299a:	1aed      	subeq	r5, r5, r3
 801299c:	68a3      	ldr	r3, [r4, #8]
 801299e:	bf0c      	ite	eq
 80129a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129a4:	2500      	movne	r5, #0
 80129a6:	4293      	cmp	r3, r2
 80129a8:	bfc4      	itt	gt
 80129aa:	1a9b      	subgt	r3, r3, r2
 80129ac:	18ed      	addgt	r5, r5, r3
 80129ae:	2600      	movs	r6, #0
 80129b0:	341a      	adds	r4, #26
 80129b2:	42b5      	cmp	r5, r6
 80129b4:	d11a      	bne.n	80129ec <_printf_common+0xc8>
 80129b6:	2000      	movs	r0, #0
 80129b8:	e008      	b.n	80129cc <_printf_common+0xa8>
 80129ba:	2301      	movs	r3, #1
 80129bc:	4652      	mov	r2, sl
 80129be:	4641      	mov	r1, r8
 80129c0:	4638      	mov	r0, r7
 80129c2:	47c8      	blx	r9
 80129c4:	3001      	adds	r0, #1
 80129c6:	d103      	bne.n	80129d0 <_printf_common+0xac>
 80129c8:	f04f 30ff 	mov.w	r0, #4294967295
 80129cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129d0:	3501      	adds	r5, #1
 80129d2:	e7c6      	b.n	8012962 <_printf_common+0x3e>
 80129d4:	18e1      	adds	r1, r4, r3
 80129d6:	1c5a      	adds	r2, r3, #1
 80129d8:	2030      	movs	r0, #48	@ 0x30
 80129da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80129de:	4422      	add	r2, r4
 80129e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80129e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80129e8:	3302      	adds	r3, #2
 80129ea:	e7c7      	b.n	801297c <_printf_common+0x58>
 80129ec:	2301      	movs	r3, #1
 80129ee:	4622      	mov	r2, r4
 80129f0:	4641      	mov	r1, r8
 80129f2:	4638      	mov	r0, r7
 80129f4:	47c8      	blx	r9
 80129f6:	3001      	adds	r0, #1
 80129f8:	d0e6      	beq.n	80129c8 <_printf_common+0xa4>
 80129fa:	3601      	adds	r6, #1
 80129fc:	e7d9      	b.n	80129b2 <_printf_common+0x8e>
	...

08012a00 <_printf_i>:
 8012a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a04:	7e0f      	ldrb	r7, [r1, #24]
 8012a06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012a08:	2f78      	cmp	r7, #120	@ 0x78
 8012a0a:	4691      	mov	r9, r2
 8012a0c:	4680      	mov	r8, r0
 8012a0e:	460c      	mov	r4, r1
 8012a10:	469a      	mov	sl, r3
 8012a12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012a16:	d807      	bhi.n	8012a28 <_printf_i+0x28>
 8012a18:	2f62      	cmp	r7, #98	@ 0x62
 8012a1a:	d80a      	bhi.n	8012a32 <_printf_i+0x32>
 8012a1c:	2f00      	cmp	r7, #0
 8012a1e:	f000 80d2 	beq.w	8012bc6 <_printf_i+0x1c6>
 8012a22:	2f58      	cmp	r7, #88	@ 0x58
 8012a24:	f000 80b9 	beq.w	8012b9a <_printf_i+0x19a>
 8012a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012a2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012a30:	e03a      	b.n	8012aa8 <_printf_i+0xa8>
 8012a32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012a36:	2b15      	cmp	r3, #21
 8012a38:	d8f6      	bhi.n	8012a28 <_printf_i+0x28>
 8012a3a:	a101      	add	r1, pc, #4	@ (adr r1, 8012a40 <_printf_i+0x40>)
 8012a3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012a40:	08012a99 	.word	0x08012a99
 8012a44:	08012aad 	.word	0x08012aad
 8012a48:	08012a29 	.word	0x08012a29
 8012a4c:	08012a29 	.word	0x08012a29
 8012a50:	08012a29 	.word	0x08012a29
 8012a54:	08012a29 	.word	0x08012a29
 8012a58:	08012aad 	.word	0x08012aad
 8012a5c:	08012a29 	.word	0x08012a29
 8012a60:	08012a29 	.word	0x08012a29
 8012a64:	08012a29 	.word	0x08012a29
 8012a68:	08012a29 	.word	0x08012a29
 8012a6c:	08012bad 	.word	0x08012bad
 8012a70:	08012ad7 	.word	0x08012ad7
 8012a74:	08012b67 	.word	0x08012b67
 8012a78:	08012a29 	.word	0x08012a29
 8012a7c:	08012a29 	.word	0x08012a29
 8012a80:	08012bcf 	.word	0x08012bcf
 8012a84:	08012a29 	.word	0x08012a29
 8012a88:	08012ad7 	.word	0x08012ad7
 8012a8c:	08012a29 	.word	0x08012a29
 8012a90:	08012a29 	.word	0x08012a29
 8012a94:	08012b6f 	.word	0x08012b6f
 8012a98:	6833      	ldr	r3, [r6, #0]
 8012a9a:	1d1a      	adds	r2, r3, #4
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	6032      	str	r2, [r6, #0]
 8012aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012aa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	e09d      	b.n	8012be8 <_printf_i+0x1e8>
 8012aac:	6833      	ldr	r3, [r6, #0]
 8012aae:	6820      	ldr	r0, [r4, #0]
 8012ab0:	1d19      	adds	r1, r3, #4
 8012ab2:	6031      	str	r1, [r6, #0]
 8012ab4:	0606      	lsls	r6, r0, #24
 8012ab6:	d501      	bpl.n	8012abc <_printf_i+0xbc>
 8012ab8:	681d      	ldr	r5, [r3, #0]
 8012aba:	e003      	b.n	8012ac4 <_printf_i+0xc4>
 8012abc:	0645      	lsls	r5, r0, #25
 8012abe:	d5fb      	bpl.n	8012ab8 <_printf_i+0xb8>
 8012ac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012ac4:	2d00      	cmp	r5, #0
 8012ac6:	da03      	bge.n	8012ad0 <_printf_i+0xd0>
 8012ac8:	232d      	movs	r3, #45	@ 0x2d
 8012aca:	426d      	negs	r5, r5
 8012acc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ad0:	4859      	ldr	r0, [pc, #356]	@ (8012c38 <_printf_i+0x238>)
 8012ad2:	230a      	movs	r3, #10
 8012ad4:	e011      	b.n	8012afa <_printf_i+0xfa>
 8012ad6:	6821      	ldr	r1, [r4, #0]
 8012ad8:	6833      	ldr	r3, [r6, #0]
 8012ada:	0608      	lsls	r0, r1, #24
 8012adc:	f853 5b04 	ldr.w	r5, [r3], #4
 8012ae0:	d402      	bmi.n	8012ae8 <_printf_i+0xe8>
 8012ae2:	0649      	lsls	r1, r1, #25
 8012ae4:	bf48      	it	mi
 8012ae6:	b2ad      	uxthmi	r5, r5
 8012ae8:	2f6f      	cmp	r7, #111	@ 0x6f
 8012aea:	4853      	ldr	r0, [pc, #332]	@ (8012c38 <_printf_i+0x238>)
 8012aec:	6033      	str	r3, [r6, #0]
 8012aee:	bf14      	ite	ne
 8012af0:	230a      	movne	r3, #10
 8012af2:	2308      	moveq	r3, #8
 8012af4:	2100      	movs	r1, #0
 8012af6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012afa:	6866      	ldr	r6, [r4, #4]
 8012afc:	60a6      	str	r6, [r4, #8]
 8012afe:	2e00      	cmp	r6, #0
 8012b00:	bfa2      	ittt	ge
 8012b02:	6821      	ldrge	r1, [r4, #0]
 8012b04:	f021 0104 	bicge.w	r1, r1, #4
 8012b08:	6021      	strge	r1, [r4, #0]
 8012b0a:	b90d      	cbnz	r5, 8012b10 <_printf_i+0x110>
 8012b0c:	2e00      	cmp	r6, #0
 8012b0e:	d04b      	beq.n	8012ba8 <_printf_i+0x1a8>
 8012b10:	4616      	mov	r6, r2
 8012b12:	fbb5 f1f3 	udiv	r1, r5, r3
 8012b16:	fb03 5711 	mls	r7, r3, r1, r5
 8012b1a:	5dc7      	ldrb	r7, [r0, r7]
 8012b1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012b20:	462f      	mov	r7, r5
 8012b22:	42bb      	cmp	r3, r7
 8012b24:	460d      	mov	r5, r1
 8012b26:	d9f4      	bls.n	8012b12 <_printf_i+0x112>
 8012b28:	2b08      	cmp	r3, #8
 8012b2a:	d10b      	bne.n	8012b44 <_printf_i+0x144>
 8012b2c:	6823      	ldr	r3, [r4, #0]
 8012b2e:	07df      	lsls	r7, r3, #31
 8012b30:	d508      	bpl.n	8012b44 <_printf_i+0x144>
 8012b32:	6923      	ldr	r3, [r4, #16]
 8012b34:	6861      	ldr	r1, [r4, #4]
 8012b36:	4299      	cmp	r1, r3
 8012b38:	bfde      	ittt	le
 8012b3a:	2330      	movle	r3, #48	@ 0x30
 8012b3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012b40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012b44:	1b92      	subs	r2, r2, r6
 8012b46:	6122      	str	r2, [r4, #16]
 8012b48:	f8cd a000 	str.w	sl, [sp]
 8012b4c:	464b      	mov	r3, r9
 8012b4e:	aa03      	add	r2, sp, #12
 8012b50:	4621      	mov	r1, r4
 8012b52:	4640      	mov	r0, r8
 8012b54:	f7ff fee6 	bl	8012924 <_printf_common>
 8012b58:	3001      	adds	r0, #1
 8012b5a:	d14a      	bne.n	8012bf2 <_printf_i+0x1f2>
 8012b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b60:	b004      	add	sp, #16
 8012b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b66:	6823      	ldr	r3, [r4, #0]
 8012b68:	f043 0320 	orr.w	r3, r3, #32
 8012b6c:	6023      	str	r3, [r4, #0]
 8012b6e:	4833      	ldr	r0, [pc, #204]	@ (8012c3c <_printf_i+0x23c>)
 8012b70:	2778      	movs	r7, #120	@ 0x78
 8012b72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012b76:	6823      	ldr	r3, [r4, #0]
 8012b78:	6831      	ldr	r1, [r6, #0]
 8012b7a:	061f      	lsls	r7, r3, #24
 8012b7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012b80:	d402      	bmi.n	8012b88 <_printf_i+0x188>
 8012b82:	065f      	lsls	r7, r3, #25
 8012b84:	bf48      	it	mi
 8012b86:	b2ad      	uxthmi	r5, r5
 8012b88:	6031      	str	r1, [r6, #0]
 8012b8a:	07d9      	lsls	r1, r3, #31
 8012b8c:	bf44      	itt	mi
 8012b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8012b92:	6023      	strmi	r3, [r4, #0]
 8012b94:	b11d      	cbz	r5, 8012b9e <_printf_i+0x19e>
 8012b96:	2310      	movs	r3, #16
 8012b98:	e7ac      	b.n	8012af4 <_printf_i+0xf4>
 8012b9a:	4827      	ldr	r0, [pc, #156]	@ (8012c38 <_printf_i+0x238>)
 8012b9c:	e7e9      	b.n	8012b72 <_printf_i+0x172>
 8012b9e:	6823      	ldr	r3, [r4, #0]
 8012ba0:	f023 0320 	bic.w	r3, r3, #32
 8012ba4:	6023      	str	r3, [r4, #0]
 8012ba6:	e7f6      	b.n	8012b96 <_printf_i+0x196>
 8012ba8:	4616      	mov	r6, r2
 8012baa:	e7bd      	b.n	8012b28 <_printf_i+0x128>
 8012bac:	6833      	ldr	r3, [r6, #0]
 8012bae:	6825      	ldr	r5, [r4, #0]
 8012bb0:	6961      	ldr	r1, [r4, #20]
 8012bb2:	1d18      	adds	r0, r3, #4
 8012bb4:	6030      	str	r0, [r6, #0]
 8012bb6:	062e      	lsls	r6, r5, #24
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	d501      	bpl.n	8012bc0 <_printf_i+0x1c0>
 8012bbc:	6019      	str	r1, [r3, #0]
 8012bbe:	e002      	b.n	8012bc6 <_printf_i+0x1c6>
 8012bc0:	0668      	lsls	r0, r5, #25
 8012bc2:	d5fb      	bpl.n	8012bbc <_printf_i+0x1bc>
 8012bc4:	8019      	strh	r1, [r3, #0]
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	6123      	str	r3, [r4, #16]
 8012bca:	4616      	mov	r6, r2
 8012bcc:	e7bc      	b.n	8012b48 <_printf_i+0x148>
 8012bce:	6833      	ldr	r3, [r6, #0]
 8012bd0:	1d1a      	adds	r2, r3, #4
 8012bd2:	6032      	str	r2, [r6, #0]
 8012bd4:	681e      	ldr	r6, [r3, #0]
 8012bd6:	6862      	ldr	r2, [r4, #4]
 8012bd8:	2100      	movs	r1, #0
 8012bda:	4630      	mov	r0, r6
 8012bdc:	f7f9 fa30 	bl	800c040 <memchr>
 8012be0:	b108      	cbz	r0, 8012be6 <_printf_i+0x1e6>
 8012be2:	1b80      	subs	r0, r0, r6
 8012be4:	6060      	str	r0, [r4, #4]
 8012be6:	6863      	ldr	r3, [r4, #4]
 8012be8:	6123      	str	r3, [r4, #16]
 8012bea:	2300      	movs	r3, #0
 8012bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012bf0:	e7aa      	b.n	8012b48 <_printf_i+0x148>
 8012bf2:	6923      	ldr	r3, [r4, #16]
 8012bf4:	4632      	mov	r2, r6
 8012bf6:	4649      	mov	r1, r9
 8012bf8:	4640      	mov	r0, r8
 8012bfa:	47d0      	blx	sl
 8012bfc:	3001      	adds	r0, #1
 8012bfe:	d0ad      	beq.n	8012b5c <_printf_i+0x15c>
 8012c00:	6823      	ldr	r3, [r4, #0]
 8012c02:	079b      	lsls	r3, r3, #30
 8012c04:	d413      	bmi.n	8012c2e <_printf_i+0x22e>
 8012c06:	68e0      	ldr	r0, [r4, #12]
 8012c08:	9b03      	ldr	r3, [sp, #12]
 8012c0a:	4298      	cmp	r0, r3
 8012c0c:	bfb8      	it	lt
 8012c0e:	4618      	movlt	r0, r3
 8012c10:	e7a6      	b.n	8012b60 <_printf_i+0x160>
 8012c12:	2301      	movs	r3, #1
 8012c14:	4632      	mov	r2, r6
 8012c16:	4649      	mov	r1, r9
 8012c18:	4640      	mov	r0, r8
 8012c1a:	47d0      	blx	sl
 8012c1c:	3001      	adds	r0, #1
 8012c1e:	d09d      	beq.n	8012b5c <_printf_i+0x15c>
 8012c20:	3501      	adds	r5, #1
 8012c22:	68e3      	ldr	r3, [r4, #12]
 8012c24:	9903      	ldr	r1, [sp, #12]
 8012c26:	1a5b      	subs	r3, r3, r1
 8012c28:	42ab      	cmp	r3, r5
 8012c2a:	dcf2      	bgt.n	8012c12 <_printf_i+0x212>
 8012c2c:	e7eb      	b.n	8012c06 <_printf_i+0x206>
 8012c2e:	2500      	movs	r5, #0
 8012c30:	f104 0619 	add.w	r6, r4, #25
 8012c34:	e7f5      	b.n	8012c22 <_printf_i+0x222>
 8012c36:	bf00      	nop
 8012c38:	0801311d 	.word	0x0801311d
 8012c3c:	0801312e 	.word	0x0801312e

08012c40 <__sflush_r>:
 8012c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c48:	0716      	lsls	r6, r2, #28
 8012c4a:	4605      	mov	r5, r0
 8012c4c:	460c      	mov	r4, r1
 8012c4e:	d454      	bmi.n	8012cfa <__sflush_r+0xba>
 8012c50:	684b      	ldr	r3, [r1, #4]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	dc02      	bgt.n	8012c5c <__sflush_r+0x1c>
 8012c56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	dd48      	ble.n	8012cee <__sflush_r+0xae>
 8012c5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012c5e:	2e00      	cmp	r6, #0
 8012c60:	d045      	beq.n	8012cee <__sflush_r+0xae>
 8012c62:	2300      	movs	r3, #0
 8012c64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012c68:	682f      	ldr	r7, [r5, #0]
 8012c6a:	6a21      	ldr	r1, [r4, #32]
 8012c6c:	602b      	str	r3, [r5, #0]
 8012c6e:	d030      	beq.n	8012cd2 <__sflush_r+0x92>
 8012c70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012c72:	89a3      	ldrh	r3, [r4, #12]
 8012c74:	0759      	lsls	r1, r3, #29
 8012c76:	d505      	bpl.n	8012c84 <__sflush_r+0x44>
 8012c78:	6863      	ldr	r3, [r4, #4]
 8012c7a:	1ad2      	subs	r2, r2, r3
 8012c7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012c7e:	b10b      	cbz	r3, 8012c84 <__sflush_r+0x44>
 8012c80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012c82:	1ad2      	subs	r2, r2, r3
 8012c84:	2300      	movs	r3, #0
 8012c86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012c88:	6a21      	ldr	r1, [r4, #32]
 8012c8a:	4628      	mov	r0, r5
 8012c8c:	47b0      	blx	r6
 8012c8e:	1c43      	adds	r3, r0, #1
 8012c90:	89a3      	ldrh	r3, [r4, #12]
 8012c92:	d106      	bne.n	8012ca2 <__sflush_r+0x62>
 8012c94:	6829      	ldr	r1, [r5, #0]
 8012c96:	291d      	cmp	r1, #29
 8012c98:	d82b      	bhi.n	8012cf2 <__sflush_r+0xb2>
 8012c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8012d44 <__sflush_r+0x104>)
 8012c9c:	410a      	asrs	r2, r1
 8012c9e:	07d6      	lsls	r6, r2, #31
 8012ca0:	d427      	bmi.n	8012cf2 <__sflush_r+0xb2>
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	6062      	str	r2, [r4, #4]
 8012ca6:	04d9      	lsls	r1, r3, #19
 8012ca8:	6922      	ldr	r2, [r4, #16]
 8012caa:	6022      	str	r2, [r4, #0]
 8012cac:	d504      	bpl.n	8012cb8 <__sflush_r+0x78>
 8012cae:	1c42      	adds	r2, r0, #1
 8012cb0:	d101      	bne.n	8012cb6 <__sflush_r+0x76>
 8012cb2:	682b      	ldr	r3, [r5, #0]
 8012cb4:	b903      	cbnz	r3, 8012cb8 <__sflush_r+0x78>
 8012cb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8012cb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012cba:	602f      	str	r7, [r5, #0]
 8012cbc:	b1b9      	cbz	r1, 8012cee <__sflush_r+0xae>
 8012cbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012cc2:	4299      	cmp	r1, r3
 8012cc4:	d002      	beq.n	8012ccc <__sflush_r+0x8c>
 8012cc6:	4628      	mov	r0, r5
 8012cc8:	f7ff fbea 	bl	80124a0 <_free_r>
 8012ccc:	2300      	movs	r3, #0
 8012cce:	6363      	str	r3, [r4, #52]	@ 0x34
 8012cd0:	e00d      	b.n	8012cee <__sflush_r+0xae>
 8012cd2:	2301      	movs	r3, #1
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	47b0      	blx	r6
 8012cd8:	4602      	mov	r2, r0
 8012cda:	1c50      	adds	r0, r2, #1
 8012cdc:	d1c9      	bne.n	8012c72 <__sflush_r+0x32>
 8012cde:	682b      	ldr	r3, [r5, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d0c6      	beq.n	8012c72 <__sflush_r+0x32>
 8012ce4:	2b1d      	cmp	r3, #29
 8012ce6:	d001      	beq.n	8012cec <__sflush_r+0xac>
 8012ce8:	2b16      	cmp	r3, #22
 8012cea:	d11e      	bne.n	8012d2a <__sflush_r+0xea>
 8012cec:	602f      	str	r7, [r5, #0]
 8012cee:	2000      	movs	r0, #0
 8012cf0:	e022      	b.n	8012d38 <__sflush_r+0xf8>
 8012cf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012cf6:	b21b      	sxth	r3, r3
 8012cf8:	e01b      	b.n	8012d32 <__sflush_r+0xf2>
 8012cfa:	690f      	ldr	r7, [r1, #16]
 8012cfc:	2f00      	cmp	r7, #0
 8012cfe:	d0f6      	beq.n	8012cee <__sflush_r+0xae>
 8012d00:	0793      	lsls	r3, r2, #30
 8012d02:	680e      	ldr	r6, [r1, #0]
 8012d04:	bf08      	it	eq
 8012d06:	694b      	ldreq	r3, [r1, #20]
 8012d08:	600f      	str	r7, [r1, #0]
 8012d0a:	bf18      	it	ne
 8012d0c:	2300      	movne	r3, #0
 8012d0e:	eba6 0807 	sub.w	r8, r6, r7
 8012d12:	608b      	str	r3, [r1, #8]
 8012d14:	f1b8 0f00 	cmp.w	r8, #0
 8012d18:	dde9      	ble.n	8012cee <__sflush_r+0xae>
 8012d1a:	6a21      	ldr	r1, [r4, #32]
 8012d1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012d1e:	4643      	mov	r3, r8
 8012d20:	463a      	mov	r2, r7
 8012d22:	4628      	mov	r0, r5
 8012d24:	47b0      	blx	r6
 8012d26:	2800      	cmp	r0, #0
 8012d28:	dc08      	bgt.n	8012d3c <__sflush_r+0xfc>
 8012d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d32:	81a3      	strh	r3, [r4, #12]
 8012d34:	f04f 30ff 	mov.w	r0, #4294967295
 8012d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d3c:	4407      	add	r7, r0
 8012d3e:	eba8 0800 	sub.w	r8, r8, r0
 8012d42:	e7e7      	b.n	8012d14 <__sflush_r+0xd4>
 8012d44:	dfbffffe 	.word	0xdfbffffe

08012d48 <_fflush_r>:
 8012d48:	b538      	push	{r3, r4, r5, lr}
 8012d4a:	690b      	ldr	r3, [r1, #16]
 8012d4c:	4605      	mov	r5, r0
 8012d4e:	460c      	mov	r4, r1
 8012d50:	b913      	cbnz	r3, 8012d58 <_fflush_r+0x10>
 8012d52:	2500      	movs	r5, #0
 8012d54:	4628      	mov	r0, r5
 8012d56:	bd38      	pop	{r3, r4, r5, pc}
 8012d58:	b118      	cbz	r0, 8012d62 <_fflush_r+0x1a>
 8012d5a:	6a03      	ldr	r3, [r0, #32]
 8012d5c:	b90b      	cbnz	r3, 8012d62 <_fflush_r+0x1a>
 8012d5e:	f7ff f80b 	bl	8011d78 <__sinit>
 8012d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d0f3      	beq.n	8012d52 <_fflush_r+0xa>
 8012d6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012d6c:	07d0      	lsls	r0, r2, #31
 8012d6e:	d404      	bmi.n	8012d7a <_fflush_r+0x32>
 8012d70:	0599      	lsls	r1, r3, #22
 8012d72:	d402      	bmi.n	8012d7a <_fflush_r+0x32>
 8012d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d76:	f7ff fb82 	bl	801247e <__retarget_lock_acquire_recursive>
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	4621      	mov	r1, r4
 8012d7e:	f7ff ff5f 	bl	8012c40 <__sflush_r>
 8012d82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012d84:	07da      	lsls	r2, r3, #31
 8012d86:	4605      	mov	r5, r0
 8012d88:	d4e4      	bmi.n	8012d54 <_fflush_r+0xc>
 8012d8a:	89a3      	ldrh	r3, [r4, #12]
 8012d8c:	059b      	lsls	r3, r3, #22
 8012d8e:	d4e1      	bmi.n	8012d54 <_fflush_r+0xc>
 8012d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012d92:	f7ff fb75 	bl	8012480 <__retarget_lock_release_recursive>
 8012d96:	e7dd      	b.n	8012d54 <_fflush_r+0xc>

08012d98 <__swhatbuf_r>:
 8012d98:	b570      	push	{r4, r5, r6, lr}
 8012d9a:	460c      	mov	r4, r1
 8012d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012da0:	2900      	cmp	r1, #0
 8012da2:	b096      	sub	sp, #88	@ 0x58
 8012da4:	4615      	mov	r5, r2
 8012da6:	461e      	mov	r6, r3
 8012da8:	da0d      	bge.n	8012dc6 <__swhatbuf_r+0x2e>
 8012daa:	89a3      	ldrh	r3, [r4, #12]
 8012dac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012db0:	f04f 0100 	mov.w	r1, #0
 8012db4:	bf14      	ite	ne
 8012db6:	2340      	movne	r3, #64	@ 0x40
 8012db8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012dbc:	2000      	movs	r0, #0
 8012dbe:	6031      	str	r1, [r6, #0]
 8012dc0:	602b      	str	r3, [r5, #0]
 8012dc2:	b016      	add	sp, #88	@ 0x58
 8012dc4:	bd70      	pop	{r4, r5, r6, pc}
 8012dc6:	466a      	mov	r2, sp
 8012dc8:	f000 f848 	bl	8012e5c <_fstat_r>
 8012dcc:	2800      	cmp	r0, #0
 8012dce:	dbec      	blt.n	8012daa <__swhatbuf_r+0x12>
 8012dd0:	9901      	ldr	r1, [sp, #4]
 8012dd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012dd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012dda:	4259      	negs	r1, r3
 8012ddc:	4159      	adcs	r1, r3
 8012dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012de2:	e7eb      	b.n	8012dbc <__swhatbuf_r+0x24>

08012de4 <__smakebuf_r>:
 8012de4:	898b      	ldrh	r3, [r1, #12]
 8012de6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012de8:	079d      	lsls	r5, r3, #30
 8012dea:	4606      	mov	r6, r0
 8012dec:	460c      	mov	r4, r1
 8012dee:	d507      	bpl.n	8012e00 <__smakebuf_r+0x1c>
 8012df0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012df4:	6023      	str	r3, [r4, #0]
 8012df6:	6123      	str	r3, [r4, #16]
 8012df8:	2301      	movs	r3, #1
 8012dfa:	6163      	str	r3, [r4, #20]
 8012dfc:	b003      	add	sp, #12
 8012dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e00:	ab01      	add	r3, sp, #4
 8012e02:	466a      	mov	r2, sp
 8012e04:	f7ff ffc8 	bl	8012d98 <__swhatbuf_r>
 8012e08:	9f00      	ldr	r7, [sp, #0]
 8012e0a:	4605      	mov	r5, r0
 8012e0c:	4639      	mov	r1, r7
 8012e0e:	4630      	mov	r0, r6
 8012e10:	f7ff fbba 	bl	8012588 <_malloc_r>
 8012e14:	b948      	cbnz	r0, 8012e2a <__smakebuf_r+0x46>
 8012e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e1a:	059a      	lsls	r2, r3, #22
 8012e1c:	d4ee      	bmi.n	8012dfc <__smakebuf_r+0x18>
 8012e1e:	f023 0303 	bic.w	r3, r3, #3
 8012e22:	f043 0302 	orr.w	r3, r3, #2
 8012e26:	81a3      	strh	r3, [r4, #12]
 8012e28:	e7e2      	b.n	8012df0 <__smakebuf_r+0xc>
 8012e2a:	89a3      	ldrh	r3, [r4, #12]
 8012e2c:	6020      	str	r0, [r4, #0]
 8012e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e32:	81a3      	strh	r3, [r4, #12]
 8012e34:	9b01      	ldr	r3, [sp, #4]
 8012e36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012e3a:	b15b      	cbz	r3, 8012e54 <__smakebuf_r+0x70>
 8012e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e40:	4630      	mov	r0, r6
 8012e42:	f000 f81d 	bl	8012e80 <_isatty_r>
 8012e46:	b128      	cbz	r0, 8012e54 <__smakebuf_r+0x70>
 8012e48:	89a3      	ldrh	r3, [r4, #12]
 8012e4a:	f023 0303 	bic.w	r3, r3, #3
 8012e4e:	f043 0301 	orr.w	r3, r3, #1
 8012e52:	81a3      	strh	r3, [r4, #12]
 8012e54:	89a3      	ldrh	r3, [r4, #12]
 8012e56:	431d      	orrs	r5, r3
 8012e58:	81a5      	strh	r5, [r4, #12]
 8012e5a:	e7cf      	b.n	8012dfc <__smakebuf_r+0x18>

08012e5c <_fstat_r>:
 8012e5c:	b538      	push	{r3, r4, r5, lr}
 8012e5e:	4d07      	ldr	r5, [pc, #28]	@ (8012e7c <_fstat_r+0x20>)
 8012e60:	2300      	movs	r3, #0
 8012e62:	4604      	mov	r4, r0
 8012e64:	4608      	mov	r0, r1
 8012e66:	4611      	mov	r1, r2
 8012e68:	602b      	str	r3, [r5, #0]
 8012e6a:	f7fa fb3b 	bl	800d4e4 <_fstat>
 8012e6e:	1c43      	adds	r3, r0, #1
 8012e70:	d102      	bne.n	8012e78 <_fstat_r+0x1c>
 8012e72:	682b      	ldr	r3, [r5, #0]
 8012e74:	b103      	cbz	r3, 8012e78 <_fstat_r+0x1c>
 8012e76:	6023      	str	r3, [r4, #0]
 8012e78:	bd38      	pop	{r3, r4, r5, pc}
 8012e7a:	bf00      	nop
 8012e7c:	2000437c 	.word	0x2000437c

08012e80 <_isatty_r>:
 8012e80:	b538      	push	{r3, r4, r5, lr}
 8012e82:	4d06      	ldr	r5, [pc, #24]	@ (8012e9c <_isatty_r+0x1c>)
 8012e84:	2300      	movs	r3, #0
 8012e86:	4604      	mov	r4, r0
 8012e88:	4608      	mov	r0, r1
 8012e8a:	602b      	str	r3, [r5, #0]
 8012e8c:	f7fa fa98 	bl	800d3c0 <_isatty>
 8012e90:	1c43      	adds	r3, r0, #1
 8012e92:	d102      	bne.n	8012e9a <_isatty_r+0x1a>
 8012e94:	682b      	ldr	r3, [r5, #0]
 8012e96:	b103      	cbz	r3, 8012e9a <_isatty_r+0x1a>
 8012e98:	6023      	str	r3, [r4, #0]
 8012e9a:	bd38      	pop	{r3, r4, r5, pc}
 8012e9c:	2000437c 	.word	0x2000437c

08012ea0 <_sbrk_r>:
 8012ea0:	b538      	push	{r3, r4, r5, lr}
 8012ea2:	4d06      	ldr	r5, [pc, #24]	@ (8012ebc <_sbrk_r+0x1c>)
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	4608      	mov	r0, r1
 8012eaa:	602b      	str	r3, [r5, #0]
 8012eac:	f7fa fccc 	bl	800d848 <_sbrk>
 8012eb0:	1c43      	adds	r3, r0, #1
 8012eb2:	d102      	bne.n	8012eba <_sbrk_r+0x1a>
 8012eb4:	682b      	ldr	r3, [r5, #0]
 8012eb6:	b103      	cbz	r3, 8012eba <_sbrk_r+0x1a>
 8012eb8:	6023      	str	r3, [r4, #0]
 8012eba:	bd38      	pop	{r3, r4, r5, pc}
 8012ebc:	2000437c 	.word	0x2000437c

08012ec0 <_init>:
 8012ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ec2:	bf00      	nop
 8012ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ec6:	bc08      	pop	{r3}
 8012ec8:	469e      	mov	lr, r3
 8012eca:	4770      	bx	lr

08012ecc <_fini>:
 8012ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ece:	bf00      	nop
 8012ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ed2:	bc08      	pop	{r3}
 8012ed4:	469e      	mov	lr, r3
 8012ed6:	4770      	bx	lr
